# PySNMP SMI module. Autogenerated from smidump -f python PowerNet-MIB
# by libsmi2pysnmp-0.1.3 at Mon May  9 16:08:28 2016,
# Python version sys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Gauge, IpAddress, TimeTicks, enterprises, ) = mibBuilder.importSymbols("RFC1155-SMI", "Gauge", "IpAddress", "TimeTicks", "enterprises")
( Bits, Integer32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Unsigned32")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Types

class AirIRG2RDType2IOState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("open", 1), ("closed", 2), )
    
class AirIRSCCapacityControlType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("discrete", 1), ("proportional", 2), )
    
class AirIRSCConfigType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,1,)
    namedValues = NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), )
    
class AirIRSCFanSpeedControl(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("automatic", 1), ("manual", 2), )
    
class AirIRSCFanSpeedPreference(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,5,4,1,)
    namedValues = NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), )
    
class AirIRmActivityState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("inactive", 1), ("active", 2), )
    
class AirIRmAlarmState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("ok", 1), ("alarm", 2), )
    
class AirIRmControlState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("off", 1), ("on", 2), )
    
class AirIRmStopState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("maybeOn", 1), ("unitOff", 2), )
    
class Rpdu2OutletPhaseLayoutType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,5,6,1,3,2,)
    namedValues = NamedValues(("seqPhase1ToNeutral", 1), ("seqPhase2ToNeutral", 2), ("seqPhase3ToNeutral", 3), ("seqPhase1ToPhase2", 4), ("seqPhase2ToPhase3", 5), ("seqPhase3ToPhase1", 6), )
    

# Objects

apc = MibIdentifier((1, 3, 6, 1, 4, 1, 318))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1))
upsBasicIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1))
upsBasicIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicIdentModel.setDescription("The UPS model name (e.g. 'APC Smart-UPS 600').")
upsBasicIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicIdentName.setDescription("An 8 byte ID string identifying the UPS.  This object\ncan be set by the administrator.")
upsAdvIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2))
upsAdvIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentFirmwareRevision.setDescription("The firmware revision of the UPS system's microprocessor.")
upsAdvIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentDateOfManufacture.setDescription("The date when the UPS was manufactured in mm/dd/yy (or yyyy) format.")
upsAdvIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentSerialNumber.setDescription("An 8-character string identifying the serial number of \nthe UPS internal microprocessor.  This number is set at\nthe factory.  NOTE: This number does NOT correspond to\nthe serial number on the rear of the UPS.")
upsAdvIdentFirmwareRevision2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentFirmwareRevision2.setDescription("The firmware revision of a UPS system co-microprocessor.")
upsAdvIdentSkuNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvIdentSkuNumber.setDescription("The SKU number of a UPS system.")
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2))
upsBasicBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1))
upsBasicBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("batteryNormal", 2), ("batteryLow", 3), ("batteryInFaultCondition", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicBatteryStatus.setDescription("The status of the UPS batteries. A batteryLow(3) value \nindicates the UPS will be unable to sustain the current \nload, and its services will be lost if power is not restored.\nThe amount of run time in reserve at the time of low battery \ncan be configured by the upsAdvConfigLowBatteryRunTime.\nA batteryInFaultCondition(4)value indicates that a battery \ninstalled has an internal error condition.")
upsBasicBatteryTimeOnBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicBatteryTimeOnBattery.setDescription("The elapsed time since the UPS has switched to battery \npower.")
upsBasicBatteryLastReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicBatteryLastReplaceDate.setDescription("The date when the UPS system's batteries were last replaced \nin mm/dd/yy (or yyyy) format.  For Smart-UPS models, this value \nis originally set in the factory.  When the UPS batteries \nare replaced, this value should be reset by the administrator.\nFor Symmetra PX 250/500 this OID is read only and is configurable in the local display only.")
upsAdvBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2))
upsAdvBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCapacity.setDescription("The remaining battery capacity expressed in \npercent of full capacity.")
upsAdvBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryTemperature.setDescription("The current internal UPS temperature expressed in \nCelsius.")
upsAdvBatteryRunTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryRunTimeRemaining.setDescription("The UPS battery run time remaining before battery \nexhaustion.")
upsAdvBatteryReplaceIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noBatteryNeedsReplacing", 1), ("batteryNeedsReplacing", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryReplaceIndicator.setDescription("Indicates whether the UPS batteries need replacing.")
upsAdvBatteryNumOfBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNumOfBattPacks.setDescription("The number of external battery packs connected to the UPS. If\nthe UPS does not use smart cells then the agent reports\nERROR_NO_SUCH_NAME.")
upsAdvBatteryNumOfBadBattPacks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNumOfBadBattPacks.setDescription("The number of external battery packs connected to the UPS that \nare defective. If the UPS does not use smart cells then the\nagent reports ERROR_NO_SUCH_NAME.")
upsAdvBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryNominalVoltage.setDescription("The nominal battery voltage in Volts.")
upsAdvBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltage.setDescription("The actual battery bus voltage in Volts.")
upsAdvBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrent.setDescription("The battery current in Amps.")
upsAdvTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrent.setDescription("The total DC current in Amps.")
upsAdvBatteryFullCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFullCapacity.setDescription("The full chargeable capacity of the battery which is\nexpressed in percentage.")
upsAdvBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12))
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageTable.setDescription("A list of battery table entries. The number of battery\nframes present in UPS.")
upsAdvBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1)).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryActualVoltageTableIndex"))
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageEntry.setDescription("Information applicable to \neach of the Battery frames.")
upsAdvBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltageTableIndex.setDescription("The Battery Frame identifier. Battery Frame index.")
upsAdvBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryActualVoltagePolarity.setDescription("The selected Battery Voltage Polarity.\n0 indicates positive polarity.\n1 indicates negative polarity.")
upsAdvBatteryFrameActualVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFrameActualVoltage.setDescription("The actual battery bus voltage in Volts.")
upsAdvTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13))
if mibBuilder.loadTexts: upsAdvTotalDCCurrentTable.setDescription("A list of Battery Frame table entries.  The number of entries\nis given by the value of Number of Battery Frames.")
upsAdvTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1)).setIndexNames((0, "PowerNet-MIB", "upsAdvTotalDCCurrentTableIndex"))
if mibBuilder.loadTexts: upsAdvTotalDCCurrentEntry.setDescription("An entry containing information applicable to a\nparticular Battery Frame.")
upsAdvTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrentTableIndex.setDescription("The Battery Frame identifier. Total DC Current\nTable Index.")
upsAdvTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalDCCurrentPolarity.setDescription("The selected Battery Current Polarity.\n0 indicates positive polarity.\n1 indicates negative polarity.")
upsAdvTotalFrameDCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTotalFrameDCCurrent.setDescription(" The Total DC Current of battery in Amperes.")
upsAdvBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14))
if mibBuilder.loadTexts: upsAdvBatteryCurrentTable.setDescription("A list of Battery Frame table entries.  The number of entries\nis given by number of Battery frames present.")
upsAdvBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1)).setIndexNames((0, "PowerNet-MIB", "upsAdvBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsAdvBatteryCurrentIndex"))
if mibBuilder.loadTexts: upsAdvBatteryCurrentEntry.setDescription("An entry containing information applicable to a\nparticular battery frame.")
upsAdvBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentTableIndex.setDescription("The Battery Frame identifier. Battery Current\nTable Index.")
upsAdvBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentIndex.setDescription("The battery frame identifier.")
upsAdvBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryCurrentPolarity.setDescription("The selected Battery current polarity.\n0 indicates positive polarity.\n1 indicates negative polarity")
upsAdvBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryFrameCurrent.setDescription("The Battery current measured in Amperes")
upsAdvBatteryEstimatedChargeTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryEstimatedChargeTime.setDescription("The estimated remaining time required to charge the UPS to a full state of charge.")
upsAdvBatteryPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryPower.setDescription("The measured battery power in kW.")
upsAdvBatteryChargerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryChargerStatus.setDescription("The status of the battery charger. If the UPS is unable\nto find the state of charger, this variable is set to unknown(1).")
upsAdvBatteryInternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryInternalSKU.setDescription("The SKU of the internal battery.")
upsAdvBatteryExternalSKU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryExternalSKU.setDescription("The SKU of the external battery.")
upsAdvBatteryRecommendedReplaceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvBatteryRecommendedReplaceDate.setDescription("The recommended replacement date for the battery based on the UPS internal battery life algorithm.")
upsHighPrecBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3))
upsHighPrecBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCapacity.setDescription("The remaining battery capacity expressed in \ntenths of percent of full capacity.")
upsHighPrecBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryTemperature.setDescription("The current internal UPS temperature expressed in \ntenths of degrees Celsius.")
upsHighPrecBatteryNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryNominalVoltage.setDescription("The nominal battery voltage in tenths of Volts.")
upsHighPrecBatteryActualVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltage.setDescription("The actual battery bus voltage in tenths of Volts.")
upsHighPrecBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrent.setDescription("The battery current in tenths of Amps.")
upsHighPrecTotalDCCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrent.setDescription("The total DC current in tenths of Amps.")
upsHighPrecBatteryActualVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7))
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageTable.setDescription("A list of Battery frame table entries.  The number of entries\nis given by the number of Battery frames.")
upsHighPrecBatteryActualVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1)).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryActualVoltageTableIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageEntry.setDescription("An entry containing information applicable to a\nparticular battery frame.")
upsHighPrecBatteryActualVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltageTableIndex.setDescription("The Battery Frame identifier. High Precision\nActual Voltage Table Index.")
upsHighPrecBatteryActualVoltagePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryActualVoltagePolarity.setDescription("The selected Battery Voltage polarity.\n0 indicates positive polarity.\n1 indicates negative polarity.")
upsHighPrecBatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryVoltage.setDescription("The actual battery bus voltage expressed\nas tenths of Volts. ")
upsHighPrecTotalDCCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8))
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentTable.setDescription("A list of Battery Frame table entries.  The number of entries\nis given by the number of battery frames.")
upsHighPrecTotalDCCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1)).setIndexNames((0, "PowerNet-MIB", "upsHighPrecTotalDCCurrentTableIndex"))
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentEntry.setDescription("An entry containing information applicable to a\nparticular battery frame.")
upsHighPrecTotalDCCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentTableIndex.setDescription("The Battery Frame identifier.\nHigh precision Total DC Current index.")
upsHighPrecTotalDCCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCCurrentPolarity.setDescription("The selected Battery Current polarity.\n0 indicates positive polarity.\n1 indicates negative polarity.")
upsHighPrecTotalDCFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecTotalDCFrameCurrent.setDescription("The total DC current in tenths of Amperes. ")
upsHighPrecBatteryCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9))
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentTable.setDescription("A list of Battery Frame table entries.  The number of entries\nis given by the number of battery frames.")
upsHighPrecBatteryCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1)).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryCurrentTableIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCurrentIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentEntry.setDescription("An entry containing information applicable to a\nparticular battery frame.")
upsHighPrecBatteryCurrentTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentTableIndex.setDescription("The Battery frame identifier.\nBattery Frame index.")
upsHighPrecBatteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentIndex.setDescription("The Battery frame identifier.\nBattery Index for each frame.")
upsHighPrecBatteryCurrentPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("positive", 0), ("negative", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCurrentPolarity.setDescription("The selected Battery Current polarity.\n0 indicates positive polarity.\n1 indicates negative polarity.")
upsHighPrecBatteryFrameCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryFrameCurrent.setDescription("The Battery current in tenths of Amperes.")
upsHighPrecBatteryPacks = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10))
upsHighPrecBatteryPackTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackTableSize.setDescription("The number of entries in the upsHighPrecBatteryPacks.")
upsHighPrecBatteryPackTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2))
if mibBuilder.loadTexts: upsHighPrecBatteryPackTable.setDescription("A list of Battery Pack table entries.  The number of entries\nis given by number of Battery Packs present.")
upsHighPrecBatteryPackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsHighPrecBatteryPackIndex"), (0, "PowerNet-MIB", "upsHighPrecBatteryCartridgeIndex"))
if mibBuilder.loadTexts: upsHighPrecBatteryPackEntry.setDescription("An entry containing information applicable to a\nparticular battery pack.")
upsHighPrecBatteryPackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackIndex.setDescription("The battery pack identifier.")
upsHighPrecBatteryCartridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryCartridgeIndex.setDescription("The battery cartridge identifier.")
upsHighPrecBatteryPackFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackFirmwareRevision.setDescription("The battery pack firmware revision.")
upsHighPrecBatteryPackSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackSerialNumber.setDescription("The battery pack serial number.")
upsHighPrecBatteryPackTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackTemperature.setDescription("The battery pack temperature measured in 10ths of degree Celcius")
upsHighPrecBatteryPackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackStatus.setDescription("The battery status for the pack only.\nbit 0 Disconnected\nbit 1 Overvoltage\nbit 2 NeedsReplacement\nbit 3 OvertemperatureCritical\nbit 4 Charger\nbit 5 TemperatureSensor\nbit 6 BusSoftStart\nbit 7 OvertemperatureWarning\nbit 8 GeneralError\nbit 9 Communication\nbit 10 DisconnectedFrame\nbit 11 FirmwareMismatch")
upsHighPrecBatteryPackCartridgeHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeHealth.setDescription("The battery cartridge health.\nbit 0 Battery lifetime okay\nbit 1 Battery lifetime near end, order replacement cartridge\nbit 2 Battery lifetime exceeded, replace battery\nbit 3 Battery lifetime near end acknowledged, order replacement cartridge\nbit 4 Battery lifetime exceeded acknowledged, replace battery\nbit 5 Battery measured lifetime near end, order replacement cartridge\nbit 6 Battery measured lifetime near end acknowledged, order replacement cartridge")
upsHighPrecBatteryPackCartridgeReplaceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeReplaceDate.setDescription("The battery cartridge estimated battery replace date.")
upsHighPrecBatteryPackCartridgeInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeInstallDate.setDescription("The battery cartridge install date.")
upsHighPrecBatteryPackCartridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 10, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecBatteryPackCartridgeStatus.setDescription("The battery cartridge status.\nbit 0 Disconnected\nbit 1 Overvoltage\nbit 2 NeedsReplacement\nbit 3 OvertemperatureCritical\nbit 4 Charger\nbit 5 TemperatureSensor\nbit 6 BusSoftStart\nbit 7 OvertemperatureWarning\nbit 8 GeneralError\nbit 9 Communication\nbit 10 DisconnectedFrame\nbit 11 FirmwareMismatch")
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3))
upsBasicInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1))
upsBasicInputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicInputPhase.setDescription("The current AC input phase.")
upsAdvInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2))
upsAdvInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputLineVoltage.setDescription("The current utility line voltage in VAC.")
upsAdvInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputMaxLineVoltage.setDescription("The maximum utility line voltage in VAC over the\nprevious 1 minute period.")
upsAdvInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 3), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputMinLineVoltage.setDescription("The minimum utility line voltage in VAC over the\nprevious 1 minute period.")
upsAdvInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputFrequency.setDescription("The current input frequency to the UPS system in Hz.")
upsAdvInputLineFailCause = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(9,10,1,5,2,8,3,6,7,4,)).subtype(namedValues=NamedValues(("noTransfer", 1), ("rateOfVoltageChange", 10), ("highLineVoltage", 2), ("brownout", 3), ("blackout", 4), ("smallMomentarySag", 5), ("deepMomentarySag", 6), ("smallMomentarySpike", 7), ("largeMomentarySpike", 8), ("selfTest", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputLineFailCause.setDescription("The reason for the occurrence of the last transfer to UPS\nbattery power.  The variable is set to:\n- noTransfer(1) -- if there is no transfer yet.\n- highLineVoltage(2) -- if the transfer to battery is caused\nby an over voltage greater than the high transfer voltage.\n- brownout(3) -- if the duration of the outage is greater than\nfive seconds and the line voltage is between 40% of the\nrated output voltage and the low transfer voltage.\n- blackout(4) -- if the duration of the outage is greater than five\nseconds and the line voltage is between 40% of the rated \noutput voltage and ground.\n- smallMomentarySag(5) -- if the duration of the outage is less\nthan five seconds and the line voltage is between 40% of the\nrated output voltage and the low transfer voltage.\n- deepMomentarySag(6) -- if the duration of the outage is less \nthan five seconds and the line voltage is between 40% of the \nrated output voltage and ground.  The variable is set to \n- smallMomentarySpike(7) -- if the line failure is caused by a\nrate of change of input voltage less than ten volts per cycle.\n- largeMomentarySpike(8) -- if the line failure is caused by \na rate of change of input voltage greater than ten volts per cycle.\n- selfTest(9) -- if the UPS was commanded to do a self test.\n- rateOfVoltageChange(10) -- if the failure is due to the rate of change of\nthe line voltage.")
upsAdvInputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputNominalFrequency.setDescription("The nominal input frequency of the UPS system in Hz.")
upsAdvInputNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputNominalVoltage.setDescription("The nominal input voltage of the UPS system in VAC.")
upsAdvInputBypassNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassNominalFrequency.setDescription("The nominal bypass input frequency of the UPS system in Hz.")
upsAdvInputBypassNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassNominalVoltage.setDescription("The nominal bypass input voltage of the UPS system in VAC.")
upsAdvInputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10))
if mibBuilder.loadTexts: upsAdvInputStatisticsTable.setDescription("A list of input table entries.  The number of entries\nis given by the value of upsPhaseNumInputs.")
upsAdvInputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1)).setIndexNames((0, "PowerNet-MIB", "upsAdvInputStatisticsIndex"))
if mibBuilder.loadTexts: upsAdvInputStatisticsEntry.setDescription("An entry containing information applicable to a\nparticular input.")
upsAdvInputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputStatisticsIndex.setDescription("The input identifier.")
upsAdvInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputApparentPower.setDescription("The input apparent power(sum of all of the three phases) measured in kVA.")
upsAdvInputVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputVoltageTHD.setDescription("The input voltage Total Harmonic Distortion in percent.")
upsAdvInputBypassVoltageTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassVoltageTHD.setDescription("The bypass input voltage Total Harmonic Distortion in percent.")
upsAdvInputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputPeakCurrent.setDescription("The input peak current in Amperes.")
upsAdvInputBypassPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassPeakCurrent.setDescription("The bypass input peak current in Amperes.")
upsAdvInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputActivePower.setDescription("The input active power measured in kW.")
upsAdvInputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputTotalApparentPower.setDescription("The input total apparent power(sum of all three phases)\nof the UPS system in kVA.")
upsAdvInputTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputTotalActivePower.setDescription("The input total active power(sum of all three phases)\nof the UPS system in kW.")
upsAdvInputBypassTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassTotalApparentPower.setDescription("The input bypass total apparent power(sum of all three phases)\nof the UPS system in kVA.")
upsAdvInputBypassTotalActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvInputBypassTotalActivePower.setDescription("The input bypass total active power(sum of all three phases)\nof the UPS system in kW.")
upsHighPrecInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3))
upsHighPrecInputLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputLineVoltage.setDescription("The current utility line voltage in tenths of VAC.")
upsHighPrecInputMaxLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputMaxLineVoltage.setDescription("The maximum utility line voltage in tenths of VAC over the\nprevious 1 minute period.")
upsHighPrecInputMinLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 3), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputMinLineVoltage.setDescription("The minimum utility line voltage in tenths of VAC over the\nprevious 1 minute period.")
upsHighPrecInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputFrequency.setDescription("The current input frequency to the UPS system in tenths of Hz.")
upsHighPrecInputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputEnergyUsage.setDescription("The input energy usage of the UPS in hundredths of kWh.")
upsHighPrecInputBypassVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputBypassVoltage.setDescription("The current bypass line voltage in tenths of VAC.")
upsHighPrecInputBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecInputBypassFrequency.setDescription("The current input bypass frequency to the UPS system in tenths of Hz.")
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4))
upsBasicOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1))
upsBasicOutputStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(10,11,15,19,22,1,18,8,20,5,16,12,13,6,21,2,4,7,17,9,3,14,)).subtype(namedValues=NamedValues(("unknown", 1), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("hotStandby", 14), ("onBatteryTest", 15), ("emergencyStaticBypass", 16), ("staticBypassStandby", 17), ("powerSavingMode", 18), ("spotMode", 19), ("onLine", 2), ("eConversion", 20), ("chargerSpotmode", 21), ("inverterSpotmode", 22), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputStatus.setDescription("The current state of the UPS. If the UPS is unable to \ndetermine the state of the UPS this variable is set \nto unknown(1).")
upsBasicOutputPhase = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputPhase.setDescription("The current output phase.")
upsBasicSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(12,4,7,16,1,11,10,8,13,6,2,9,14,5,15,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("hardwareFailureBypass", 10), ("sleepingUntilPowerReturn", 11), ("onSmartTrim", 12), ("ecoMode", 13), ("inverter", 14), ("eConversion", 15), ("staticBypassStandby", 16), ("onLine", 2), ("onBattery", 3), ("onSmartBoost", 4), ("timedSleeping", 5), ("softwareBypass", 6), ("off", 7), ("rebooting", 8), ("switchedBypass", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemStatus.setDescription("Current state for the whole system (UPS and surrounding breakers).\nIf the UPS is unable to determine the state of the system, this\nvariable is set to unknown(1).")
upsBasicSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemInternalTemperature.setDescription("The actual internal temperature of the UPS system in Celsius.")
upsBasicSystemInverterStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemInverterStatus.setDescription("The current state of the UPS inverter. If the UPS is unable\nto determine the state of the inverter, this variable is set\nto unknown(1).")
upsBasicSystemPFCStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("inFaultCondition", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicSystemPFCStatus.setDescription("The general status of the power factor correction (AC input stage\nof the UPS). If the UPS is unable to determine the state of PFC,\nthis variable is set to unknown(1).")
upsBasicOutputACwiringConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("noNeutralWiredonSystem", 2), ("neutralUsedforSupplyingLoad", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicOutputACwiringConfiguration.setDescription("Indicates if neutral wire on output side of the UPS is \nused (load wired line to neutral). If the UPS is unable to \ndetermine the state of neutral, this variable is set to \nunknown(1).")
upsAdvOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2))
upsAdvOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputVoltage.setDescription("The output voltage of the UPS system in VAC.")
upsAdvOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputFrequency.setDescription("The current output frequency of the UPS system in Hz.")
upsAdvOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 3), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputLoad.setDescription("The current UPS load expressed in percent \nof rated capacity.")
upsAdvOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCurrent.setDescription("The current in amperes drawn by the load on the UPS.")
upsAdvOutputRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 5), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputRedundancy.setDescription("The number of power modules which can fail or be\nremoved without causing the UPS to generate a Minimum\nRedundancy Lost event.")
upsAdvOutputKVACapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputKVACapacity.setDescription("The maximum load that this UPS can support.")
upsAdvOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputNominalFrequency.setDescription("The nominal output frequency of the UPS system in Hz.")
upsAdvOutputActivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputActivePower.setDescription("The total output active power of the UPS system in W. \nThe total active power is the sum of phase 1, phase 2 and \nphase 3 power.")
upsAdvOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputApparentPower.setDescription("The total output apparent power of all phases of the UPS system in VA.")
upsAdvOutputStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10))
if mibBuilder.loadTexts: upsAdvOutputStatisticsTable.setDescription("A list of input table entries.  The number of entries\nis given by the value of upsPhaseNumOutputs.")
upsAdvOutputStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1)).setIndexNames((0, "PowerNet-MIB", "upsAdvOutputStatisticsIndex"))
if mibBuilder.loadTexts: upsAdvOutputStatisticsEntry.setDescription("An entry containing information applicable to a\nparticular output.")
upsAdvOutputStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputStatisticsIndex.setDescription("The output identifier.")
upsAdvOutputPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputPeakCurrent.setDescription("The output peak current in Amperes.")
upsAdvOutputCurrentTHD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCurrentTHD.setDescription("The output current Total Harmonic Distortion in percent.")
upsAdvOutputCrestFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputCrestFactor.setDescription("The output current crest factor expressed in tenths.")
upsAdvOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvOutputNeutralCurrent.setDescription("The neutral current in amperes.")
upsHighPrecOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3))
upsHighPrecOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputVoltage.setDescription("The output voltage of the UPS system in tenths of VAC.")
upsHighPrecOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputFrequency.setDescription("The current output frequency of the UPS system in tenths of Hz.")
upsHighPrecOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 3), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputLoad.setDescription("The current UPS load expressed in tenths of percent \nof rated capacity.")
upsHighPrecOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputCurrent.setDescription("The current in tenths of amperes drawn by the load on the UPS.")
upsHighPrecOutputEfficiency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputEfficiency.setDescription("The positive values represent efficiency of the UPS in tenths of percent. \n-1 If UPS supports this OID but the result is not available\n-2 Load is too low to report efficiency\n-3 Output off and efficiency is 0\n-4 On battery, efficiency is not measured or calculated in this mode\n-5 In Bypass, efficiency is not measured or calculated in this mode\n-6 Battery charging, battery is charging and adversely affecting efficiency\n-7 Poor AC input, the main input is outside the optimum efficiency range")
upsHighPrecOutputEnergyUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsHighPrecOutputEnergyUsage.setDescription("The output energy usage of the UPS in hundredths of kWh.")
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5))
upsBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1))
upsBasicConfigNumDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicConfigNumDevices.setDescription("The number of devices that are plugged into the UPS.\nThis value is customer configurable from the device entry table")
upsBasicConfigDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2))
if mibBuilder.loadTexts: upsBasicConfigDeviceTable.setDescription("A list of devices that are plugged into the UPS.\nThe number of entries is given by the value of\nupsBasicConfigNumDevices.")
upsBasicConfigDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "deviceIndex"))
if mibBuilder.loadTexts: upsBasicConfigDeviceEntry.setDescription("The devices plugged in to the UPS.")
deviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceIndex.setDescription("The index of the device that is plugged into the UPS.")
deviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceName.setDescription("The name/description of the device plugged into the UPS.")
vaRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vaRating.setDescription("The volt-amp rating of the device plugged into the UPS.")
acceptThisDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisDevice.setDescription("An entry is added if yes, the entry is deleted if no.")
upsAdvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2))
upsAdvConfigRatedOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigRatedOutputVoltage.setDescription("The nominal output voltage from the UPS in VAC. \n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a \nset request, the UPS interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
upsAdvConfigHighTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigHighTransferVolt.setDescription("The maximum line voltage in VAC allowed before the\nUPS system transfers to battery backup.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigLowTransferVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowTransferVolt.setDescription("The minimum line voltage in VAC allowed before the\nUPS system transfers to battery backup.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a \nset request, the UPS interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
upsAdvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("timed", 1), ("atLowBattery", 2), ("never", 3), ("mute", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarm.setDescription("A flag indicating how the UPS should handle audible\nline fail alarms:\ntimed(1): UPS alarm will sound after a preset timed duration starting\nfrom the line fail condition (see OID upsAdvConfigAlarmTimer for the\nalarm timer value)\natLowBattery(2): UPS alarm will sound when the UPS has reached a Low\nBattery condition during a line fail\nnever(3): Disables the UPS audible alarm\nmute(4): Mutes the current alarm for some UPSs only when it is in an\nalarm state and will return to the previously configured option when\nthe UPS recovers from the alarm condition")
upsAdvConfigAlarmTimer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmTimer.setDescription("The time after initial line failure at which the UPS\nbegins emitting audible alarms (beeping).  This timer is\nobserved only if the value of extControlAlarm is timed(2).\nAllowed values are 0 or 30 seconds.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
upsAdvConfigMinReturnCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMinReturnCapacity.setDescription("The minimum battery capacity required before the UPS will \nreturn from a low battery shutdown condition.  The capacity is\nmeasured from 0% battery capacity (or Low Battery) as a percent\nof full capacity (100%).   In other words, the UPS will not re-energize\nthe output until the battery has charged so that its' capacity is equal \nto this value.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("auto", 1), ("low", 2), ("medium", 3), ("high", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSensitivity.setDescription("The sensitivity of the UPS to utility line abnormalities\nor noises.")
upsAdvConfigLowBatteryRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 8), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowBatteryRunTime.setDescription("The desired run time of the UPS, in seconds, once the \nlow battery condition is reached. During this time the UPS will\nproduce a constant warning tone which can not be disabled.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a set\nrequest, the UPS interprets the value as the next higher\nacceptable value.  If the provided value is higher than the\nhighest acceptable value, the highest acceptable value is used.")
upsAdvConfigReturnDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 9), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigReturnDelay.setDescription("The delay in seconds after utility line power returns\nbefore the UPS will turn on.  This value is also used \nwhen the UPS comes out of a reboot and before the UPS\nwakes up from 'sleep' mode.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigShutoffDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigShutoffDelay.setDescription("The delay in seconds the UPS remains on after being told \nto turn off.\n\nFor a list of allowed values supported by your UPS model,\nsee the UPS User's Manual.\n\nIf a value other than a supported value is provided in a\nset request, the UPS interprets it as a the next higher\nacceptable value.  If the provided value is higher than\nthe highest acceptable value, the highest acceptable \nvalue is used.")
upsAdvConfigUpsSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpsSleepTime.setDescription("The time in seconds for the UPS to go to 'sleep' when \ninstructed.  When in sleep mode, the UPS will not provide\noutput power regardless of the input line state.  Once the\nspecified time has elapsed, output power will be restored.\n\nThis is a configuration setting.  The UPS will not go to\nsleep until told to do so by the manager from a management\nstation.\n\nAny input value is allowed, however the UPS only recognizes\n1/10 of an hour increments.  The provided value will be \nrounded to the closest 1/10 of an hour with one exception:\nAny value entered between 1 and 540 seconds will be rounded \nto 360 seconds (or 6 minutes).")
upsAdvConfigSetEEPROMDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noSetEEPROMDefaults", 1), ("setEEPROMDefaults", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSetEEPROMDefaults.setDescription("WRITE: Resets the UPS EEPROM variables to default values.\nREAD: returns 1")
upsAdvConfigDipSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13))
if mibBuilder.loadTexts: upsAdvConfigDipSwitchTable.setDescription("Current settings of UPS dip switches.")
upsAdvConfigDipSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1)).setIndexNames((0, "PowerNet-MIB", "dipSwitchIndex"))
if mibBuilder.loadTexts: upsAdvConfigDipSwitchEntry.setDescription("The current setting of one dip switch.")
dipSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchIndex.setDescription("The index of a UPS dip switch.")
dipSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("on", 1), ("off", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dipSwitchStatus.setDescription("The setting of a UPS dip switch.")
upsAdvConfigBattExhaustThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 14), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBattExhaustThresh.setDescription("The number of seconds prior to battery exhaustion when the\nUPS will switch off power to its load.")
upsAdvConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigPassword.setDescription("The password entered at the UPS front panel to enable local\nconfiguration of the EEProm. If the password is disabled or \nis not supported, then the agent returns a null string.")
upsAdvConfigAllowedSetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16))
if mibBuilder.loadTexts: upsAdvConfigAllowedSetTable.setDescription("The table listing the allowed values for all discrete \nconfigurable UPS variables.")
upsAdvConfigAllowedSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1)).setIndexNames((0, "PowerNet-MIB", "apcUpsConfigFieldIndex"))
if mibBuilder.loadTexts: upsAdvConfigAllowedSetEntry.setDescription("The table entry for a configurable UPS variable.")
apcUpsConfigFieldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldIndex.setDescription("The index to an eeprom field entry.")
apcUpsConfigFieldOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldOID.setDescription("The OID of the current configurable value.")
apcUpsConfigFieldValueRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcUpsConfigFieldValueRange.setDescription("The discrete set of allowed values of a configurable \nregister. Individual values are delimited by a comma.")
upsAdvConfigBattCabAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBattCabAmpHour.setDescription("Configure the amp-hour setting of the UPS battery cabinet.")
upsAdvConfigPositionSelector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("rack", 2), ("tower", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigPositionSelector.setDescription("Configure UPS position selector.  If the UPS doesn't\nsupport this configuration it will report unknown (1).\nThe positions are either rack (2) for rack mounted or\ntower (3) for tower unit.")
upsAdvConfigOutputFreqRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(7,1,2,17,9,11,8,10,22,19,18,21,20,5,6,3,16,15,14,13,4,12,)).subtype(namedValues=NamedValues(("unknown", 1), ("freqRange50Var1dot0", 10), ("freqRange50Pct0dot5", 11), ("freqRange50Pct1", 12), ("freqRange50Pct2", 13), ("freqRange50Pct4", 14), ("freqRange50Pct6", 15), ("freqRange50Pct8", 16), ("freqRange60Pct0dot5", 17), ("freqRange60Pct1", 18), ("freqRange60Pct2", 19), ("freqRangeAUTO", 2), ("freqRange60Pct4", 20), ("freqRange60Pct6", 21), ("freqRange60Pct8", 22), ("freqRange60Var1", 3), ("freqRange60Var3", 4), ("freqRange50Var1", 5), ("freqRange50Var3", 6), ("freqRange60Var10", 7), ("freqRange50Var10", 8), ("freqRange60Var1dot0", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutputFreqRange.setDescription("Configure the output frequency tolerance range.\nunknown(1) indicates the output frequency is unknown.\nfreqRangeAUTO(2) configure the output frequency range for automatic.\nfreqRange60Var1(3) configure the output frequency range for 60 +/- 0.1 Hz\nfreqRange60Var3(4) configure the output frequency range for 60 +/- 3.0 Hz\nfreqRange50Var1(5) configure the output frequency range for 50 +/- 0.1 Hz\nfreqRange50Var3(6) configure the output frequency range for 50 +/- 3.0 Hz\nfreqRange60Var10(7) configure the output frequency range for 60 +/- 10 Hz\nfreqRange50Var10(8) configure the output frequency range for 50 +/- 10 Hz\nfreqRange60Var1dot0(9) configure the output frequency range for 60 +/- 1.0 Hz\nfreqRange50Var1dot0(10) configure the output frequency range for 50 +/- 1.0 Hz\nfreqRange50Pct0dot5(11) configure the output frequency range for 50 Hz +/- 0.5 %\nfreqRange50Pct1(12) configure the output frequency range for 50 Hz +/- 1.0 %\nfreqRange50Pct2(13) configure the output frequency range for 50 Hz +/- 2.0 %\nfreqRange50Pct4(14) configure the output frequency range for 50 Hz +/- 4.0 %\nfreqRange50Pct6(15) configure the output frequency range for 50 Hz +/- 6.0 %\nfreqRange50Pct8(16) configure the output frequency range for 50 Hz +/- 8.0 %\nfreqRange60Pct0dot5(17) configure the output frequency range for 60 Hz +/- 0.5 %\nfreqRange60Pct1(18) configure the output frequency range for 60 Hz +/- 1.0 %\nfreqRange60Pct2(19) configure the output frequency range for 60 Hz +/- 2.0 %\nfreqRange60Pct4(20) configure the output frequency range for 60 Hz +/- 4.0 %\nfreqRange60Pct6(21) configure the output frequency range for 60 Hz +/- 6.0 %\nfreqRange60Pct8(22) configure the output frequency range for 60 Hz +/- 8.0 %\nFor a list of allowed values and conditions when variable can be set by your UPS model,\nsee the UPS User's Manual.")
upsAdvConfigUPSFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("gotoBypass", 2), ("dropLoad", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUPSFail.setDescription("Configure the UPS fail action.  If UPS fails,\nand frequency or voltage is out of range it will either\nGotoBypass (2) or DropLoad (3).  This OID will report\nunknown (1) if it is not supported feature or option.")
upsAdvConfigAlarmRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmRedundancy.setDescription("Configure settings of UPS alarm if the redundancy is\nunder the current redundancy.  Use 0 for never.")
upsAdvConfigAlarmLoadOver = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmLoadOver.setDescription("Configure settings of UPS alarm if the load is\nover the current load in kVA.  Use -1 for never.")
upsAdvConfigAlarmRuntimeUnder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigAlarmRuntimeUnder.setDescription("Configure settings of UPS alarm if the runtime is\nunder the current time of minutes.  Use -1 for never.")
upsAdvConfigVoutReporting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("voutAUTO", 2), ("vout208", 3), ("vout240", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigVoutReporting.setDescription("Configure the way the UPS scales its output voltage readings.\nunknown(1) indicates the Vout Reporting is unknown.\nvoutAUTO(2) configure the Vout Reporting for automatic scaling.\nvout208(3) configure the Vout Reporting for 208 Volts.\nvout240(4) configure the Vout Reporting for 240 Volts.")
upsAdvConfigNumExternalBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigNumExternalBatteries.setDescription("Configure the number of external batteries connected to the UPS.")
upsAdvConfigSimpleSignalShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigSimpleSignalShutdowns.setDescription("Configure Simple Signal shutdown commands from the Simple Signal\nport to be issued to the UPS.\nunknown(1) indicates the Simple Signal Shutdown setting is unknown.\ndisabled(2) configure to disable Simple Signal Shutdowns.\nenabled(3) configure to enable Simple Signal Shutdowns.")
upsAdvConfigMaxShutdownTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMaxShutdownTime.setDescription("The maximum amount of time for server shutdown to complete before a \nUPS shutdown occurs.")
upsAsiUpsControlServerRequestShutdown = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("serverShutdownOff", 1), ("serverShutdownReboot", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAsiUpsControlServerRequestShutdown.setDescription("Start a server shutdown sequence:\nserverShutdownOff: Shutdown server and turn off UPS\nserverShutdownReboot: Shutdown server and turn reboot UPS.")
upsAdvConfigMinReturnRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 29), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigMinReturnRuntime.setDescription("The minimum amount of run time in seconds required before the output will be\nturned on, using power calculation captured at start of last shutdown.")
upsAdvConfigBasicSignalLowBatteryDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 30), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBasicSignalLowBatteryDuration.setDescription("The duration of runtime in seconds during an on-battery condition at which \nthe UPS will signal the basic low battery shutdown condition.")
upsAdvConfigBypassPhaseLockRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 31), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBypassPhaseLockRequired.setDescription("Sets the condition for when bypass is an acceptable mode of operation as a\nrequirement.")
upsAdvConfigOutputFreqSlewRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,5,1,6,4,7,)).subtype(namedValues=NamedValues(("unknown", 1), ("slewRateQuarterHzPerSec", 2), ("slewRateHalfHzPerSec", 3), ("slewRate1HzPerSec", 4), ("slewRate2HzPerSec", 5), ("slewRate4HzPerSec", 6), ("slewRate6HzPerSec", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutputFreqSlewRate.setDescription("The rate at which the UPS will change its output frequency \nin response to utility frequency changes.")
upsAdvConfigChargerLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("low", 2), ("high", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigChargerLevel.setDescription("Sets the rate at which the UPS charges its batteries.")
upsAdvConfigBypassToleranceSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 34), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,5,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("wide", 2), ("medium", 3), ("narrow", 4), ("custom", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBypassToleranceSetting.setDescription("This setting allows selecting from standard bypass tolerance configurations to suit their situation.")
upsAdvConfigMainsSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("singleInput", 1), ("dualInput", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvConfigMainsSetting.setDescription("Configure the type of mains supply system.\nsingleInput (1) indicates a single supply system.\ndualInput   (2) indicates a dual supply system. ")
upsAdvConfigACWiringSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 36), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvConfigACWiringSetting.setDescription("Configure the AC wiring of the system.\nthreeWire (1) indicates 3-wire system configuration.\nfourWire  (2) indicates 4-wire system configuration. ")
upsAdvConfigUpperOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpperOutputVoltTolerance.setDescription("Upper tolerance of the output RMS voltage before transferring to bypass.\nExpressed as percent of nominal voltage.")
upsAdvConfigLowerOutputVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowerOutputVoltTolerance.setDescription("Lower tolerance of the output RMS voltage before transferring to bypass.\nExpressed as percent of nominal voltage.")
upsAdvConfigUpperBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigUpperBypassVoltTolerance.setDescription("Upper tolerance of the bypass voltage that allows transfer to bypass by user.\nExpressed as percent of nominal voltage.")
upsAdvConfigLowerBypassVoltTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLowerBypassVoltTolerance.setDescription("Lower tolerance of the bypass voltage that allows transfer to bypass by user.\nExpressed as percent of nominal voltage.")
upsAdvConfigOutofSyncBypassTransferDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigOutofSyncBypassTransferDelay.setDescription("Configure the time (in milliseconds), indicating the gap in output voltage\nif an asynchronous transfer to bypass needs to occur.")
upsAdvConfigWarningAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigWarningAlarmDelay.setDescription("Configure the time delay for reporting warning alarms\n(in seconds).")
upsAdvConfigInformationalAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigInformationalAlarmDelay.setDescription("Configure the time delay for reporting informational alarms\n(in seconds).")
upsAdvConfigGreenMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 45), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigGreenMode.setDescription("Enable/Disable UPS green mode feature.")
upsAdvConfigLCDLocalLanguage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 46), Integer().subtype(subtypeSpec=SingleValueConstraint(5,6,4,1,7,2,3,)).subtype(namedValues=NamedValues(("english", 1), ("french", 2), ("italian", 3), ("german", 4), ("spanish", 5), ("portuguese", 6), ("japanese", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLCDLocalLanguage.setDescription("Configure the language setting of the UPS LCD display information.")
upsAdvConfigLCDLockOut = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 47), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigLCDLockOut.setDescription("Enable/Disable the control function of the UPS via the LCD Display.")
upsAdvConfigChargerRate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigChargerRate.setDescription("Change the maximum allowed UPS charge rate on select products where 100% represents \nthe manufacturer's recommended rate.  A charge/discharge rate of C/10 for a 10 Ah \nbattery would be 1 where C is defined as the charge or discharge rate equal to the \ncapacity of a battery divided by 1 hour. To increase the charge rate by a factor of \n2 to C/5, this oid would be set to 200%.  This number would not change when external \npacks are added or removed.  Charging at too high a rate can result in boiling and/or \nventing of electrolyte and/or high gas pressure.")
upsAdvConfigBatterySelection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 49), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("vrla", 1), ("ventedcell", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatterySelection.setDescription("Configure the installed battery type on select products where VRLA is Valve Regulated \nLead Acid type battery and Vented Cell is a wet cell type (car) battery.")
upsAdvConfigBatteryHealthAlarmWarningTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryHealthAlarmWarningTime.setDescription("Configure the number of days before the battery health is depleted that the battery\nhealth alarm is activated. Setting this to -1, if supported by the UPS, will suppress\nthe battery health alarm.")
upsAdvConfigBatteryHealthAlarmSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvConfigBatteryHealthAlarmSleepTime.setDescription("Configure the number of days that the UPS's battery health alarm should sleep before\nbeing activated again after being acknowledged. Setting this to -1, if supported by the\nUPS, displays no other alarms after the first alarm is acknowledged.")
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6))
upsBasicControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1))
upsBasicControlConserveBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noTurnOffUps", 1), ("turnOffUpsToConserveBattery", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsBasicControlConserveBattery.setDescription("Setting this variable to turnUpsOffToConserveBattery(2) \ncauses a UPS on battery to be put into 'sleep' mode.  The \nUPS will turn back on when utility power is restored.  \nAttempting to turn off a UPS that is not on battery will \nresult in a badValue error.\n\nSetting this value to noTurnOffUps(1) has no\neffect.\n\nThe value noTurnOffUps(1) will always be returned\nwhen the variable is read.")
upsAdvControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2))
upsAdvControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,5,2,6,3,)).subtype(namedValues=NamedValues(("noTurnUpsOff", 1), ("turnUpsOff", 2), ("turnUpsOffGracefully", 3), ("turnUpsSyncGroupOff", 4), ("turnUpsSyncGroupOffAfterDelay", 5), ("turnUpsSyncGroupOffGracefully", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlUpsOff.setDescription("Setting this variable to turnUpsOff(2) causes\nthe UPS to shut off.  When in this state, the UPS \nwill not provide output power regardless of the input\nline state.\n\nSetting this variable to turnUpsOffGracefully(3) causes\nthe UPS to shut off after a delay period. This allows the\nhost to shut down in a graceful manner. When in this state,\nthe UPS will not provide output power regardless of the\ninput line state. \n       \nIf this UPS is an active member of a Synchronized \nControl Group (SCG) the turnUpsSyncGroupOff(4) command \nwill perform a Synchronized Turn Off of all active Group\nmembers regardless of their current AC output status.    \n\nIf this UPS is an active member of a Synchronized \nControl Group (SCG) the turnUpsSyncGroupOffAfterDelay(5)\ncommand will perform a Synchronized Turn Off After Delay \nof all active Group members regardless of their current \nAC output status. This unit's Shutdown Delay will be used \nto execute the Turn Off After Delay command.  \n\nIf this UPS is an active member of an SCG, the \nturnUpsSyncGroupOffGracefully(6) command will perform a \nSynchronized Turn Off Gracefully of all active Group \nmembers regardless of their current AC output status.  \nThis unit's Maximum Shutdown Time and Shutdown Delay will\nbe used to execute the Turn Off Gracefully command.  \n\nSetting this value to noTurnUpsOff(1) has no\neffect.\n\nThe value noTurnUpsOff(1) will always be returned\nwhen the variable is read.")
upsAdvControlRebootShutdownUps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,5,)).subtype(namedValues=NamedValues(("noRebootShutdownUps", 1), ("rebootShutdownUps", 2), ("rebootShutdownUpsGracefully", 3), ("rebootShutdownSyncGroupUps", 4), ("rebootShutdownSyncGroupUpsGracefully", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlRebootShutdownUps.setDescription("Setting this variable to rebootShutdownUps(2) causes the UPS\nto shut off and turn back on (as long as good AC input power\nis available, otherwise the UPS will remain off until good AC\ninput power is available).\n\nSetting this variable to rebootShutdownUpsGracefully(3) causes\nthe UPS to shut off after a delay period and then turn back\non.  This allows the host to shut down in a graceful manner.\n\nIf this UPS is an active member of a Synchronized Control\nGroup (SCG) the rebootShutdownSyncGroupUps(4) command will\nperform a Synchronized Reboot of all active Group members\nregardless of their current AC output status.  If applicable,\nthis unit's Power Synchronization Delay, Shutdown Delay,\nReturn Delay, Return Battery Capacity, and Return Battery\nCapacity Offset will be used to execute the Reboot command.\n\nIf this UPS is an active member of a SCG the\nrebootShutdownSyncGroupUpsGracefully(5) command will perform\na Synchronized Reboot of all active Group members regardless\nof their current AC output status.  If applicable, this unit's\nPower Synchronization Delay, Maximum Shutdown Time, Shutdown\nDelay, Return Delay, Return Battery Capacity, and Return\nBattery Capacity Offset will be used to execute the Reboot\ncommand.\n\nSetting this value to noRebootShutdownUps(1) has no effect.\n\nThe value noRebootShutdownUps(1) will always be returned when\nthe variable is read.")
upsAdvControlUpsSleep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,5,1,)).subtype(namedValues=NamedValues(("noPutUpsToSleep", 1), ("putUpsToSleep", 2), ("putUpsToSleepGracefully", 3), ("putUpsSyncGroupToSleep", 4), ("putUpsSyncGroupToSleepGracefully", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlUpsSleep.setDescription("Setting this variable to putUpsToSleep(2) causes\nthe UPS to go to sleep for the time specified by\nupsAdvConfigUpsSleepTime.\n\nSetting this variable to putUpsToSleepGracefully(3)\ncauses the UPS to go to sleep for the time specified \nby upsAdvConfigUpsSleepTime after a delay period. \nThis allows the host to shut down in a graceful manner.\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the putUpsSyncGroupToSleep(4) command will perform\na Synchronized Sleep of all active Group members regardless \nof their current AC output status.  This unit's Power \nSynchronization Delay, Shutdown Delay, Sleep Time, \nand Return Delay will be used to execute the sleep command.  \n\nIf this UPS is an active member of a SCG the \nputUpsSyncGroupToSleepGracefully(5) command will perform a \nSynchronized Sleep Gracefully of all active Group members \nregardless of their current AC output status.  This unit's \nPower Synchronization Delay, Maximum Shutdown Time, Shutdown \nDelay, Sleep Time, and Return Delay to execute the sleep \ncommand.  \n\nWhen in sleep mode, the UPS will not provide output\npower regardless of the input line state.  Once the\nspecified time has elapsed, output power will be\nrestored. \n\nSetting this value to noPutUpsToSleep(1) has no\neffect.\n\nThe value noPutUpsToSleep(1) will always be returned\nwhen the variable is read.")
upsAdvControlSimulatePowerFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noSimulatePowerFailure", 1), ("simulatePowerFailure", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlSimulatePowerFail.setDescription("Setting this variable to simulatePowerFailure(2) causes\nthe UPS switch to battery power.\n\nSetting this value to noSimulatePowerFailure(1) has no\neffect.\n\nThe value noSimulatePowerFailure(1) will always be returned\nwhen the variable is read.")
upsAdvControlFlashAndBeep = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,5,2,)).subtype(namedValues=NamedValues(("noFlashAndBeep", 1), ("flashAndBeep", 2), ("flashAndBeepSyncGroup", 3), ("flashAndBeepCont", 4), ("flashAndBeepCancel", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlFlashAndBeep.setDescription("Setting this variable to flashAndBeep(2) causes the\nUPS to beep and simultaneously turn on the UPS front\npanel lights (Smart-UPS only).\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the flashAndBeepSyncGroup(3) command will \nFlash and Beep all active Group members regardless of \ncurrent AC output status.\n\nSetting this value to noFlashAndBeep(1) has no\neffect.\n  \nSetting this value to flashAndBeepCont (4) commandcauses \nthe UPS to beep and light the front panel lights until \nthe flashAndBeepCancel (5) command is received.\n\nThe value noFlashAndBeep(1) will always be returned\nwhen the variable is read.")
upsAdvControlTurnOnUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("noTurnOnUPS", 1), ("turnOnUPS", 2), ("turnOnUPSSyncGroup", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlTurnOnUPS.setDescription("Setting this variable to turnOnUPS(2) causes the\nUPS to be turned on immediately.\n\nIf this UPS is an active member of a Synchronized Control \nGroup (SCG), the turnOnUPSSyncGroup(3) command will perform \na Synchronized Turn On of all active Group members \nregardless of their current AC output status.\n\nSetting this value to noTurnOnUPS(1) has no\neffect.\n\nThe value noTurnOnUPS(1) will always be returned\nwhen the variable is read.")
upsAdvControlBypassSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("noBypassSwitch", 1), ("switchToBypass", 2), ("switchOutOfBypass", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlBypassSwitch.setDescription("This switch puts the UPS in or out of bypass mode.")
upsAdvControlRebootUpsWithOrWithoutAC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("noRebootUpsWithOrWithoutAC", 1), ("rebootUpsImmediatelyWithOrWithoutAC", 2), ("rebootUpsDelayedWithOrWithoutAC", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlRebootUpsWithOrWithoutAC.setDescription("Setting this variable to rebootUpsImmediatelyWithOrWithoutAC (2)\ncauses the UPS to turn off immediately, wait for a minimum time\n(typically 8 seconds), and then turn back on regardless of the\nAC input power on the UPS.  Any supported switched outlet\ngroups will be turned off immediately but will turn on based\non their individual settings (to allow on sequencing).\n\nSetting this variable to rebootUpsDelayedWithOrWithoutAC (3)\ncauses the UPS to turn off after a delay period, wait for a\nminimum time (typically 8 seconds), and then turn back on\nregardless of the AC input power on the UPS.  Any supported\nswitched outlet groups will be turned off and on based on their\nindividual settings (to allow off and/or on sequencing).\n\nSetting this value to noRebootUpsWithOrWithoutAC (1) has no\neffect.\n\nThe value noRebootUpsWithOrWithoutAC (1) will always be\nreturned when the variable is read.")
upsAdvControlFirmwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,5,1,)).subtype(namedValues=NamedValues(("noFirmwareUpdate", 1), ("firmwareUpdate", 2), ("updateInProcess", 3), ("updateSuccessful", 4), ("updateFailed", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvControlFirmwareUpdate.setDescription("Setting this variable to firmwareUpdate(2) causes the\nUPS to begin a firmware update if possible.\n\nSetting this value to noFirmwareUpdate(1) will clear the\nprevious results, if any, or otherwise has no effect.\n\nReading this variable will return noFirmwareUpdate(1) when\nthe UPS firmware has not been updated (or previous results\nhave been cleared), updateInProcess(3) when the UPS firmware\nis being updated, updateSuccessful(4) when the UPS firmware\nhas been successfully updated, or updateFailed(5) if the UPS\nfirmware update failed.")
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7))
upsBasicTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 1))
upsAdvTest = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2))
upsAdvTestDiagnosticSchedule = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,10,5,12,7,2,11,3,9,8,6,1,)).subtype(namedValues=NamedValues(("unknown", 1), ("eightWeeks", 10), ("twentysixWeeks", 11), ("fiftytwoWeeks", 12), ("biweekly", 2), ("weekly", 3), ("atTurnOn", 4), ("never", 5), ("fourWeeks", 6), ("twelveWeeks", 7), ("biweeklySinceLastTest", 8), ("weeklySinceLastTest", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticSchedule.setDescription("The UPS system's automatic battery test schedule.")
upsAdvTestDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noTestDiagnostics", 1), ("testDiagnostics", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnostics.setDescription("Setting this variable to testDiagnostics(2) causes\nthe UPS to perform a diagnostic self test.\n\nSetting this value to noTestDiagnostics(1) has no\neffect.\n\nThe value noTestDiagnostics(1) will always be returned\nwhen the variable is read.")
upsAdvTestDiagnosticsResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("ok", 1), ("failed", 2), ("invalidTest", 3), ("testInProgress", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestDiagnosticsResults.setDescription("The results of the last UPS diagnostics test performed.")
upsAdvTestLastDiagnosticsDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestLastDiagnosticsDate.setDescription("The date the last UPS diagnostics test was performed in\nmm/dd/yy format.")
upsAdvTestRuntimeCalibration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("noPerformCalibration", 1), ("performCalibration", 2), ("cancelCurrentCalibration", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestRuntimeCalibration.setDescription("Setting this variable to performCalibration(2) causes\nthe UPS to discharge to calibrate the UPS.\nThe test will only start if the battery capacity is 100%.\nThe test runs until capacity is less than 25%.\n\nSetting this variable to cancelCurrentCalibration(3)\nafter setting performCalibration(2) will cancel the \ncurrent discharge.\n\nSetting this variable to noPerformCalibration(1) \nwill have no effect.\n\nThe value noPerformCalibration(1) will always be returned\nwhen the variable is read.\n\nThe result of the calibration will be saved in \nupsAdvTestCalibrationResult.")
upsAdvTestCalibrationResults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ok", 1), ("invalidCalibration", 2), ("calibrationInProgress", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestCalibrationResults.setDescription("The results of the last runtime calibration.\n\nValue ok(1) means a successful runtime calibration.\n\nValue invalidCalibration(2) indicates last calibration did\nnot take place since the battery capacity was below\n100%.\n\nValue calibrationInProgress(3) means a calibration \nis occurring now. ")
upsAdvTestCalibrationDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvTestCalibrationDate.setDescription("The date the last UPS runtime calibration was \nperformed in mm/dd/yy format.")
upsAdvTestDiagnosticTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticTime.setDescription("The time of the day to perform automatic battery test. \nExpressed in 24 hour notation - hh:mm.")
upsAdvTestDiagnosticDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(7,1,2,5,3,4,6,)).subtype(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsAdvTestDiagnosticDay.setDescription("The day of the week to perform automatic battery test.")
upsComm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8))
upsCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("ok", 1), ("noComm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsCommStatus.setDescription("The status of agent's communication with UPS. ")
upsPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9))
upsPhaseResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1))
upsPhaseResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("none", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsPhaseResetMaxMinValues.setDescription("Reset the maximum and minimum UPS values:\nupsPhaseInputMaxVoltage, upsPhaseInputMinVoltage,\nupsPhaseInputMaxCurrent, upsPhaseInputMinCurrent,\nupsPhaseInputMaxPower, upsPhaseInputMinPower,\nupsPhaseOutputMaxCurrent, upsPhaseOutputMinCurrent,\nupsPhaseOutputMaxLoad, upsPhaseOutputMinLoad,\nupsPhaseOutputMaxPercentLoad, upsPhaseOutputMinPercentLoad,\nupsPhaseOutputMaxPower, upsPhaseOutputMinPower,\nupsPhaseOutputMaxPercentPower, upsPhaseOutputMinPercentPower.")
upsPhaseInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2))
upsPhaseNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumInputs.setDescription("The number of input feeds to this device.\nThis variable indicates the number of rows in the\ninput table.")
upsPhaseInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2))
if mibBuilder.loadTexts: upsPhaseInputTable.setDescription("A list of input table entries.  The number of entries\nis given by the value of upsPhaseNumInputs.")
upsPhaseInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputTableIndex"))
if mibBuilder.loadTexts: upsPhaseInputEntry.setDescription("An entry containing information applicable to a\nparticular input.")
upsPhaseInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputTableIndex.setDescription("The input identifier.")
upsPhaseNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumInputPhases.setDescription("The number of input phases utilized in this\ndevice.  The sum of all the upsPhaseNumInputPhases\nvariable indicates the number of rows in the \ninput phase table.")
upsPhaseInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltageOrientation.setDescription("The input voltage orientation: \n1: unknown for this UPS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.")
upsPhaseInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputFrequency.setDescription("The input frequency in 0.1 Hertz, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputType.setDescription("The input type.")
upsPhaseInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsPhaseInputName.setDescription("A name given to a particular input.")
upsPhaseInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3))
if mibBuilder.loadTexts: upsPhaseInputPhaseTable.setDescription("A list of input table entries.  The number of entries\nis given by the sum of the upsPhaseNumInputPhases.")
upsPhaseInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "upsPhaseInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseInputPhaseIndex"))
if mibBuilder.loadTexts: upsPhaseInputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular input phase.")
upsPhaseInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPhaseTableIndex.setDescription("The input identifier.")
upsPhaseInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPhaseIndex.setDescription("The input phase identifier.")
upsPhaseInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputVoltage.setDescription("The input voltage in VAC, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxVoltage.setDescription("The maximum input voltage in VAC measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinVoltage.setDescription("The minimum input voltage in VAC measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputCurrent.setDescription("The input current in 0.1 amperes, or -1 if it's\nunsupported by this UPS.")
upsPhaseInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxCurrent.setDescription("The maximum input current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinCurrent.setDescription("The minimum input current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPower.setDescription("The input power in Watts, or -1 if it's unsupported\nby this UPS.")
upsPhaseInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMaxPower.setDescription("The maximum input power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputMinPower.setDescription("The minimum input power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputApparentPower.setDescription("The input apparent power of the UPS in kVA.")
upsPhaseInputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseInputPowerFactor.setDescription("The input power factor measured in hundredth.")
upsPhaseOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3))
upsPhaseNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumOutputs.setDescription("The number of output feeds to this device.\nThis variable indicates the number of rows in the\noutput table.")
upsPhaseOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2))
if mibBuilder.loadTexts: upsPhaseOutputTable.setDescription("A list of output table entries.  The number of entries\nis given by the value of upsOutputNumPhases.")
upsPhaseOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputTableIndex"))
if mibBuilder.loadTexts: upsPhaseOutputEntry.setDescription("An entry containing information applicable to a\nparticular output.")
upsPhaseOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputTableIndex.setDescription("The output identifier.")
upsPhaseNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseNumOutputPhases.setDescription("The number of output phases utilized in this\ndevice.  The sum of all the upsPhaseNumOutputPhases\nvariable indicates the number of rows in the \noutput phase table.")
upsPhaseOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltageOrientation.setDescription("The output voltage orientation: \n1: unknown for this UPS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.")
upsPhaseOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputFrequency.setDescription("The output frequency in 0.1 Hertz, or -1 if it's\nunsupported by this UPS.")
upsPhaseOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3))
if mibBuilder.loadTexts: upsPhaseOutputPhaseTable.setDescription("A list of output table entries.  The number of\nentries is given by the sum of the upsPhaseNumOutputPhases.")
upsPhaseOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1)).setIndexNames((0, "PowerNet-MIB", "upsPhaseOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsPhaseOutputPhaseIndex"))
if mibBuilder.loadTexts: upsPhaseOutputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular output phase.")
upsPhaseOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPhaseTableIndex.setDescription("The output identifier.")
upsPhaseOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPhaseIndex.setDescription("The output phase identifier.")
upsPhaseOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputVoltage.setDescription("The output voltage in VAC, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputCurrent.setDescription("The output current in 0.1 amperes drawn \nby the load on the UPS, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxCurrent.setDescription("The maximum output current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinCurrent.setDescription("The minimum output current in 0.1 amperes measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputLoad.setDescription("The output load in VA, or -1 if it's unsupported\nby this UPS.")
upsPhaseOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxLoad.setDescription("The maximum output load in VA measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinLoad.setDescription("The minimum output load in VA measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPercentLoad.setDescription("The percentage of the UPS load capacity in VA at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this UPS.")
upsPhaseOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPercentLoad.setDescription("The maximum percentage of the UPS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last reset\n(upsPhaseResetMaxMinValues), or -1 if it's unsupported\nby this UPS. Sampled every 30 seconds.")
upsPhaseOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPercentLoad.setDescription("The minimum percentage of the UPS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last reset\n(upsPhaseResetMaxMinValues), or -1 if it's unsupported\nby this UPS. Sampled every 30 seconds.")
upsPhaseOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPower.setDescription("The output power in Watts, or -1 if it's\nunsupported by this UPS.")
upsPhaseOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPower.setDescription("The maximum output power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPower.setDescription("The minimum output power in Watts measured\nsince the last reset (upsPhaseResetMaxMinValues), or\n-1 if it's unsupported by this UPS.\nSampled every 30 seconds.")
upsPhaseOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPercentPower.setDescription("The percentage of the UPS power capacity in Watts at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this UPS.")
upsPhaseOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMaxPercentPower.setDescription("The maximum percentage of the UPS power capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last \nreset (upsPhaseResetMaxMinValues), or -1 if it's\nunsupported by this UPS. Sampled every 30 seconds.")
upsPhaseOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputMinPercentPower.setDescription("The maximum percentage of the UPS power capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last \nreset (upsPhaseResetMaxMinValues), or -1 if it's\nunsupported by this UPS. Sampled every 30 seconds.")
upsPhaseOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPhaseOutputPowerFactor.setDescription("The Output power factor of the UPS in hundredth.")
upsSyncCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10))
upsSyncCtrlGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1))
upsSCGMembershipGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGMembershipGroupNumber.setDescription("The SCG Membership Group number (MGN) is a 16-bit number allowing \nup to 65534 separate groups that can be identified and distinguished\nper IP subnet. Zero and 65535 are not used. The MGN is used in all \ncommunication between members of the SCG and a Network Management Card\n(NMC) will listen and only respond to commands sent to it using its \nconfigured SCG ID.")
upsSCGActiveMembershipStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enabledSCG", 1), ("disabledSCG", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGActiveMembershipStatus.setDescription("Membership in the configured SCG can be enabled and \ndisabled.  If an NMC is configured for an SCG, but \nhas its membership disabled, all synchronized control commands \nreceived will be ignored.")
upsSCGPowerSynchronizationDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGPowerSynchronizationDelayTime.setDescription("The Power Synchronization Delay Time (PSD) setting is the maximum \nnumber of seconds an SCG Initiator will wait for all SCG members to \nrecover utility power before completing the reboot sequence of a\nreboot or sleep command. If all SCG members are ready to proceed, \nno additional delay is introduced.")
upsSCGReturnBatteryCapacityOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGReturnBatteryCapacityOffset.setDescription("A reboot command uses the Initiator's Return battery Capacity (RBC) to control\nwhen the SCG completes this operation. In a Normal Control Operation (NCC) the \nUPS will only complete the reboot if RBC is reached.  Due to normal battery \ncharge rate variations it may be desirable for the Followers to complete the \nreboot if they are within some range of the Initiator's RBC when the Initiator \nis prepared (charged to RBC) to complete the reboot. The Return Battery \nCapacity Offset (RBCO) defines a percent battery capacity subtracted from an \nRBC above which a Follower's battery must be charged for it to complete a \nreboot.  For example, if the Initiator's RBC is 50% and the Initiator's RBCO is\n5% then a Follower's battery capacity is within range if it is greater or equal \nto 45% (50% - 5%) at the time when the Initiator tries to complete the reboot \ncommand.  The default RBCO is 10%. ")
upsSCGMultiCastIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsSCGMultiCastIP.setDescription("The MultiCast IP address of the SCG Group.")
upsSyncCtrlGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2))
upsSCGNumOfGroupMembers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGNumOfGroupMembers.setDescription("The number of active, communicating members in the Sync Control Group (SCG).\nThis variable indicates the number of rows in the SCG Status Table.")
upsSCGStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2))
if mibBuilder.loadTexts: upsSCGStatusTable.setDescription("A list of SCG status table entries.  The number of entries\nis given by the value of upsSCGNumOfGroupMembers.")
upsSCGStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsSCGStatusTableIndex"))
if mibBuilder.loadTexts: upsSCGStatusEntry.setDescription("An entry containing information applicable to a\nparticular SCG Member.")
upsSCGStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGStatusTableIndex.setDescription("The index of a status entry for an active, communicating SCG member.")
upsSCGMemberIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGMemberIP.setDescription("The IP address of an active, communicating SCG Member.")
upsSCGACInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("acInGood", 1), ("acInBad", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGACInputStatus.setDescription("This OID indicates the AC Input Status of the SCG Member.\nacInGood(1) indicates the AC Input is within tolerance.\nacInBad(2)  indicates the AC Input is not within tolerance.")
upsSCGACOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("acOutOn", 1), ("acOutOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSCGACOutputStatus.setDescription("This OID indicates the AC Output Status of the SCG Member.\nacOutOn(1)  indicates the UPS output is providing power to the load.\nacOutOff(2) indicates the UPS output is not providing power to the load. ")
upsState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11))
upsBasicState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1))
upsBasicStateOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBasicStateOutputState.setDescription("An ASCII string containing the 64 flags representing\nthe current state(s) of the UPS. If the Network Card\nis unable to determine the state of the UPS, this\nvariable is set to 'UNKNOWN'.\n\nThe flags are numbered 1 to 64, read from left to\nright. The flags are defined as follows:\n\nFlag  1: Abnormal Condition Present\nFlag  2: On Battery\nFlag  3: Low Battery\nFlag  4: On Line    \n                    \nFlag  5: Replace Battery\nFlag  6: Serial Communication Established\nFlag  7: AVR Boost Active\nFlag  8: AVR Trim Active \n                         \nFlag  9: Overload\nFlag 10: Runtime Calibration \nFlag 11: Batteries Discharged\nFlag 12: Manual Bypass\n                             \nFlag 13: Software Bypass\nFlag 14: In Bypass due to Internal Fault\nFlag 15: In Bypass due to Supply Failure\nFlag 16: In Bypass due to Fan Failure   \n                                        \nFlag 17: Sleeping on a Timer            \nFlag 18: Sleeping until Utility Power Returns\nFlag 19: On\nFlag 20: Rebooting\n                  \nFlag 21: Battery Communication Lost \nFlag 22: Graceful Shutdown Initiated\nFlag 23: Smart Boost or Smart Trim Fault\nFlag 24: Bad Output Voltage\n\nFlag 25: Battery Charger Failure\nFlag 26: High Battery Temperature    \nFlag 27: Warning Battery Temperature \nFlag 28: Critical Battery Temperature\n\nFlag 29: Self Test In Progress   \nFlag 30: Low Battery / On Battery\nFlag 31: Graceful Shutdown Issued by Upstream Device\nFlag 32: Graceful Shutdown Issued by Downstream Device\n\nFlag 33: No Batteries Attached\nFlag 34: Synchronized Command is in Progress\nFlag 35: Synchronized Sleeping Command is in Progress  \nFlag 36: Synchronized Rebooting Command is in Progress \n\nFlag 37: Inverter DC Imbalance \nFlag 38: Transfer Relay Failure\nFlag 39: Shutdown or Unable to Transfer\nFlag 40: Low Battery Shutdown\n\nFlag 41: Electronic Unit Fan Failure\nFlag 42: Main Relay Failure\nFlag 43: Bypass Relay Failure\nFlag 44: Temporary Bypass\n\nFlag 45: High Internal Temperature\nFlag 46: Battery Temperature Sensor Fault\nFlag 47: Input Out of Range for Bypass\nFlag 48: DC Bus Overvoltage\n\nFlag 49: PFC Failure\nFlag 50: Critical Hardware Fault\nFlag 51: Green Mode/ECO Mode\nFlag 52: Hot Standby\n       \nFlag 53: Emergency Power Off (EPO) Activated\nFlag 54: Load Alarm Violation\nFlag 55: Bypass Phase Fault\nFlag 56: UPS Internal Communication Failure    \n\nFlag 57: Efficiency Booster Mode\nFlag 58: Off\nFlag 59: Standby\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvState = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2))
upsAdvStateAbnormalConditions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateAbnormalConditions.setDescription("An ASCII string containing the 32 flags representing\nthe current active UPS faults. If the Network Card\nis unable to determine the values of the flags, this\nvariable is set to 'UNKNOWN'. If this variable is not\nsupported by the connected UPS, this variable is set to\n'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 32, and read from left to\nright. The flags are defined as follows:\n\nFlag  1: Power Module Failure\nFlag  2: Main Intelligence Module Failure\nFlag  3: Redundant Intelligence Module Failure\nFlag  4: Battery Failure\n \nFlag  5: Load(kVA) Alarm Threshold Violation\nFlag  6: Redundancy Lost\nFlag  7: Redundancy Below Alarm Threshold\nFlag  8: Bypass not in Range; Either Frequency or Voltage\n\nFlag  9: Bypass Contactor Stuck in Bypass Condition\nFlag 10: Bypass Contactor Stuck in On-Line Condition\nFlag 11: In Bypass due to an Internal Fault\nFlag 12: In Bypass due to an Overload\n\nFlag 13: In Maintenance Bypass\nFlag 14: Input Circuit Braker Tripped Open\nFlag 15: System Level Fan Failure\nFlag 16: Redundant Intelligent Module in Control\n\nFlag 17: IIC Inter-Module Communication Failure\nFlag 18: No Working Power Modules\nFlag 19: Load Shutdown From Bypass; Input Frequency\nFlag 20: Runtime Below Alarm Threshold\n\nFlag 21: Extended Run Frame Fault\nFlag 22: Output Voltage out of Range\nFlag 23: UPS Not Synchronized\nFlag 24: No Batteries Installed\n\nFlag 25: Battery Voltage High\nFlag 26: UPS Specific Fault Detected\nFlag 27: Site Wiring Fault\nFlag 28: Backfeed Protection Relay Opened\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>")
upsAdvStateSymmetra3PhaseSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSymmetra3PhaseSpecificFaults.setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Symmetra\n3-Phase UPS models. If the Network Card is unable to\ndetermine the values of the flags, this variable is set\nto 'UNKNOWN'. If the connected UPS does not use this\nvariable, it is set to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: External Switch Gear Failure\nFlag  2: External Transformer Over Temperature\nFlag  3: External DC Circuit Breaker Tripped\nFlag  4: System Power Supply Failure\n  \nFlag  5: Battery Monitor Card Failure\nFlag  6: Battery Monitor Card Removed\nFlag  7: XR Communication Card Failure\nFlag  8: XR Communication Card Removed\n\nFlag  9: External Switch Gear Monitoring Card Failure\nFlag 10: External Switch Gear Monitoring Card Removed\nFlag 11: Internal DC Circuit Breaker Tripped\nFlag 12: Static Bypass Switch Failure\n\nFlag 13: System EEPROM Removed\nFlag 14: System EEPROM Failure\nFlag 15: UPS in Forced Bypass\nFlag 16: Static Bypass Switch Module Removed\n\nFlag 17: System Start-Up Configuration Fault\nFlag 18: Battery Charger Shutdown Externally\nFlag 19: <Not Used>\nFlag 20: <Not Used>\n\nFlag 21: <Not Used>\nFlag 22: <Not Used>\nFlag 23: <Not Used>\nFlag 24: <Not Used>\n\nFlag 25: <Not Used>\nFlag 26: <Not Used>\nFlag 27: <Not Used>\nFlag 28: <Not Used>\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvStateDP300ESpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateDP300ESpecificFaults.setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Silcon\nDP300E UPS models. If the Network Card is unable to\ndetermine the values of the flags, this variable is set\nto 'UNKNOWN'. If the connected UPS does not use this\nvariable, it is set to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: Peak Current Limiter Active\nFlag  2: Bypass Power Supply Fault\nFlag  3: Delta Current Limiter Active\nFlag  4: Fan Fault\n  \nFlag  5: High DC warning\nFlag  6: Inverter Voltage Error\nFlag  7: Parallel Synchronization Error\nFlag  8: Second Power Supply Fault\n\nFlag  9: Internal Power Supply Fault\nFlag 10: <Not Used>\nFlag 11: <Not Used>\nFlag 12: <Not Used>\n\nFlag 13: <Not Used>\nFlag 14: Bypass Static Switch High Temperature\nFlag 15: High Battery Temperature\nFlag 16: Battery Weak\n\nFlag 17: <Not Used>\nFlag 18: System Locked in Operation Mode\nFlag 19: RAM1 Memory Write Error\nFlag 20: Memory Write Error\n\nFlag 21: Communication to VQ Bypass Lost\nFlag 22: Communication to VQ Output Lost\nFlag 23: Communication to DMU Lost\nFlag 24: Communication to Controller Lost\n\nFlag 25: Communication to Parallel IF Lost\nFlag 26: External Shutdown Accepted\nFlag 27: DC Capacitor Charge Error\nFlag 28: Communication to VQ Mains Lost\n\nFlag 29: Bypass Synchronization Error\nFlag 30: Charge Error\nFlag 31: SII Aux Input Activiated\nFlag 32: <Not Used>\n\nFlag 33: Blown Inverter Fuse\nFlag 34: Blown Rectifier Fuse\nFlag 35: Auxilliary 1 Fault\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: High Temperature Charger Magnetic\nFlag 47: <Not Used>\nFlag 48: Battery Monitor Warning\n\nFlag 49: Battery Monitor Alarm\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: TSM 1/2/3 Temperature Shutdown\nFlag 54: Charger 0/30 Temperature Warning\nFlag 55: Charger 0/30 Temperature Shutdown\nFlag 56: High Output Voltage\n\nFlag 57: SSW Temperature Over 90\nFlag 58: <Not Used>\nFlag 59: Low Current Failure In AC Capacitors\nFlag 60: <Not Used>\n\nFlag 61: Advanced Battery Management Not Installed\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvStateSymmetraSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSymmetraSpecificFaults.setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Symmetra\nUPS models. If the Network Card is unable to determine\nthe values of the flags, this variable is set to 'UNKNOWN'.\nIf the connected UPS does not use this variable, it is\nset to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: System Fault\nFlag  2: Bypass Relay Fault\nFlag  3: Power Module Turn Off Failure\nFlag  4: Frame Identification Fault\n  \nFlag  5: <Not Used>\nFlag  6: <Not Used>\nFlag  7: <Not Used>\nFlag  8: <Not Used>\n\nFlag  9: <Not Used>\nFlag 10: <Not Used>\nFlag 11: <Not Used>\nFlag 12: <Not Used>\n\nFlag 13: <Not Used>\nFlag 14: <Not Used>\nFlag 15: <Not Used>\nFlag 16: <Not Used>\n\nFlag 17: <Not Used>\nFlag 18: <Not Used>\nFlag 19: <Not Used>\nFlag 20: <Not Used>\n\nFlag 21: <Not Used>\nFlag 22: <Not Used>\nFlag 23: <Not Used>\nFlag 24: <Not Used>\n\nFlag 25: <Not Used>\nFlag 26: <Not Used>\nFlag 27: <Not Used>\nFlag 28: <Not Used>\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvStateSmartUPSSpecificFaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSmartUPSSpecificFaults.setDescription("An ASCII string containing the 64 flags representing\nthe current active UPS specific faults for the Smart-UPS \nUPS models. If the Network Card is unable to determine\nthe values of the flags, this variable is set to\n'UNKNOWN'. If the connected UPS does not use this\nvariable, it is set to 'NOT SUPPORTED'.\n\nThe flags are numbered from 1 to 64, and read from left\nto right. The bits are defined as follows:\n\nFlag  1: EPO Switch Activated\nFlag  2: Static Bypass Switch Fault\nFlag  3: System Configuration Fault\nFlag  4: Power Supply Unit Fault\n  \nFlag  5: Weak Battery\nFlag  6: High Battery Temperature\nFlag  7: Internal Mechanical Bypass\nFlag  8: Loss Of Parallel Redundancy\n\nFlag  9: Parallel Bus Communication Fault on Cable 1\nFlag 10: Parallel Bus Communication Fault on Cable 2\nFlag 11: Auxiliary Bus Communication Fault\nFlag 12: Parallel Bus Termination Fault on Cable 1\n\nFlag 13: Parallel Bus Termination Fault on Cable 2\nFlag 14: Auxiliary Bus Termination Fault\nFlag 15: No Master Present In The Parallel System\nFlag 16: Overload on a Parallel Unit\n\nFlag 17: Parallel Configuration Fault\nFlag 18: <Not Used>\nFlag 19: <Not Used>\nFlag 20: <Not Used>\n\nFlag 21: <Not Used>\nFlag 22: <Not Used>\nFlag 23: <Not Used>\nFlag 24: <Not Used>\n\nFlag 25: <Not Used>\nFlag 26: <Not Used>\nFlag 27: <Not Used>\nFlag 28: <Not Used>\n\nFlag 29: <Not Used>\nFlag 30: <Not Used>\nFlag 31: <Not Used>\nFlag 32: <Not Used>\n\nFlag 33: <Not Used>\nFlag 34: <Not Used>\nFlag 35: <Not Used>\nFlag 36: <Not Used>\n\nFlag 37: <Not Used>\nFlag 38: <Not Used>\nFlag 39: <Not Used>\nFlag 40: <Not Used>\n\nFlag 41: <Not Used>\nFlag 42: <Not Used>\nFlag 43: <Not Used>\nFlag 44: <Not Used>\n\nFlag 45: <Not Used>\nFlag 46: <Not Used>\nFlag 47: <Not Used>\nFlag 48: <Not Used>\n\nFlag 49: <Not Used>\nFlag 50: <Not Used>\nFlag 51: <Not Used>\nFlag 52: <Not Used>\n\nFlag 53: <Not Used>\nFlag 54: <Not Used>\nFlag 55: <Not Used>\nFlag 56: <Not Used>\n\nFlag 57: <Not Used>\nFlag 58: <Not Used>\nFlag 59: <Not Used>\nFlag 60: <Not Used>\n\nFlag 61: <Not Used>\nFlag 62: <Not Used>\nFlag 63: <Not Used>\nFlag 64: <Not Used>")
upsAdvStateSystemMessages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateSystemMessages.setDescription("An ASCII string containing the 3 digit Decimal code\nrepresenting the current active message from the\nSystem Message Register. Each code should remain active\nfor a minimum of 15 seconds. However, in the worst case\nscenario, a code could be cleared after only 5 seconds.\nIt is recommended that this object be polled at least\nonce every 4 seconds in order to get the most accurate\nrepresentation of the current UPS System Message. If the\nNetwork Card is unable to determine the value of the\nSystem Message Register, this variable is set to\n'UNKNOWN'.")
upsAdvStateTotaltimeonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonbattery.setDescription("Total time the UPS has been in battery operation.")
upsAdvStateTotaltimeonbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonbypass.setDescription("Total time the UPS has been in bypass operation.")
upsAdvStateTotaltimeonNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateTotaltimeonNormal.setDescription("Total time the UPS has been in normal operation.")
upsAdvStateNumberoftimesonbattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesonbattery.setDescription("Number of times the UPS was on battery.\nSince the last reset of statistical data.")
upsAdvStateNumberoftimesbypass = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesbypass.setDescription("Number of times the UPS was in bypass.\nSince the last reset of statistical data.")
upsAdvStateNumberoftimesNormal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateNumberoftimesNormal.setDescription("Number of times the UPS was in normal operation.\nSince the last reset of statistical data.")
upsAdvStateEcomode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsOnEcoMode", 1), ("upsNotOnEcoMode", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsAdvStateEcomode.setDescription("Eco mode status.\n1: UPS is on Eco-mode\n2: UPS is not on Eco-mode.")
upsOutletGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12))
upsOutletGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1))
upsOutletGroupStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusTableSize.setDescription("The number of outlet groups for the UPS.")
upsOutletGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2))
if mibBuilder.loadTexts: upsOutletGroupStatusTable.setDescription("Allows for getting status of the outlet groups. The number of\nentries is contained in the upsOutletGroupStatusTableSize OID.")
upsOutletGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupStatusIndex"))
if mibBuilder.loadTexts: upsOutletGroupStatusEntry.setDescription("The outlet group status to get.")
upsOutletGroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusIndex.setDescription("The index to the outlet group entry.")
upsOutletGroupStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusName.setDescription("The name of the outlet group. This OID is provided\nfor informational purposes only. This value is set\nby the upsOutletGroupConfigName OID.")
upsOutletGroupStatusGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("upsOutletGroupStatusOn", 1), ("upsOutletGroupStatusOff", 2), ("upsOutletGroupStatusUnknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusGroupState.setDescription("Getting this variable will return the outlet group state. If the outlet\ngroup is on, the upsOutletGroupStatusOn (1) value will be returned. If\nthe outlet group is off, the upsOutletGroupStatusOff (2) value will be\nreturned. If the state of the outlet group cannot be determined, the\nupsOutletGroupStatusUnknown (3) value will be returned.")
upsOutletGroupStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("upsOutletGroupCommandPending", 1), ("upsOutletGroupNoCommandPending", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusCommandPending.setDescription("Getting this variable will return the command pending\nstate of the outlet group. If a command is pending on the \noutlet group, the upsOutletGroupCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet group, the upsOutletGroupNoCommandPending (2)\nwill be returned.")
upsOutletGroupStatusOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupStatusOutletType.setDescription("Getting this variable will return the type of outlet group.\nIf present in the system, the main outlet group is\n'unswitched' and must be on in order for any of the switched\noutlet groups to be on. Conversely, if the main outlet group\nis off, all the switched outlet groups must also be off.\nTherefore, any commands made to the main outlet group that\nturn it off will also be applied to all switched outlet\ngroups that are on, unless the state of a switched outlet\ngroup prevents it, in which case the command will fail.")
upsOutletGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2))
upsOutletGroupConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigTableSize.setDescription("The number of outlet groups for the UPS.")
upsOutletGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2))
if mibBuilder.loadTexts: upsOutletGroupConfigTable.setDescription("The list of outlet groups to configure. The number of entries\nis defined by the upsOutletGroupConfigTableSize OID.")
upsOutletGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupConfigIndex"))
if mibBuilder.loadTexts: upsOutletGroupConfigEntry.setDescription("The outlet groups to configure.")
upsOutletGroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigIndex.setDescription("The index to the outlet group entry.")
upsOutletGroupConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigName.setDescription("The name of the outlet group.")
upsOutletGroupConfigPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigPowerOnDelay.setDescription("The amount of time (seconds) the outlet group will delay\npowering on when the delayed on, reboot, or shutdown command is\napplied. Allowed values vary by UPS model. The value of -1 is\nused for Never if supported by the UPS and the outlet group.")
upsOutletGroupConfigPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigPowerOffDelay.setDescription("The amount of time (seconds) the outlet group will delay\npowering off when the delayed off, reboot, or shutdown command is\napplied. Allowed values vary by UPS model. The value of -1 is\nused for Never if supported by the UPS and the outlet group.")
upsOutletGroupConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigRebootDuration.setDescription("During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait \n(seconds) after turning the power off, at the start\nof the sequence, before initiating the power on sequence.\nAllowed values vary by UPS model.")
upsOutletGroupConfigMinReturnRuntime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigMinReturnRuntime.setDescription("In an Outlet Group shutdown sequence, the Outlet Group cycles\npower off then on. This OID defines the minimum amount of UPS\nruntime (seconds) that is required in order to power the\nOutlet Group on. Allowed values vary by UPS model.")
upsOutletGroupConfigOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupConfigOutletType.setDescription("Getting this variable will return the type of outlet group.\nIf present in the system, the main outlet group is\n'unswitched' and must be on in order for any of the switched\noutlet groups to be on. Conversely, if the main outlet group\nis off, all the switched outlet groups must also be off.\nTherefore, any commands made to the main outlet group that\nturn it off will also be applied to all switched outlet\ngroups that are on, unless the state of a switched outlet\ngroup prevents it, in which case the command will fail.")
upsOutletGroupConfigLoadShedControlSkipOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsOutletGroupConfigSkipOffDelay", 1), ("upsOutletGroupConfigUseOffDelay", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlSkipOffDelay.setDescription("Configures whether the outlet group's off delay setting\n(upsOutletGroupConfigPowerOffDelay) will be used in a load\nshedding situation, where applicable.")
upsOutletGroupConfigLoadShedControlAutoRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("upsOutletGroupConfigAutoRestart", 1), ("upsOutletGroupConfigManualRestart", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlAutoRestart.setDescription("Configures whether the outlet group will automatically restart\nafter a load shedding situation, where applicable.")
upsOutletGroupConfigLoadShedControlTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsOutletGroupConfigDisableTimeOnBatteryLoadShed", 1), ("upsOutletGroupConfigEnableTimeOnBatteryLoadShed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlTimeOnBattery.setDescription("Configures whether the outlet group will load shed (turn off)\nafter the UPS's time on battery has exceeded the\nupsOutletGroupConfigLoadShedTimeOnBattery OID setting. The\nsettings for upsOutletGroupConfigLoadShedControlSkipOffDelay\nand upsOutletGroupConfigLoadShedControlAutoRestart are valid\nfor this load shed condition.")
upsOutletGroupConfigLoadShedControlRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("upsOutletGroupConfigDisableRuntimeRemainingLoadShed", 1), ("upsOutletGroupConfigEnableRuntimeRemainingLoadShed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlRuntimeRemaining.setDescription("Configures whether the outlet group will load shed (turn off)\nwhen the UPS is on battery and the remaining runtime is less\nthan the upsOutletGroupConfigLoadShedRuntimeRemaining OID\nsetting. The settings for\nupsOutletGroupConfigLoadShedControlSkipOffDelay and\nupsOutletGroupConfigLoadShedControlAutoRestart are valid for\nthis load shed condition.")
upsOutletGroupConfigLoadShedControlInOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("upsOutletGroupConfigDisableInOverloadLoadShed", 1), ("upsOutletGroupConfigEnableInOverloadLoadShed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedControlInOverload.setDescription("Configures whether the outlet group will load shed (turn off)\nwhen the UPS is in an overload condition. The setting for\nupsOutletGroupConfigLoadShedControlSkipOffDelay is valid for\nthis load shed condition. Returns -1 if not supported by this\noutlet group.")
upsOutletGroupConfigLoadShedTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedTimeOnBattery.setDescription("When the UPS has been on battery for more time than this\nvalue, the outlet group will turn off if this condition is\nenabled by the upsOutletGroupConfigLoadShedControlTimeOnBattery\nOID. Allowed values vary by UPS model.")
upsOutletGroupConfigLoadShedRuntimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupConfigLoadShedRuntimeRemaining.setDescription("When the runtime remaining is less than this value, the outlet\ngroup will turn off if this condition is enabled by the\nupsOutletGroupConfigLoadShedControlRuntimeRemaining OID.\nAllowed values vary by UPS model.")
upsOutletGroupControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3))
upsOutletGroupControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlTableSize.setDescription("The number of outlet groups for the UPS.")
upsOutletGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2))
if mibBuilder.loadTexts: upsOutletGroupControlTable.setDescription("Allows for control of individual outlet groups. The number of\nentries is contained in the upsOutletGroupControlTableSize OID.")
upsOutletGroupControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsOutletGroupControlIndex"))
if mibBuilder.loadTexts: upsOutletGroupControlEntry.setDescription("The outlet group to control.")
upsOutletGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlIndex.setDescription("The index to the outlet group entry.")
upsOutletGroupControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlName.setDescription("The name of the outlet group. This OID is provided\nfor informational purposes only. This value is set\nby the upsOutletGroupConfigName OID.")
upsOutletGroupControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(9,1,7,5,8,2,6,3,10,4,)).subtype(namedValues=NamedValues(("upsOutletGroupImmediateOn", 1), ("upsOutletGroupDelayedRebootShutdown", 10), ("upsOutletGroupImmediateOff", 2), ("upsOutletGroupImmediateRebootWithOrWithoutAC", 3), ("upsOutletGroupDelayedOn", 4), ("upsOutletGroupDelayedOff", 5), ("upsOutletGroupDelayedRebootWithOrWithoutAC", 6), ("upsOutletGroupCancelPendingCommand", 7), ("upsOutletGroupControlUnknown", 8), ("upsOutletGroupImmediateRebootShutdown", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsOutletGroupControlCommand.setDescription("Getting this variable will return the outlet group state. If the outlet\ngroup is on, the upsOutletGroupImmediateOn (1) value will be returned. If\nthe outlet group is off, the upsOutletGroupImmediateOff (2) value will be\nreturned.\n\nIf the state of the outlet group cannot be determined, the\nupsOutletGroupControlUnknown (8) value will be returned.\n\nSetting this variable to upsOutletGroupImmediateOn (1) will turn the\noutlet group on immediately.\n\nSetting this variable to upsOutletGroupImmediateOff (2) will turn the\noutlet group off immediately.\n\nSetting this variable to upsOutletGroupImmediateRebootWithOrWithoutAC (3)\nwill turn the outlet group off immediately, wait the\nupsOutletGroupConfigRebootDuration OID time, wait the\nupsOutletGroupConfigPowerOnDelay OID, and then turn the outlet group on\nregardless of the AC input power on the UPS.\n\nSetting this variable to upsOutletGroupDelayedOn (4) will turn the outlet\ngroup on after the upsOutletGroupConfigPowerOnDelay OID has elapsed.\n\nSetting this variable to upsOutletGroupDelayedOff (5) will turn the outlet\ngroup off after the upsOutletGroupConfigPowerOffDelay OID has elapsed.\n\nSetting this variable to upsOutletGroupDelayedRebootWithOrWithoutAC (6)\nwill turn the outlet group off after the upsOutletGroupConfigPowerOffDelay\nOID has elapsed, wait the upsOutletGroupConfigRebootDuration OID time, wait\nthe upsOutletGroupConfigPowerOnDelay OID, and then turn the outlet group\non regardless of the AC input power on the UPS.\n\nSetting this variable to upsOutletGroupCancelPendingCommand (7) will\ncause any pending command to this outlet group to be canceled.\n\nSetting this variable to upsOutletGroupImmediateRebootShutdown (9) will\nturn the outlet group off immediately, wait for the AC power to return to normal\n(a minimum of the upsOutletGroupConfigRebootDuration OID time), wait the\nupsOutletGroupConfigPowerOnDelay OID time, and then turn the outlet\ngroup on.\n\nSetting this variable to upsOutletGroupDelayedRebootShutdown (10) will\nturn the outlet group off after the upsOutletGroupConfigPowerOffDelay OID\nhas elapsed, wait for the AC power to return to normal (a minimum of the\nupsOutletGroupConfigRebootDuration OID time), wait the\nupsOutletGroupConfigPowerOnDelay OID time, and then turn the outlet\ngroup on.\n\nIn systems with a main outlet group, commands to the main outlet group must\nbe performed with caution. It may be clearer to use the ups control commands\navailable from upsAdvControl... OIDs. If any command is made to the main\noutlet group that will turn it off, one of two things will happen:\n1) If any switched outlet group is in a state that prevents this command\nfrom occurring on the main outlet group, the command will be rejected. Note\nthat a switched outlet group being on without a command in progress is not a\nstate that normally prevents the command.\n2) The command will be accepted and applied to the main outlet group and all\nswitched outlet groups that are on.\n\nThere is one additional special case for systems with a main outlet group.\nIf the main outlet group is off and a switched outlet group is commanded to\nturn on, the on command will be applied to both the main outlet group and\nthat switched outlet group.")
upsOutletGroupControlOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("upsSwitchedOutletGroup", 1), ("upsMainOutletGroup", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutletGroupControlOutletType.setDescription("Getting this variable will return the type of outlet group.\nIf present in the system, the main outlet group is\n'unswitched' and must be on in order for any of the switched\noutlet groups to be on. Conversely, if the main outlet group\nis off, all the switched outlet groups must also be off.\nTherefore, any commands made to the main outlet group that\nturn it off will also be applied to all switched outlet\ngroups that are on, unless the state of a switched outlet\ngroup prevents it, in which case the command will fail.")
upsDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13))
upsDiagnosticIM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1))
upsDiagIMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMTableSize.setDescription("The number of Intelligence Modules in or attached to the UPS.")
upsDiagIMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2))
if mibBuilder.loadTexts: upsDiagIMTable.setDescription("Allows for diagnostics of individual Intelligence Modules. The number of\nentries is contained in the upsDiagIMTableSize OID.")
upsDiagIMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagIMIndex"))
if mibBuilder.loadTexts: upsDiagIMEntry.setDescription("The diagnostics and information of an Intelligence Module.")
upsDiagIMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMIndex.setDescription("The index to the Intelligence Module entry.")
upsDiagIMType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("imUnknown", 1), ("imMIM", 2), ("imRIM", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMType.setDescription("The type of the Intelligence Module.\nimUnknown(1) indicates the IM type is unknown.\nimMIM(2) indicates the IM type is a Main Intelligence Module.\nimRIM(3) indicates the IM type is Redundant Intelligence Module.")
upsDiagIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMStatus.setDescription("The status of the Intelligence Module.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagIMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMFirmwareRev.setDescription("The firmware revision of the Intelligence Module.")
upsDiagIMSlaveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMSlaveFirmwareRev.setDescription("The slave firmware revision of the Intelligence Module.")
upsDiagIMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMHardwareRev.setDescription("The hardware revision of the Intelligence Module.")
upsDiagIMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMSerialNum.setDescription("The serial number of the Intelligence Module.")
upsDiagIMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagIMManufactureDate.setDescription("The manufacture date of the Intelligence Module.")
upsDiagnosticPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2))
upsDiagPMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMTableSize.setDescription("The maximum number of Power Modules supported by the UPS.")
upsDiagPMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2))
if mibBuilder.loadTexts: upsDiagPMTable.setDescription("Allows for diagnostics of Individual Power modules. The number of\nentries is contained in the upsDiagPMTableSize OID.")
upsDiagPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagPMIndex"))
if mibBuilder.loadTexts: upsDiagPMEntry.setDescription("The diagnostics of an Power Module.")
upsDiagPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMIndex.setDescription("The index to the Power Module entry.")
upsDiagPMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMStatus.setDescription("The status of the Power Module.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagPMFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFirmwareRev.setDescription("The firmware revision of the Power Module.")
upsDiagPMHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMHardwareRev.setDescription("The hardware revision of the Power Module.")
upsDiagPMSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMSerialNum.setDescription("The serial number of the Power Module.")
upsDiagPMManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMManufactureDate.setDescription("The manufacture date of the Power Module.")
upsDiagPMLifetimeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3))
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoTable.setDescription("Allows for diagnostics of individual power module's lifetime information. \nThe number of entries is contained in the upsDiagPMTableSize OID.")
upsDiagPMLifetimeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagPMLifetimeInfoIndex"))
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoEntry.setDescription("The diagnostics of a Power Module lifetime information.")
upsDiagPMLifetimeInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMLifetimeInfoIndex.setDescription("The index to the Power Module lifetime information entry.")
upsDiagPMLifetimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMLifetimeStatus.setDescription("The status of the Power Module lifetime information.\nok(1) indicates the device lifetime status is OK.\nnearEnd(2) indicates the device lifetime status is near end.\nexceeded(3) indicates the device lifetime status is exceeded.\nunknown(4) indicates the device lifetime status is unknown.")
upsDiagPMEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEstmtdLifetimeRmng.setDescription("Displays the time remaining for the module before it should be replaced.\nMeasured in months. This value is set when you originally install the module.")
upsDiagPMEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEstmtdLifetimeRmngPct.setDescription("Displays the percentage of the total lifetime remaining for the module \nbefore it should be replaced.")
upsDiagPMFanLifetimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanLifetimeStatus.setDescription("The status of the Power Module Fan lifetime information.\nok(1) indicates the device lifetime status is OK.\nnearEnd(2) indicates the device lifetime status is near end.\nexceeded(3) indicates the device lifetime status is exceeded.\nunknown(4) indicates the device lifetime status is unknown.")
upsDiagPMFanEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanEstmtdLifetimeRmng.setDescription("Displays the time remaining, measured in months, before the module's \nfan should be replaced. It is reset by the field service engineer when\na new fan is installed.")
upsDiagPMFanEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMFanEstmtdLifetimeRmngPct.setDescription("Displays the percentage of the total lifetime remaining \nbefore the module's fan should be replaced.")
upsDiagPMEnclDoorFltrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrTableSize.setDescription("The maximum number of power module enclosures attached to the UPS.")
upsDiagPMEnclDoorFltrTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5))
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrTable.setDescription("Allows for the diagnostics of individual power module enclosure door filters.      \nThe number of entries is contained in the upsDiagPMEnclDoorFltrTableSize OID.")
upsDiagPMEnclDoorFltrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagPMEnclIndex"))
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEntry.setDescription("Power module door filter diagnostics info.")
upsDiagPMEnclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclIndex.setDescription("The index to the power module enclosure entry.\nEnclosure 0 indicates the Power enclosure 1. \nEnclosure 1 indicates the Power enclosure 2.")
upsDiagPMEnclDoorFltrLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,1,)).subtype(namedValues=NamedValues(("heavyFiltration15days", 1), ("normalFiltration30days", 2), ("lightFiltration60days", 3), ("notPresent", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrLifetime.setDescription("Door filter replacement time interval, based on the installation enivironment.\nheavyFiltration15days (1) indicates door filter needs to be replaced within 15 days.\nnormalFiltration30days (2) indicates door filter needs to be replaced within 30 days.\nlightFiltration60days (3) indicates door filter needs to be replaced within 60 days.\nnotPresent(4) indicates that the door filter is not present.")
upsDiagPMEnclDoorFltrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("ok", 1), ("nearEnd", 2), ("exceeded", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrStatus.setDescription("Indicates the current status of the door filter.\nok(1) indicates the device lifetime status is OK.\nnearEnd(2) indicates the device lifetime status is near end.\nexceeded(3) indicates the device lifetime status is exceeded.\nunknown(4) indicates the device lifetime status is unknown.")
upsDiagPMEnclDoorFltrEstmtdLifetimeRmng = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEstmtdLifetimeRmng.setDescription("Displays the time remaining, measured in days, before the module door filter should be replaced. \nThis value is set when you originally install the module.")
upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct.setDescription("Displays the percentage of the total lifetime remaining for the module \ndoor filter before it should be replaced.")
upsDiagnosticBatteries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3))
upsDiagBatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryTableSize.setDescription("The maximum number of batteries supported by the UPS.")
upsDiagBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2))
if mibBuilder.loadTexts: upsDiagBatteryTable.setDescription("Allows for diagnostics of individual batteries. The number of\nentries is contained in the upsDiagBattTableSize OID.")
upsDiagBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagBatteryIndex"))
if mibBuilder.loadTexts: upsDiagBatteryEntry.setDescription("The diagnostics of a battery.")
upsDiagBatteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameIndex.setDescription("The index to the battery frame entry.\nFrame 0 indicates the Main frame. Extended Run (XR) frames\nstart from index 1.")
upsDiagBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryIndex.setDescription("The index to the battery entry.")
upsDiagBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,7,3,6,1,2,5,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("failed", 4), ("highTemperature", 5), ("replaceImmediately", 6), ("lowCapacity", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryStatus.setDescription("The status of the battery.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the battery status is OK.\nfailed(4) indicates the battery status is failed.\nhighTemperature(5) indicates the battery has a high temperature condition.\nreplaceImmediately(6) indicates the battery must be replaced immediately.\nlowCapacity(7) indicates the battery has a low capacity.")
upsDiagBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatterySerialNumber.setDescription("The serial number of the battery.")
upsDiagBatteryFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFirmwareRev.setDescription("The firmware revision of the battery.")
upsDiagBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryManufactureDate.setDescription("The manufacture date of the battery.")
upsDiagBatteryType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryType.setDescription("The battery type or rating for the battery.")
upsDiagBatteryFramePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("notPresent", 0), ("present", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFramePresent.setDescription("The battery frame/cabinet status.\n0 indicates frame/cabinet is not present.\n1 indicates frame/cabinet is present.")
upsDiagBatteryFrameTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagBatteryFrameTemperature.setDescription("The battery frame/cabinet temperature in tenths of degrees celsius.\nIf the frame/cabinet is not present, this variable is set to (-1).")
upsDiagnosticSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4))
upsDiagSubSysFrameTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameTableSize.setDescription("The number of frames attached to the UPS including the Main frame.")
upsDiagSubSysFrameTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2))
if mibBuilder.loadTexts: upsDiagSubSysFrameTable.setDescription("Allows for diagnostics of individual XR Frames.")
upsDiagSubSysFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysFrameIndex"))
if mibBuilder.loadTexts: upsDiagSubSysFrameEntry.setDescription("The diagnostics of an XR Frame.")
upsDiagSubSysFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,5,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("frameTypeMain", 3), ("frameTypeXR", 4), ("frameTypeLXR", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameType.setDescription("The type of Frame.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nframeTypeMain(3) indicates the frame type is the Main Frame.\nframeTypeXR(4) indicates the frame type is an XR Frame.\nframeTypeLXR(5) indicates the frame type is an LXR Frame.")
upsDiagSubSysFrameFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameFirmwareRev.setDescription("The firmware revision of the frame.")
upsDiagSubSysFrameHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameHardwareRev.setDescription("The hardware revision of the frame.")
upsDiagSubSysFrameSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameSerialNum.setDescription("The serial number of the frame.")
upsDiagSubSysFrameManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysFrameManufactureDate.setDescription("The manufacture date of the frame.")
upsDiagSubSysIntBypSwitchTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchTableSize.setDescription("The number of Internal Bypass switches attached to the UPS.")
upsDiagSubSysIntBypSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4))
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchTable.setDescription("Allows for diagnostics of the Internal Bypass Switch.")
upsDiagSubSysIntBypSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysIntBypSwitchIndex"))
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchEntry.setDescription("The diagnostics of the Internal Bypass Switch.")
upsDiagSubSysIntBypSwitchFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysIntBypSwitchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchIndex.setDescription("The Internal Bypass Switch index entry.")
upsDiagSubSysIntBypSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchStatus.setDescription("The Internal Bypass Switch status.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysIntBypSwitchFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchFirmwareRev.setDescription("The firmware revision of the Internal Bypass Switch.")
upsDiagSubSysIntBypSwitchHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchHardwareRev.setDescription("The hardware revision of the Internal Bypass Switch.")
upsDiagSubSysIntBypSwitchSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchSerialNum.setDescription("The serial number of the Internal Bypass Switch.")
upsDiagSubSysIntBypSwitchManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysIntBypSwitchManufactureDate.setDescription("The manufacture date of the Internal Bypass Switch.")
upsDiagSubSysBattMonitorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorTableSize.setDescription("The number of Battery Monitor Boards attached to the UPS.")
upsDiagSubSysBattMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6))
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorTable.setDescription("Allows for diagnostics of the Battery Monitor Board.")
upsDiagSubSysBattMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysBattMonitorIndex"))
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorEntry.setDescription("The diagnostics of the Battery Monitor Board.")
upsDiagSubSysBattMonitorFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysBattMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorIndex.setDescription("The index of the Battery Monitor Board.")
upsDiagSubSysBattMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorStatus.setDescription("The status of the Battery Monitor Board.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysBattMonitorFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorFirmwareRev.setDescription("The firmware revision of the Battery Monitor Board.")
upsDiagSubSysBattMonitorHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorHardwareRev.setDescription("The hardware revision of the Battery Monitor Board.")
upsDiagSubSysBattMonitorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorSerialNum.setDescription("The serial number of the Battery Monitor Board.")
upsDiagSubSysBattMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysBattMonitorManufactureDate.setDescription("The date of the manufacture for the Battery Monitor Board.")
upsDiagSubSysExternalSwitchGearTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearTableSize.setDescription("The number of External Switch Gears attached to the UPS.")
upsDiagSubSysExternalSwitchGearTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8))
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearTable.setDescription("Allows for diagnostics of the individual External Switch Gear.")
upsDiagSubSysExternalSwitchGearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalSwitchGearIndex"))
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearEntry.setDescription("The diagnostics of an individual External Switch Gear.")
upsDiagSubSysExternalSwitchGearFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysExternalSwitchGearIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearIndex.setDescription("The index of the External Switch Gear.")
upsDiagSubSysExternalSwitchGearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearStatus.setDescription("The status of the External Switch Gear.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysExternalSwitchGearFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearFirmwareRev.setDescription("The firmware revision of the External Switch Gear monitor card.")
upsDiagSubSysExternalSwitchGearHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearHardwareRev.setDescription("The hardware revision of the External Switch Gear monitor card.")
upsDiagSubSysExternalSwitchGearSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearSerialNum.setDescription("The serial number of the External Switch Gear monitor card.")
upsDiagSubSysExternalSwitchGearManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalSwitchGearManufactureDate.setDescription("The date of the manufacture for the External Switch Gear monitor card.")
upsDiagSubSysDisplayInterfaceCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardTableSize.setDescription("The number of Display Interface Cards attached to the UPS.")
upsDiagSubSysDisplayInterfaceCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10))
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardTable.setDescription("Allows for diagnostics of individual Display Interface Cards.")
upsDiagSubSysDisplayInterfaceCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDisplayInterfaceCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardEntry.setDescription("The diagnostics of a Display Interface Card.")
upsDiagSubSysDisplayInterfaceCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysDisplayInterfaceCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardIndex.setDescription("The index of the Display Interface Card.")
upsDiagSubSysDisplayInterfaceCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDisplayInterfaceCardStatus.setDescription("The status of the Display Interface Card.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysDCCircuitBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerTableSize.setDescription("The number of DC Circuit Breakers attached to the UPS.")
upsDiagSubSysDCCircuitBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12))
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerTable.setDescription("Allows for diagnostics of individual DC Circuit Breakers.")
upsDiagSubSysDCCircuitBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysDCCircuitBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerEntry.setDescription("The diagnostics of a DC Circuit Breaker.")
upsDiagSubSysDCCircuitBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysDCCircuitBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerIndex.setDescription("The index of the DC Circuit Breaker.")
upsDiagSubSysDCCircuitBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysDCCircuitBreakerStatus.setDescription("The status of the DC Circuit Breaker.\nunknown(1) indicates the circuit breaker status is unknown.\nnotInstalled(2) indicates the circuit breaker is not installed.\nopened(3) indicates the circuit breaker is opened.\nclosed(4) indicates the circuit breaker is closed.")
upsDiagSubSysSystemPowerSupplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyTableSize.setDescription("The number of System Power Supplies attached to the UPS.")
upsDiagSubSysSystemPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14))
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyTable.setDescription("Allows for diagnostics of individual System Power Supplies.")
upsDiagSubSysSystemPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysSystemPowerSupplyIndex"))
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyEntry.setDescription("The diagnostics of a System Power Supply.")
upsDiagSubSysSystemPowerSupplyFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysSystemPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyIndex.setDescription("The index of a System Power Supply.")
upsDiagSubSysSystemPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyStatus.setDescription("The status of the System Power Supply.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysSystemPowerSupplyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyFirmwareRev.setDescription("The firmware revision of the System Power Supply monitor card.")
upsDiagSubSysSystemPowerSupplyHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyHardwareRev.setDescription("The hardware revision of the System Power Supply monitor card.")
upsDiagSubSysSystemPowerSupplySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplySerialNum.setDescription("The serial number of the System Power Supply monitor card.")
upsDiagSubSysSystemPowerSupplyManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysSystemPowerSupplyManufactureDate.setDescription("The date of the manufacture for the System Power Supply monitor card.")
upsDiagSubSysXRCommunicationCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardTableSize.setDescription("The number of XR Communication Cards attached to the UPS.")
upsDiagSubSysXRCommunicationCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16))
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardTable.setDescription("Allows for diagnostics of individual XR Communication Cards.")
upsDiagSubSysXRCommunicationCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysXRCommunicationCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardEntry.setDescription("The diagnostics of an XR Communication Card.")
upsDiagSubSysXRCommunicationCardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysXRCommunicationCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardIndex.setDescription("The index of an XR Communication Card.")
upsDiagSubSysXRCommunicationCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardStatus.setDescription("The status of the XR Communication Card.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysXRCommunicationCardFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardFirmwareRev.setDescription("The firmware revision of the XR Communication card.")
upsDiagSubSysXRCommunicationCardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysXRCommunicationCardSerialNum.setDescription("The serial number of the XR Communication card.")
upsDiagSubSysExternalPowerFrameBoardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardTableSize.setDescription("The number of External Power Frame Boards attached to the UPS.")
upsDiagSubSysExternalPowerFrameBoardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18))
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardTable.setDescription("Allows for diagnostics of individual External Power Frame Boards.")
upsDiagSubSysExternalPowerFrameBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysExternalPowerFrameBoardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardEntry.setDescription("The diagnostics of an External Power Frame Board.")
upsDiagSubSysExternalPowerFrameBoardFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysExternalPowerFrameBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardIndex.setDescription("The index of an External Power Frame Board.")
upsDiagSubSysExternalPowerFrameBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysExternalPowerFrameBoardStatus.setDescription("The status of the External Power Frame Board.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysChargerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerTableSize.setDescription("The number of Chargers attached to the UPS.")
upsDiagSubSysChargerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20))
if mibBuilder.loadTexts: upsDiagSubSysChargerTable.setDescription("Allows for diagnostics of individual chargers.")
upsDiagSubSysChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysChargerIndex"))
if mibBuilder.loadTexts: upsDiagSubSysChargerEntry.setDescription("The diagnostics of a charger.")
upsDiagSubSysChargerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerIndex.setDescription("The index of a charger.")
upsDiagSubSysChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysChargerStatus.setDescription("The status of the Charger.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysInverterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterTableSize.setDescription("The number of Inverters attached to the UPS.")
upsDiagSubSysInverterTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22))
if mibBuilder.loadTexts: upsDiagSubSysInverterTable.setDescription("Allows for diagnostics of individual Inverters.")
upsDiagSubSysInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysInverterIndex"))
if mibBuilder.loadTexts: upsDiagSubSysInverterEntry.setDescription("The diagnostics of an Inverter.")
upsDiagSubSysInverterFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterIndex.setDescription("The index of an Inverter.")
upsDiagSubSysInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterStatus.setDescription("The status of the Inverter.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysInverterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterFirmwareRev.setDescription("The firmware revision of the Inverter monitor.")
upsDiagSubSysInverterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterHardwareRev.setDescription("The hardware revision of the Inverter monitor.")
upsDiagSubSysInverterSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterSerialNum.setDescription("The serial number of the Inverter monitor.")
upsDiagSubSysInverterManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysInverterManufactureDate.setDescription("The date of manufacture for the Inverter monitor.")
upsDiagSubSysPowerFactorCorrectionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionTableSize.setDescription("The number of Power Factor Correction devices attached to the UPS.")
upsDiagSubSysPowerFactorCorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24))
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionTable.setDescription("Allows for diagnostics of individual PowerFactorCorrections.")
upsDiagSubSysPowerFactorCorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysPowerFactorCorrectionIndex"))
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionEntry.setDescription("The diagnostics of a Power Factor Correction.")
upsDiagSubSysPowerFactorCorrectionFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionFrameIndex.setDescription("The frame index entry.")
upsDiagSubSysPowerFactorCorrectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionIndex.setDescription("The index of a Power Factor Correction.")
upsDiagSubSysPowerFactorCorrectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,7,5,1,2,4,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("offOk", 3), ("onOk", 4), ("offFail", 5), ("onFail", 6), ("lostComm", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionStatus.setDescription("The status of the Power Factor Correction.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\noffOk(3) indicates the device status is off and OK.\nonOk(4) indicates the device status is on and OK.\noffFail(5) indicates the device status is off and failed.\nonFail(6) indicates the device status is on and failed.\nlostComm(7) indicates the device has lost communication.")
upsDiagSubSysPowerFactorCorrectionFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionFirmwareRev.setDescription("The firmware revision of the Power Factor Correction monitor.")
upsDiagSubSysPowerFactorCorrectionHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionHardwareRev.setDescription("The hardware revision of the Power Factor Correction monitor.")
upsDiagSubSysPowerFactorCorrectionSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionSerialNum.setDescription("The serial number of the Power Factor Correction monitor.")
upsDiagSubSysPowerFactorCorrectionManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysPowerFactorCorrectionManufactureDate.setDescription("The date of the manufacture for the Power Factor Correction monitor.")
upsDiagSubSysNetworkComCardTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardTableSize.setDescription("The number of Network Communication Cards attached to the UPS.")
upsDiagSubSysNetworkComCardTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26))
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardTable.setDescription("Allows for getting diagnostics information of an individual Network Communication Card.")
upsDiagSubSysNetworkComCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubSysNetworkComCardIndex"))
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardEntry.setDescription("The diagnostics of a Network Communication Card.")
upsDiagSubSysNetworkComCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardIndex.setDescription("The UPS network and display interface communication card index entry.")
upsDiagSubSysNetworkComCardModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardModelNumber.setDescription("A character string identifying the model number of the UPS network and display interface communication card.\nThis value is set at the factory.")
upsDiagSubSysNetworkComCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardSerialNumber.setDescription("A character string identifying the serial number of the UPS network and display interface communication card.\nThis value is set at the factory.")
upsDiagSubSysNetworkComCardDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardDateOfManufacture.setDescription("The date when the UPS network and display interface communication card was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
upsDiagSubSysNetworkComCardHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardHardwareRev.setDescription("The hardware revision of the UPS network and display interface communication card. \nThis value is set at the factory.")
upsDiagSubSysNetworkComCardFirmwareAppRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardFirmwareAppRev.setDescription("An ID string identifying the application firmware revision of the \nUPS network and display interface communication card.")
upsDiagSubSysNetworkComCardFirmwareAppOSRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubSysNetworkComCardFirmwareAppOSRev.setDescription("An ID string identifying the application operating system firmware revision of the \nUPS network and display interface communication card.")
upsDiagnosticExternalDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5))
upsDiagSwitchGear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1))
upsDiagSwitchGearStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,6,1,2,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearStatus.setDescription("The status of the Switch Gear.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nfail(4) indicates the device status has failed.\nlostComm(5) indicates the device has lost communication.\novertemp(6) indicates the device has an over temperature condition.")
upsDiagSwitchGearInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearInputSwitchStatus.setDescription("The status of the Switch Gear Input Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.")
upsDiagSwitchGearOutputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearOutputSwitchStatus.setDescription("The status of the Switch Gear Output Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.")
upsDiagSwitchGearBypassSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBypassSwitchStatus.setDescription("The status of the Switch Gear Bypass Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.")
upsDiagSwitchGearBypassInputSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBypassInputSwitchStatus.setDescription("The status of the Switch Gear Bypass Input Switch.\nunknown(1) indicates the switch status is unknown.\nnotInstalled(2) indicates the switch is not installed.\nopened(3) indicates the switch is opened.\nclosed(4) indicates the switch is closed.")
upsDiagSwitchGearBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerTableSize.setDescription("The number of switchgear breakers attached to the UPS.")
upsDiagSwitchGearBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7))
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerTable.setDescription("Switchgear breaker table.")
upsDiagSwitchGearBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1)).setIndexNames((0, "PowerNet-MIB", "switchgearBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSwitchGearBreakerEntry.setDescription("A list of switchgear breakers.")
switchgearBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerIndex.setDescription("The index of the switchgear breaker.")
switchgearBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerPresent.setDescription("Indicates if the switchgear breaker is present.\nnotPresent(1) indicates that the breaker is not present.\npresent(2) indicates that the breaker is present.")
switchgearBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchgearBreakerName.setDescription("The name of the switchgear breaker.")
switchgearBreakerType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,6,3,5,)).subtype(namedValues=NamedValues(("unknown", 1), ("unitInputBreaker", 2), ("staticSwitchInputBreaker", 3), ("maintenanceBypassBreaker", 4), ("unitOutputBreaker", 5), ("systemIsolationBreaker", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerType.setDescription("Indicates the switchgear breaker types available in the UPS system.\nIf the UPS is unable to find any attached breakers, this variable\nis set to unknown(1).")
switchgearBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("opened", 2), ("closed", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchgearBreakerStatus.setDescription("The status of switchgear breaker.\nunknown(1) indicates the breaker status is unknown. \nopened (2) indicates the breaker is opened.\nclosed (3) indicates the breaker is closed.")
upsDiagSubFeedBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedBreakerTableSize.setDescription("The number of subfeed breakers attached to the UPS.")
upsDiagSubFeedBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9))
if mibBuilder.loadTexts: upsDiagSubFeedBreakerTable.setDescription("Subfeed breaker table.")
upsDiagSubFeedBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1)).setIndexNames((0, "PowerNet-MIB", "subfeedBreakerIndex"))
if mibBuilder.loadTexts: upsDiagSubFeedBreakerEntry.setDescription("A list of subfeed breakers.")
subfeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerIndex.setDescription("The index of the subfeed breakers.")
subfeedBreakerPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerPresent.setDescription("Indicates if the subfeed breaker is present.\nnotPresent (1) indicates that the breaker is not present.\npresent (2) indicates that the breaker is present.")
subfeedBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerRating.setDescription("The current rating of the installed subfeed breaker.")
subfeedBreakerUpperAcceptPowerWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerUpperAcceptPowerWarning.setDescription("The maximum acceptable load before warning is issued.\nExpressed as percent of the subfeed breaker rating.")
subfeedBreakerUpperAcceptPowerCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 125))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerUpperAcceptPowerCritical.setDescription("The maximum load before a critical alarm occurs.\nExpressed as percent of the subfeed breaker rating.")
subfeedBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subfeedBreakerStatus.setDescription("The status of the Circuit Breaker.\nunknown(1) indicates the circuit breaker status is unknown.\nnotInstalled(2) indicates the circuit breaker is not installed.\nopened(3) indicates the circuit breaker is opened.\nclosed(4) indicates the circuit breaker is closed.")
subfeedBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subfeedBreakerName.setDescription("The name of the subfeed breaker.")
upsDiagSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchGearInstallationLoadPct.setDescription("The actual output load expressed as a percentage of the rating of the UPS.")
upsDiagSubFeedPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11))
if mibBuilder.loadTexts: upsDiagSubFeedPhaseTable.setDescription("A list of subfeed phase table.")
upsDiagSubFeedPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1)).setIndexNames((0, "PowerNet-MIB", "upsDiagSubFeedPhaseIndex"))
if mibBuilder.loadTexts: upsDiagSubFeedPhaseEntry.setDescription("An entry containing information applicable to a\nparticular phase.")
upsDiagSubFeedBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedBreakerIndex.setDescription("The subfeed breaker index.")
upsDiagSubFeedPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseIndex.setDescription("The subfeed phase index.")
upsDiagSubFeedPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseCurrent.setDescription("The subfeed phase current in Amps.")
upsDiagSubFeedPhaseCurrentAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSubFeedPhaseCurrentAlternate.setDescription("The subfeed phase current in tenths of Amps.")
upsDiagSwitchgearSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagSwitchgearSerialNumber.setDescription("The serial number of the UPS I/O Cabinet.")
upsDiagMCCBBox = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2))
upsDiagMCCBBoxStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagMCCBBoxStatus.setDescription("The status of the MCCB Box (Molded Case Circuit Breaker Box) external device.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nopened(3) indicates the circuit is opened.\nclosed(4) indicates the circuit is closed.")
upsDiagTransformer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3))
upsDiagTransformerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,5,3,7,8,4,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("fail", 4), ("lostComm", 5), ("overtemp", 6), ("opened", 7), ("closed", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagTransformerStatus.setDescription("The status of the External Transformer.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nfail(4) indicates the device status has failed.\nlostComm(5) indicates the device has lost communication.\novertemp(6) indicates the device has an over temperature condition.\nopened(7) indicates the circuit is opened.\nclosed(8) indicates the circuit is closed.")
upsDiagFlyWheel = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4))
upsDiagFlyWheelStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("present", 2), ("notPresent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagFlyWheelStatus.setDescription("Indicates the status of flywheel connected to UPS. If the UPS\nis unable to determine the state of flywheel, this variable is\nset to unknown(1).")
upsDiagnosticComBus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6))
upsDiagComBusInternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,5,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusInternalMIMStatus.setDescription("The status of the internal MIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.")
upsDiagComBusInternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,5,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusInternalRIMStatus.setDescription("The status of the internal RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.")
upsDiagComBusMIMtoRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,5,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusMIMtoRIMStatus.setDescription("The status of the MIM to RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.")
upsDiagComBusExternalMIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,5,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusExternalMIMStatus.setDescription("The status of the external MIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.")
upsDiagComBusExternalRIMStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,5,6,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("ok", 3), ("lostComm", 4), ("rxFailure", 5), ("txFailure", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDiagComBusExternalRIMStatus.setDescription("The status of the external RIM communication bus.\nunknown(1) indicates the device status is unknown.\nnotInstalled(2) indicates the device is not installed.\nok(3) indicates the device status is OK.\nlostComm(4) indicates the device has lost communication.\nrxFailure(5) indicates the device has a receive failure.\ntxFailure(6) indicates the device has a transmit failure.")
upsParallelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14))
upsParallelSysLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysLocalAddress.setDescription("Defines the UPS ID number in the parallel system.")
upsParallelSysRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysRemoteAddress.setDescription("Defines the total number of UPSs in parallel.")
upsParallelSysRedundancy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,5,6,)).subtype(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysRedundancy.setDescription("The redundancy warning level for paralleled UPS\nnplus0 (1) indicates that there are no redundant units.\nnplus1 (2) indicates that there is one redundant unit.\nnplus2 (3) indicates that there are two redundant units.\nnplus3 (4) indicates that there are three redundant units.\nnplus4 (5) indicates that there are four redundant unit.\nnplus5 (6) indicates that there are five redundant units.")
upsParallelInputMaximumCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaximumCurrent.setDescription("Maximum input RMS current of the parallel system\nmeasured in Amperes.")
upsParallelTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelTotalOutputPower.setDescription("The Total Ouptut power of UPS in KW \nwhen UPS are configured in parallel\nor -1 if it's unsupported by this UPS.")
upsParallelTotalOutputApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelTotalOutputApparentPower.setDescription("The Total Ouptut Apparent power of UPS in kVA \nwhen UPS are configured in parallel \nor -1 if it's unsupported by this UPS.")
upsParallelInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7))
if mibBuilder.loadTexts: upsParallelInputPhaseTable.setDescription("A list of input table entries.")
upsParallelInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1)).setIndexNames((0, "PowerNet-MIB", "upsParallelInputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelInputPhaseIndex"))
if mibBuilder.loadTexts: upsParallelInputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular input phase.")
upsParallelInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputPhaseTableIndex.setDescription("The parallel unit identifier.")
upsParallelInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputPhaseIndex.setDescription("The input phase identifier.")
upsParallelInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputCurrent.setDescription("The input current in amperes, or -1 if it's\nunsupported by this UPS.")
upsParallelInputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputActivePower.setDescription("The input power in kW, or -1 if it's\nunsupported by this UPS.")
upsParallelInputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputApparentPower.setDescription("The input apparent power in kVA, or -1 if it's\nunsupported by this UPS.")
upsParallelInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputVoltage.setDescription("The input voltage of UPS in volts, or -1 if it's\nunsupported by this UPS.")
upsParallelInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaxVoltage.setDescription("The peak input voltage in VAC measured since the last reset,\nor -1 if it's unsupported by this UPS.")
upsParallelInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputMaxCurrent.setDescription("The peak input current in amperes measured since last reset, \nor -1 if it's unsupported by this UPS.")
upsParallelInputTotalActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputTotalActivePower.setDescription("Total active input power of the parallel system in kW.")
upsParallelInputTotalApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelInputTotalApparentPower.setDescription("Total apparent input power of the parallel system in kVA.")
upsParallelOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8))
if mibBuilder.loadTexts: upsParallelOutputPhaseTable.setDescription("A list of output table entries.  The number of\nentries is given by the sum of the upsPhaseNumOutputPhases.")
upsParallelOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1)).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputPhaseTableIndex"), (0, "PowerNet-MIB", "upsParallelOutputPhaseIndex"))
if mibBuilder.loadTexts: upsParallelOutputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular output phase.")
upsParallelOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPhaseTableIndex.setDescription("The output identifier.")
upsParallelOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPhaseIndex.setDescription("The output phase identifier.")
upsParallelOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputCurrent.setDescription("The output current in amperes drawn \nby the load on the UPS, or -1 if it's unsupported\nby this UPS.")
upsParallelOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputLoad.setDescription("The output load in VA, or -1 if it's unsupported\nby this UPS.")
upsParallelOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPercentLoad.setDescription("The percentage of the UPS load capacity in VA at \npresent redundancy being used on this output phase, \nor -1 if it's unsupported by this UPS.")
upsParallelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputPower.setDescription("The output power in Watts, or -1 if it's\nunsupported by this UPS.")
upsParallelOutputApparentPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9))
if mibBuilder.loadTexts: upsParallelOutputApparentPowerTable.setDescription("A list of output table entries.  The number of entries\nis given by the value of upsOutputNumPhases.")
upsParallelOutputApparentPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1)).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputApparentPowerTableIndex"))
if mibBuilder.loadTexts: upsParallelOutputApparentPowerEntry.setDescription("An entry containing information applicable to a\nparticular output.")
upsParallelOutputApparentPowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputApparentPowerTableIndex.setDescription("The UPS parallel output identifier.")
upsParallelOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputApparentPower.setDescription("The apparent power of each of UPS in kVA\nwhen UPS are configured in parallel.")
upsParallelDiagSubSysBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10))
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerTable.setDescription("Allows for diagnostics of parallel Circuit Breakers.")
upsParallelDiagSubSysBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1)).setIndexNames((0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerFrameIndex"), (0, "PowerNet-MIB", "upsParallelDiagSubSysBreakerIndex"))
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerEntry.setDescription("The diagnostics of Circuit Breaker.")
upsParallelDiagSubSysBreakerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerFrameIndex.setDescription("The Parallel UPS index entry.")
upsParallelDiagSubSysBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerIndex.setDescription("The index of the Circuit Breaker.")
upsParallelDiagSubSysBreakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("notInstalled", 2), ("opened", 3), ("closed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerStatus.setDescription("The status of the Circuit Breaker.\nunknown(1) indicates the circuit breaker status is unknown.\nnotInstalled(2) indicates the circuit breaker is not installed.\nopened(3) indicates the circuit breaker is opened.\nclosed(4) indicates the circuit breaker is closed.")
upsParallelDiagSubSysBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelDiagSubSysBreakerName.setDescription("The name of Circuit Breaker.")
upsParallelOutputTotalPercentLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputTotalPercentLoad.setDescription("The percentage of the UPS total load capacity in kVA \nor -1 if it's unsupported by this UPS.")
upsParallelOutputActivePowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12))
if mibBuilder.loadTexts: upsParallelOutputActivePowerTable.setDescription("A list of output table entries.  The number of entries\nis given by the value of upsParallelSysRemoteAddress.")
upsParallelOutputActivePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1)).setIndexNames((0, "PowerNet-MIB", "upsParallelOutputActivePowerTableIndex"))
if mibBuilder.loadTexts: upsParallelOutputActivePowerEntry.setDescription("An entry containing information applicable to a\nparticular output.")
upsParallelOutputActivePowerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputActivePowerTableIndex.setDescription("The UPS parallel output identifier.")
upsParallelOutputActivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelOutputActivePower.setDescription("The active power of each UPS in kW\nwhen UPSs are configured in parallel.")
upsParallelSysSwitchGearInstallationLoadPct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysSwitchGearInstallationLoadPct.setDescription("The actual output load expressed as a percentage of the rating of the\nParallel UPS system.")
upsParallelSysRedundancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,5,6,)).subtype(namedValues=NamedValues(("nplus0", 1), ("nplus1", 2), ("nplus2", 3), ("nplus3", 4), ("nplus4", 5), ("nplus5", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsParallelSysRedundancyStatus.setDescription("Displays the number of backup or redundant UPSs set up on the parallel system.\nnplus0 (1) no redundant units.\nnplus1 (2) one redundant unit.\nnplus2 (3) two redundant units.\nnplus3 (4) three redundant units.\nnplus4 (5) four redundant units.\nnplus5 (6) five redundant units.")
upsParallelSysName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsParallelSysName.setDescription("An ID string for the group of UPS units in the same parallel system.\nSome products do not allow write operations for this OID.")
upsPhysicalLayout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15))
upsIOFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIOFrameLayoutPositionID.setDescription("Defines the position ID of UPS frame.")
upsBottomFeedFrameLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBottomFeedFrameLayoutPositionID.setDescription("Defines the position ID of bottom feed frame.")
upsSwitchGearLayoutPositionID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSwitchGearLayoutPositionID.setDescription("Defines the position ID of switchgear.")
upsBatteryFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryFrameLayoutTableSize.setDescription("The number of battery frames.")
upsBatteryFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5))
if mibBuilder.loadTexts: upsBatteryFrameLayoutTable.setDescription("Battery frame layout position ID table.")
upsBatteryFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1)).setIndexNames((0, "PowerNet-MIB", "batteryFrameIndex"))
if mibBuilder.loadTexts: upsBatteryFrameLayoutEntry.setDescription("A list of layout position IDs of battery frames.")
batteryFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFrameIndex.setDescription("The index of the battery frame.")
batteryFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFramePositionID.setDescription("Defines the position ID of each of the battery frames in the row.")
upsSideCarFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsSideCarFrameLayoutTableSize.setDescription("The number of sidecar frames.")
upsSideCarFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7))
if mibBuilder.loadTexts: upsSideCarFrameLayoutTable.setDescription("Sidecar frame layout position ID table.")
upsSideCarFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1)).setIndexNames((0, "PowerNet-MIB", "sideCarFrameIndex"))
if mibBuilder.loadTexts: upsSideCarFrameLayoutEntry.setDescription("A list of sidecar frame layout position IDs.")
sideCarFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sideCarFrameIndex.setDescription("The index of the sidecar frame.")
sideCarFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sideCarFramePositionID.setDescription("Defines the position ID of each of the sidecar frames in the row.")
upsPowerFrameLayoutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsPowerFrameLayoutTableSize.setDescription("The number of power frames.")
upsPowerFrameLayoutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9))
if mibBuilder.loadTexts: upsPowerFrameLayoutTable.setDescription("Power frame layout position ID table.")
upsPowerFrameLayoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1)).setIndexNames((0, "PowerNet-MIB", "powerFrameIndex"))
if mibBuilder.loadTexts: upsPowerFrameLayoutEntry.setDescription("A list of power frame layout position IDs.")
powerFrameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFrameIndex.setDescription("The index of the power frame.")
powerFramePositionID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFramePositionID.setDescription("Defines the position ID of each of the power frames in the row.")
upsIntegratedATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16))
upsIntegratedATSSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("noSourceSelected", 1), ("unknown", 2), ("sourceA", 3), ("sourceB", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSelectedSource.setDescription("The source which is currently selected by the ATS to supply the UPS.")
upsIntegratedATSPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("upsIntegratedATSNoSourcePreference", 1), ("upsIntegratedATSPreferSourceA", 2), ("upsIntegratedATSPreferSourceB", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSPreferredSource.setDescription("The preferred source of power when both sources are OK.")
upsIntegratedATSUpsReturnStaggering = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSUpsReturnStaggering.setDescription("This is a delay factor applied to the retransfer of this UPS with integrated ATS.\nWhen multiple UPSs are in use from a single source, each UPS can have a unique delay value,\nwhich will reduce inrush by preventing all UPSs from transferring at the same time.")
upsIntegratedATSSourceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceTableSize.setDescription("The number of input sources for this integrated ATS.")
upsIntegratedATSSourceTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5))
if mibBuilder.loadTexts: upsIntegratedATSSourceTable.setDescription("Allows for getting status and settings for the ATS input sources.\nThe number of entries is contained in the upsIntegratedATSSourceTableSize OID.")
upsIntegratedATSSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1)).setIndexNames((0, "PowerNet-MIB", "upsIntegratedATSSourceIndex"))
if mibBuilder.loadTexts: upsIntegratedATSSourceEntry.setDescription("The input source status to get.")
upsIntegratedATSSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceIndex.setDescription("The index to the input source entry.")
upsIntegratedATSSourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceName.setDescription("The name of the input source. This OID is provided\nfor informational purposes only.")
upsIntegratedATSSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("upsIntegratedATSSourceGood", 1), ("upsIntegratedATSSourceBad", 2), ("upsIntegratedATSSourceUnknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIntegratedATSSourceStatus.setDescription("Getting this variable will return the input source status.")
upsIntegratedATSLineFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSLineFailDelay.setDescription("The delay between a selected input source becoming bad, and the ATS switching away from that source.\nThis delay is used to make sure that the line has truly failed before the ATS will be switched.\nSpecified in seconds.")
upsIntegratedATSLineStabilityDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsIntegratedATSLineStabilityDelay.setDescription("The delay between an unselected input source becoming good, and the ATS switching to that source.\nThis delay is used to make sure that the line has truly returned before the ATS will be switched.\nSpecified in seconds.")
upsDCOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17))
upsDCOutputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1))
upsDCOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusTableSize.setDescription("The number of DC outputs on the UPS.")
upsDCOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2))
if mibBuilder.loadTexts: upsDCOutputStatusTable.setDescription("Provides status information on UPS DC outputs.\nThe number of entries is contained in the upsDCOutputStatusTableSize OID.")
upsDCOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "upsDCOutputStatusTableIndex"))
if mibBuilder.loadTexts: upsDCOutputStatusEntry.setDescription("The DC output.")
upsDCOutputStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusTableIndex.setDescription("The index to the DC output status entry.")
upsDCOutputStatusVoltageNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusVoltageNominal.setDescription("The desired voltage for this output in tenths of VDC. \nWhen the output is on and there are no fault conditions, \nthe actual voltage should be near the nominal.")
upsDCOutputStatusCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusCurrentRating.setDescription("The amount of current this output is able to supply in\ntenths of amperes.")
upsDCOutputStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusVoltage.setDescription("The voltage measured on this output in tenths of VDC.")
upsDCOutputStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusCurrent.setDescription("The current drawn by the load measured on this output \nin tenths of amperes.")
upsDCOutputStatusAbnormalConditions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 17, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsDCOutputStatusAbnormalConditions.setDescription("An ASCII string containing flags representing active\noutput faults. If the Network Card is unable to determine\nthe state of the UPS, this variable is set to 'UNKNOWN'.\n\nThe flags are numbered 1 onward, read from left to\nright. The flags are defined as follows starting from 1:\n\nFlag  1: Output Overload\nFlag  2: Output Short Circuit\nFlag  3: Output Over Voltage\nFlag  6: Backfeed Relay Fault\nFlag 10: Bypass Relay Fault\nFlag 19: Output Fault (over or undervoltage)\nFlag 20: Bus Converter Fault\nFlag 21: Sensor Fault")
measureUps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2))
mUpsEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1))
mUpsEnvironAmbientTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 1), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironAmbientTemperature.setDescription("The ambient temperature in Celsius for Probe 1.")
mUpsEnvironRelativeHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironRelativeHumidity.setDescription("The relative humidity as a percentage for Probe 1.")
mUpsEnvironAmbientTemperature2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 3), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironAmbientTemperature2.setDescription("The ambient temperature in Celsius for Probe 2.")
mUpsEnvironRelativeHumidity2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsEnvironRelativeHumidity2.setDescription("The relative humidity as a percentage for Probe 2.")
mUpsContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2))
mUpsContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mUpsContactNumContacts.setDescription("The number of contacts supported by the Measure-UPS.")
mUpsContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2))
if mibBuilder.loadTexts: mUpsContactTable.setDescription("A list of contacts supported by the Measure-UPS.")
mUpsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "contactNumber"))
if mibBuilder.loadTexts: mUpsContactEntry.setDescription("A contact entry containing information for a given contact.")
contactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contactNumber.setDescription("An index identifying the contact on the Measure-UPS.")
normalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("open", 2), ("closed", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: normalState.setDescription("The normal operating position of the contact. If the normal\noperating position cannot be set then it is controlled via the\ndip switch on the Measure-UPS and is therefore read-only.")
description = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: description.setDescription("The description of the purpose/use of the contact.")
monitoringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitoringStatus.setDescription("A flag indicating whether this contact is \nmonitored, or not.")
currentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("noFault", 2), ("fault", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStatus.setDescription("This value indicates the current state of the contact.\nIf the contact is not in its normal state.  This value\nis set to fault(2).")
miniSNMPadapter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3))
serialPort = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1))
serialPort1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 1))
serialPort2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2))
serialPort2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1))
serialPort2Mode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("localConsole", 1), ("passthrough", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialPort2Mode.setDescription("Setting this variable to passthrough will enable mini's port2\nbehave like a UPS port. Choosing localConsole will enable the port\nto be used as local console.")
serialPort2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2))
setPulseOnTXD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("noSetPulseOnTXD", 1), ("setPulseOnTXD", 2), ("setTXDLow", 3), ("setTXDHigh", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setPulseOnTXD.setDescription("Setting this variable to setPulseOnTXD(2) \ncauses adapter to generate a PULSE on TXD pin of serial port 2.\nThe duration in the prototype implementation will be 1 second.\n\nSetting this value to noSetPulseOnTXD(1) has no\neffect.\n\nThe value noSetPulseOnTXD(1) will always be returned\nwhen the variable is read.\n\nSetting this value to setTXDLow(3), or setTXDHigh(4) will keep TXD\nalways low or high respectively.")
masterswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4))
sPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1))
sPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRev.setDescription("The hardware revision of the PDU. This value \nis set at the factory.")
sPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRev.setDescription("An 8 byte ID string identifying the PDU firmware revision. \nThis value is set at the factory.")
sPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufacture.setDescription("The date when the PDU was manufactured in mm/dd/yy format.\nThis value is set at the factory. The year 2000 will be \nrepresented by 00.")
sPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumber.setDescription("A 10-character string identifying the model number of \nthe PDU internal. This value is set at the factory.")
sPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumber.setDescription("A 12-character string identifying the serial number of \nthe PDU internal microprocessor. This value is set at\nthe factory.")
sPDUMasterControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2))
sPDUMasterControlSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,7,2,4,6,)).subtype(namedValues=NamedValues(("turnAllOnNow", 1), ("turnAllOnSequence", 2), ("turnAllOffNow", 3), ("rebootAllNow", 4), ("rebootAllSequence", 5), ("noCommand", 6), ("turnAllOffSequence", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlSwitch.setDescription("Setting this OID to turnAllOnNow (1) will turn all outlets\non immediately.\n\nSetting this OID to turnAllOnSequence (2) will turn all outlets\non as defined by each outlet's sPDUOutletPowerOnTime OID value.\n\nSetting this OID to turnAllOff (3) will turn all outlets\noff immediately.\n\nSetting this OID to rebootAllNow (4) will reboot all outlets\nimmediately.\n\nFor MasterSwitch firmware version 1.X, setting this OID to \nrebootAllSequence (5) reboots all outlets, with power returned \nto the outlets in the sequence defined by each outlet's \nsPDUOutletPowerOnTime OID value.\n\nFor MasterSwitch firmware version 2.X, setting this OID to \nrebootAllSequence (5) will cause a turnAllOffSequence to be performed. \nOnce all outlets are off, the MasterSwitch will then delay the \nsPDUMasterConfigReboot OID time, and then perform a turnAllOnSequence.    \n\nFor MasterSwitch firmware version 2.X, setting this OID to \nturnAllOffSequence (7) will turn all outlets off as defined by \neach outlet's sPDUOutletPowerOffTime OID value.\n\nFor MasterSwitch firmware version 1.X, setting this OID to \nturnAllOffSequence (7) will have no effect.\n\nGetting this OID will return the noCommand (6) value.")
sPDUMasterState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterState.setDescription("Getting this OID will cause the status of all outlets to be \nreturned. This OID is provided for informational purposes only.\nTo change the outlet state, the user should use the sPDUOutletCtl\nOID in the sPDUOutletControlTable.\n\nThe format of the data returned is a character string consisting\nof the word 'On' if the outlet is on or 'Off' if the outlet is\noff. At least one space will delimit each outlet entry in the \nstring. \n\nIf the outlet states are unknown, the character string 'Unknown'\nwill be returned. This signifies that there is an inconsistency \nin the PDU. In the rare case that this should happen, the user \nis advised to shut down all equipment powered by the PDU and \nthen cycle the PDU's power. This will put the PDU in a consistent\nstate.")
sPDUMasterPending = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterPending.setDescription("Getting this OID will cause the command pending status of all outlets to be returned.\n\nThe format of the data returned is a character string consisting\nof the word 'Yes' if a command is pending for the outlet or 'No'\nif there is no command pending for the outlet. At least one \nspace will delimit each outlet entry in the string. \n\nIf the pending states are unknown, the character string 'Unknown'\nwill be returned. This signifies that there is an inconsistency \nin the PDU. In the rare case that this should happen, the user \nis advised to shut down all equipment powered by the PDU and then\ncycle the PDU's power. This will put the PDU in a consistent state.")
sPDUMasterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3))
sPDUMasterConfigPowerOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigPowerOn.setDescription(" The amount of delay, in seconds, between when\npower is provided to the PDU and when the PDU\nprovides basic master power to the outlets.       \n\nAllowed values are:\n\n-1 never apply power automatically.\n0 apply power immediately.\n15 apply power in 15 seconds.\n30 apply power in 30 seconds.\n45 apply power in 45 seconds.\n60 apply power in 60 seconds  (1 minute).\n120 apply power in 120 seconds (2 minutes).\n300 apply power in 300 seconds (5 minutes).\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUMasterConfigReboot = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigReboot.setDescription("During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is read-only for the MasterSwitch version 2.X and is the \nmaximum sPDUOutletRebootDuration OID of the individual outlets.")
sPDUMasterConfigPDUName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigPDUName.setDescription("The name of the PDU.")
sPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4))
sPDUOutletControlTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlTableSize.setDescription("The number of outlets for the PDU.")
sPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2))
if mibBuilder.loadTexts: sPDUOutletControlTable.setDescription("Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUOutletControlTableSize OID.")
sPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlIndex"))
if mibBuilder.loadTexts: sPDUOutletControlEntry.setDescription("The outlets to control.")
sPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlIndex.setDescription("The index to the outlet entry.")
sPDUOutletPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletPending.setDescription("Reports whether the current outlet has a pending command.\n\nIf the commandPendingUnknown (3) value is returned, all \ndevices powered by the PDU should be shut down. The PDU's\npower should then be cycled to clear this condition.")
sPDUOutletCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(5,2,1,3,7,4,6,)).subtype(namedValues=NamedValues(("outletOn", 1), ("outletOff", 2), ("outletReboot", 3), ("outletUnknown", 4), ("outletOnWithDelay", 5), ("outletOffWithDelay", 6), ("outletRebootWithDelay", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletCtl.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the outletOn (1) value will be returned.\nIf the outlet is off, the outletOff (2) value will be\nreturned. \n\nIf the state of the outlet cannot be determined, the \noutletUnknown (4) value will be returned. If the \noutletUnknown condition should occur, all devices \npowered by the PDU should be shut down. The PDU's power \nshould then be cycled to clear this condition.\n\nSetting this variable to outletOn (1) will turn the outlet on.\n\nSetting this variable to outletOff (2) will turn the outlet off. \n\nSetting this variable to outletReboot (3) will reboot the outlet.\n\nSetting this variable to outletOnWithDelay (5) will turn the outlet on\nafter the sPDUOutletPowerOnTime OID has elapsed. This option is not\nvalid for MasterSwitch firmware version 1.X.\n\nSetting this variable to outletOffWithDelay (6) will turn the outlet off\nafter the sPDUOutletPowerOffTime OID has elapsed. This option is not valid\nfor MasterSwitch firmware version 1.X.\n\nSetting this variable to outletRebootWithDelay (7) will turn the outlet off\nafter the sPDUOutletPowerOffTime OID has elapsed, wait the sPDUOutletRebootDuration\nOID time, then turn the outlet back on.  \nThis option is not valid for MasterSwitch firmware version 1.X.")
sPDUOutletCtlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletCtlName.setDescription("The name of the outlet. Maximum size is 20 characters.\nThis OID is provided for informational purposes only.\nThis value is set by the sPDUOutletName OID.")
sPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5))
sPDUOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigTableSize.setDescription("The number of outlets for the PDU.")
sPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2))
if mibBuilder.loadTexts: sPDUOutletConfigTable.setDescription("The list of outlets to configure. The number of\nentries is defined by the sPDUOutletConfigTableSize\nOID.")
sPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigEntry.setDescription("The outlets to control.")
sPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigIndex.setDescription("The index to the outlet entry.")
sPDUOutletPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletPowerOnTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering on when the MasterSwitch is powered on.\n       \nAllowed values are:\n\n-1 never power on automatically.\n0  power on with the Master Switch.\n15 power on 15 seconds after the MasterSwitch has power applied.\n30 power on 30 seconds after the MasterSwitch has power applied.\n45 power on 45 seconds after the MasterSwitch has power applied.\n60 power on 60 seconds (1 minute) after the MasterSwitch has power applied.\n120 power on 120 seconds (2 minutes) after the MasterSwitch has power applied.\n300 power on 300 seconds (5 minutes) after the MasterSwitch has power applied.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletName.setDescription("The name of the outlet. Maximum size is 20 characters.")
sPDUOutletPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletPowerOffTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering off.\n       \nAllowed values are:\n\n-1 never power off automatically.\n0  power off with the MasterSwitch.\n15 power off 15 seconds after being commanded.\n30 power off 30 seconds after being commanded.\n45 power off 45 seconds after being commanded.\n60 power off 60 seconds (1 minute) after being commanded.\n120 power off 120 seconds (2 minutes) after being commanded.\n300 power off 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is not available for MasterSwitch firmware version 1.X.")
sPDUOutletRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletRebootDuration.setDescription("During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the PDU interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.\n\nThis OID is not available for MasterSwitch firmware version 1.X.")
masterswitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5))
sPDUIdentVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1))
sPDUIdentVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentVMTableSize.setDescription("The number of MasterSwitch VMs controllable\nby this IP address.")
sPDUIdentVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2))
if mibBuilder.loadTexts: sPDUIdentVMTable.setDescription("Allows for query of the individual MasterSwitch VMs. \nThe number of entries is contained in the \nsPDUIdentVMTableSize OID.")
sPDUIdentVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUIdentVMIndex"))
if mibBuilder.loadTexts: sPDUIdentVMEntry.setDescription("The MasterSwitch VMs to query.")
sPDUIdentVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentVMIndex.setDescription("The index to the MasterSwitch VM entry.")
sPDUIdentNameVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentNameVM.setDescription("A 23-character string identifying the \nMasterSwitch VM. ")
sPDUIdentHardwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRevVM.setDescription("The hardware version of the MasterSwitch VM. \nThis value is set at the factory.")
sPDUIdentFirmwareRevVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRevVM.setDescription("An 6-character ID string identifying the MasterSwitch VM \nfirmware version. This value is set at the factory.")
sPDUIdentDateOfManufactureVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufactureVM.setDescription("The date when the MasterSwitch VM was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ")
sPDUIdentModelNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumberVM.setDescription("A 17-character string identifying the model number of \nthe MasterSwitch VM. This value is set at the factory.")
sPDUIdentSerialNumberVM = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumberVM.setDescription("A 17-character string identifying the serial number of \nthe MasterSwitch VM. This value is set at the factory.")
sPDUMasterControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2))
sPDUMasterControlVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMTableSize.setDescription("The number of MasterSwitch VMs controllable\nby this IP address.")
sPDUMasterControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2))
if mibBuilder.loadTexts: sPDUMasterControlVMTable.setDescription("Allows for control of the individual MasterSwitch VMs.\nThe number of entries is contained in the \nsPDUMasterControlVMTableSize OID.")
sPDUMasterControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlVMIndex"))
if mibBuilder.loadTexts: sPDUMasterControlVMEntry.setDescription("The MasterSwitch VMs to control.")
sPDUMasterControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMIndex.setDescription("The index to the MasterSwitch VM entry.")
sPDUMasterControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlVMName.setDescription("The name of the MasterSwitch VM. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigVMName OID.")
sPDUMasterControlVMCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,10,2,6,9,7,11,8,5,)).subtype(namedValues=NamedValues(("noCommandAllVM", 1), ("cancelAllPendingCommandsVM", 10), ("audioAlarmMute", 11), ("immediateAllOnVM", 2), ("immediateAllOffVM", 3), ("immediateAllRebootVM", 4), ("delayedAllOnVM", 5), ("delayedAllOffVM", 6), ("sequencedAllRebootVM", 7), ("delayedAllRebootVM", 8), ("delayedSequenceAllRebootVM", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlVMCommand.setDescription("Setting this OID to immediateAllOnVM (2) will turn all outlets\non immediately.\n\nSetting this OID to immediateAllOffVM (3) will turn all outlets\noff immediately.\n\nSetting this OID to immediateAllRebootVM (4) will reboot all outlets\nimmediately.\n\nSetting this OID to delayedAllOnVM (5) will turn all outlets on as \ndefined by each outlet's sPDUOutletConfigVMPowerOnTime OID value. \n      \nSetting this OID to delayedAllOffVM (6) will turn all outlets \noff as defined by each outlet's sPDUOutletConfigVMPowerOffTime OID value.\n\nSetting this OID to sequencedAllRebootVM (7) will cause a \nimmediateAllOffVM command to be performed. The MasterSwitch VM will \nthen delay the sPDUMasterStatusVMRebootDuration OID time, and then \nperform a delayedAllOnVM command.    \n\nSetting this OID to delayedAllRebootVM (8) will cause a delayedAllOffVM\ncommand to be performed. Each outlet will then wait its \nsPDUOutletConfigVMRebootDuration before returning power to the outlet.\n\nSetting this OID to delayedSequenceAllRebootVM (9) will cause a \ndelayedAllOffVM command to be performed. Once all outlets are off, \nthe MasterSwitch VM will then delay the sPDUMasterStatusVMRebootDuration \nOID time, and then perform a delayedAllOnVM command.    \n\nSetting this OID to cancelAllPendingCommandsVM (10) will cause all pending\ncommands on the MasterSwitch VM to be canceled.\n\n\nSetting this OID to audioAlarmMute (11) will temporarily silence the audible\nalarm for the duration of the current overload condition. The audible alarm\nwill be activated on subsequent overload alarms.\n\nGetting this OID will return the noCommandAllVM (1) value.")
sPDUMasterConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3))
sPDUMasterConfigVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigVMTableSize.setDescription("The number of MasterSwitch VMs configurable\nby this IP address.")
sPDUMasterConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2))
if mibBuilder.loadTexts: sPDUMasterConfigVMTable.setDescription("Allows for configuration of the individual MasterSwitch VMs.\nThe number of entries is contained in the \nsPDUMasterConfigVMTableSize OID.")
sPDUMasterConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigVMIndex"))
if mibBuilder.loadTexts: sPDUMasterConfigVMEntry.setDescription("The MasterSwitch VMs to configure.")
sPDUMasterConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigVMIndex.setDescription("The index to the MasterSwitch VM entry.")
sPDUMasterConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMName.setDescription("The name of the MasterSwitch VM. Maximum size is 23 characters.")
sPDUMasterConfigVMColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMColdstartDelay.setDescription(" The amount of delay, in seconds, between when\npower is provided to the MasterSwitch VM and \nwhen the MasterSwitch VM provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n-1 never apply power automatically.\n0 apply power immediately.\n15 apply power in 15 seconds.\n30 apply power in 30 seconds.\n45 apply power in 45 seconds.\n60 apply power in 60 seconds  (1 minute).\n120 apply power in 120 seconds (2 minutes).\n300 apply power in 300 seconds (5 minutes).\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUMasterConfigVMAudioAlarmActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("audioAlarmActiveNever", 1), ("audioAlarmActiveOnOverload", 2), ("audioAlarmActiveOnOverloadImminent", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMAudioAlarmActivated.setDescription("Setting this OID to audioAlarmActiveNever (1) will disable\nthe audio alarm on the MasterSwitch VM.\n\nSetting this OID to audioAlarmActiveOnOverload (2) will \nactivate the audio alarm on the MasterSwitch VM when an\noverload condition is present.       \n\nSetting this OID to audioAlarmActiveOnOverloadImminent (3) \nwill activate the audio alarm on the MasterSwitch VM when\nthe load on the MasterSwitch VM has surpassed the\nsPDUMasterConfigVMHighLoadWarningThreshold OID value.")
sPDUMasterConfigVMHighLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMHighLoadWarningThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented as a percentage of full load.")
sPDUMasterConfigVMLowLoadWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMLowLoadWarningThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented as a percentage of full load.")
sPDUMasterConfigVMOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnWarning", 2), ("restrictOnOverload", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigVMOverloadRestriction.setDescription("This OID controls the behavior of the MasterSwitch VM\nwhen an overload condition is possible and additional \noutlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets to turn on.\n\nSetting this OID to restrictOnWarning (2) will not allow \noutlets to turn on if the sPDUMasterConfigVMHighLoadWarningThreshold\nOID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets to turn on if the MasterSwitch Vm is in an \noverload condition.")
sPDUMasterStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4))
sPDUMasterStatusVMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMTableSize.setDescription("The number of MasterSwitch VMs at\nthis IP address.")
sPDUMasterStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2))
if mibBuilder.loadTexts: sPDUMasterStatusVMTable.setDescription("Allows for gathering of status from the individual \nMasterSwitch VMs. The number of entries is contained \nin the sPDUMasterStatusVMTableSize OID.")
sPDUMasterStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusVMIndex"))
if mibBuilder.loadTexts: sPDUMasterStatusVMEntry.setDescription("The MasterSwitch VMs to gather status from.")
sPDUMasterStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMIndex.setDescription("The index to the MasterSwitch VM entry.")
sPDUMasterStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMName.setDescription("The name of the MasterSwitch VM. Maximum size is 23 characters.")
sPDUMasterStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("commandPendingMasterTrueVM", 1), ("commandPendingMasterFalseVM", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMCommandPending.setDescription("Getting this OID will return commandPendingMasterTrueVM (1)\nif the MasterSwitch VM has a pending command on any of its\noutlets.\n\ncommandPendingMasterFalseVM (2) will be returned if there are\nno pending commands.")
sPDUMasterStatusVMOverloadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("overloadConditionTrueVM", 1), ("overloadConditionFalseVM", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMOverloadCondition.setDescription("Getting this OID will return overloadConditionTrueVM (1)\nif the sPDUMasterConfigVMHighLoadWarningThreshold OID is\nviolated.\n\noverloadConditionFalseVM (2) will be returned if the \nsPDUMasterConfigVMHighLoadWarningThreshold OID is not\nviolated.")
sPDUMasterStatusVMLowLoadCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("lowLoadConditionTrueVM", 1), ("lowLoadConditionFalseVM", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMLowLoadCondition.setDescription("Getting this OID will return lowLoadConditionTrueVM (1)\nif the sPDUMasterConfigVMLowLoadWarningThreshold OID is\nviolated.\n\nlowLoadConditionFalseVM (2) will be returned if the \nsPDUMasterConfigVMHighLoadWarningThreshold OID is not\nviolated. ")
sPDUMasterStatusVMCurrentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMCurrentLoad.setDescription("Getting this OID will return the total amount of power\nbeing consumed by the load. It is represented as a \npercentage of full load.")
sPDUMasterStatusVMMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMMaxLoad.setDescription("Getting this OID will return the total amount of power\nthat this MasterSwitch VM can provide. It is represented\nin Amps.")
sPDUMasterStatusVMOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMOutletCount.setDescription("Getting this OID will return the number of controllable\noutlets for this MasterSwitch VM.")
sPDUMasterStatusVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusVMRebootDuration.setDescription("Getting this OID will return the largest\nsPDUOutletConfigVMRebootDuration OID time \nfor this MasterSwitch VM.")
sPDUOutletControlVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5))
sPDUOutletControlVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1))
if mibBuilder.loadTexts: sPDUOutletControlVMTable.setDescription("Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.")
sPDUOutletControlVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlVMIndex"), (0, "PowerNet-MIB", "sPDUOutletControlVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletControlVMEntry.setDescription("The outlets to control.")
sPDUOutletControlVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMIndex.setDescription("The index to the MasterSwitch VM.")
sPDUOutletControlVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMName.setDescription("The name of the MasterSwitch VM. Maximum size is 23 characters.\nThis OID is provided for informational purposes only.")
sPDUOutletControlVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletControlVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletName.setDescription("The name of the outlet. Maximum size is 23 characters.\nThis OID is provided for informational purposes only.")
sPDUOutletControlVMOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,6,2,5,7,)).subtype(namedValues=NamedValues(("immediateOnVM", 1), ("immediateOffVM", 2), ("immediateRebootVM", 3), ("delayedOnVM", 4), ("delayedOffVM", 5), ("delayedRebootVM", 6), ("cancelPendingCommandVM", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletControlVMOutletCommand.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnVM (1) value will be returned.\nIf the outlet is off, the immediateOffVM (2) value will be\nreturned. \n\n\nSetting this variable to immediateOnVM (1) will immediately turn the outlet on.\n\nSetting this variable to immediateOffVM (2) will immediately turn the outlet off. \n\nSetting this variable to immediateRebootVM (3) will immediately reboot the outlet.\n\nSetting this variable to delayedOnVM (4) will turn the outlet on\nafter the sPDUOutletConfigVMPowerOnTime OID time has elapsed.   \n\nSetting this variable to delayedOffVM (5) will turn the outlet off\nafter the sPDUOutletConfigVMPowerOffTime OID time has elapsed.\n\nSetting this variable to delayedRebootVM  (6) will cause the \nMasterSwitch VM to perform a delayedOffVM command, wait the \nsPDUOutletConfigVMRebootDuration OID time, and then perform the\nimmediateOnVM command.\n\nSetting this variable to cancelPendingCommandVM (7) will cause any\npending command to this outlet to be canceled.")
sPDUOutletConfigVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6))
sPDUOutletConfigVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1))
if mibBuilder.loadTexts: sPDUOutletConfigVMTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.")
sPDUOutletConfigVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigVMIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigVMEntry.setDescription("The outlets to configure.")
sPDUOutletConfigVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMIndex.setDescription("The index to the MasterSwitch VM.")
sPDUOutletConfigVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMName.setDescription("The name of the MasterSwitch VM. Maximum size is 23 characters.")
sPDUOutletConfigVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigVMOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletConfigVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMOutletName.setDescription("The name of the outlet. Maximum size is 23 characters.")
sPDUOutletConfigVMPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMPowerOnTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering on at coldstart or when a command that requires \na turn-on delay is issued.\n       \nAllowed values are:\n\n-1 never power on.\n0  power on immediately.\n15 power on 15 seconds after being commanded.\n30 power on 30 seconds after being commanded.\n45 power on 45 seconds after being commanded.\n60 power on 60 seconds (1 minute) after being commanded.\n120 power on 120 seconds (2 minutes) after being commanded.\n300 power on 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUOutletConfigVMPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMPowerOffTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering off when a command that requires \na turn-off delay is issued.\n\n       \nAllowed values are:\n\n-1 never power off automatically.\n0  power off immediately.\n15 power off 15 seconds after being commanded.\n30 power off 30 seconds after being commanded.\n45 power off 45 seconds after being commanded.\n60 power off 60 seconds (1 minute) after being commanded.\n120 power off 120 seconds (2 minutes) after being commanded.\n300 power off 300 seconds (5 minutes) after being commanded.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUOutletConfigVMRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigVMRebootDuration.setDescription("During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed values are:\n\n5 wait 5 seconds between off/on.\n10 wait 10 seconds between off/on.\n15 wait 15 seconds between off/on.\n20 wait 20 seconds between off/on.\n30 wait 30 seconds between off/on.\n45 wait 45 seconds between off/on.\n60 wait 60 seconds (1 minute) between off/on.\n\nIf a value other than a supported value is provided in a \nset request, the MasterSwitch VM interprets it as the next lower\nacceptable value.  If the provided value is lower than\nthe lowest acceptable value, the lowest acceptable \nvalue is used.")
sPDUOutletStatusVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7))
sPDUOutletStatusVMTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1))
if mibBuilder.loadTexts: sPDUOutletStatusVMTable.setDescription("Allows for getting of status of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.")
sPDUOutletStatusVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusVMIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusVMOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletStatusVMEntry.setDescription("The outlets to gather status from.")
sPDUOutletStatusVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMIndex.setDescription("The index to the MasterSwitch VM.")
sPDUOutletStatusVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMName.setDescription("The name of the MasterSwitch VM. Maximum size is 23 characters.")
sPDUOutletStatusVMOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletStatusVMOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletName.setDescription("The name of the outlet. Maximum size is 23 characters.")
sPDUOutletStatusVMOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("outletStatusVMOn", 1), ("outletStatusVMOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMOutletState.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusOnVM (1) value will be returned.\nIf the outlet is off, the outletStatusOffVM (2) value will be\nreturned. ")
sPDUOutletStatusVMCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("outletStatusVMCommandPending", 1), ("outletStatusVMNoCommandPending", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusVMCommandPending.setDescription("Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusVMCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusVMNoCommandPending (2)\nwill be returned.")
masterswitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6))
sPDUIdentMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1))
sPDUIdentMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentMSPTableSize.setDescription("The number of MasterSwitch pluses controllable\nby this IP address.")
sPDUIdentMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2))
if mibBuilder.loadTexts: sPDUIdentMSPTable.setDescription("Allows for query of the individual MasterSwitch pluses. \nThe number of entries is contained in the \nsPDUIdentMSPTableSize OID.")
sPDUIdentMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUIdentMSPIndex"))
if mibBuilder.loadTexts: sPDUIdentMSPEntry.setDescription("The MasterSwitch pluses to query.")
sPDUIdentMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentMSPIndex.setDescription("The index to the MasterSwitch plus entry.")
sPDUIdentNameMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentNameMSP.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUIdentHardwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentHardwareRevMSP.setDescription("The hardware version of the MasterSwitch plus. \nThis value is set at the factory.")
sPDUIdentFirmwareRevMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentFirmwareRevMSP.setDescription("An 6-character ID string identifying the MasterSwitch plus \nfirmware version. This value is set at the factory.")
sPDUIdentDateOfManufactureMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentDateOfManufactureMSP.setDescription("The date when the MasterSwitch plus was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ")
sPDUIdentModelNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentModelNumberMSP.setDescription("A 17-character string identifying the model number of \nthe MasterSwitch plus. This value is set at the factory.")
sPDUIdentSerialNumberMSP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUIdentSerialNumberMSP.setDescription("A 17-character string identifying the serial number of \nthe MasterSwitch plus. This value is set at the factory.")
sPDUMasterControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2))
sPDUMasterControlMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPTableSize.setDescription("The number of MasterSwitch pluses controllable\nby this IP address.")
sPDUMasterControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2))
if mibBuilder.loadTexts: sPDUMasterControlMSPTable.setDescription("Allows for control of the individual MasterSwitch pluses.\nThe number of entries is contained in the \nsPDUMasterControlMSPTableSize OID.")
sPDUMasterControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterControlMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterControlMSPEntry.setDescription("The MasterSwitch pluses to control.")
sPDUMasterControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPIndex.setDescription("The index to the MasterSwitch plus entry.")
sPDUMasterControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterControlMSPName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUMasterControlMSPCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(8,5,6,2,9,7,3,1,4,10,)).subtype(namedValues=NamedValues(("noCommandAllMSP", 1), ("restoreFactoryDefaultsMSP", 10), ("immediateAllOnMSP", 2), ("sequencedAllOnMSP", 3), ("immediateAllOffMSP", 4), ("gracefulAllRebootMSP", 5), ("immediateAllRebootMSP", 6), ("gracefulAllShutdownMSP", 7), ("overrideAllBatCapThreshMSP", 8), ("cancelAllPendingCommandsMSP", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterControlMSPCommand.setDescription("Setting this OID to immediateAllOnMSP (2) will turn all outlets\non immediately.\n\nSetting this OID to sequencedAllOnMSP (3) will turn all outlets\non as defined by each outlet's sPDUOutletConfigMSPPowerOnDelay OID value.\n\nSetting this OID to immediateAllOffMSP (4) will turn all outlets\noff immediately.\n\nSetting this OID to gracefulAllRebootMSP (5) will reboot all outlets\n(after the device running PowerChute confirms shutdown) as defined \nby each outlet's sPDUOutletConfigMSPRebootDuration OID time value.\n\nSetting this OID to immediateAllRebootMSP (6) will reboot all outlets\nimmediately.\n\nSetting this OID to gracefulAllShutdownMSP (7) will shutdown all outlets\n(after the device running PowerChute confirms shutdown) as defined \nby each outlet's sPDUOutletConfigMSPPowerOffDelay OID time value.  Each \noutlet will then turn on after the sum of its \nsPDUOutletConfigMSPRestartDelay and sPDUOutletConfigMSPPowerOnDelay OID \nvalues.\n\nSetting this OID to overrideAllBatCapThreshMSP (8) will cause the \noutlet to ignore the Battery Capacity Threshold and proceed turning on\nthe outlets as defined by each outlet's sPDUOutletConfigMSPPowerOnDelay \nOID value.\n             \nSetting this OID to cancelAllPendingCommandsMSP (9) will cause all pending\ncommands on the MasterSwitch plus to be canceled.\n\nSetting this OID to restoreFactoryDefaultsMSP (10) will cause the settings of\nthe MasterSwitch plus to be restored to the factory defaults.\n\nGetting this OID will return the noCommandAllMSP (1) value.")
sPDUMasterConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3))
sPDUMasterConfigMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigMSPTableSize.setDescription("The number of MasterSwitch pluses configurable\nby this IP address.")
sPDUMasterConfigMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2))
if mibBuilder.loadTexts: sPDUMasterConfigMSPTable.setDescription("Allows for configuration of the individual MasterSwitch pluses.\nThe number of entries is contained in the \nsPDUMasterConfigMSPTableSize OID.")
sPDUMasterConfigMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterConfigMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterConfigMSPEntry.setDescription("The MasterSwitch pluses to configure.")
sPDUMasterConfigMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterConfigMSPIndex.setDescription("The index to the MasterSwitch plus entry.")
sPDUMasterConfigMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPName.setDescription("The name of the MasterSwitch plus. Maximum size is 23 characters.")
sPDUMasterConfigMSPPowerOnTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPPowerOnTimeDelay.setDescription(" The amount of delay, in seconds, between when\npower is provided to the MasterSwitch plus and \nwhen the MasterSwitch plus provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2hrs, 46 mins, 39 secs).\n0 indicates to apply power immediately.")
sPDUMasterConfigMSPManualButton = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("manualButtonDisabled", 1), ("manualButtonEnabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUMasterConfigMSPManualButton.setDescription("Setting this OID to manualButtonDisabled (1) will disable\nthe manual button on the MasterSwitch plus.\n\nSetting this OID to manualButtonEnabled (2) will enable\nthe manual button on the MasterSwitch plus.")
sPDUMasterStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4))
sPDUMasterStatusMSPTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPTableSize.setDescription("The number of MasterSwitch pluses at\nthis IP address.")
sPDUMasterStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2))
if mibBuilder.loadTexts: sPDUMasterStatusMSPTable.setDescription("Allows for gathering of status from the individual \nMasterSwitch pluses. The number of entries is contained \nin the sPDUMasterStatusMSPTableSize OID.")
sPDUMasterStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUMasterStatusMSPIndex"))
if mibBuilder.loadTexts: sPDUMasterStatusMSPEntry.setDescription("The MasterSwitch pluses to gather status from.")
sPDUMasterStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPIndex.setDescription("The index to the MasterSwitch plus entry.")
sPDUMasterStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUMasterStatusMSPOutletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUMasterStatusMSPOutletCount.setDescription("Getting this OID will return the number of controllable\noutlets for this MasterSwitch plus.")
sPDUOutletControlMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5))
sPDUOutletControlMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1))
if mibBuilder.loadTexts: sPDUOutletControlMSPTable.setDescription("Allows for control of individual outlet switches. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.")
sPDUOutletControlMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletControlMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletControlMSPEntry.setDescription("The outlets to control.")
sPDUOutletControlMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPIndex.setDescription("The index to the MasterSwitch plus.")
sPDUOutletControlMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletControlMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletControlMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletName.setDescription("The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.")
sPDUOutletControlMSPOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,7,8,5,4,2,3,6,)).subtype(namedValues=NamedValues(("immediateOnMSP", 1), ("delayedOnMSP", 2), ("immediateOffMSP", 3), ("gracefulRebootMSP", 4), ("immediateRebootMSP", 5), ("gracefulshutdownMSP", 6), ("overrideBatCapThreshMSP", 7), ("cancelPendingCommandMSP", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletControlMSPOutletCommand.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnMSP (1) value will be returned.\nIf the outlet is off, the immediateOffMSP (3) value will be\nreturned.  \n\nSetting this variable to immediateOnMSP (1) will immediately turn the outlet on.\n\nSetting this variable to delayedOnMSP (2) will turn the outlet on\nafter the sPDUOutletConfigMSPPowerOnDelay OID time has elapsed. \n\nSetting this variable to immediateOffMSP (3) will immediately turn the outlet off. \n\nSetting this variable to gracefulRebootMSP (4) will cause the outlet to wait for\ndevice confirmation (if applicable) and then turn the outlet off after the\nsPDUOutletConfigMSPPowerOffDelay OID time has elapsed.  The outlet will then turn\non after the sPDUOutletConfigMSPRebootDuration OID time has elapsed. \n\nSetting this variable to immediateRebootMSP (5) will immediately reboot the outlet.\n\nSetting this variable to gracefulshutdownMSP (6) will cause the outlet to wait for\ndevice confirmation (if applicable) and then turn the outlet off after the\nsPDUOutletConfigMSPPowerOffDelay OID time has elapsed.  The outlet will then turn\non after the sum of the sPDUOutletConfigMSPRestartTime OID time and the \nsPDUOutletConfigMSPPowerOnDelay OID time has elapsed. \n\nSetting this variable to overrideBatCapThreshMSP (7) will cause the outlet to \nignore the Battery Capacity Threshold and proceed waiting on the\nsPDUOutletConfigMSPPowerOnDelay OID time before turning the outlet on.\n    \nSetting this variable to cancelPendingCommandMSP (8) will cause any\npending command to this outlet to be canceled.")
sPDUOutletConfigMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6))
sPDUOutletConfigMSPall = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1))
sPDUOutletConfigMSPallTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1))
if mibBuilder.loadTexts: sPDUOutletConfigMSPallTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.")
sPDUOutletConfigMSPallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPallIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPallOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPallEntry.setDescription("The outlets to configure.")
sPDUOutletConfigMSPallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallIndex.setDescription("The index to the MasterSwitch plus.")
sPDUOutletConfigMSPallName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletConfigMSPallOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletConfigMSPallOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletName.setDescription("The name of the outlet. Maximum size is 23 characters.")
sPDUOutletConfigMSPallOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPallOutletCtrlMode.setDescription("Setting this OID to modeGracefulShutdown (1) will put this\noutlet into the Graceful Shutdown control mode.\n\nSetting this OID to modeAnnunciator (2) will put this outlet\ninto the Annunciator control mode.")
sPDUOutletConfigMSPgs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2))
sPDUOutletConfigMSPgsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1))
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.")
sPDUOutletConfigMSPgsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPgsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPgsOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsEntry.setDescription("The outlets to configure.")
sPDUOutletConfigMSPgsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsIndex.setDescription("The index to the MasterSwitch plus.")
sPDUOutletConfigMSPgsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletConfigMSPgsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletConfigMSPgsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletName.setDescription("The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.")
sPDUOutletConfigMSPgsOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsOutletCtrlMode.setDescription("The Control Mode of the outlet.\nThis OID is provided for informational purposes only.")
sPDUOutletConfigMSPgsDeviceConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("deviceConfirmNo", 1), ("deviceConfirmYes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsDeviceConfirm.setDescription("Setting this OID to deviceConfirmNo (1) cause the outlet to\nNOT wait for device confirmation while performing graceful\noperations.\n\nSetting this OID to deviceConfirmYes (2) cause the outlet to\nwait for device confirmation while performing graceful\noperations.")
sPDUOutletConfigMSPgsLowBattWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsLowBattWarning.setDescription(" The amount of delay, in 6 second intervals, between \nwhen the UPS goes on battery and the power down sequence for\nthe outlet is initiated.     \n\nAllowed values are:\n\n-2 - Never initiate the power down sequence on low battery warning.\n-1 - Initiate power down sequence based on remaining runtime.\n1 - 9999 six second intervals (6 secs - 16hrs, 39 mins, 54 secs).\n0 indicates to immediately initiate power down sequence on low \n battery warning.")
sPDUOutletConfigMSPgsLowBattMult = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsLowBattMult.setDescription(" Only applicable if sPDUOutletConfigMSPgsLowBattWarning OID is \nset to -1 (On Runtime Remaining).\n \nAllows you to set the value to stagger the shutdown sequence of the outlets.\n1 provides the longest delay (the outlet to shutoff first), and 7 would\nprovide the shortest delay (the outlet to shut off last).\n \nAllowed values are:\n1 - 7.")
sPDUOutletConfigMSPgsRestartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsRestartDelay.setDescription(" The amount of delay, in 6 minute intervals, between \nwhen the outlet is turned off and the outlet is turned back on\nwhen performing a Graceful Shutdown.    \n\nAllowed values are:\n\n-1 - Never turn outlet back on after a Graceful shutdown.\n0 - 9999 six minute intervals (0 - 999hrs, 54 mins).")
sPDUOutletConfigMSPgsPowerOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsPowerOnDelay.setDescription(" The amount of delay, in seconds, between the UPS entering\nnormal (on-line) state and the outlet being powered on.\n\nAllowed values are:\n\n-1 - Remain Off when the UPS enters the on-line state.\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).")
sPDUOutletConfigMSPgsPowerOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsPowerOffDelay.setDescription(" The amount of delay, in seconds, between when the server\nshuts down and the outlet is powered off.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).")
sPDUOutletConfigMSPgsBattCapThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsBattCapThresh.setDescription(" The minimum battery capacity, as a percent (0-100%), required\nof the UPS before an outlet will be allowed to power on.\n\nAllowed values are:\n\n0 - 100 percent.")
sPDUOutletConfigMSPgsRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPgsRebootDuration.setDescription(" The amount of delay, in seconds, from outlet off until\noutlet on during a reboot.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).")
sPDUOutletConfigMSPannun = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3))
sPDUOutletConfigMSPannunTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1))
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.")
sPDUOutletConfigMSPannunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPannunIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPannunOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunEntry.setDescription("The outlets to configure.")
sPDUOutletConfigMSPannunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunIndex.setDescription("The index to the MasterSwitch plus.")
sPDUOutletConfigMSPannunName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletConfigMSPannunOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletConfigMSPannunOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletName.setDescription("The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.")
sPDUOutletConfigMSPannunOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunOutletCtrlMode.setDescription("The Control Mode of the outlet.\nThis OID is provided for informational purposes only.")
sPDUOutletConfigMSPannunInitialState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("initialStateOff", 1), ("initialStateOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunInitialState.setDescription("Setting this OID to initialStateOff (1) causes the outlet \nto default to off when in the non-alarmed condition.\n\nSetting this OID to initialStateOn (2) causes the outlet \nto default to on when in the non-alarmed condition.")
sPDUOutletConfigMSPannunAlarmActionDly = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPannunAlarmActionDly.setDescription(" The amount of time, in seconds, that an enabled Measure-UPS\nalarm must be asserted before an alarm condition is recognized.\n\nAllowed values are:\n\n0 - 9999 seconds (0 - 2 hrs, 46 mins, 39 secs).")
sPDUOutletConfigMSPmups = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4))
sPDUOutletConfigMSPmupsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1))
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the sPDUMasterStatusMSPOutletCount OID.")
sPDUOutletConfigMSPmupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsIndex"), (0, "PowerNet-MIB", "sPDUOutletConfigMSPmupsOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsEntry.setDescription("The outlets to configure.")
sPDUOutletConfigMSPmupsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsIndex.setDescription("The index to the MasterSwitch plus.")
sPDUOutletConfigMSPmupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletConfigMSPmupsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletConfigMSPmupsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsOutletName.setDescription("The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.")
sPDUOutletConfigMSPmupsZone1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone1.setDescription("Setting this OID to disableAlarm (1) disables the\nZone 1 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 1 alarm for this outlet.")
sPDUOutletConfigMSPmupsZone2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone2.setDescription("Setting this OID to disableAlarm (1) disables the\nZone 2 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 2 alarm for this outlet.")
sPDUOutletConfigMSPmupsZone3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone3.setDescription("Setting this OID to disableAlarm (1) disables the\nZone 3 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 3 alarm for this outlet.")
sPDUOutletConfigMSPmupsZone4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsZone4.setDescription("Setting this OID to disableAlarm (1) disables the\nZone 4 alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nZone 4 alarm for this outlet.")
sPDUOutletConfigMSPmupsP1LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1LowHum.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 1 low humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 low humidity alarm for this outlet.")
sPDUOutletConfigMSPmupsP1HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1HiHum.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 1 high humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 high humidity alarm for this outlet.")
sPDUOutletConfigMSPmupsP1LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1LowTemp.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 1 low temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 low temperature alarm for this outlet.")
sPDUOutletConfigMSPmupsP1HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP1HiTemp.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 1 high temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 1 high temperature alarm for this outlet.")
sPDUOutletConfigMSPmupsP2LowHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2LowHum.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 2 low humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 low humidity alarm for this outlet.")
sPDUOutletConfigMSPmupsP2HiHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2HiHum.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 2 high humidity alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 high humidity alarm for this outlet.")
sPDUOutletConfigMSPmupsP2LowTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2LowTemp.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 2 low temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 low temperature alarm for this outlet.")
sPDUOutletConfigMSPmupsP2HiTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disableAlarm", 1), ("enableAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sPDUOutletConfigMSPmupsP2HiTemp.setDescription("Setting this OID to disableAlarm (1) disables the\nProbe 2 high temperature alarm for this outlet.\n\nSetting this OID to enableAlarm (2) enables the\nProbe 2 high temperature alarm for this outlet.")
sPDUOutletStatusMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7))
sPDUOutletStatusMSPTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1))
if mibBuilder.loadTexts: sPDUOutletStatusMSPTable.setDescription("Allows for getting of status of individual outlets. The number of\nentries is contained in the sPDUMasterStatusOutletCount OID.")
sPDUOutletStatusMSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1)).setIndexNames((0, "PowerNet-MIB", "sPDUOutletStatusMSPIndex"), (0, "PowerNet-MIB", "sPDUOutletStatusMSPOutletIndex"))
if mibBuilder.loadTexts: sPDUOutletStatusMSPEntry.setDescription("The outlets to gather status from.")
sPDUOutletStatusMSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPIndex.setDescription("The index to the MasterSwitch MSP.")
sPDUOutletStatusMSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPName.setDescription("The name of the MasterSwitch plus. The maximum \nvalue is 23 characters. The name is set by\nusing the sPDUMasterConfigMSPName OID.")
sPDUOutletStatusMSPOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletIndex.setDescription("The index to the outlet entry.")
sPDUOutletStatusMSPOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletName.setDescription("The name of the outlet. The maximum size is \n23 characters. The name is set by using the \nsPDUOutletConfigMSPallOutletName OID.\nThis OID is provided for informational purposes only.")
sPDUOutletStatusMSPOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("outletStatusMSPOn", 1), ("outletStatusMSPOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletState.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusMSPOn (1) value will be returned.\nIf the outlet is off, the outletStatusMSPOff (2) value will be\nreturned. ")
sPDUOutletStatusMSPCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("outletStatusMSPCommandPending", 1), ("outletStatusMSPNoCommandPending", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPCommandPending.setDescription("Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusMSPCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusMSPNoCommandPending (2)\nwill be returned.")
sPDUOutletStatusMSPOutletCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("modeGracefulShutdown", 1), ("modeAnnunciator", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sPDUOutletStatusMSPOutletCtrlMode.setDescription("The Control Mode of the outlet.\nThis OID is provided for informational purposes only.")
dcDM3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7))
dm3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1))
dm3IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1))
dm3IdentSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionTableSize.setDescription("The number of DC description records.")
dm3IdentSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2))
if mibBuilder.loadTexts: dm3IdentSysDescriptionTable.setDescription("Allows for accessing description records of the powerplant. The number of\nentries is contained in the dm3IdentSysDescriptionTableSize OID.")
dm3IdentSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3IdentSysDescriptionIndex"))
if mibBuilder.loadTexts: dm3IdentSysDescriptionEntry.setDescription("The powerplant description record to reference.")
dm3IdentSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionIndex.setDescription("The index to the DC powerplant description record.")
dm3IdentSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysDescriptionText.setDescription("A 16 character text field describing the DC power plant device.\nThis field can be configured from the dm3ConfigSysDescriptionText OID.")
dm3IdentSysModel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysModel.setDescription("Model type of the DC power plant.")
dm3IdentSysCntrlRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysCntrlRev.setDescription("Integer representation of the hardware revision of the Master Controller board.")
dm3IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3IdentSysFWVersion.setDescription("Integer representation of the power plant Master Controller firmware revision.")
dm3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2))
dm3ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1))
dm3ConfigSysDescriptionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionTableSize.setDescription("The number of DC description records.")
dm3ConfigSysDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2))
if mibBuilder.loadTexts: dm3ConfigSysDescriptionTable.setDescription("Allows for accessing description records of the powerplant. The number of\nentries is contained in the dm3ConfigSysDescriptionTableSize OID.")
dm3ConfigSysDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigSysDescriptionIndex"))
if mibBuilder.loadTexts: dm3ConfigSysDescriptionEntry.setDescription("The powerplant description record to reference.")
dm3ConfigSysDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionIndex.setDescription("The index to the DC powerplant description record.")
dm3ConfigSysDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysDescriptionText.setDescription("16 character text field describing the DC power plant device.")
dm3ConfigSysHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHighTempThresh.setDescription("Ambient high temperature threshold.  Temperature sensor located on Master\nController board.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigSysHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHighTempAlarm.setDescription("For the System High Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigSysLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysLowTempThresh.setDescription("Ambient low temperature threshold.  Temperature sensor located on Master\nController board.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigSysLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysLowTempAlarm.setDescription("For the System Low Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigSysHardwareTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysHardwareTempAlarm.setDescription("For the System Hardware Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigSysRemoteAccess.setDescription("\nThis OID is used to disable remote write access to the power plant.\nSetting this OID to accessEnabled (1) will have no affect.\nSetting this OID to accessDisabled (2) will disable the ability to \nremotely configure the DC powerplant.\n\nOnce remote access is disabled, it can only be restored from the front\npanel of the DC power plant.")
dm3ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2))
dm3ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigLVDTableSize.setDescription("The number of DC powerplant LVDs controllable\nby this IP address.")
dm3ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2))
if mibBuilder.loadTexts: dm3ConfigLVDTable.setDescription("Allows for accessing settings of the LVDs. The number of\nentries is contained in the dm3ConfigLVDTableSize OID.")
dm3ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigLVDIndex"))
if mibBuilder.loadTexts: dm3ConfigLVDEntry.setDescription("The LVD to configure.")
dm3ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigLVDIndex.setDescription("The index to the DC powerplant LVD.")
dm3ConfigLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDName.setDescription("The name of the LVD. The maximum value is 16 characters.")
dm3ConfigLVDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDEnable.setDescription("This OID is used to control and indicate if the LVD is on or off.\nSetting this OID to enabledYes (1) will enable (turn on) the LVD.\nSetting this OID to enabledNo (2) will disable (turn off) the LVD.")
dm3ConfigLVDTripThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDTripThresh.setDescription("LVD Trip threshold.  If voltage exceeds threshold, the LVD will trip.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigLVDResetThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDResetThresh.setDescription("LVD Reset threshold.  If voltage exceeds threshold, the LVD will reset.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigLVDOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDOpenAlarm.setDescription("For the LVD Open Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigLVDHWAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLVDHWAlarm.setDescription("For the LVD Hardware Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3))
dm3ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattFloatVolt.setDescription("Battery Float Voltage.  This setting controls the power plant voltage.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattMaxRecharge.setDescription("Battery Maximum Recharge Rate.  This setting controls the battery max\nrecharge rate.  The value is based on C/20 for 240 AHr battery string.\n\nValues are represented in thousandths of Amps (mA).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattDischargeThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattDischargeThresh.setDescription("Battery discharge threshold.  If battery output current exceeds threshold\na battery discharge alarm will occur.\n\nValues are represented in thousandths of Amps (mA).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattDischargeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattDischargeAlarm.setDescription("For the Battery Discharge Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighVoltThresh.setDescription("Battery high voltage threshold.  If system battery voltage exceeds threshold\na battery high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighVoltAlarm.setDescription("For the Battery High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowVoltThresh.setDescription("Battery low voltage threshold.  If system battery voltage is under threshold\na battery low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowVoltAlarm.setDescription("For the Battery Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattHighTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighTempThresh.setDescription("Battery high temperature threshold.  If system battery temperature exceeds threshold\na battery high temperature alarm will occur.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHighTempAlarm.setDescription("For the Battery High Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattLowTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowTempThresh.setDescription("Battery low temperature threshold.  If system battery temperature is under threshold\na battery low temperature alarm will occur.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattLowTempAlarm.setDescription("For the Battery Low Temperature Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattAmpHour = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattAmpHour.setDescription("Battery Amp-Hour Size.  Units are thousandths of Amp hours (mAHr).\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigCompMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("tempcompOn", 1), ("tempcompOff", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigCompMethod.setDescription("This OID is used to configure and get the state of the battery\ntemperature compensation.\n\nSetting this OID to tempcompOn (1) will enable/turn on the battery temperature compensation.\nSetting this OID to tempcompOff (2) will disable/turn off the battery temperature compensation.")
dm3ConfigCompTempCoeff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigCompTempCoeff.setDescription("Compensation Temperature Coefficient. (uV/degC/cell).\n\nUnits are presented in microvolts.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigHighKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigHighKneeTemp.setDescription("High Knee for temperature compensation:  Compensation temperature coefficient \nbecomes 0mV/degC/cell.\n\nValues are represented in thousandths of degrees Celsius.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigLowKneeTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigLowKneeTemp.setDescription("Low Knee for temperature compensation:  Compensation temperature coefficient \nbecomes 0mV/degC/cell.\n\nValues are represented in thousandths of degrees Celsius.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigBattHwCurrentAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHwCurrentAlarm.setDescription("For the Battery Current Hardware Alarm (indicating current is outside realistic\nlimits, or a possible measurement fault;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigBattHwTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBattHwTempAlarm.setDescription("For the Battery Temperature Hardware Alarm (indicating temperature is outside realistic\nlimits, or a possible measurement fault;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4))
dm3ConfigRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1))
dm3ConfigRectThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1))
dm3ConfigRectHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHighVoltThresh.setDescription("Rectifier high voltage threshold.  If rectifier voltage exceeds threshold\na rectifier high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigRectLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectLowVoltThresh.setDescription("Rectifier low voltage threshold.  If rectifier voltage is under threshold\na rectifier low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigRectFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailSafe.setDescription("Rectifier Fail Safe point.  This OID represents the value sent to rectifier controllers\nto use in the event of communications loss with the Master Controller or Master Controller\nboard failure.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigRectFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailComm.setDescription("Rectifier Communication Fail timeout.  This OID represents the time interval in which there is no \ncommunication between the rectifier and the master controller at which the rectifier will reset \nall its values to default.\n\nValues are represented in hundredths of Seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigRectAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2))
dm3ConfigRectHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHighVoltAlarm.setDescription("For the Rectifier High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRectLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectLowVoltAlarm.setDescription("For the Rectifier Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRectConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectConfigAlarm.setDescription("This alarm is activated when a new rectifier is detected;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRect1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRect1ofNAlarm.setDescription("This setting indicates the action if ONE rectifier of a N+1 system has failed;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRect2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRect2ofNAlarm.setDescription("This setting indicates the action if TWO OR MORE rectifiers of a N+1 system have failed;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRectDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectDiagAlarm.setDescription("For the Rectifier Controller Diagnostics Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.")
dm3ConfigRectImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectImbalanceAlarm.setDescription("For the Rectifier Imbalance Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigRectCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectCurrLimitAlarm.setDescription("For the Rectifier Current Limit Alarm (indicating rectifier in the Current Limit state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.")
dm3ConfigRectStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectStandbyAlarm.setDescription("For the Rectifier Standby Alarm (indicating output DC has been turned off);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.")
dm3ConfigRectFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFanFailAlarm.setDescription("For the Rectifier Fan Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.")
dm3ConfigRectFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectFailAlarm.setDescription("For the Rectifier Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigRect1ofNAlarm OID\nto be activated if ONE rectifier fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigRect2ofNAlarm OID to be activated if TWO OR MORE rectifiers fail in an N+1 system.")
dm3ConfigRectHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigRectHwVoltAlarm.setDescription("For the Rectifier Hardware Voltage Alarm (indicating voltage outside realistic limits,\nor a possible measurement fault);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2))
dm3ConfigConvThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1))
dm3ConfigConvHighVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHighVoltThresh.setDescription("Converter high voltage threshold.  If converter voltage exceeds threshold\na converter high voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvLowVoltThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvLowVoltThresh.setDescription("Converter low voltage threshold.  If converter voltage exceeds threshold\na converter low voltage alarm will occur.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvFailSafe = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailSafe.setDescription("Converter Fail Safe point.  This OID represents the value sent to converter controllers\nto use in the event of communications loss with the Master Controller or Master Controller\nboard failure.\n\nValues are represented in thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvSetPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvSetPoint.setDescription("Converter Set point.  This OID represents the initial set point used in the\nvoltage control loop.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvFailMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailMax.setDescription("Converter Fail Maximum limit.  This OID represents the value sent to the converter\ncontrollers to define the maximum set point allowed.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvFailMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailMin.setDescription("Converter Fail Minimum limit.  This OID represents the value sent to the converter\ncontrollers to define the minimum set point allowed.\n\nUnits are thousandths of Volts (mV).\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvFailComm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailComm.setDescription("Converter Communication Fail timeout.  This OID represents the time interval in which there is no \ncommunication between the converter and the master controller at which the converter will reset \nall its values to default.\n\nValues are represented in hundredths of Seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigConvAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2))
dm3ConfigConvHighVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHighVoltAlarm.setDescription("For the Converter High Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConvLowVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvLowVoltAlarm.setDescription("For the Converter Low Voltage Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConvConfigAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvConfigAlarm.setDescription("For the Converter Configuration Alarm (indicating a new converter has been detected);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConv1ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConv1ofNAlarm.setDescription("For the Converter 1ofN Alarm (indicating action if ONE converter of a N+1 system has failed);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConv2ofNAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConv2ofNAlarm.setDescription("For the Converter 2ofN Alarm (indicating action if TWO OR MORE converters of a N+1 system has failed);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigConvDiagAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvDiagAlarm.setDescription("For the Converter Diagnostics Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvImbalanceAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvImbalanceAlarm.setDescription("For the Converter Imbalance Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvCurrLimitAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvCurrLimitAlarm.setDescription("For the Converter Current Limit Alarm (indicating the converter is in the Current Limit state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvStandbyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvStandbyAlarm.setDescription("For the Converter Standby Alarm (indicating the converter is in the Standby state);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvFanFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFanFailAlarm.setDescription("For the Converter Fan Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvFailAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvFailAlarm.setDescription("For the Converter Fail Alarm;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigConvHwVoltAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,6,5,8,1,9,7,10,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmNofN", 10), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigConvHwVoltAlarm.setDescription("For the Converter Voltage Alarm (indicating voltage outside realistic limits, or a\npossible measurement fault);\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\nSetting this OID to alarmNofN (10) causes the alarm specified in the dm3ConfigConv1ofNAlarm OID\nto be activated if ONE converter fails in an N+1 system.  It causes the alarm specified in the \ndm3ConfigConv2ofNAlarm OID to be activated if TWO OR MORE converters fail in an N+1 system.")
dm3ConfigRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5))
dm3ConfigOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1))
dm3ConfigOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigOutRlyTableSize.setDescription("The number of DC powerplant Output Relays controllable\nby this IP address.")
dm3ConfigOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2))
if mibBuilder.loadTexts: dm3ConfigOutRlyTable.setDescription("Allows for accessing settings of the Output Relays. The number of\nentries is contained in the dm3ConfigOutRlyTableSize OID.")
dm3ConfigOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigOutRlyIndex"))
if mibBuilder.loadTexts: dm3ConfigOutRlyEntry.setDescription("The output relay to configure.")
dm3ConfigOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigOutRlyIndex.setDescription("The index to the DC powerplant output relay.")
dm3ConfigOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyName.setDescription("The name of the output relay. The maximum value is 16 characters.")
dm3ConfigOutRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyDelay.setDescription("Output Relay Delay.  This OID represents the time delay from the initiation of an\noutput relay action to when the output relay action does occur.  If the alarm condition\ndisappears before the end of the delay, no action will occur.  Delay for Major \nand Minor alarms is not configurable and is always set to 0.\n\nValues are represented in hundredths of seconds.\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigOutRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigOutRlyAlarm.setDescription("Output Relay Alarm.  This setting indicates what action to perform in the event of\nan output relay alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.\n\nRelay Alarm for Major and Minor alarms is not configurable and is always set to \nalarmMajor and alarmMinor respectively.")
dm3ConfigInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2))
dm3ConfigInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigInRlyTableSize.setDescription("The number of DC powerplant Input Relays controllable\nby this IP address.")
dm3ConfigInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2))
if mibBuilder.loadTexts: dm3ConfigInRlyTable.setDescription("Allows for accessing settings of the Input Relays. The number of\nentries is contained in the dm3ConfigInRlyTableSize OID.")
dm3ConfigInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigInRlyIndex"))
if mibBuilder.loadTexts: dm3ConfigInRlyEntry.setDescription("The input relay to configure.")
dm3ConfigInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigInRlyIndex.setDescription("The index to the DC powerplant input relay.")
dm3ConfigInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyName.setDescription("The name of the input relay. The maximum value is 16 characters.")
dm3ConfigInRlyDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyDelay.setDescription("Input Relay Delay.  This OID represents the time delay from the initiation of an\ninput relay action to when the input relay action does occur.   If the alarm condition\ndisappears before the end of the delay, no action will occur.\n\nValues are represented in hundredths of seconds.\n\nAttempts to set the value above or below the acceptable range of the powerplant\n will cause the value to be set at the high or low point of the range respectively.")
dm3ConfigInRlyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigInRlyAlarm.setDescription("Input Relay Alarm.  This setting indicates what action to perform in the event of\nan input relay alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6))
dm3ConfigBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1))
dm3ConfigBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigBreakersTableSize.setDescription("The number of DC powerplant circuit breakers controllable\nby this IP address.")
dm3ConfigBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2))
if mibBuilder.loadTexts: dm3ConfigBreakersTable.setDescription("Allows for accessing settings of the circuit breakers. The number of\nentries is contained in the dm3ConfigBreakersTableSize OID.")
dm3ConfigBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigBreakersIndex"))
if mibBuilder.loadTexts: dm3ConfigBreakersEntry.setDescription("The circuit breaker to configure.")
dm3ConfigBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigBreakersIndex.setDescription("The index to the DC powerplant circuit breaker.")
dm3ConfigBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBreakersName.setDescription("The name of the circuit breaker. The maximum value is 16 characters.")
dm3ConfigBreakersAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigBreakersAlarm.setDescription("Circuit Breaker Alarm.  This setting indicates what action to perform in the event of\na circuit breaker alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3ConfigFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2))
dm3ConfigFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigFusesTableSize.setDescription("The number of DC powerplant Fuses controllable\nby this IP address.")
dm3ConfigFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2))
if mibBuilder.loadTexts: dm3ConfigFusesTable.setDescription("Allows for accessing settings of the Fuses. The number of\nentries is contained in the dm3ConfigFusesTableSize OID.")
dm3ConfigFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3ConfigFusesIndex"))
if mibBuilder.loadTexts: dm3ConfigFusesEntry.setDescription("The fuse to configure.")
dm3ConfigFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3ConfigFusesIndex.setDescription("The index to the DC powerplant fuse.")
dm3ConfigFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigFusesName.setDescription("The name of the fuse. The maximum value is 16 characters.")
dm3ConfigFusesAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,6,5,8,9,7,4,)).subtype(namedValues=NamedValues(("alarmIgnore", 1), ("alarmRelay1", 2), ("alarmRelay2", 3), ("alarmRelay3", 4), ("alarmRelay4", 5), ("alarmRelay5", 6), ("alarmRelay6", 7), ("alarmMinor", 8), ("alarmMajor", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm3ConfigFusesAlarm.setDescription("Fuses Alarm.  This setting indicates what action to perform in the event of\na Fuse alarm condition;\nSetting this OID to alarmIgnore (1) results in the alarm condition being ignored.\nSetting this OID to alarmRelay1 (2) causes relay 1 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay2 (3) causes relay 2 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay3 (4) causes relay 3 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay4 (5) causes relay 4 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay5 (6) causes relay 5 to be activated for an\nalarm condition.\nSetting this OID to alarmRelay6 (7) causes relay 6 to be activated for an\nalarm condition.\nSetting this OID to alarmMinor (8) causes the Minor relay to be activated for an\nalarm condition.\nSetting this OID to alarmMajor (9) causes the Major relay to be activated for an\nalarm condition.")
dm3Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3))
dm3StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1))
dm3StatusSystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSystemTemp.setDescription("System temperature based on sensor on Master Controller PCB.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dm3StatusSystemStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSystemStart.setDescription("Time stamp at DC powerplant initialization.\nThe time is represented as MMM,DD,YYYY,HH:MM:SS.")
dm3StatusSysRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("accessEnabled", 1), ("accessDisabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRemoteAccess.setDescription("Remote Access indicator\nThis setting indicates if configuration (write) access to the powerplant is enabled or \ndisabled at the powerplant level.\nThis value will be accessEnabled (1) if remote configuration is enabled, and \naccessDisabled (2) if remote configuration is disabled.")
dm3StatusSysSecurityLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysSecurityLevel.setDescription("This variable shows the current active security access level of controller.  This\ncan only be changed directly from the front panel.")
dm3StatusSysTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysTempSanity.setDescription("System temperature sanity indicator.  Indicates if the system temperature is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates temperature is reasonable, a value of saneNo (2) indicates it is not.")
dm3StatusSysAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,)).subtype(namedValues=NamedValues(("alarmMinor", 1), ("alarmMajor", 2), ("alarmBoth", 3), ("alarmNone", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysAlarmState.setDescription("System Alarm State.  Reflects the alarm status of the overall DC system.\nIf a minor alarm is present, the value will be alarmMinor(1).\nIf a major alarm is present, the value will be alarmMajor(2).\nIf both minor and a major alarm is present, the value will be alarmBoth(3).\nIf no alarm is present, the value will be alarmNone(4).")
dm3StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysTempUnits.setDescription("The temperature scale used to display the temperature\nin the DC system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
dm3StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2))
dm3StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsTableSize.setDescription("The number of DC powerplant alarms viewable\nby this IP address.")
dm3StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2))
if mibBuilder.loadTexts: dm3StatusAlarmsTable.setDescription("Allows for accessing system alarms. The number of\nentries is contained in the dm3StatusAlarmsTableSize OID.")
dm3StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusAlarmsIndex"))
if mibBuilder.loadTexts: dm3StatusAlarmsEntry.setDescription("The alarm to display.")
dm3StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsIndex.setDescription("The index of the system alarm.")
dm3StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusAlarmsText.setDescription("The 16 character text describing the active alarm condition.")
dm3StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3))
dm3StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattCurrent.setDescription("Battery Current:  This OID shows the battery current in thousandths of Amps (mA).")
dm3StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattTemp.setDescription("Battery Temperature:\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dm3StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dm3StatusBattCurrentSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattCurrentSanity.setDescription("Battery current sanity indicator.  Indicates if the battery current is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates current is reasonable, a value of saneNo (2) indicates it is not.")
dm3StatusBattTempSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBattTempSanity.setDescription("Battery temperature sanity indicator.  Indicates if the battery temperature is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates temperature is reasonable, a value of saneNo (2) indicates it is not.")
dm3StatusOEM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4))
dm3StatusOEMrectOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMrectOffset.setDescription("This OID shows the rectifier offset value in thousandths of Volts (mV).")
dm3StatusOEMrectGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMrectGain.setDescription("This OID shows the rectifier gain value in thousandths of Volts (mV/V).")
dm3StatusOEMconvOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMconvOffset.setDescription("This OID shows the converter offset value in thousandths of Volts (mV).")
dm3StatusOEMconvGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMconvGain.setDescription("This OID shows the converter gain value in thousandths of Volts (mV/V).")
dm3StatusOEMshuntOffset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMshuntOffset.setDescription("This OID shows the shunt offset value in thousandths of Amps (mA).")
dm3StatusOEMshuntGain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOEMshuntGain.setDescription("This OID shows the shunt gain value in thousandths of Amps (mA/A).")
dm3StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5))
dm3StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDTableSize.setDescription("The number of DC powerplant LVDs viewable\nby this IP address.")
dm3StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2))
if mibBuilder.loadTexts: dm3StatusLVDTable.setDescription("Allows for accessing settings of the LVDs. The number of\nentries is contained in the dm3StatusLVDTableSize OID.")
dm3StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusLVDIndex"))
if mibBuilder.loadTexts: dm3StatusLVDEntry.setDescription("The LVD to gather status from.")
dm3StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDIndex.setDescription("The index to the DC powerplant LVD.")
dm3StatusLVDName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDName.setDescription("The name of the LVD. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigLVDName OID.\nThis OID is provided for informational purposes only.")
dm3StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDState.setDescription("Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.")
dm3StatusLVDHwFault = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusFault", 1), ("statusNofault", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusLVDHwFault.setDescription("Getting this OID will return statusFault (1) if the LVD is faulted.\nstatusNofault (2) will be returned if the LVD is not faulted.")
dm3StatusPowerModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6))
dm3StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1))
dm3StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectTableSize.setDescription("The number of DC powerplant rectifiers viewable\nby this IP address.")
dm3StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2))
if mibBuilder.loadTexts: dm3StatusRectTable.setDescription("Allows for accessing settings of the rectifiers. The number of\nentries is contained in the dm3StatusRectTableSize OID.")
dm3StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusRectIndex"))
if mibBuilder.loadTexts: dm3StatusRectEntry.setDescription("The rectifier to gather status from.")
dm3StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectIndex.setDescription("The index to the DC powerplant rectifier.")
dm3StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectID.setDescription("This OID shows the rectifier ID.  This enumerates the number of the rectifier within \na group of rectifiers.")
dm3StatusRectDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDesc.setDescription("This OID shows the 16-character rectifier description.")
dm3StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCurrent.setDescription("This OID shows the rectifier current in thousandths of Amps (mA).")
dm3StatusRectCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCurrentLimit.setDescription("Getting this OID will return statusTrue (1) if the rectifier is in the Current Limit state.\nstatusFalse (2) will be returned if the rectifier is not in the Current Limit state.")
dm3StatusRectStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectStandby.setDescription("Getting this OID will return statusTrue (1) if the rectifier is in the Standby state.\nstatusFalse (2) will be returned if the rectifier is not in the Standby state.")
dm3StatusRectFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFanFail.setDescription("Getting this OID will return statusTrue (1) if the rectifier Fan has failed.\nstatusFalse (2) will be returned if the rectifier Fan has not failed.")
dm3StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFail.setDescription("Getting this OID will return statusTrue (1) if the rectifier has failed.\nstatusFalse (2) will be returned if the rectifier has not failed.")
dm3StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDevType.setDescription("This OID shows the rectifier device type.")
dm3StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPhyAddr.setDescription("This OID shows the rectifier physical address (the address on the bus).")
dm3StatusRectCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectCfg.setDescription("Getting this OID will return statusTrue (1) if the rectifier is present after\npower-up or set-configuration.\n statusFalse (2) will be returned if the rectifier is not configured.")
dm3StatusRectPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPcbRev.setDescription("This OID shows the rectifier device PCB serial number.")
dm3StatusRectFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectFwVer.setDescription("This OID shows the rectifier device firmware revision.")
dm3StatusRectPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectPresent.setDescription("Getting this OID will return statusTrue (1) if the rectifier is present.\nstatusFalse (2) will be returned if the rectifier is not present.")
dm3StatusRectDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectDiagPass.setDescription("Getting this OID will return statusTrue (1) if the rectifier diagnostics have passed.\nstatusFalse (2) will be returned if the rectifier diagnostics have not passed.")
dm3StatusRectState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusRectState.setDescription("This OID shows the rectifier device state as defined by the device status register.")
dm3StatusSysRectVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectVoltSanity.setDescription("Rectifier voltage sanity indicator.  Indicates if the rectifier voltage is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates voltage is reasonable, a value of saneNo (2) indicates it is not.")
dm3StatusSysRectAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectAvailable.setDescription("Getting this OID will return statusTrue (1) if the rectifier is available.\nstatusFalse (2) will be returned if the rectifier is not available.")
dm3StatusSysRectType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectType.setDescription("This OID shows the type of rectifier the system has.  There can only be a single type of\nrectifier in the power plant")
dm3StatusSysRectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectVoltage.setDescription("This OID shows the system level rectifier voltage in thousandths of Volts (mV).")
dm3StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysRectCurrent.setDescription("This OID shows the system level rectifier current in thousandths of Amps (mA).")
dm3StatusConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2))
dm3StatusConvTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvTableSize.setDescription("The number of DC powerplant converters viewable\nby this IP address.")
dm3StatusConvTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2))
if mibBuilder.loadTexts: dm3StatusConvTable.setDescription("Allows for viewing status of the converters. The number of\nentries is contained in the dm3StatusConvTableSize OID.")
dm3StatusConvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusConvIndex"))
if mibBuilder.loadTexts: dm3StatusConvEntry.setDescription("The converter to gather status from.")
dm3StatusConvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvIndex.setDescription("The index to the DC powerplant converter.")
dm3StatusConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvID.setDescription("This OID shows the converter ID.  This enumerates the number of the converter within \na group of converters.")
dm3StatusConvDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDesc.setDescription("This OID shows the 16 character converter description.")
dm3StatusConvCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCurrent.setDescription("This OID shows the converter current in thousandths of Amps (mA).")
dm3StatusConvCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCurrentLimit.setDescription("Getting this OID will return statusTrue (1) if the converter is in the Current Limit state.\nstatusFalse (2) will be returned if the converter is not in the Current Limit state.")
dm3StatusConvStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvStandby.setDescription("Getting this OID will return statusTrue (1) if the converter is in the Standby state.\nstatusFalse (2) will be returned if the converter is not in the Standby state.")
dm3StatusConvFanFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFanFail.setDescription("Getting this OID will return statusTrue (1) if the converter Fan has failed.\nstatusFalse (2) will be returned if the converter Fan has not failed.")
dm3StatusConvFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFail.setDescription("Getting this OID will return statusTrue (1) if the converter has failed.\nstatusFalse (2) will be returned if the converter has not failed.")
dm3StatusConvDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDevType.setDescription("This OID shows the converter device type.")
dm3StatusConvPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPhyAddr.setDescription("This OID shows the converter physical address (the address on the bus).")
dm3StatusConvCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvCfg.setDescription("Getting this OID will return statusTrue (1) if the converter is present after\npower-up or set-configuration.\n statusFalse (2) will be returned if the converter is not configured.")
dm3StatusConvPcbRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPcbRev.setDescription("This OID shows the converter device PCB serial number.")
dm3StatusConvFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvFwVer.setDescription("This OID shows the converter device firmware version.")
dm3StatusConvPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvPresent.setDescription("Getting this OID will return statusTrue (1) if the converter is present.\nstatusFalse (2) will be returned if the converter is not present.")
dm3StatusConvDiagPass = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvDiagPass.setDescription("Getting this OID will return statusTrue (1) if the converter diagnostics have passed.\nstatusFalse (2) will be returned if the converter diagnostics have not passed.")
dm3StatusConvState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusConvState.setDescription("This OID shows the converter state as defined by the device status register.")
dm3StatusSysConvVoltSanity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("saneYES", 1), ("saneNO", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvVoltSanity.setDescription("Converter voltage sanity indicator.  Indicates if the converter voltage is \nreasonable.  Reasonable is defined based on powerplant type.  A value of saneYes (1)\nindicates voltage is reasonable, a value of saneNo (2) indicates it is not.")
dm3StatusSysConvAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvAvailable.setDescription("Getting this OID will return statusTrue (1) if the converter is available.\nstatusFalse (2) will be returned if the converter is not available.")
dm3StatusSysConvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvType.setDescription("This OID shows the converter type.")
dm3StatusSysConvVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvVoltage.setDescription("This OID shows the system level converter voltage in thousandths of volts (mV).")
dm3StatusSysConvCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusSysConvCurrent.setDescription("This OID shows the system level converter current in thousandths of Amps (mA).")
dm3StatusRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7))
dm3StatusOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1))
dm3StatusOutRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyTableSize.setDescription("The number of DC powerplant output relays viewable\nby this IP address.")
dm3StatusOutRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2))
if mibBuilder.loadTexts: dm3StatusOutRlyTable.setDescription("Allows for viewing status of the output relays. The number of\nentries is contained in the dm3StatusOutRlyTableSize OID.")
dm3StatusOutRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusOutRlyIndex"))
if mibBuilder.loadTexts: dm3StatusOutRlyEntry.setDescription("The output relay to gather status from.")
dm3StatusOutRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyIndex.setDescription("The index to the DC powerplant output relay.")
dm3StatusOutRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyName.setDescription("The name of the output relay. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigOutRlyName OID.\nThis OID is provided for informational purposes only.")
dm3StatusOutRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusOutRlyStatus.setDescription("Getting this OID will return statusOn (1) if the output relay is enabled/on.\nstatusOff (2) will be returned if the output relay is disabled/off.")
dm3StatusInputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2))
dm3StatusInRlyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyTableSize.setDescription("The number of DC powerplant input relays viewable\nby this IP address.")
dm3StatusInRlyTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2))
if mibBuilder.loadTexts: dm3StatusInRlyTable.setDescription("Allows for viewing status of the input relays. The number of\nentries is contained in the dm3StatusInRlyTableSize OID.")
dm3StatusInRlyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusInRlyIndex"))
if mibBuilder.loadTexts: dm3StatusInRlyEntry.setDescription("The input relays to gather status from.")
dm3StatusInRlyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyIndex.setDescription("The index to the DC powerplant input relay.")
dm3StatusInRlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyName.setDescription("The name of the input relay. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigInRlyName OID.\nThis OID is provided for informational purposes only.")
dm3StatusInRlyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusInRlyStatus.setDescription("Getting this OID will return statusOn (1) if the input relay is enabled/on.\nstatusOff (2) will be returned if the input relay is disabled/off.")
dm3StatusDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8))
dm3StatusBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1))
dm3StatusBreakersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersTableSize.setDescription("The number of DC powerplant circuit breakers viewable\nby this IP address.")
dm3StatusBreakersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2))
if mibBuilder.loadTexts: dm3StatusBreakersTable.setDescription("Allows for viewing status of the circuit breakers. The number of\nentries is contained in the dm3StatusBreakersTableSize OID.")
dm3StatusBreakersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusBreakersIndex"))
if mibBuilder.loadTexts: dm3StatusBreakersEntry.setDescription("The circuit breaker to gather status from.")
dm3StatusBreakersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersIndex.setDescription("The index to the DC powerplant circuit breaker.")
dm3StatusBreakersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersName.setDescription("The name of the circuit breaker. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigBreakersName OID.\nThis OID is provided for informational purposes only.")
dm3StatusBreakersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusBreakersStatus.setDescription("Getting this OID will return statusClosed (1) if the circuit breaker is closed.\nstatusOpen (2) will be returned if the circuit breaker is open.")
dm3StatusFuses = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2))
dm3StatusFusesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesTableSize.setDescription("The number of DC powerplant fuses controllable\nby this IP address.")
dm3StatusFusesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2))
if mibBuilder.loadTexts: dm3StatusFusesTable.setDescription("Allows for viewing status of the fuses. The number of\nentries is contained in the dm3StatusFusesTableSize OID.")
dm3StatusFusesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dm3StatusFusesIndex"))
if mibBuilder.loadTexts: dm3StatusFusesEntry.setDescription("The fuse to gather status from.")
dm3StatusFusesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesIndex.setDescription("The index to the DC powerplant fuse.")
dm3StatusFusesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesName.setDescription("The name of the fuse. The maximum size is \n16 characters. The name is set by using the \ndm3ConfigFuseName OID.\nThis OID is provided for informational purposes only.")
dm3StatusFusesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("statusClosed", 1), ("statusOpen", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm3StatusFusesStatus.setDescription("Getting this OID will return statusClosed (1) if the fuse is closed.\nstatusOpen (2) will be returned if the fuse is open.")
automaticTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8))
atsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1))
atsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentHardwareRev.setDescription("The hardware revision of the Automatic Transfer Switch. \nThis value is set at the factory.")
atsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareRev.setDescription("A string identifying the Automatic Transfer Switch \nfirmware revision.")
atsIdentFirmwareDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentFirmwareDate.setDescription("The date of release for this Automatic Transfer Switch \nfirmware revision. ")
atsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDateOfManufacture.setDescription("The date when the Automatic Transfer Switch was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ")
atsIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentModelNumber.setDescription("A string identifying the model number of the Automatic Transfer Switch. \nThis value is set at the factory.")
atsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentSerialNumber.setDescription("A string identifying the serial number of \nthe Automatic Transfer Switch. This value is set at the factory.")
atsIdentNominalLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentNominalLineVoltage.setDescription("RMS Utility Voltage measured in Volts.")
atsIdentNominalLineFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentNominalLineFrequency.setDescription("Utility Power Frequency measured in Hertz.")
atsIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsIdentDeviceRating.setDescription("This gives the device rating in Amps")
atsCalibration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2))
atsCalibrationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1))
atsCalibrationNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumInputs.setDescription("The number of inputs to this device.")
atsCalibrationNumInputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumInputPhases.setDescription("The number of phases per input for this device.")
atsCalibrationInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3))
if mibBuilder.loadTexts: atsCalibrationInputPhaseTable.setDescription("The number of phases per input line to this device.")
atsCalibrationInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1)).setIndexNames((0, "PowerNet-MIB", "atsCalibrationInputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationInputPhaseTableIndex"))
if mibBuilder.loadTexts: atsCalibrationInputPhaseEntry.setDescription("An entry containing calibration information applicable to a\nparticular input phase.")
atsCalibrationInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationInputTableIndex.setDescription("The input identifier.")
atsCalibrationInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationInputPhaseTableIndex.setDescription("The input phase identifier.")
atsLineVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsLineVoltageCalibrationFactor.setDescription("The Line Voltage Calibration factor.\nThis value is set at the factory.")
atsCalibrationPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2))
atsCalibrationPowerSupplyVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltages.setDescription("The number of power supply voltages supported by this device.\nThis variable indicates the number of rows in the\natsCalibrationPowerSupplyTable.")
atsCalibrationPowerSupplyVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2))
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageTable.setDescription("A list of Power Supply table entries.")
atsCalibrationPowerSupplyVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "atsCalibrationPowerSupplyVoltageTableIndex"))
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageEntry.setDescription("An entry containing information applicable to a\nparticular Power Supply Voltage.")
atsCalibrationPowerSupplyVoltageTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltageTableIndex.setDescription("The power supply voltage identifier.")
atsCalibrationPowerSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,2,3,1,)).subtype(namedValues=NamedValues(("powerSupply24V", 1), ("powerSupply12V", 2), ("powerSupply", 3), ("powerSupply24VSourceB", 4), ("powerSupplyMinus12V", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationPowerSupplyVoltage.setDescription("This value describes the power supply voltage of\n24V Source A, 24V Source B, +12V, -12V and 5V.")
atsPowerSupplyVoltageCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsPowerSupplyVoltageCalibrationFactor.setDescription("The Line Voltage Calibration factor.\nThis value is set at the factory.")
atsCalibrationOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3))
atsCalibrationNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumOutputs.setDescription("The number of output lines from this device.\nThis variable indicates the number of rows in the\natsCalibrationOutputTable.")
atsCalibrationNumOutputPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationNumOutputPhases.setDescription("The number of output phases utilized in this\ndevice.")
atsCalibrationOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3))
if mibBuilder.loadTexts: atsCalibrationOutputTable.setDescription("A list of output table entries.")
atsCalibrationOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1)).setIndexNames((0, "PowerNet-MIB", "atsCalibrationOutputTableIndex"), (0, "PowerNet-MIB", "atsCalibrationOutputPhasesTableIndex"))
if mibBuilder.loadTexts: atsCalibrationOutputEntry.setDescription("An entry containing information applicable to a\nparticular output.")
atsCalibrationOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationOutputTableIndex.setDescription("The output identifier.")
atsCalibrationOutputPhasesTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsCalibrationOutputPhasesTableIndex.setDescription("Description of each calibration factor for each \noutput phase utilized in this device and one for neutral. ")
atsOutputCurrentCalibrationFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputCurrentCalibrationFactor.setDescription("The output current calibration factor measured in Amps.")
atsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3))
atsControlResetATS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("none", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlResetATS.setDescription("Setting this variable will cause the Automatic Transfer Switch to \nperform a power-on reset.")
atsControlClearAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("none", 1), ("clear", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsControlClearAllAlarms.setDescription("Setting this variable will clear all alarms in the Automatic Transfer Switch.\nReturns (-1) if unsupported.")
atsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4))
atsConfigProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigProductName.setDescription("A configurable character string.")
atsConfigPreferredSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("none", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPreferredSource.setDescription("This variable returns the preferred source of power when both sources are OK.")
atsConfigFrontPanelLockout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disableFrontPanel", 1), ("enableFrontPanel", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrontPanelLockout.setDescription("Setting this variable to disableFrontPanel(1), prevents source \npreference configuration of the Automatic Transfer Switch via the\nFront Panel. \nSetting this variable to enableFrontPanel(2)allows, source preference \nconfiguration of the Automatic Transfer Switch via the Front Panel.")
atsConfigVoltageSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("high", 1), ("low", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigVoltageSensitivity.setDescription("This variable defines the sensitivity to changes in voltage: \nhigh(1) for best protection, low(2) for frequent small line \nvoltage changes.")
atsConfigTransferVoltageRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("wide", 1), ("medium", 2), ("narrow", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigTransferVoltageRange.setDescription("This variable defines the range of acceptable voltage from a power source.\nIf the voltage measured from the selected input source is not within this\nrange, the Automatic Transfer Switch will switch over (transfer) to the \nalternate power source.")
atsConfigCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigCurrentLimit.setDescription("The threshold (in Amps) at which an Over Current Alarm will be generated.\nThis OID returns the overload threshold value of the\nOID atsConfigPhaseOverLoadThreshold for the 1U ATS and \nOID atsConfigBankOverLoadThreshold of total for the 2U ATS.\nSetting this OID does not have any impact on the device.")
atsConfigResetValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("none", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigResetValues.setDescription("Resets the ATS configuration to its default values.\nReturns (-1) if not supported.")
atsConfigLineVRMS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMS.setDescription("To configure the input RMS voltage.")
atsConfigLineVRMSNarrowLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSNarrowLimit.setDescription("To configure the Line VRMS Narrow Limit.")
atsConfigLineVRMSMediumLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSMediumLimit.setDescription("To configure the Line VRMS Medium Limit.")
atsConfigLineVRMSWideLimit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigLineVRMSWideLimit.setDescription("To configure the Line VRMS Wide Limit.")
atsConfigFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigFrequencyDeviation.setDescription("To configure the frequency deviation.")
atsConfigBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBankTableSize.setDescription("The size of the bank table.")
atsConfigBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14))
if mibBuilder.loadTexts: atsConfigBankTable.setDescription("Allows for configuration of each ATS bank.")
atsConfigBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1)).setIndexNames((0, "PowerNet-MIB", "atsConfigBankTableIndex"))
if mibBuilder.loadTexts: atsConfigBankEntry.setDescription("This gives access to bank current threshold")
atsConfigBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBankTableIndex.setDescription("An index to the bank table entry.")
atsConfigBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigBank.setDescription("The bank number of an ATS")
atsConfigBankLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankLowLoadThreshold.setDescription("A threshold that indicates the current drawn is nearing \na low consumption condition. It is represented in Amps.  \nA warning will be issued when the load is less than the \nthreshold value.  \n\nA threshold value of 0 Amps disables this warning.  \n\nMaximum value must be less than the value returned \nby the atsConfigBankNearOverLoadThreshold OID.")
atsConfigBankNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankNearOverLoadThreshold.setDescription("A threshold that indicates the current drawn is nearing \nan overload condition. It is represented in Amps.  \nA warning will be issued when the load is greater than \nor equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe atsConfigBankLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the atsConfigBankOverLoadThreshold OID.")
atsConfigBankOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigBankOverLoadThreshold.setDescription("A threshold that indicates the current drawn has entered \nan overload condition. It is represented in Amps.  \nA warning will be issued when the load is greater than or\nequal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the atsConfigBankNearOverLoadThreshold OID.\n\nMaximum value must be less than or equal to the value returned by \natsIdentDeviceRating OID.")
atsConfigPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhaseTableSize.setDescription("The size of the phase table.")
atsConfigPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16))
if mibBuilder.loadTexts: atsConfigPhaseTable.setDescription("Allows for configuration of each ATS phase.")
atsConfigPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1)).setIndexNames((0, "PowerNet-MIB", "atsConfigPhaseTableIndex"))
if mibBuilder.loadTexts: atsConfigPhaseEntry.setDescription("This gives access to phase threshold")
atsConfigPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhaseTableIndex.setDescription("The index to the phase table entry.")
atsConfigPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsConfigPhase.setDescription("The phase number of an ATS")
atsConfigPhaseLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseLowLoadThreshold.setDescription("A threshold that indicates the current drawn is nearing \na low consumption condition. It is represented in Amps.\nA warning will be issued when the load is less than the\nthreshold value.  \n\nA threshold value of 0 Amps disables this warning.  \n\nMaximum value must be less than the value returned \nby the atsConfigPhaseNearOverLoadThreshold OID.")
atsConfigPhaseNearOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseNearOverLoadThreshold.setDescription("A threshold that indicates the current drawn is nearing\nan overload condition. It is represented in Amps.  \nA warning will be issued when the load is greater than \nor equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe atsConfigPhaseLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the atsConfigPhaseOverLoadThreshold OID.")
atsConfigPhaseOverLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsConfigPhaseOverLoadThreshold.setDescription("A threshold that indicates the current drawn has entered \nan overload condition. It is represented in Amps.  \nA warning will be issued when the load is greater than or\nequal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the atsConfigPhaseNearOverLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by atsIdentDeviceRating OID.")
atsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5))
atsStatusDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1))
atsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("atsNeverDiscovered", 1), ("atsCommEstablished", 2), ("atsCommLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusCommStatus.setDescription("This variable returns the current communication status\nof the Automatic Transfer Switch. ")
atsStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSelectedSource.setDescription("This variable returns the current source of power. ")
atsStatusRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsRedundancyLost", 1), ("atsFullyRedundant", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusRedundancyState.setDescription("This variable returns the current redundancy state of the ATS.\natsRedundancyLost(1) indicates that the ATS is unable to\nswitch over to the alternate power source if the current source fails.\natsFullyRedundant(2) indicates that the ATS will switch over to \nthe alternate power source if the current source fails.")
atsStatusOverCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsOverCurrent", 1), ("atsCurrentOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusOverCurrentState.setDescription("This variable returns the output current state of the ATS.\natsOverCurrent(1) indicates that the ATS has exceeded the output \ncurrent threshold and will not allow a switch over to the alternate power\nsource if the current source fails.\natsCurrentOK(2) indicates that the output current is below the \noutput current threshold.\nThis OID returns the value of the OID atsOutputPhaseState for the 1U ATS and\nOID atsOutputBankState for the 2U ATS.")
atsStatus5VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus5VPowerSupply.setDescription("This variable returns the present state of the ATS 5V power supply.\natsPowerSupplyFailure(1) indicates the 5V power supply has failed\nand that the ATS serial port Configuration Menu is not accessible .\natsPowerSupplyOK(2) indicates that the ATS 5V power supply\nis operating within tolerance.")
atsStatus24VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus24VPowerSupply.setDescription("This variable returns the present state of the ATS 24V power supply for Source A.\natsPowerSupplyFailure(1) indicates the 24V power supply has failed\nand the ATS is unable to switch over to the alternate power source if \nthe current source fails.\natsPowerSupplyOK(2) indicates that the ATS 24V power supply\nis operating within tolerance.")
atsStatus24VSourceBPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus24VSourceBPowerSupply.setDescription("This variable returns the present state of the ATS 24V power supply for Source B.\natsPowerSupplyFailure(1) indicates the 24V power supply has failed\nand the ATS is unable to switch over to the alternate power source if \nthe current source fails.\natsPowerSupplyOK(2) indicates that the ATS 24V power supply\nis operating within tolerance.")
atsStatusPlus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPlus12VPowerSupply.setDescription("This variable returns the present state of the ATS 12V power supply.\natsPowerSupplyFailure(1) indicates the 12V power supply has failed\nand the ATS is unable to monitor the current sensors.\natsPowerSupplyOK(2) indicates that the ATS 12V power supply\nis operating within tolerance.")
atsStatusMinus12VPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("atsPowerSupplyFailure", 1), ("atsPowerSupplyOK", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusMinus12VPowerSupply.setDescription("This variable returns the present state of the ATS -12V power supply.\natsPowerSupplyFailure(1) indicates the -12V power supply has failed\nand the ATS is unable to monitor the current sensors.\natsPowerSupplyOK(2) indicates that the ATS -12V power supply\nis operating within tolerance.")
atsStatusSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fail", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSwitchStatus.setDescription("This variable returns the status of the ATS.")
atsStatusFrontPanel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("locked", 1), ("unlocked", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusFrontPanel.setDescription("This variable returns the present state of the ATS front panel. \nlocked(1): Front panel button cannot be used to change the sources.\nunlocked(2): Front panel button can be used to change the sources. ")
atsStatusSourceAStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fail", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSourceAStatus.setDescription("This variable returns the status of the Source A.")
atsStatusSourceBStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fail", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusSourceBStatus.setDescription("This variable returns the status of the Source B.")
atsStatusPhaseSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inSync", 1), ("outOfSync", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusPhaseSyncStatus.setDescription("This variable returns the status of the phase synch.")
atsStatusVoltageOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fail", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusVoltageOutStatus.setDescription("This variable returns the output voltage status.")
atsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fail", 1), ("ok", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatusHardwareStatus.setDescription("This variable returns the status of display board hardware.")
atsStatusResetValues = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2))
atsStatusResetMaxMinValues = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("none", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsStatusResetMaxMinValues.setDescription("Resets the maximum and minimum ATS values:\natsInputMaxVoltage,       atsInputMinVoltage,\natsInputMaxCurrent,       atsInputMinCurrent,\natsInputMaxPower,         atsInputMinPower,\natsOutputMaxCurrent,      atsOutputMinCurrent,\natsOutputMaxLoad,         atsOutputMinLoad,\natsOutputMaxPercentLoad,  atsOutputMinPercentLoad,\natsOutputMaxPower,        atsOutputMinPower,\natsOutputMaxPercentPower, atsOutputMinPercentPower.\nThese variables represent the maximum and minimum ATS values\nsince the last time they were read or reset by this OID.\nValues unsupported by this ATS will return (-1).")
atsStatusInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3))
atsNumInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumInputs.setDescription("The number of input feeds to this device.\nThis variable indicates the number of rows in the\ninput table.")
atsInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2))
if mibBuilder.loadTexts: atsInputTable.setDescription("A list of input table entries.  The number of entries\nis given by the value of atsNumInputs.")
atsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "atsInputTableIndex"))
if mibBuilder.loadTexts: atsInputEntry.setDescription("An entry containing information applicable to a\nparticular input.")
atsInputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputTableIndex.setDescription("The input identifier.")
atsNumInputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumInputPhases.setDescription("The number of input phases utilized in this\ndevice.  The sum of all the atsNumInputPhases\nvariable indicates the number of rows in the \ninput phase table.")
atsInputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputVoltageOrientation.setDescription("The input voltage orientation: \n1: unknown for this Source\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.")
atsInputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputFrequency.setDescription("The input frequency in Hertz, or -1 if it's unsupported\nby this Source.")
atsInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("main", 2), ("bypass", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputType.setDescription("The input type.")
atsInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputName.setDescription("A name given to a particular input.")
atsInputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3))
if mibBuilder.loadTexts: atsInputPhaseTable.setDescription("A list of input table entries.  The number of entries\nis given by the sum of the atsNumInputPhases.")
atsInputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1)).setIndexNames((0, "PowerNet-MIB", "atsInputPhaseTableIndex"), (0, "PowerNet-MIB", "atsInputPhaseIndex"))
if mibBuilder.loadTexts: atsInputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular input phase.")
atsInputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPhaseTableIndex.setDescription("The input identifier.")
atsInputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPhaseIndex.setDescription("The input phase identifier.")
atsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputVoltage.setDescription("The input voltage in VAC, or -1 if it's unsupported\nby this Source.")
atsInputMaxVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxVoltage.setDescription("The maximum input voltage in VAC measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsInputMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinVoltage.setDescription("The minimum input voltage in VAC measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputCurrent.setDescription("The input current in amperes, or -1 if it's\nunsupported by this Source.")
atsInputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxCurrent.setDescription("The maximum input current in amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsInputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinCurrent.setDescription("The minimum input current in amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputPower.setDescription("The input power in Watts, or -1 if it's unsupported\nby this Source.")
atsInputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMaxPower.setDescription("The maximum input power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsInputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsInputMinPower.setDescription("The minimum input power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsStatusOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4))
atsNumOutputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumOutputs.setDescription("The number of output feeds to this device.\nThis variable indicates the number of rows in the\noutput table.")
atsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2))
if mibBuilder.loadTexts: atsOutputTable.setDescription("A list of output table entries.  The number of entries\nis given by the value of atsOutputNumPhases.")
atsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "atsOutputTableIndex"))
if mibBuilder.loadTexts: atsOutputEntry.setDescription("An entry containing information applicable to a\nparticular output.")
atsOutputTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputTableIndex.setDescription("The output identifier.")
atsNumOutputPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsNumOutputPhases.setDescription("The number of output phases utilized in this\ndevice.  The sum of all the atsNumOutputPhases\nvariable indicates the number of rows in the \noutput phase table.")
atsOutputVoltageOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,5,1,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("singlePhase", 2), ("splitPhase", 3), ("threePhasePhaseToNeutral", 4), ("threePhasePhaseToPhase", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputVoltageOrientation.setDescription("The output voltage orientation: \n1: unknown for this ATS\n2: singlePhase - phase 1 voltage is between Phase 1\nand Neutral.\n3: splitPhase - phase 1 voltage is between Phase 1 and \nNeutral; phase 2 voltage is between Phase 2 and Neutral; \nphase 3 voltage is between Phase 1 and Phase 2.\n4: threePhasePhaseToNeutral - phase 1 voltage is between\nPhase 1 and Neutral; phase 2 voltage is between Phase 2 \nand Neutral; phase 3 voltage is between Phase 3 and\nNeutral.\n5: threePhasePhaseToPhase - phase 1 voltage is between \nPhase 1 and Phase 2; phase 2 voltage is between Phase 2\nand Phase 3; phase 3 voltage is between Phase 3 and\nPhase 1.")
atsOutputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputFrequency.setDescription("The output frequency in Hertz, or -1 if it's\nunsupported by this ATS.")
atsOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3))
if mibBuilder.loadTexts: atsOutputPhaseTable.setDescription("A list of output table entries.  The number of\nentries is given by the sum of the atsNumOutputPhases.")
atsOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "atsOutputPhaseTableIndex"), (0, "PowerNet-MIB", "atsOutputPhaseIndex"))
if mibBuilder.loadTexts: atsOutputPhaseEntry.setDescription("An entry containing information applicable to a\nparticular output phase.")
atsOutputPhaseTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseTableIndex.setDescription("The output identifier.")
atsOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("neutral", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseIndex.setDescription("Description of each output phase utilized in \nthis device and one for neutral. ")
atsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputVoltage.setDescription("The output voltage in VAC, or -1 if it's unsupported\nby this ATS.")
atsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputCurrent.setDescription("The output current in 0.1 amperes drawn \nby the load on the ATS, or -1 if it's unsupported\nby this ATS.")
atsOutputMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxCurrent.setDescription("The maximum output current in 0.1 amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinCurrent.setDescription("The minimum output current in 0.1 amperes measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputLoad.setDescription("The output load in VA, or -1 if it's unsupported\nby this ATS.")
atsOutputMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxLoad.setDescription("The maximum output load in VA measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1)  if unsupported.")
atsOutputMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinLoad.setDescription("The minimum output load in VA measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPercentLoad.setDescription("The percentage of the ATS load capacity in VA at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this ATS.")
atsOutputMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPercentLoad.setDescription("The maximum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPercentLoad.setDescription("The minimum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPower.setDescription("The output power in Watts, or -1 if it's\nunsupported by this ATS.")
atsOutputMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPower.setDescription("The maximum output power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPower.setDescription("The minimum output power in Watts measured\nsince the last time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPercentPower.setDescription("The percentage of the ATSpower capacity in Watts at \nredundancy @ (n + x) presently being used on this \noutput phase, or -1 if it's unsupported by this ATS.")
atsOutputMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMaxPercentPower.setDescription("The maximum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputMinPercentPower.setDescription("The minimum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this output phase since the last time\nthis variable was read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhaseState.setDescription("Getting this OID will return the phase load state.\n\nnormal(1) indicates that the bank is operating properly \nwithin the atsConfigPhaseLowLoadThreshold and \natsConfigPhaseNearOverLoadThreshold OID values.\n\nlowload(2) indicates that the bank load has dropped below \nthe atsConfigPhaseLowLoadThreshold OID value. An SNMP trap\nwill occur when this state is entered or cleared.\n\nnearoverload(3) indicates that the bank load is greater than \nor equal to the atsConfigPhaseNearOverLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noverload(4) indicates that the bank load is greater than or \nequal to the atsConfigPhaseOverLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.")
atsOutputBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankTableSize.setDescription("The size of the bank table.")
atsOutputBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5))
if mibBuilder.loadTexts: atsOutputBankTable.setDescription("Allows for getting table entries.")
atsOutputBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1)).setIndexNames((0, "PowerNet-MIB", "atsOutputBankTableIndex"))
if mibBuilder.loadTexts: atsOutputBankEntry.setDescription("This gives access to bank table entries")
atsOutputBankTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankTableIndex.setDescription("The index to the bank table entry.")
atsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputPhase.setDescription("The phase number of an ATS")
atsOutputBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("total", 1), ("bank1", 2), ("bank2", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBank.setDescription("The bank number of an ATS")
atsOutputBankCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankCurrent.setDescription("Getting this OID will return the bank current measured\nin tenths of Amps.")
atsOutputBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("lowload", 2), ("nearoverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankState.setDescription("Getting this OID will return the bank load state.\n\nnormal(1) indicates that the bank is \noperating properly within the atsConfigBankLowLoadThreshold \nand atsConfigBankNearOverLoadThreshold OID values.\n\nlowload(2) indicates that the bank load has dropped below the \natsConfigBankLowLoadThreshold OID value. An SNMP trap will \noccur when this state is entered or cleared.\n\nnearoverload(3) indicates that the bank load is greater than \nor equal to the atsConfigBankNearOverLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noverload(4) indicates that the bank load is greater than or \nequal to the atsConfigBankOverLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.")
atsOutputBankOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankOutputVoltage.setDescription("The output voltage in VAC, or -1 if it's unsupported\nby this ATS.")
atsOutputBankMaxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxCurrent.setDescription("The maximum output current, on the bank represented by \nOID atsOutputBank, in 0.1 amperes measured since the \nlast time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankMinCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinCurrent.setDescription("The minimum output current, on the bank represented by \nOID atsOutputBank, in 0.1 amperes measured since the \nlast time this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankLoad.setDescription("The output load, on the bank represented by \nOID atsOutputBank, in VA, or -1 if it's \nunsupported by this ATS.")
atsOutputBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxLoad.setDescription("The maximum output load, on the bank represented by \nOID atsOutputBank, in VA measured since the last \ntime this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1)  if unsupported.")
atsOutputBankMinLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinLoad.setDescription("The minimum output load, on the bank represented by \nOID atsOutputBank, in VA measured since the last \ntime this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPercentLoad.setDescription("The percentage of the ATS load capacity in VA at \nredundancy @ (n + x) presently being used on this \nbank, represented by OID atsOutputBank.\nReturns (-1) if unsupported.")
atsOutputBankMaxPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPercentLoad.setDescription("The maximum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this bank, represented by OID atsOutputBank, \nsince the last time this variable was read or \nreset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankMinPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPercentLoad.setDescription("The minimum percentage of the ATS load capacity in \nVA measured at redundancy @ (n + x) presently \nbeing used on this bank, represented by OID \natsOutputBank, since the last time this variable was \nread or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPower.setDescription("The output power in Watts on the bank represented by \nOID atsOutputBank or -1 if it's unsupported by this ATS.")
atsOutputBankMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPower.setDescription("The maximum output power in Watts measured on the bank\nrepresented by OID atsOutputBank since the last \ntime this variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankMinPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPower.setDescription("The minimum output power in Watts measured on the bank \nrepresented by OID atsOutputBank since the last time \nthis variable was read \nor reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankPercentPower.setDescription("The percentage of the ATSpower capacity in Watts at \nredundancy @ (n + x) presently being used on this \nbank, represented by OID atsOutputBank, or \n-1 if it's unsupported by this ATS.")
atsOutputBankMaxPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMaxPercentPower.setDescription("The maximum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this bank, represented by OID \natsOutputBank, since the last time this variable \nwas read or reset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
atsOutputBankMinPercentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsOutputBankMinPercentPower.setDescription("The minimum percentage of the ATSpower capacity\nin Watts measured at redundancy @ (n + x) presently\nbeing used on this bank, represented by OID atsOutputBank\nsince the last time this variable was read or \nreset (atsStatusResetMaxMinValues).\nReturns (-1) if unsupported.")
dc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9))
dcmim2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1))
dcmim2IdentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1))
dcmim2IdentSysFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2IdentSysFWVersion.setDescription("Integer representation of the power plant Master Controller firmware revision.")
dcmim2Control = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2))
dcmim2ControlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1))
dcmim2ControlRunFunctBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ControlRunFunctBatteryTest.setDescription("Getting this OID will return the battery functional test state. If \nthe test is off, the battTestOff (1) value will be returned.\nIf the test is on, the battTestOn (2) value will be\nreturned.  \n\nSetting this OID to battTestOff (1) will turn the battery functional test off.\nSetting this OID to battTestOn (2) will turn the battery functional test on.")
dcmim2ControlRunCapacityBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("battTestOff", 1), ("battTestOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ControlRunCapacityBatteryTest.setDescription("Getting this OID will return the battery capacity test state. If \nthe test is off, the battTestOff (1) value will be returned.\nIf the test is on, the battTestOn (2) value will be\nreturned.  \n\nSetting this OID to battTestOff (1) will turn the battery capacity test off.\nSetting this OID to battTestOn (2) will turn the battery capacity test on.")
dcmim2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3))
dcmim2ConfigSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1))
dcmim2ConfigSysHighTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysHighTempTrip.setDescription("Trip level (threshold) at which System High Temp alarm condition is created. \nRange 28 to 100 (degC).\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysHighTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysHighTempReset.setDescription("Level at which System High Temp alarm condition is reset (cleared). \nRange 25 to (upper temp - 3) (degC).\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysLowTempTrip = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysLowTempTrip.setDescription("Trip level (threshold) at which System Low Temp alarm condition is created. \nRange -100 to 10 (degC).\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigSysLowTempReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigSysLowTempReset.setDescription("Level at which System Low Temp alarm condition is reset (cleared). \nRange (lower temp + 3) to 13 (degC).\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2ConfigBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2))
dcmim2ConfigBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFloatVolt.setDescription("Battery Float Voltage defined at 25 degrees Celsius.\n\nValues are represented in thousandths of Volts (mV).")
dcmim2ConfigBattMaxRecharge = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattMaxRecharge.setDescription("Battery Maximum Recharge Rate.  This is the maximum current used\nduring battery charging.  \n\nValues are represented in thousandths of Amps (mA).")
dcmim2ConfigBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattMfgCapacity.setDescription("Battery capacity (Amp-Hour Size) as specified by the battery manufacturer.\n\nValues are represented in thousandths of Amp hours (mAHr).")
dcmim2ConfigBattType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattType.setDescription("Type of battery in the powerplant\n\nValid values range from 0 to 254.")
dcmim2ConfigBattFunctTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFunctTestDuration.setDescription("Duration of the battery functional test.\n\nValues are represented in thousandths of seconds (mSecs).")
dcmim2ConfigBattFunctTestThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattFunctTestThresh.setDescription("Threshold the battery voltage of the system must remain above\nin order to pass the battery functional test.\n\nValues are represented in thousandths of Volts (mV).")
dcmim2ConfigBattCapacityTestPercent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestPercent.setDescription("Threshold for good battery capacity test results.\n\nValues range from 0 to 100 percent.")
dcmim2ConfigBattCapacityTestEndThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestEndThresh.setDescription("Safeguard voltage at which battery capacity test will end \nif there is a battery problem.\n\nValues are represented in thousandths of Volts (mV).")
dcmim2ConfigBattCapacityTestCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigBattCapacityTestCurrent.setDescription("Constant current value used during battery capacity testing.\n\nValues are represented in thousandths of Amps (mA).")
dcmim2ConfigLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3))
dcmim2ConfigLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDTableSize.setDescription("The number of DC powerplant LVDs controllable\nby this IP address.")
dcmim2ConfigLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2))
if mibBuilder.loadTexts: dcmim2ConfigLVDTable.setDescription("Allows for accessing settings of the LVDs. The number of\nentries is contained in the dcmim2ConfigLVDTableSize OID.")
dcmim2ConfigLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dcmim2ConfigLVDIndex"))
if mibBuilder.loadTexts: dcmim2ConfigLVDEntry.setDescription("The LVD to configure.")
dcmim2ConfigLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDIndex.setDescription("The index to the DC powerplant LVD.")
dcmim2ConfigLVDTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigLVDTrip.setDescription("LVD Trip threshold.  System bus voltage at which LVD will trip (open)\nduring a battery backup operation.\n\nValues are represented in thousandths of Volts (mV).")
dcmim2ConfigLVDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmim2ConfigLVDReset.setDescription("LVD Reset threshold.  System bus voltage at which LVD will reset (close)\nafter AC power has been restored.\n\nValues are represented in thousandths of Volts (mV).")
dcmim2ConfigLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2ConfigLVDState.setDescription("Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.")
dcmim2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4))
dcmim2StatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1))
dcmim2StatusSysRectCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysRectCurrent.setDescription("System (Total Rectifier) current in thousandths of Amps (mA).")
dcmim2StatusSysLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysLoadCurrent.setDescription("Load current in thousandths of Amps (mA).")
dcmim2StatusSysBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysBusVoltage.setDescription("System bus voltage in thousandths of Volts (mV).")
dcmim2StatusSysAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysAmbientTemp.setDescription("System temperature based on sensor on Master Controller PCB.\n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2StatusSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysUpTime.setDescription("Length of time since the DC Powerplant controller has been powered up.")
dcmim2StatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusSysTempUnits.setDescription("The temperature scale used to display the temperature\nin the DC system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
dcmim2StatusRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2))
dcmim2StatusRectTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectTableSize.setDescription("The number of DC powerplant rectifiers viewable\nby this IP address.")
dcmim2StatusRectTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2))
if mibBuilder.loadTexts: dcmim2StatusRectTable.setDescription("Allows for accessing settings of the rectifiers. The number of\nentries is contained in the dcmim2StatusRectTableSize OID.")
dcmim2StatusRectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusRectIndex"))
if mibBuilder.loadTexts: dcmim2StatusRectEntry.setDescription("The rectifier to gather status from.")
dcmim2StatusRectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectIndex.setDescription("The index to the DC powerplant rectifier.")
dcmim2StatusRectDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectDevType.setDescription("This OID shows the rectifier device type.")
dcmim2StatusRectID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectID.setDescription("This OID shows the rectifier ID.  This enumerates the number of the rectifier within \na group of rectifiers.")
dcmim2StatusRectPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectPhyAddr.setDescription("This OID shows the rectifier physical address (the address on the bus).")
dcmim2StatusRectFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusTrue", 1), ("statusFalse", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectFail.setDescription("Getting this OID will return statusTrue (1) if the rectifier has failed.\nstatusFalse (2) will be returned if the rectifier has not failed.")
dcmim2StatusRectCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusRectCurrent.setDescription("This OID shows the individual rectifier current in thousandths of Amps (mA).")
dcmim2StatusBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3))
dcmim2StatusBattFloatVolt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattFloatVolt.setDescription("Battery Float Voltage represented in thousandths of Volts (mV).")
dcmim2StatusBattCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattCurrent.setDescription("Battery Current:  This OID shows the battery current in thousandths of Amps (mA).")
dcmim2StatusBattTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattTemp.setDescription("Battery Temperature:  \n\nValues are represented in thousandths of a degree.\nUnits are displayed in the scale shown in\nthe 'dcmim2StatusSysTempUnits' OID (Celsius or Fahrenheit).")
dcmim2StatusBattMfgCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattMfgCapacity.setDescription("Battery capacity (Amp-Hour Size) as specified by the battery manufacturer.\nValues are represented in thousandths of Amp hours (mAHr).")
dcmim2StatusBattTestCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattTestCapacity.setDescription("Battery capacity (Amp-Hour Size) as determined by the battery capacity test.  \nValues are represented in thousandths of Amp hours (mAHr).")
dcmim2StatusBattFunctTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,4,5,)).subtype(namedValues=NamedValues(("functTestNotPerformed", 1), ("functTestInProcess", 2), ("functTestInterrupted", 3), ("functTestPass", 4), ("functTestFail", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattFunctTestResult.setDescription("Results of the last battery functional test that was run.")
dcmim2StatusBattCapacityTestResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,4,5,)).subtype(namedValues=NamedValues(("capacityTestNotPerformed", 1), ("capacityTestInProcess", 2), ("capacityTestInterrupted", 3), ("capacityTestPass", 4), ("capacityTestFail", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusBattCapacityTestResult.setDescription("Results of the last battery capacity test that was run.")
dcmim2StatusLVD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4))
dcmim2StatusLVDTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDTableSize.setDescription("The number of DC powerplant LVDs accessible\nby this IP address.")
dcmim2StatusLVDTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2))
if mibBuilder.loadTexts: dcmim2StatusLVDTable.setDescription("Allows for accessing the LVDs. The number of\nentries is contained in the dcmim2StatusLVDTableSize OID.")
dcmim2StatusLVDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusLVDIndex"))
if mibBuilder.loadTexts: dcmim2StatusLVDEntry.setDescription("The LVD to access.")
dcmim2StatusLVDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDIndex.setDescription("The index to the DC powerplant LVD.")
dcmim2StatusLVDState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("statusClosed", 1), ("statusOpened", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusLVDState.setDescription("Getting this OID will return statusClosed (1) if the LVD is closed.\nstatusOpened (2) will be returned if the LVD is opened.")
dcmim2StatusAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5))
dcmim2StatusAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsTableSize.setDescription("The number of DC powerplant alarms viewable\nby this IP address.")
dcmim2StatusAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2))
if mibBuilder.loadTexts: dcmim2StatusAlarmsTable.setDescription("Allows for accessing system alarms. The number of\nentries is contained in the dcmim2StatusAlarmsTableSize OID.")
dcmim2StatusAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "dcmim2StatusAlarmsIndex"))
if mibBuilder.loadTexts: dcmim2StatusAlarmsEntry.setDescription("The alarm to display.")
dcmim2StatusAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsIndex.setDescription("The index of the system alarm.")
dcmim2StatusAlarmsText = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmim2StatusAlarmsText.setDescription("The 16 character text describing the active alarm condition.")
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1))
emIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1))
emIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emIdentFirmwareRevision.setDescription("The firmware revision of the Environmental Monitor.")
emConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2))
emConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbesNumProbes.setDescription("The number of temperature and humidity probes available.")
emConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2))
if mibBuilder.loadTexts: emConfigProbesTable.setDescription("A list of probes supported by the Environmental Monitor\nand their configurations.")
emConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "emConfigProbeNumber"))
if mibBuilder.loadTexts: emConfigProbesEntry.setDescription("The Environmental Monitor probe configurations.")
emConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbeNumber.setDescription("The index into an Environmental Monitor probe entry.")
emConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeName.setDescription("A descriptive name of the probe set by the user,\npossibly denoting its location or purpose.")
emConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighTempThreshold.setDescription("The high temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowTempThreshold.setDescription("The low temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigProbeTempUnits.setDescription("The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
emConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighHumidThreshold.setDescription("The high humidity alarm threshold for the probe in\npercent relative humidity.")
emConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowHumidThreshold.setDescription("The low humidity alarm threshold for the probe in\npercent relative humidity.")
emConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighTempEnable.setDescription("The high temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowTempEnable.setDescription("The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHighHumidEnable.setDescription("The high humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLowHumidEnable.setDescription("The low humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxTempThreshold.setDescription("The maximum temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinTempThreshold.setDescription("The minimum temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxHumidThreshold.setDescription("The maximun humidity alarm threshold for the probe in\npercent relative humidity.")
emConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinHumidThreshold.setDescription("The minimum humidity alarm threshold for the probe in\npercent relative humidity.")
emConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxTempEnable.setDescription("The maximum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinTempEnable.setDescription("The minimum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMaxHumidEnable.setDescription("The maximum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeMinHumidEnable.setDescription("The minimum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
emConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeTempHysteresis.setDescription("The number of degrees beyond the temperature thresholds\nat which an active temperature alarm will be cleared.\nThis configuration setting applies to all temperature\nthresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeHumidHysteresis.setDescription("The number of percent RH points beyond the humidity\nthresholds at which an active humidity alarm will be\ncleared. This configuration setting applies to all\nhumidity thresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
emConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigProbeLocation.setDescription("A string describing the location of the probe.")
emConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigContactsNumContacts.setDescription("The number of contacts supported by the Environmental\nMonitor.")
emConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4))
if mibBuilder.loadTexts: emConfigContactsTable.setDescription("A list of contacts supported by the Environmental Monitor\nand their configurations.")
emConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "emConfigContactNumber"))
if mibBuilder.loadTexts: emConfigContactsEntry.setDescription("The Environmental Monitor contact configurations.")
emConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emConfigContactNumber.setDescription("The index of an Environmental Monitor contact.")
emConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactName.setDescription("A descriptive name for an Environmental Monitor\ncontact set by the user, possibly denoting its\nlocation or purpose.")
emConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactEnable.setDescription("An Environmental Monitor contact alarm enable/disable.\nNo alarm will be generated if the contact is disabled(1).\nAn alarm will be generated if the contact is enabled(2)\nand the contact has been faulted.")
emConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactSeverity.setDescription("The severity of the alarm that will be triggered when\nthe input contact is activated. The alarms can be\ncritical(1), warning(2) or informational(3).")
emConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactNormalState.setDescription("The contact state that will be considered normal, i.e.\nwill not trigger an alarm. The states are open(1) or \nclosed(2).")
emConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emConfigContactLocation.setDescription("A descriptive label for the contact denoting its\nlocation or purpose.")
emStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3))
emStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusCommStatus.setDescription("The communication status between the agent\nand the Environmental Monitor.\n\nnoComm(1),   Communication has never been established.\ncomm(2),     Communication has been established.\ncommLost(3), Communication was established, but was lost.")
emStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbesNumProbes.setDescription("The number of available probes on the Environmental\nMonitor.")
emStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3))
if mibBuilder.loadTexts: emStatusProbesTable.setDescription("A list of probes supported by the Environmental Monitor\nand their status.")
emStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1)).setIndexNames((0, "PowerNet-MIB", "emStatusProbeNumber"))
if mibBuilder.loadTexts: emStatusProbesEntry.setDescription("The status of the probe.")
emStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeNumber.setDescription("The index of the probe.")
emStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeName.setDescription("A descriptive name for the probe set by the user,\npossibly denoting its location or purpose.")
emStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disconnected", 1), ("connected", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeStatus.setDescription("The connected status of the probe, either      \ndisconnected(1) or connected(2).")
emStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeCurrentTemp.setDescription("The current temperature reading from the probe displayed\nin the units shown in the 'emStatusProbeTempUnits' OID\n(Celsius or Fahrenheit).")
emStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeTempUnits.setDescription("The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
emStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeCurrentHumid.setDescription("The current humidity reading from the probe in\npercent relative humidity.")
emStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeHighTempViolation.setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a highTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is greater than or equal to\nthe high temperature threshold value, the \n'emConfigProbeHighTempThreshold' OID, and the value of the\n'emConfigProbeHighTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeHighTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeLowTempViolation.setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a lowTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is less than or equal to\nthe low temperature threshold value, the \n'emConfigProbeLowTempThreshold' OID, and the value of the\n'emConfigProbeLowTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeLowTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeHighHumidViolation.setDescription("The high humidity violation status of the probe humidity\nreading. This OID will show a highTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is greater than or equal to\nthe high humidity threshold value, the \n'emConfigProbeHighHumidThreshold' OID, and the value of the\n'emConfigProbeHighHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'emConfigProbeHighHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
emStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeLowHumidViolation.setDescription("The low humidity violation status of the probe humidity\nreading. This OID will show a lowTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is less than or equal to\nthe low humidity threshold value, the \n'emConfigProbeLowHumidThreshold' OID, and the value of the\n'emConfigProbeLowHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'emConfigProbeLowHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
emStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMaxTempViolation.setDescription("The max temperature violation status of the probe\ntemperature reading. This OID will show a maxTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is greater than or equal to\nthe maximun temperature threshold value, the \n'emConfigProbeMaxTempThreshold' OID, and the value of the\n'emConfigProbeMaxTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeMaxTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMinTempViolation.setDescription("The minimum temperature violation status of the probe\ntemperature reading. This OID will show a minTempViolation(2)\nif the current temperature reading shown in the\n'emStatusProbeCurrentTemp' OID is less than or equal to\nthe minimum temperature threshold value, the \n'emConfigProbeMinTempThreshold' OID, and the value of the\n'emConfigProbeMinTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'emConfigProbeMinTempEnable' OID is disabled,\nthis OID will show disabled(3).")
emStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMaxHumidViolation.setDescription("The maximum humidity violation status of the probe humidity\nreading. This OID will show a maxTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is greater than or equal to\nthe maximum humidity threshold value, the \n'emConfigProbeMaxHumidThreshold' OID, and the value of the\n'emConfigProbeMaxHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'emConfigProbeMaxHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
emStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusProbeMinHumidViolation.setDescription("The minimum humidity violation status of the probe humidity\nreading. This OID will show a minTempViolation(2)\nif the current humidity reading shown in the\n'emStatusProbeCurrentHumid' OID is less than or equal to\nthe minimum humidity threshold value, the \n'emConfigProbeMinHumidThreshold' OID, and the value of the\n'emConfigProbeMinHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'emConfigProbeMinHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
emStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactsNumContacts.setDescription("The number of contacts supported by the\nEnvironmental Monitor.")
emStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5))
if mibBuilder.loadTexts: emStatusContactsTable.setDescription("A list of contacts supported by the Environmental Monitor\nand their status.")
emStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1)).setIndexNames((0, "PowerNet-MIB", "emStatusContactNumber"))
if mibBuilder.loadTexts: emStatusContactsEntry.setDescription("The status of the contact.")
emStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactNumber.setDescription("The index of the Environmental Monitor contact.")
emStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactName.setDescription("A descriptive name for the Environmental Monitor contact\nset by the user, possibly denoting its location or purpose.")
emStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emStatusContactStatus.setDescription("The status of the Environmental Monitor contact. The status\nwill show noFault(1) if the contact is in the normal state\nand the 'emConfigContactEnable' OID is enabled. The status will\nshow a fault(2) if the contact is faulted and the \n'emContactEnable' OID is enabled. If the 'emConfigContactEnable'\nOID is disabled, the status will show disabled(3).")
integrated = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2))
iemIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1))
iemIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemIdentHardwareRevision.setDescription("The hardware revision of the Integrated Environmental\nMonitor.")
iemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2))
iemConfigProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbesNumProbes.setDescription("The number of temperature and humidity probes available.")
iemConfigProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2))
if mibBuilder.loadTexts: iemConfigProbesTable.setDescription("A list of probes supported by the Environmental Monitor\nand their configurations.")
iemConfigProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "iemConfigProbeNumber"))
if mibBuilder.loadTexts: iemConfigProbesEntry.setDescription("The Environmental Monitor probe configurations.")
iemConfigProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbeNumber.setDescription("The index to a Environmental Monitor probe entry.")
iemConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeName.setDescription("A descriptive name for the probe set by the user,\npossibly denoting its location or purpose.")
iemConfigProbeHighTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighTempThreshold.setDescription("The high temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeLowTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowTempThreshold.setDescription("The low temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigProbeTempUnits.setDescription("The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
iemConfigProbeHighHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighHumidThreshold.setDescription("The high humidity alarm threshold for the probe in\npercent relative humidity.")
iemConfigProbeLowHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowHumidThreshold.setDescription("The low humidity alarm threshold for the probe in\npercent relative humidity.")
iemConfigProbeHighTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighTempEnable.setDescription("The high temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeLowTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowTempEnable.setDescription("The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeHighHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHighHumidEnable.setDescription("The high humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeLowHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLowHumidEnable.setDescription("The low humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeMaxTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxTempThreshold.setDescription("The maximun temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeMinTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinTempThreshold.setDescription("The minimun temperature alarm threshold for the probe.\nUnits are displayed in the scale selected in the\n'iemConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeMaxHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxHumidThreshold.setDescription("The maximum humidity alarm threshold for the probe in\npercent relative humidity.")
iemConfigProbeMinHumidThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinHumidThreshold.setDescription("The minimum humidity alarm threshold for the probe in\npercent relative humidity.")
iemConfigProbeMaxTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxTempEnable.setDescription("The maximum temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeMinTempEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinTempEnable.setDescription("The low temperature alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeMaxHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMaxHumidEnable.setDescription("The maximum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeMinHumidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeMinHumidEnable.setDescription("The minimum humidity alarm enable/disable for the\nprobe. No alarm will be generated if this value\nis set to disabled(1). The alarm will be \ngenerated if this value is set to enabled(2) and\nthe threshold has been violated.")
iemConfigProbeTempHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeTempHysteresis.setDescription("The number of degrees beyond the temperature thresholds\nat which an active temperature alarm will be cleared.\nThis configuration setting applies to all temperature\nthresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeHumidHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeHumidHysteresis.setDescription("The number of percent RH points beyond the humidity\nthresholds at which an active humidity alarm will be\ncleared. This configuration setting applies to all\nhumidity thresholds.\nUnits are displayed in the scale selected in\nthe 'emConfigProbeTempUnits' OID (Celsius or Fahrenheit).")
iemConfigProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigProbeLocation.setDescription("A string describing the location of the probe.")
iemConfigContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigContactsNumContacts.setDescription("The number of contacts available on the Environmental\nMonitor.")
iemConfigContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4))
if mibBuilder.loadTexts: iemConfigContactsTable.setDescription("A list of contacts supported by the Environmental Monitor\nand their configurations.")
iemConfigContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "iemConfigContactNumber"))
if mibBuilder.loadTexts: iemConfigContactsEntry.setDescription("The Environmental Monitor contact configurations.")
iemConfigContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigContactNumber.setDescription("The index of an Environmental Monitor contact.")
iemConfigContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactName.setDescription("A descriptive name for the Environmental Monitor contact\nset by the user, possibly denoting its location or purpose.")
iemConfigContactEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactEnable.setDescription("An Environmental Monitor contact alarm enable/disable.")
iemConfigContactSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("critical", 1), ("warning", 2), ("informational", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactSeverity.setDescription("The severtity of the alarm that will be triggered when\nthe input contact is activated. The alarms can be\ncritical(1), warning(2) or informational(3).\nNOTE: informational(3) is deprecated (and no longer valid) for this OID.")
iemConfigContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactNormalState.setDescription("The contact state that will be considered normal, i.e.\nwill not trigger an alarm. The states are open(1) or \nclosed(2).")
iemConfigContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigContactLocation.setDescription("A descriptive label for the contact denoting its\nlocation or purpose.")
iemConfigConfigRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigConfigRelaysNumRelays.setDescription("The number of output relays supported by the Environmental\nMonitor.")
iemConfigRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6))
if mibBuilder.loadTexts: iemConfigRelaysTable.setDescription("A list of output relays supported by the Environmental Monitor\nand their configurations.")
iemConfigRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1)).setIndexNames((0, "PowerNet-MIB", "iemConfigRelayNumber"))
if mibBuilder.loadTexts: iemConfigRelaysEntry.setDescription("The Environmental Monitor output relay configurations.")
iemConfigRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemConfigRelayNumber.setDescription("The index of an Environmental Monitor output relay.")
iemConfigRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayName.setDescription("A descriptive name of an Environmental Monitor output relay, \nset by the user, describing its location or purpose.")
iemConfigRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayNormalState.setDescription("The normal state (non-fault state) of an Environmental\nMonitor output relay, either open(1) or closed(2).")
iemConfigRelayFaultCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iemConfigRelayFaultCondition.setDescription("The fault condition used to activate the output relay.")
iemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3))
iemStatusProbesNumProbes = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbesNumProbes.setDescription("The number of available probes on the Environmental\nMonitor.")
iemStatusProbesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2))
if mibBuilder.loadTexts: iemStatusProbesTable.setDescription("A list of probes supported by the Environmental Monitor\nand their status.")
iemStatusProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "iemStatusProbeNumber"))
if mibBuilder.loadTexts: iemStatusProbesEntry.setDescription("The status of the probe.")
iemStatusProbeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeNumber.setDescription("The index of the probe.")
iemStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeName.setDescription("A descriptive name for the probe set by the user.")
iemStatusProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disconnected", 1), ("connected", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeStatus.setDescription("The connected status of the probe, either      \ndisconnected(1) or connected(2).")
iemStatusProbeCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeCurrentTemp.setDescription("The current temperature reading from the probe displayed\nin the units shown in the 'iemStatusProbeTempUnits' OID\n(Celsius or Fahrenheit).")
iemStatusProbeTempUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeTempUnits.setDescription("The temperature scale used to display the temperature\nthresholds of the probe, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
iemStatusProbeCurrentHumid = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeCurrentHumid.setDescription("The current humidity reading from the probe in percent\nrelative humidity.")
iemStatusProbeHighTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("highTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeHighTempViolation.setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a highTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is greater than or equal to\nthe high temperature threshold value, the \n'iemConfigProbeHighTempThreshold' OID, and the value of the\n'iemConfigProbeHighTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeHighTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeLowTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("lowTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLowTempViolation.setDescription("The high temperature violation status of the probe\ntemperature reading. This OID will show a lowTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is less than or equal to\nthe low temperature threshold value, the \n'iemConfigProbeLowTempThreshold' OID, and the value of the\n'iemPConfigrobeLowTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeLowTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeHighHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noViolation", 1), ("highHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeHighHumidViolation.setDescription("The high humidity violation status of the probe humidity\nreading. This OID will show a highTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is greater than or equal to\nthe high humidity threshold value, the \n'iemConfigProbeHighHumidThreshold' OID, and the value of the\n'iemConfigProbeHighHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeHighHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeLowHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("lowHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLowHumidViolation.setDescription("The low humidity violation status of the probe humidity\nreading. This OID will show a lowTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is less than or equal to\nthe low humidity threshold value, the \n'iemConfigProbeLowHumidThreshold' OID, and the value of the\n'iemConfigProbeLowHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeLowHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeMaxTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("maxTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMaxTempViolation.setDescription("The max temperature violation status of the probe\ntemperature reading. This OID will show a maxTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is greater than or equal to\nthe maximun temperature threshold value, the \n'iemConfigProbeMaxTempThreshold' OID, and the value of the\n'iemConfigProbeMaxTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeMaxTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeMinTempViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("minTempViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMinTempViolation.setDescription("The minimum temperature violation status of the probe\ntemperature reading. This OID will show a minTempViolation(2)\nif the current temperature reading shown in the\n'iemStatusProbeCurrentTemp' OID is less than or equal to\nthe minimum temperature threshold value, the \n'iemConfigProbeMinTempThreshold' OID, and the value of the\n'iemConfigProbeMinTempEnable' OID is enabled. Otherwise it will show\nnoViolation(1). If the 'iemConfigProbeMinTempEnable' OID is disabled,\nthis OID will show disabled(3).")
iemStatusProbeMaxHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noViolation", 1), ("maxHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMaxHumidViolation.setDescription("The maximum humidity violation status of the probe humidity\nreading. This OID will show a maxTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is greater than or equal to\nthe maximum humidity threshold value, the \n'iemConfigProbeMaxHumidThreshold' OID, and the value of the\n'iemConfigProbeMaxHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1).  If the 'iemConfigProbeMaxHumidEnable' OID is\ndisabled, this OID will show disabled(3)")
iemStatusProbeMinHumidViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noViolation", 1), ("minHumidViolation", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeMinHumidViolation.setDescription("The minimum humidity violation status of the probe humidity\nreading. This OID will show a minTempViolation(2)\nif the current humidity reading shown in the\n'iemStatusProbeCurrentHumid' OID is less than or equal to\nthe minimum humidity threshold value, the \n'iemConfigProbeMinHumidThreshold' OID, and the value of the\n'iemConfigProbeMinHumidEnable' OID is enabled. Otherwise it will\nshow noViolation(1). If the 'iemConfigProbeMinHumidEnable' OID is\ndisabled, this OID will show disabled(3).")
iemStatusProbeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusProbeLocation.setDescription("A descriptive location for the probe set by the user.")
iemStatusContactsNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactsNumContacts.setDescription("The number of contacts supported on the\nEnvironmental Monitor.")
iemStatusContactsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4))
if mibBuilder.loadTexts: iemStatusContactsTable.setDescription("A list of contacts supported by the Environmental Monitor\nand their status.")
iemStatusContactsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1)).setIndexNames((0, "PowerNet-MIB", "iemStatusContactNumber"))
if mibBuilder.loadTexts: iemStatusContactsEntry.setDescription("The status of the contact.")
iemStatusContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactNumber.setDescription("The index of the Environmental Monitor contact.")
iemStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactName.setDescription("A descriptive name for the Environmental Monitor contact\nset by the user, denoting its location or purpose.")
iemStatusContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("noFault", 1), ("fault", 2), ("disabled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusContactStatus.setDescription("The status of the Environmental Monitor contact. The status\nwill show noFault(1) if the contact is in the normal state\nand the 'iemConfigContactEnable' OID is enabled. The status will\nshow a fault(2) if the contact is faulted and the \n'iemConfigContactEnable' OID is enabled. If the\n'iemConfigContactEnable' OID is disabled, the status will show\ndisabled(3).")
iemStatusRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelaysNumRelays.setDescription("The number of output relays supported on the\nEnvironmental Monitor.")
iemStatusRelaysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7))
if mibBuilder.loadTexts: iemStatusRelaysTable.setDescription("A list of output relays supported by the\nEnvironmental Monitor and their status.")
iemStatusRelaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1)).setIndexNames((0, "PowerNet-MIB", "iemStatusRelayNumber"))
if mibBuilder.loadTexts: iemStatusRelaysEntry.setDescription("The status of the relay.")
iemStatusRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayNumber.setDescription("The index of the output relay.")
iemStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayName.setDescription("A descriptive name for the output relay set by the\nuser, denoting its location or purpose.")
iemStatusRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("faultState", 1), ("normalState", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iemStatusRelayStatus.setDescription("The status of the output relay, either faultState(1) or\nnormalState(2).")
envMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3))
emsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1))
emsIdentEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentEMSName.setDescription("A character string identifying the \ndevice. ")
emsIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentProductNumber.setDescription("A character string identifying the model number of \nthe device. This value is set at the factory.")
emsIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentFirmwareRev.setDescription("The firmware revision of the device.")
emsIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentHardwareRev.setDescription("The hardware revision of the device. \nThis value is set at the factory.")
emsIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentDateOfManufacture.setDescription("The date when the device was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. ")
emsIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsIdentSerialNumber.setDescription("A character string identifying the serial number of \nthe device. This value is set at the factory.")
emsOutputRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2))
emsOutputRelayControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1))
if mibBuilder.loadTexts: emsOutputRelayControlTable.setDescription("Allows for control of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.")
emsOutputRelayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayControlOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayControlEntry.setDescription("The output relays to control.")
emsOutputRelayControlOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayIndex.setDescription("The index to the output relay entry.")
emsOutputRelayControlOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayName.setDescription("The name of the output relay.\nThis OID is provided for informational purposes only.")
emsOutputRelayControlOutputRelayCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("immediateCloseEMS", 1), ("immediateOpenEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayControlOutputRelayCommand.setDescription("Getting this variable will return the output relay state. If \nthe output relay is closed, the immediateCloseEMS (1) value will be returned.\nIf the output relay is open, the immediateOpenEMS (2) value will be\nreturned. \n       \nSetting this variable to immediateCloseEMS (1) will immediately close the relay.\n\nSetting this variable to immediateOpenEMS (2) will immediately open the relay.")
emsOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3))
emsOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1))
if mibBuilder.loadTexts: emsOutletControlTable.setDescription("Allows for control of individual outlet switches. The number of\nentries is contained in the emsStatusOutletCount OID.")
emsOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutletControlOutletIndex"))
if mibBuilder.loadTexts: emsOutletControlEntry.setDescription("The outlets to control.")
emsOutletControlOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletControlOutletIndex.setDescription("The index to the outlet entry.")
emsOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletControlOutletName.setDescription("The name of the outlet.\nThis OID is provided for informational purposes only.")
emsOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("immediateOnEMS", 1), ("immediateOffEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletControlOutletCommand.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOnEMS (1) value will be returned.\nIf the outlet is off, the immediateOffEMS (2) value will be\nreturned. \n\nSetting this variable to immediateOnEMS (1) will immediately turn the outlet on.\n\nSetting this variable to immediateOffEMS (2) will immediately turn the outlet off.")
emsSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4))
emsSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1))
if mibBuilder.loadTexts: emsSensorControlTable.setDescription("Allows for control/reset of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.")
emsSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsSensorControlSensorIndex"))
if mibBuilder.loadTexts: emsSensorControlEntry.setDescription("The sensors to control/reset.")
emsSensorControlSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorIndex.setDescription("The index to the sensor entry.")
emsSensorControlSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorSystemName.setDescription("The system name of the sensor.  This describes the hardware system\nintent of this sensor.")
emsSensorControlSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorControlSensorUserName.setDescription("The name of the sensor as given by the system user.")
emsSensorControlSensorCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("noCommandEMS", 1), ("resetCommandEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorControlSensorCommand.setDescription("Getting this variable will return noCommandEMS(1).  \n\nSetting this variable to resetCommandEMS(2) will issue a reset command to the\nsensor.  Some sensors cannot be manually reset and will not be affected \nby this command.")
emsAlarmDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5))
emsAlarmDeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1))
if mibBuilder.loadTexts: emsAlarmDeviceControlTable.setDescription("Allows for control of individual alarm devices. \nNote: Some alarm devices are not controllable.  The number of\nentries is contained in the emsStatusAlarmDeviceCount OID.")
emsAlarmDeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceControlDeviceIndex"))
if mibBuilder.loadTexts: emsAlarmDeviceControlEntry.setDescription("The alarm devices to control.")
emsAlarmDeviceControlDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceIndex.setDescription("The index to the alarm device entry.")
emsAlarmDeviceControlDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceName.setDescription("The name of the alarm device.\nThis OID is provided for informational purposes only.")
emsAlarmDeviceControlDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsAlarmDeviceControlDeviceCommand.setDescription("Getting this variable will return the device state. If \nthe device is active, the alarmDeviceOnEMS (1) value will be returned.\nIf the device is inactive, the alarmDeviceOffEMS (2) value will be\nreturned. If the device is not installed, the \nalarmDeviceNotInstalledEMS (3) value will be returned.\n\nActions resulting from setting this variable are device-dependent.\n\nSetting this variable to alarmDeviceOnEMS (1) will turn that device (ex. Beacon) on.       \nSetting this variable to alarmDeviceOffEMS (2) will turn that device off.")
emsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6))
emsConfigName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsConfigName.setDescription("The name of the device.")
emsConfigCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,)).subtype(namedValues=NamedValues(("lightDisabled", 1), ("lightOnInformational", 2), ("lightOnWarning", 3), ("lightOnSevere", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsConfigCheckLogLight.setDescription("The setting of this OID determines the level of event that will\ntrigger the check-log light on the EMS. This is not available on the EMU2.\n\nlightDisabled (1) disables the check-log light.\nlightOnInformational (2) lights check-log for any event of \n informational severity or above.\nlightOnWarning (3) lights check-log for any event of \n warning severity or above.\nlightOnSevere (4) lights check-log for any event of severe severity.")
emsProbeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7))
emsProbeConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1))
if mibBuilder.loadTexts: emsProbeConfigTable.setDescription("Allows for configuration of individual probes. The number of\nentries is contained in the emsStatusProbeCount OID.")
emsProbeConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsProbeConfigProbeIndex"))
if mibBuilder.loadTexts: emsProbeConfigEntry.setDescription("The probes to configure.")
emsProbeConfigProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeConfigProbeIndex.setDescription("The index to the probe entry.")
emsProbeConfigProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeName.setDescription("The name of the probe.")
emsProbeConfigProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeHighTempThresh.setDescription("Probe high temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLowTempThresh.setDescription("Probe low temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeHighHumidityThresh.setDescription("Probe high humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeConfigProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLowHumidityThresh.setDescription("Probe low humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeConfigProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMaxTempThresh.setDescription("Probe maximum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMinTempThresh.setDescription("Probe minimum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeDeltaTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeDeltaTemp.setDescription("Probe delta temperature. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMaxHumidityThresh.setDescription("Probe maximum humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeConfigProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeMinHumidityThresh.setDescription("Probe minimum humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeConfigProbeDeltaHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeDeltaHumidity.setDescription("Probe delta humidity. \n\nValues are represented in whole number percentage.")
emsProbeConfigProbeSTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTIncTempVariance.setDescription("Probe short-term increasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeSTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTIncTempTime.setDescription("Probe short-term increasing temperature time used for rate of change alarms. \n\nValues are represented in whole number minutes.")
emsProbeConfigProbeSTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTDecTempVariance.setDescription("Probe short-term decreasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeSTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeSTDecTempTime.setDescription("Probe short-term decreasing temperature time used for rate of change alarms. \n\nValues are represented in whole number minutes.")
emsProbeConfigProbeLTIncTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTIncTempVariance.setDescription("Probe long-term increasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeLTIncTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTIncTempTime.setDescription("Probe long-term increasing temperature time used for rate of change alarms. \n\nValues are represented in whole number hours.")
emsProbeConfigProbeLTDecTempVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTDecTempVariance.setDescription("Probe long-term decreasing temperature variance used for rate of change alarms. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeConfigProbeLTDecTempTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsProbeConfigProbeLTDecTempTime.setDescription("Probe long-term decreasing temperature time used for rate of change alarms. \n\nValues are represented in whole number hours.")
emsInputContactConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8))
emsInputContactConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1))
if mibBuilder.loadTexts: emsInputContactConfigTable.setDescription("Allows for configuration of individual input contacts. The number of\nentries is contained in the emsStatusInputContactCount OID.")
emsInputContactConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsInputContactConfigInputContactIndex"))
if mibBuilder.loadTexts: emsInputContactConfigEntry.setDescription("The input contacts to configure.")
emsInputContactConfigInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactConfigInputContactIndex.setDescription("The index to the input contact entry.")
emsInputContactConfigInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsInputContactConfigInputContactName.setDescription("The name of the input contact.")
emsInputContactConfigInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsInputContactConfigInputContactNormalState.setDescription("Getting this variable will return the normal state of the input contact. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n\nSetting this variable will change the normal state of the input contact")
emsOutputRelayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9))
emsOutputRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1))
if mibBuilder.loadTexts: emsOutputRelayConfigTable.setDescription("Allows for configuration of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.")
emsOutputRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayConfigOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayConfigEntry.setDescription("The output relays to configure.")
emsOutputRelayConfigOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayIndex.setDescription("The index to the output relay entry.")
emsOutputRelayConfigOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayName.setDescription("The name of the output relay.")
emsOutputRelayConfigOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutputRelayConfigOutputRelayNormalState.setDescription("Getting this variable will return the normal state of the output relay. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n       \nSetting this variable will change the normal state of the output relay")
emsOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10))
emsOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1))
if mibBuilder.loadTexts: emsOutletConfigTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the emsStatusOutletCount OID.")
emsOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutletConfigOutletIndex"))
if mibBuilder.loadTexts: emsOutletConfigEntry.setDescription("The outlets to configure.")
emsOutletConfigOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletConfigOutletIndex.setDescription("The index to the outlet entry.")
emsOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletConfigOutletName.setDescription("The name of the outlet.")
emsOutletConfigOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsOutletConfigOutletNormalState.setDescription("Getting this variable will return the normal state of the outlet. If \nthe normal state is on, the normallyOnEMS (1) value will be returned.\nIf the normal state is off, the normallyOffEMS (2) value will be\nreturned. \n\nSetting this variable will change the normal state of the outlet")
emsSensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11))
emsSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1))
if mibBuilder.loadTexts: emsSensorConfigTable.setDescription("Allows for configuration of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.")
emsSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsSensorConfigSensorIndex"))
if mibBuilder.loadTexts: emsSensorConfigEntry.setDescription("The sensors to configure.")
emsSensorConfigSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorConfigSensorIndex.setDescription("The index to the sensor entry.")
emsSensorConfigSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorConfigSensorSystemName.setDescription("The system name of the sensor.  This describes the hardware system\nintent of this sensor.")
emsSensorConfigSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorUserName.setDescription("The name of the sensor as given by the system user.")
emsSensorConfigSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorNormalState.setDescription("Getting this variable will return the normal state of the sensor. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.\n\nSetting this variable will change the normal state of the sensor.  Note:\nOnly the AUX sensor in the EMS has a configurable Normal State")
emsSensorConfigSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emsSensorConfigSensorAlarmDelay.setDescription("The delay (in seconds) after a sensor detects an alarm condition before the\ncondition is reported.")
emsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12))
emsStatusEMSName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusEMSName.setDescription("A character string identifying the \ndevice. ")
emsStatusCommStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("noComm", 1), ("comm", 2), ("commLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusCommStatus.setDescription("The communication status between the agent\nand the device.\n\nnoComm(1),   Communication has never been established.\ncomm(2),     Communication has been established.\ncommLost(3), Communication was established, but was lost.")
emsStatusProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusProbeCount.setDescription("The total number of T/H probes (both local and remote) that\nis supported by this device.")
emsStatusInputContactCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusInputContactCount.setDescription("The total number of Input Contacts that\nis supported by this device.")
emsStatusOutputRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusOutputRelayCount.setDescription("The total number of Output Relays that\nis supported by this device.")
emsStatusOutletCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusOutletCount.setDescription("The total number of  AC Outlets that\nis supported by this device.")
emsStatusSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusSensorCount.setDescription("The total number of Sensors that\nis supported by this device.")
emsStatusAlinkAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlinkAruDeviceCount.setDescription("The total number of remote Aru's supported by this device.")
emsStatusAlinkProbeDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlinkProbeDeviceCount.setDescription("The total number of remote T/H probes supported by this device.")
emsStatusAlarmDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusAlarmDeviceCount.setDescription("The number of alarm devices supported by this device.")
emsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusSysTempUnits.setDescription("The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
emsStatusCheckLogLight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("lightOff", 1), ("lightOn", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusCheckLogLight.setDescription("The status of the check-log light on the device.\nFor the EMU2, this will always indicate lightOff(1).\n\nlightOff (1) indicates the light is off (no new log entries).\nlightOn (2) indicates the light is on (new log entries present).")
emsStatusHardwareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsStatusHardwareStatus.setDescription("The status of the EMS hardware.  This integer should be interpreted\nas a bit map, with each bit representing the presence or absence of\na specific hardware error condition.\n\n0 indicates there are no error conditions detected in the EMS hardware.\n1 indicates a Current Limit error condition related to the Alink port.\n2 indicates incorrect hardware is plugged into an EMS port.\n3 indicates that both of these error conditions are present.")
emsProbeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13))
emsProbeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1))
if mibBuilder.loadTexts: emsProbeStatusTable.setDescription("Allows for access of individual probes. The number of\nentries is contained in the emsStatusProbeCount OID.")
emsProbeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsProbeStatusProbeIndex"))
if mibBuilder.loadTexts: emsProbeStatusEntry.setDescription("The probes to access.")
emsProbeStatusProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeIndex.setDescription("The index to the probe entry.")
emsProbeStatusProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeName.setDescription("The name of the probe.")
emsProbeStatusProbeTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeTemperature.setDescription("Probe temperature reading. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeStatusProbeHighTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHighTempThresh.setDescription("Probe high temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeStatusProbeLowTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeLowTempThresh.setDescription("Probe low temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeStatusProbeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHumidity.setDescription("Probe humidity reading. \n\nValues are represented in whole number percentage.")
emsProbeStatusProbeHighHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeHighHumidityThresh.setDescription("Probe high humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeStatusProbeLowHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeLowHumidityThresh.setDescription("Probe low humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeStatusProbeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeSerialNumber.setDescription("A label indicating the type (Local[L] or Remote[R]) and Number\nof the probe.  For example, the first local probe would be L1 and\nthe third remote probe would be R3.")
emsProbeStatusProbeCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeCommStatus.setDescription(" The state of communications to the probe.\ncommNeverDiscovered(1) indicates there has never been communications with this device.\ncommsEstablished(2) indicates communication is normal and active with this device.\ncommsLost(3) indicates communication had been established, but is no longer.")
emsProbeStatusProbeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeAlarmStatus.setDescription("The alarm status of the probe.  This integer should be interpreted\nas a bit map, with each bit representing the presence or absence of\nthe specific alarm conditions listed below.  The bit will be '1' if\nthe condition is present, and '0' if the condition is not present.\n\nBit  Hex. Value  Description\n1    0x0001      Maximum temperature exceeded.\n2    0x0002      High temperature exceeded.\n3    0x0004      Low temperature exceeded.\n4    0x0008      Minimum temperature exceeded.\n5    0x0010      Short-term increasing temperature rate exceeded.\n6    0x0020      Short-term decreasing temperature rate exceeded.\n7    0x0040      Long-term increasing temperature rate exceeded.\n8    0x0080      Long-term decreasing temperature rate exceeded.\n9    0x0100      Maximum humidity exceeded.\n10   0x0200      High humidity exceeded.\n11   0x0400      Low humidity exceeded.\n12   0x0800      Minimum humidity exceeded.")
emsProbeStatusProbeMaxTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMaxTempThresh.setDescription("Probe maximum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeStatusProbeMinTempThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMinTempThresh.setDescription("Probe minimum temperature threshold. \n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe emsStatusSysTempUnits OID (Celsius or Fahrenheit).")
emsProbeStatusProbeMaxHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMaxHumidityThresh.setDescription("Probe maximum humidity threshold. \n\nValues are represented in whole number percentage.")
emsProbeStatusProbeMinHumidityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsProbeStatusProbeMinHumidityThresh.setDescription("Probe minimum humidity threshold. \n\nValues are represented in whole number percentage.")
emsInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14))
emsInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1))
if mibBuilder.loadTexts: emsInputContactStatusTable.setDescription("Allows for access of individual input contacts. The number of\nentries is contained in the emsStatusInputContactCount OID.")
emsInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsInputContactStatusInputContactIndex"))
if mibBuilder.loadTexts: emsInputContactStatusEntry.setDescription("The input contacts to access.")
emsInputContactStatusInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactIndex.setDescription("The index to the input contact entry.")
emsInputContactStatusInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactName.setDescription("The name of the input contact.")
emsInputContactStatusInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("contactClosedEMS", 1), ("contactOpenEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactState.setDescription("Getting this variable will return the state of the input contact. If \nthe input contact is closed, the contactClosedEMS (1) value will be returned.\nIf the input contact state is open, the contactOpenEMS (2) value will be\nreturned. ")
emsInputContactStatusInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsInputContactStatusInputContactNormalState.setDescription("Getting this variable will return the normal state of the input contact. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is open, the normallyOpenEMS (2) value will be\nreturned. ")
emsOutputRelayStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15))
emsOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1))
if mibBuilder.loadTexts: emsOutputRelayStatusTable.setDescription("Allows for access of individual output relays. The number of\nentries is contained in the emsStatusOutputRelayCount OID.")
emsOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"))
if mibBuilder.loadTexts: emsOutputRelayStatusEntry.setDescription("The output relays to access.")
emsOutputRelayStatusOutputRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayIndex.setDescription("The index to the output relay entry.")
emsOutputRelayStatusOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayName.setDescription("The name of the output relay.")
emsOutputRelayStatusOutputRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("relayClosedEMS", 1), ("relayOpenEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayState.setDescription("Getting this variable will return the state of the output relay. If \nthe output relay is closed, the relayClosedEMS (1) value will be returned.\nIf the output relay is open, the relayOpenEMS (2) value will be\nreturned. ")
emsOutputRelayStatusOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutputRelayStatusOutputRelayNormalState.setDescription("Getting this variable will return the normal state of the output relay. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is open, the normallyOpenEMS (2) value will be\nreturned. ")
emsOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16))
emsOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1))
if mibBuilder.loadTexts: emsOutletStatusTable.setDescription("Allows for access of individual outlets. The number of\nentries is contained in the emsStatusOutletCount OID.")
emsOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsOutletStatusOutletIndex"))
if mibBuilder.loadTexts: emsOutletStatusEntry.setDescription("The outlets to access.")
emsOutletStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletIndex.setDescription("The index to the outlet entry.")
emsOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletName.setDescription("The name of the outlet.")
emsOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("outletOnEMS", 1), ("outletOffEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletState.setDescription("Getting this variable will return the state of the outlet. If \nthe outlet is on, the outletOnEMS (1) value will be returned.\nIf the outlet is off, the outletOffEMS (2) value will be\nreturned. ")
emsOutletStatusOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyOnEMS", 1), ("normallyOffEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsOutletStatusOutletNormalState.setDescription("Getting this variable will return the normal state of the outlet. If \nthe normal state is on, the normallyOnEMS (1) value will be returned.\nIf the normal state is off, the normallyOffEMS (2) value will be\nreturned. ")
emsAlarmDeviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17))
emsAlarmDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1))
if mibBuilder.loadTexts: emsAlarmDeviceStatusTable.setDescription("Allows for access of individual alarm devices. The number of\nentries is contained in the emsStatusAlarmDeviceCount OID.")
emsAlarmDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsAlarmDeviceStatusDeviceIndex"))
if mibBuilder.loadTexts: emsAlarmDeviceStatusEntry.setDescription("The alarm devices to access.")
emsAlarmDeviceStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceIndex.setDescription("The index to the alarm device entry.")
emsAlarmDeviceStatusDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceName.setDescription("The name of the alarm device.\nThis OID is provided for informational purposes only.")
emsAlarmDeviceStatusDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("alarmDeviceOnEMS", 1), ("alarmDeviceOffEMS", 2), ("alarmDeviceNotInstalledEMS", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsAlarmDeviceStatusDeviceState.setDescription("Getting this variable will return the device state. If \nthe device is active, the alarmDeviceOnEMS (1) value will be returned.\nIf the device is inactive, the alarmDeviceOffEMS (2) value will be\nreturned.  If the device is not installed, the \nalarmDeviceNotInstalledEMS (3) value will be returned.")
emsSensorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18))
emsSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1))
if mibBuilder.loadTexts: emsSensorStatusTable.setDescription("Allows for access of individual sensors. The number of\nentries is contained in the emsStatusSensorCount OID.")
emsSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1)).setIndexNames((0, "PowerNet-MIB", "emsSensorStatusSensorIndex"))
if mibBuilder.loadTexts: emsSensorStatusEntry.setDescription("The sensors to access.")
emsSensorStatusSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorIndex.setDescription("The index to the sensor entry.")
emsSensorStatusSensorSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorSystemName.setDescription("The system name of the sensor.  This describes the hardware system\nintent of this sensor.")
emsSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorName.setDescription("The name of the sensor as given by the system user.")
emsSensorStatusSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("sensorFaultedEMS", 1), ("sensorOKEMS", 2), ("sensorNotInstalledEMS", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorState.setDescription("Getting this variable will return the sensor state. If the sensor is faulted, \nthe sensorFaultedEMS (1) value will be returned.\nIf the sensor is not faulted, the sensorOKEMS (2) value will be\nreturned. If the sensor is not installed, the  sensorNotInstalledEMS (3) \nvalue will be returned.")
emsSensorStatusSensorNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyClosedEMS", 1), ("normallyOpenEMS", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorNormalState.setDescription("Getting this variable will return the normal state of the sensor. If \nthe normal state is closed, the normallyClosedEMS (1) value will be returned.\nIf the normal state is closed, the normallyOpenEMS (2) value will be\nreturned.")
emsSensorStatusSensorAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emsSensorStatusSensorAlarmDelay.setDescription("The delay (in seconds) after a sensor detects an alarm condition before the\ncondition is reported.")
modEnvMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4))
memModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1))
memModulesStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusTableSize.setDescription("The number of entries in the memModulesStatusTable.")
memModulesStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2))
if mibBuilder.loadTexts: memModulesStatusTable.setDescription("Allows for getting status information from the modules\nattached to the system.")
memModulesStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "memModulesStatusModuleNumber"))
if mibBuilder.loadTexts: memModulesStatusEntry.setDescription("The unit to get data from.")
memModulesStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleNumber.setDescription("The module number.")
memModulesStatusModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleName.setDescription("The module name.")
memModulesStatusModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModuleLocation.setDescription("The location of the module.")
memModulesStatusModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusModelNumber.setDescription("The model number of the module.")
memModulesStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusSerialNumber.setDescription("The serial number of the module.")
memModulesStatusFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusFirmwareRev.setDescription("The firmware revision of the module.")
memModulesStatusHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesStatusHardwareRev.setDescription("The hardware revision.")
memModulesConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesConfigTableSize.setDescription("The number of entries in the memModulesConfigTable.")
memModulesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4))
if mibBuilder.loadTexts: memModulesConfigTable.setDescription("Allows for getting status information from the modules\nattached to the system.")
memModulesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1)).setIndexNames((0, "PowerNet-MIB", "memModulesConfigModuleNumber"))
if mibBuilder.loadTexts: memModulesConfigEntry.setDescription("The unit to get data from.")
memModulesConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memModulesConfigModuleNumber.setDescription("The module number.")
memModulesConfigModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memModulesConfigModuleName.setDescription("The module name.")
memModulesConfigModuleLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memModulesConfigModuleLocation.setDescription("The location of the module.")
memSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2))
memSensorsStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSysTempUnits.setDescription("The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
memSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusTableSize.setDescription("The number of entries in the memSensorsStatusTable.")
memSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3))
if mibBuilder.loadTexts: memSensorsStatusTable.setDescription("Allows for getting sensor status information.")
memSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "memSensorsStatusModuleNumber"), (0, "PowerNet-MIB", "memSensorsStatusSensorNumber"))
if mibBuilder.loadTexts: memSensorsStatusEntry.setDescription("The unit to get data from.")
memSensorsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusModuleNumber.setDescription("The number of the module that the sensor is attached to.")
memSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorNumber.setDescription("The number of this sensor on the module.")
memSensorsStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorName.setDescription("The sensor name.")
memSensorsStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsStatusSensorLocation.setDescription("The location of the sensor.")
memSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsTemperature.setDescription("The sensor's current temperature reading. \nUnits are displayed in the scale shown in\nthe memSensorsStatusSysTempUnits OID (Celsius or Fahrenheit).")
memSensorsHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsHumidity.setDescription("The current humidity reading from the sensor.")
memSensorsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsCommStatus.setDescription("The communications status of the sensor.")
memSensorsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsAlarmStatus.setDescription("The alarm status of the sensor.")
memSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigTableSize.setDescription("The number of entries in the memSensorsConfigTable.")
memSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5))
if mibBuilder.loadTexts: memSensorsConfigTable.setDescription("Allows for getting configuration information from \nsensors attached to the system.")
memSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1)).setIndexNames((0, "PowerNet-MIB", "memSensorsConfigModuleNumber"), (0, "PowerNet-MIB", "memSensorsConfigSensorNumber"))
if mibBuilder.loadTexts: memSensorsConfigEntry.setDescription("The unit to get data from.")
memSensorsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigModuleNumber.setDescription("The number of the module that the sensor is attached to.")
memSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memSensorsConfigSensorNumber.setDescription("The number of this sensor on the module.")
memSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsName.setDescription("A descriptive name for the sensor.")
memSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsLocation.setDescription("The location of the sensor.")
memSensorsAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsAlarmGeneration.setDescription("Enable or disable alarm generation on this sensor.")
memSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempMaxThresh.setDescription("The temperature at which the MEM will generate a maximum\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempHighThresh.setDescription("The temperature at which the MEM will generate a high\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLowThresh.setDescription("The temperature at which the MEM will generate a low\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempMinThresh.setDescription("The temperature at which the MEM will generate a minimum\ntemperature threshold violation alarm on this sensor.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempThreshHysteresis.setDescription("The change in temperature required to cause a\ntemperature alarm to change from an active to an inactive state.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortDecRateThreshValue.setDescription("The value of the temperature short-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortDecRateThreshTime.setDescription("The time over which the temperature may not decrease\nbeyond the value specified by the temperature short-term\ndecreasing rate threshold value.")
memSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortIncRateThreshValue.setDescription("The value of the temperature short-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempShortIncRateThreshTime.setDescription("The time over which the temperature may not increase\nbeyond the value specified by the temperature short-term\nincreasing rate threshold value.")
memSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongDecRateThreshValue.setDescription("The value of the temperature long-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongDecRateThreshTime.setDescription("The time over which the temperature may not decrease\nbeyond the value specified by the temperature long-term\ndecreasing rate threshold value.")
memSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongIncRateThreshValue.setDescription("The value of the temperature long-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the memSensorsStatusSysTempUnits OID.")
memSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsTempLongIncRateThreshTime.setDescription("The time over which the temperature may not increase\nbeyond the value specified by the temperature long-term\nincreasing rate threshold value.")
memSensorsHumidityMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityMaxThresh.setDescription("The humidity at which the maximum humidity threshold alarm\nwill be generated.")
memSensorsHumidityHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityHighThresh.setDescription("The humidity at which the high humidity threshold alarm\nwill be generated.")
memSensorsHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityLowThresh.setDescription("The humidity at which the low humidity threshold alarm\nwill be generated.")
memSensorsHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityMinThresh.setDescription("The humidity at which the minimum humidity threshold alarm\nwill be generated.")
memSensorsHumidityThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memSensorsHumidityThreshHysteresis.setDescription("The change in humidity required to cause an active humidity\nalarm to change to the inactive state.")
memInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3))
memInputsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusTableSize.setDescription("The number of entries in the memInputsStatusTable.")
memInputsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2))
if mibBuilder.loadTexts: memInputsStatusTable.setDescription("Allows for getting input status information.")
memInputsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "memInputsStatusModuleNumber"), (0, "PowerNet-MIB", "memInputsStatusInputNumber"))
if mibBuilder.loadTexts: memInputsStatusEntry.setDescription("The unit to get data from.")
memInputsStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusModuleNumber.setDescription("The number of the module that the input is attached to.")
memInputsStatusInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputNumber.setDescription("The number of this input on the module.")
memInputsStatusInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputName.setDescription("The input name.")
memInputsStatusInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusInputLocation.setDescription("The location of the input.")
memInputsStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusCurrentState.setDescription("The current state of the input. This OID will return \ninputStateNotAplicable(4) for analog input types. ")
memInputsStatusCurrentAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusCurrentAnalogValue.setDescription("The current analog value of the input in the units defined\nby the user.")
memInputsStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("memNormal", 1), ("memWarning", 2), ("memCritical", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsStatusAlarmStatus.setDescription("The alarm status of the input.")
memInputsCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsCommStatus.setDescription("The communications status of the input. This OID is only supported by NBRK0200.")
memInputsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigTableSize.setDescription("The number of entries in the memInputsConfigTable.")
memInputsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4))
if mibBuilder.loadTexts: memInputsConfigTable.setDescription("Allows for getting input configuration information.")
memInputsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1)).setIndexNames((0, "PowerNet-MIB", "memInputsConfigModuleNumber"), (0, "PowerNet-MIB", "memInputsConfigInputNumber"))
if mibBuilder.loadTexts: memInputsConfigEntry.setDescription("The unit to get data from.")
memInputsConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigModuleNumber.setDescription("The number of the module that the input is attached to.")
memInputsConfigInputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memInputsConfigInputNumber.setDescription("The number of this input on the module.")
memInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputName.setDescription("The name of the input.")
memInputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputLocation.setDescription("The location of the input.")
memInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,5,)).subtype(namedValues=NamedValues(("noConnection", 1), ("dryContact", 2), ("digital", 3), ("analogmAmps", 4), ("analogVolts", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputType.setDescription("The type of input this contact will take.")
memInputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAlarmGeneration.setDescription("Enable or disable alarm generation on this input.")
memInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("inputClosedHighMEM", 1), ("inputOpenLowMEM", 2), ("inputDisabled", 3), ("inputStateNotApplicable", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputNormalState.setDescription("Defines the normal (no alarm) state of the input.")
memInputAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("inputSeverityinformational", 1), ("inputSeveritywarning", 2), ("inputSeveritysevere", 3), ("inputSeverityNotApplicable", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAbnormalSeverity.setDescription("Defines the severity of the event that is associated\nwith the abnormal state of the input.  This OID will return \ninputSeverityNotApplicable(4) for analog input types. ")
memInputNumberCalibrationPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputNumberCalibrationPoints.setDescription("The number of calibration points that are required for\nthis input.")
memInputAnalogCalibrationPoint1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint1.setDescription("The electrical value that the input sensor will measure at the\nfirst calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).")
memInputAnalogCalibrationPoint2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint2.setDescription("The electrical value that the input sensor will measure at the\nsecond calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).")
memInputAnalogCalibrationPoint3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint3.setDescription("The electrical value that the input sensor will measure at the\nthird calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).")
memInputAnalogCalibrationPoint4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint4.setDescription("The electrical value that the input sensor will measure at the\nfourth calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).")
memInputAnalogCalibrationPoint5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint5.setDescription("The electrical value that the input sensor will measure at the\nfifth calibration point.  \nThis OID is relevant only for inputs configured as analog type (ma or V).")
memInputAnalogCalibrationPoint1Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint1Value.setDescription("The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfirst calibration point.")
memInputAnalogCalibrationPoint2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint2Value.setDescription("The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nsecond calibration point.")
memInputAnalogCalibrationPoint3Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint3Value.setDescription("The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nthird calibration point.")
memInputAnalogCalibrationPoint4Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint4Value.setDescription("The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfourth calibration point.")
memInputAnalogCalibrationPoint5Value = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogCalibrationPoint5Value.setDescription("The value of the input, in units of measure defined by\nthe user, that corresponds to the current setting at the\nfifth calibration point.")
memInputAnalogMeasurementUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMeasurementUnits.setDescription("The units of measure to be used for this input.")
memInputAnalogMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMaxThresh.setDescription("The input value at which a maximum threshold violation\nalarm will be generated on this input.")
memInputAnalogHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogHighThresh.setDescription("The input value at which a high threshold violation\nalarm will be generated on this input.")
memInputAnalogLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogLowThresh.setDescription("The input value at which a low threshold violation\nalarm will be generated on this input.")
memInputAnalogMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogMinThresh.setDescription("The input value at which a minimum threshold violation\nalarm will be generated on this input.")
memInputAnalogThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memInputAnalogThreshHysteresis.setDescription("The change in value required to cause an alarm on this input\nto change from active to inactive.")
memOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4))
memOutputStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusTableSize.setDescription("The number of entries in the memOutputStatusTable.")
memOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2))
if mibBuilder.loadTexts: memOutputStatusTable.setDescription("Allows for getting output status information.")
memOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "memOutputStatusModuleNumber"), (0, "PowerNet-MIB", "memOutputStatusOutputNumber"))
if mibBuilder.loadTexts: memOutputStatusEntry.setDescription("The unit to get data from.")
memOutputStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusModuleNumber.setDescription("The number of the module that the output is attached to.")
memOutputStatusOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputNumber.setDescription("The number of this output on the module.")
memOutputStatusOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputName.setDescription("The output name.")
memOutputStatusOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusOutputLocation.setDescription("The location of the output.")
memOutputStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputStatusCurrentState.setDescription("The state of the output.")
memOutputConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigTableSize.setDescription("The number of entries in the memOutputConfigTable.")
memOutputConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4))
if mibBuilder.loadTexts: memOutputConfigTable.setDescription("Allows for getting output configuration information.")
memOutputConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1)).setIndexNames((0, "PowerNet-MIB", "memOutputConfigModuleNumber"), (0, "PowerNet-MIB", "memOutputConfigOutputNumber"))
if mibBuilder.loadTexts: memOutputConfigEntry.setDescription("The unit to get data from.")
memOutputConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigModuleNumber.setDescription("The number of the module that the output is attached to.")
memOutputConfigOutputNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutputConfigOutputNumber.setDescription("The number of this output on the module.")
memOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputName.setDescription("The name of the output.")
memOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputLocation.setDescription("The location of the output.")
memOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("memOutputClosed", 1), ("memOutputOpen", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputNormalState.setDescription("The state of the output that will not generate an alarm.")
memOutputAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("memActionClose", 1), ("memActionOpen", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutputAction.setDescription("Manual control actions for the output. SNMP get command will return the state\nof the output, SNMP set of this OID controls the output.")
memOutlets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5))
memOutletStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusTableSize.setDescription("The number of entries in the memOutletStatusTable.")
memOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2))
if mibBuilder.loadTexts: memOutletStatusTable.setDescription("Allows for getting outlet status information.")
memOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "memOutletStatusModuleNumber"), (0, "PowerNet-MIB", "memOutletStatusOutletNumber"))
if mibBuilder.loadTexts: memOutletStatusEntry.setDescription("The unit to get data from.")
memOutletStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusModuleNumber.setDescription("The number of the module that the outlet is attached to.")
memOutletStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletNumber.setDescription("The number of this outlet on the module.")
memOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletName.setDescription("The outlet name.")
memOutletStatusOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusOutletLocation.setDescription("The location of the outlet.")
memOutletStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletStatusCurrentState.setDescription("The state of the outlet.")
memOutletConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigTableSize.setDescription("The number of entries in the memOutletConfigTable.")
memOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4))
if mibBuilder.loadTexts: memOutletConfigTable.setDescription("Allows for getting outlet configuration information.")
memOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1)).setIndexNames((0, "PowerNet-MIB", "memOutletConfigModuleNumber"), (0, "PowerNet-MIB", "memOutletConfigOutletNumber"))
if mibBuilder.loadTexts: memOutletConfigEntry.setDescription("The unit to get data from.")
memOutletConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigModuleNumber.setDescription("The number of the module that the Outlet is attached to.")
memOutletConfigOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memOutletConfigOutletNumber.setDescription("The number of this Outlet on the module.")
memOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletName.setDescription("The name of the Outlet.")
memOutletLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletLocation.setDescription("The location of the Outlet.")
memOutletNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletNormalState.setDescription("The state of the Outlet that will not generate an alarm.")
memOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memOutletAction.setDescription("Manual control actions for the Outlet.  Get displays state\nof outlet, set controls outlet.")
memBeacons = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6))
memBeaconStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusTableSize.setDescription("The number of entries in the memBeaconStatusTable.")
memBeaconStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2))
if mibBuilder.loadTexts: memBeaconStatusTable.setDescription("Allows for getting beacon status information.")
memBeaconStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1)).setIndexNames((0, "PowerNet-MIB", "memBeaconStatusModuleNumber"), (0, "PowerNet-MIB", "memBeaconStatusBeaconNumber"))
if mibBuilder.loadTexts: memBeaconStatusEntry.setDescription("The unit to get data from.")
memBeaconStatusModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusModuleNumber.setDescription("The number of the module that the beacon is attached to.")
memBeaconStatusBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconNumber.setDescription("The number of this beacon on the module.")
memBeaconStatusBeaconName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconName.setDescription("The beacon name.")
memBeaconStatusBeaconLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusBeaconLocation.setDescription("The location of the beacon.")
memBeaconStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconStatusCurrentState.setDescription("The state of the beacon.")
memBeaconConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigTableSize.setDescription("The number of entries in the memBeaconConfigTable.")
memBeaconConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4))
if mibBuilder.loadTexts: memBeaconConfigTable.setDescription("Allows for getting beacon configuration information.")
memBeaconConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1)).setIndexNames((0, "PowerNet-MIB", "memBeaconConfigModuleNumber"), (0, "PowerNet-MIB", "memBeaconConfigBeaconNumber"))
if mibBuilder.loadTexts: memBeaconConfigEntry.setDescription("The unit to get data from.")
memBeaconConfigModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigModuleNumber.setDescription("The number of the module that the beacon is attached to.")
memBeaconConfigBeaconNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memBeaconConfigBeaconNumber.setDescription("The number of this beacon on the module.")
memBeaconConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconConfigName.setDescription("The name of the beacon.")
memBeaconConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconConfigLocation.setDescription("The location of the beacon.")
memBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: memBeaconAction.setDescription("Control action (on/off) for the beacon. Setting this OID will turn the\nbeacon on/off.  Getting this OID will respond with the current state.")
netlock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11))
nlIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 1))
nlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 2))
rPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12))
rPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1))
rPDUIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentName.setDescription("The name of the Rack PDU. \nThe maximum string size is device dependent.")
rPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentHardwareRev.setDescription("The hardware revision of the Rack PDU. \nThis value is set at the factory.")
rPDUIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentFirmwareRev.setDescription("An 8-byte ID string identifying the Rack PDU firmware revision. \nThis value is set at the factory.")
rPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDateOfManufacture.setDescription("The date when the Rack PDU was manufactured in mm/dd/yyyy format.\nThis value is set at the factory. The year 2000 will be \nrepresented by 00.")
rPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentModelNumber.setDescription("A 10-character string identifying the model number of \nthe Rack PDU. This value is set at the factory.")
rPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentSerialNumber.setDescription("A 12-character string identifying the serial number of \nthe Rack PDU. This value is set at the factory.")
rPDUIdentDeviceRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceRating.setDescription("Getting this OID will return the electrical rating of the device in Amps.")
rPDUIdentDeviceNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumOutlets.setDescription("Getting this OID will return the number of outlets contained in the device.")
rPDUIdentDeviceNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumPhases.setDescription("Getting this OID will return the number of phases supported by the device.")
rPDUIdentDeviceNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceNumBreakers.setDescription("Getting this OID will return the number of circuit breakers supported by the device.\nThis is the same as the number of banks of outlets.\n0 will be returned if the unit has no phase breakers. ")
rPDUIdentDeviceBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceBreakerRating.setDescription("Getting this OID will return rating of the circuit breakers\non the device in Amps if it has any.")
rPDUIdentDeviceOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("orientHorizontal", 1), ("orientVertical", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceOrientation.setDescription("Getting this OID will return the intended physical orientation of the device.\n\nOrientHorizonatal(1) indicates Horizontal.\nOrientVertical(2) indicates Vertical.")
rPDUIdentDeviceOutletLayout = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,8,4,5,3,6,1,7,9,)).subtype(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDeviceOutletLayout.setDescription("Getting this OID will return outlet layout for the device.\n\nseqPhaseToNeutral(1) indicates outlet layout as follows:\n1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\n\nseqPhaseToPhase(2) indicates outlet layout as follows:\n1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\nseqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\nseqPhToPhGrouped(4) indicates outlet layout as follows:\nFor AP8xxx SKU's Group 1:1-2, Group 2:2-3, Group 3:3-1.\nFor AP7xxx SKU's Group 1:3-1. Group 2:2-3, Group 3:1-2.  \n\nseqPhToNGrouped(5) indicates outlet layout as follows:\nThis unit has 3 outlet groups.  Group 1:1-N, Group 2:2-N, Group 3:3-N.\n\nseqPToN1516PToPGrouped(6) indicates outlet layout as follows:\nThis unit has 4 outlet groups. Group 1 (Outlets 1-14):1-2, \nGroup 2 (Outlets 15-16):1-N, Group 3:2-3, Group 4:3-1.\n\nseqPhToPh2xGrouped(7) indicates outlet layout as follows:\nThis unit has 6 outlet groups.  Group 1:1-2, Group 2:1-2, Group 3:2-3,\nGroup 4:2-3, Group 5:3-1, Group 6:3-1.\n\nseqPhToN2xGrouped(8) indicates outlet layout as follows:\nThis unit has 6 outlet groups.  Group 1:1-N, Group 2:1-N, Group 3:2-N,\nGroup 4:2-N, Group 5:3-N, Group 6:3-N.\n\nseqNotApplicable(9):\nOutlet layout does not affect any of the user interfaces.\nThese SKUs may report seqNotApplicable(9) if there is \nnot an exact outlet layout match available.")
rPDUIdentDeviceDisplayOrientation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceDisplayOrientation.setDescription("Getting this OID will return the intended physical orientation of the Seven-Segment Display.\n\nNormal(1) indicates Normal.\nReverse(2)indicates Upside-Down.")
rPDUIdentDeviceLinetoLineVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceLinetoLineVoltage.setDescription("Getting/Setting this OID will return/set the Line to Line Voltage.\nThis OID defaults to the nominal input line voltage in volts AC.\nThis setting is used to calculate total power and must be configured for best accuracy.\nThis OID does not apply to AP86XX, AP88XX, or AP89XX SKUs.\n\nThe valid range is between 0V to 440V")
rPDUIdentDevicePowerWatts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDevicePowerWatts.setDescription("Getting this OID will return the Power in Watts.")
rPDUIdentDevicePowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDevicePowerFactor.setDescription("Getting/setting this OID will return/set the \nPower Factor in thousanths (1000 is power factor of 1).\nFor AP8XXX SKUs, this OID is read-only\n\nValid range is from 0 to 1000.")
rPDUIdentDevicePowerVA = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUIdentDevicePowerVA.setDescription("Getting this OID will return the Power in VA.")
rPDUIdentDeviceLinetoNeutralVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUIdentDeviceLinetoNeutralVoltage.setDescription("Getting/Setting this OID will return/set the Line to Neutral Voltage.\nThis OID defaults to the nominal line to neutral voltage in volts AC.\nThis setting is used to calculate total power and must be configured for best accuracy.\nThis OID applies only to AP7823. For all other models, the OID is fixed at 0.\n\nThe valid range is between 0V to 440V.")
rPDULoad = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2))
rPDULoadDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1))
rPDULoadDevMaxPhaseLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxPhaseLoad.setDescription("Getting this OID will return the maximum rated power\nthat each phase of the Rack PDU can provide. It is \nrepresented in Amps.\n\n0 will be returned if the unit is banked.")
rPDULoadDevNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevNumPhases.setDescription("The number of phases available with this Rack PDU.")
rPDULoadDevMaxBankLoad = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxBankLoad.setDescription("Getting this OID will return the maximum rated power\nthat a bank of the Rack PDU can provide. It is \nrepresented in Amps.\n\n0 will be returned if the device does not have any banks.")
rPDULoadDevNumBanks = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevNumBanks.setDescription("The number of banks of outlets available with this Rack PDU.\nA bank of outlets has a unique circuit breaker for a subset \nof the total number of outlets on the rPDU.\n\n0 will be returned if the unit has no banks.")
rPDULoadDevBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankTableSize.setDescription("The size of the Bank Table.")
rPDULoadDevBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6))
if mibBuilder.loadTexts: rPDULoadDevBankTable.setDescription("Allows for getting the Bank Max Load in the Rack PDU.")
rPDULoadDevBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1)).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevBankIndex"))
if mibBuilder.loadTexts: rPDULoadDevBankEntry.setDescription("The Rack PDU Banks Access.")
rPDULoadDevBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankIndex.setDescription("The index to the Rack PDU bank entry.")
rPDULoadDevBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankNumber.setDescription("Getting this OID will return the bank number.")
rPDULoadDevBankMaxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevBankMaxLoad.setDescription("Getting this OID will return the maximum rated power\nthat each bank of the Rack PDU can provide. It is \nrepresented in Amps.")
rPDULoadDevMaxOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxOutletTableSize.setDescription("The size of the Outlet Table.")
rPDULoadDevMaxOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8))
if mibBuilder.loadTexts: rPDULoadDevMaxOutletTable.setDescription("Allows for getting the Max Outlet Load in an Outlet Monitored Rack PDU.")
rPDULoadDevMaxOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1)).setIndexNames((0, "PowerNet-MIB", "rPDULoadDevOutletIndex"))
if mibBuilder.loadTexts: rPDULoadDevMaxOutletEntry.setDescription("This gives access to Max Outlet Load of an Outlet Monitored Rack PDU")
rPDULoadDevOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevOutletIndex.setDescription("The index to the Outlet Monitored Rack PDU Max Outlet Load entry.")
rPDULoadDevOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevOutletNumber.setDescription("Getting this OID will return the Outlet number.")
rPDULoadDevMaxOutletLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadDevMaxOutletLoad.setDescription("Getting this OID will return the maximum rated power\nthat each Outlet of an Outlet Monitored Rack PDU can provide. It is \nrepresented in Amps. ")
rPDULoadPhaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2))
rPDULoadPhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1))
if mibBuilder.loadTexts: rPDULoadPhaseConfigTable.setDescription("Allows for configuration of each Rack PDU phase.\nThe number of entries is contained in the \nrPDULoadDevNumPhases OID.")
rPDULoadPhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDULoadPhaseConfigIndex"))
if mibBuilder.loadTexts: rPDULoadPhaseConfigEntry.setDescription("The Rack PDU phase to configure.")
rPDULoadPhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadPhaseConfigIndex.setDescription("The index to the Rack PDU phase entry.")
rPDULoadPhaseConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigLowLoadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDULoadPhaseConfigNearOverloadThreshold OID.")
rPDULoadPhaseConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigNearOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDULoadPhaseConfigLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadPhaseConfigOverloadThreshold OID.")
rPDULoadPhaseConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadPhaseConfigOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDULoadPhaseConfigNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxPhaseLoad OID.")
rPDULoadPhaseConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadPhaseConfigAlarm.setDescription("Getting this OID will return the current Phase Alarm.")
rPDULoadStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3))
rPDULoadStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1))
if mibBuilder.loadTexts: rPDULoadStatusTable.setDescription("Allows for getting of status of each Rack PDU phase/bank.\nThe number of entries is calculated by adding\nthe number of phases (rPDULoadDevNumPhases OID) and\nthe number of banks of outlets (rPDULoadDevNumBanks)\nNumber of entries = #phases + #banks.\nNOTE: If a device has phase and bank information, all phase information\nshall precede the bank information.  If a device has total information, \nit shall precede both the bank and the phase information.")
rPDULoadStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDULoadStatusIndex"))
if mibBuilder.loadTexts: rPDULoadStatusEntry.setDescription("The Rack PDU phase/bank to gather status from.")
rPDULoadStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusIndex.setDescription("The index to the Rack PDU phase/bank entry. All phase information will precede\nany bank information")
rPDULoadStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 2), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusLoad.setDescription("Getting this OID will return the phase/bank load measured\nin tenths of Amps.")
rPDULoadStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusLoadState.setDescription("Getting this OID will return the phase/bank load state.\n\nphaseLoadNormal(1) indicates that the phase/bank is \noperating properly within the rPDULoadConfigLowLoadThreshold \nand rPDULoadConfigNearOverloadThreshold OID values.\n\nphaseLoadLow(2) indicates that the phase/bank load has\ndropped below the rPDULoadConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadNearOverload(3) indicates that the phase/bank load\nis greater than or equal to the \nrPDULoadConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadOverload(4) indicates that the phase/bank load is\ngreater than or equal to the rPDULoadConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.")
rPDULoadStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusPhaseNumber.setDescription("The phase number to which this record refers.")
rPDULoadStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadStatusBankNumber.setDescription("The bank number to which this record refers.  A value of 0 will be returned if\nany bank is not present or if it is phase related.")
rPDULoadBankConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4))
rPDULoadBankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1))
if mibBuilder.loadTexts: rPDULoadBankConfigTable.setDescription("Allows for configuration of each Rack PDU bank.\nThe number of entries is contained in the \nrPDULoadDevNumBanks OID.")
rPDULoadBankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDULoadBankConfigIndex"))
if mibBuilder.loadTexts: rPDULoadBankConfigEntry.setDescription("The Rack PDU bank to configure.")
rPDULoadBankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadBankConfigIndex.setDescription("The index to the Rack PDU bank entry.")
rPDULoadBankConfigLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigLowLoadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDULoadBankConfigNearOverloadThreshold OID.")
rPDULoadBankConfigNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigNearOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDULoadBankConfigLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadBankConfigOverloadThreshold OID.")
rPDULoadBankConfigOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDULoadBankConfigOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDULoadBankConfigNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxBankLoad OID.")
rPDULoadBankConfigAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("noLoadAlarm", 1), ("underCurrentAlarm", 2), ("nearOverCurrentAlarm", 3), ("overCurrentAlarm", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDULoadBankConfigAlarm.setDescription(" Getting this OID will return the current Bank Alarm.")
rPDUOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3))
rPDUOutletDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1))
rPDUOutletDevCommand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(7,1,6,5,4,8,2,3,)).subtype(namedValues=NamedValues(("noCommandAll", 1), ("immediateAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllOn", 5), ("delayedAllOff", 6), ("delayedAllReboot", 7), ("cancelAllPendingCommands", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletDevCommand.setDescription("Setting this OID to immediateAllOn (2) will turn all outlets\non immediately.\n\nSetting this OID to immediateAllOff (3) will turn all outlets\noff immediately.\n\nSetting this OID to immediateAllReboot (4) will reboot all outlets\nimmediately.\n\nSetting this OID to delayedAllOn (5) will turn all outlets on as \ndefined by each outlet's rPDUOutletConfigPowerOnTime OID value. \n      \nSetting this OID to delayedAllOff (6) will turn all outlets \noff as defined by each outlet's rPDUOutletConfigPowerOffTime OID value.\n\nSetting this OID to delayedAllReboot (7) will cause a \ndelayedAllOff command to be performed. Once all outlets are off, \nthe Switched Rack PDU will then delay the largest \nrPDUOutletConfigRebootDuration OID time, and then perform a \ndelayedAllOn command.    \n\nSetting this OID to cancelAllPendingCommands (8) will cause all pending\ncommands on the Switched Rack PDU to be canceled.\n\nGetting this OID will return the noCommandAll (1) value.")
rPDUOutletDevColdstartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletDevColdstartDelay.setDescription("The amount of delay, in seconds, between when\npower is provided to the Switched Rack PDU and \nwhen the Switched Rack PDU provides basic master \npower to the outlets.       \n\nAllowed values are:\n\n-1       - never apply power automatically.\n0        - apply power immediately.\n1 to 300 - delay up to 300 seconds (5 minutes).")
rPDUOutletDevNumCntrlOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevNumCntrlOutlets.setDescription("The number of controlled outlets on this Switched Rack PDU.")
rPDUOutletDevNumTotalOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevNumTotalOutlets.setDescription("The total number of outlets on this Rack PDU.")
rPDUOutletDevMonitoredOutlets = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletDevMonitoredOutlets.setDescription("The total number of monitored outlets on this Rack PDU.")
rPDUOutletPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2))
rPDUOutletPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1))
if mibBuilder.loadTexts: rPDUOutletPhaseTable.setDescription("Allows for management of outlets on a per phase basis.")
rPDUOutletPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletPhaseIndex"))
if mibBuilder.loadTexts: rPDUOutletPhaseEntry.setDescription("The phase to manage.")
rPDUOutletPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletPhaseIndex.setDescription("The index to the Switched Rack PDU phase entry.")
rPDUOutletPhaseOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletPhaseOverloadRestriction.setDescription("This OID controls the behavior of a Switched Rack PDU \nphase when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding phase to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding phase to turn on if the \nrPDULoadConfigNearOverloadThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding phase to turn on if the \nrPDULoadConfigOverloadThreshold OID is exceeded.")
rPDUOutletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3))
rPDUOutletControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1))
if mibBuilder.loadTexts: rPDUOutletControlTable.setDescription("Allows for control of the individual outlets.\nThe number of entries is contained in the \nrPDUOutletDevNumCntrlOutlets OID.")
rPDUOutletControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletControlIndex"))
if mibBuilder.loadTexts: rPDUOutletControlEntry.setDescription("The outlet to control.")
rPDUOutletControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlIndex.setDescription("The index to the outlet entry.")
rPDUOutletControlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletName.setDescription("The name of the outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.\nThis OID is provided for informational purposes only.")
rPDUOutletControlOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletPhase.setDescription("The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.")
rPDUOutletControlOutletCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,6,7,1,)).subtype(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("delayedOn", 4), ("delayedOff", 5), ("delayedReboot", 6), ("cancelPendingCommand", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletControlOutletCommand.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the immediateOn (1) value will be returned.\nIf the outlet is off, the immediateOff (2) value will be\nreturned. \n\n\nSetting this variable to immediateOn (1) will immediately turn \nthe outlet on.\n\nSetting this variable to immediateOff (2) will immediately turn \nthe outlet off. \n\nSetting this variable to immediateReboot (3) will immediately \nreboot the outlet.\n\nSetting this variable to delayedOn (4) will turn the outlet on\nafter the rPDUOutletConfigPowerOnTime OID time has elapsed.   \n\nSetting this variable to delayedOff (5) will turn the outlet off\nafter the rPDUOutletConfigPowerOffTime OID time has elapsed.\n\nSetting this variable to delayedReboot  (6) will cause the \nSwitched Rack PDU to perform a delayedOff command, wait the \nrPDUOutletConfigRebootDuration OID time, and then perform a \ndelayedOn command. \n\nSetting this variable to cancelPendingCommand (7) will cause any\npending command to this outlet to be canceled.")
rPDUOutletControlOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletControlOutletBank.setDescription("The bank associated with this outlet.")
rPDUOutletConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4))
rPDUOutletConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1))
if mibBuilder.loadTexts: rPDUOutletConfigTable.setDescription("Allows for configuration of individual outlets. The number of\nentries is contained in the rPDUOutletDevNumCntrlOutlets OID.")
rPDUOutletConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigIndex"))
if mibBuilder.loadTexts: rPDUOutletConfigEntry.setDescription("The outlet to configure.")
rPDUOutletConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigIndex.setDescription("The index to the outlet entry.")
rPDUOutletConfigOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigOutletName.setDescription("The name of the outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.")
rPDUOutletConfigOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigOutletPhase.setDescription("The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.")
rPDUOutletConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigPowerOnTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering on at coldstart or when a command that requires \na turn-on delay is issued.\n       \nAllowed values are:\n\n-1        - never power on.\n0         - power on immediately.\n1 to 7200 - power on up to 7200 seconds after being\n           commanded.")
rPDUOutletConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigPowerOffTime.setDescription("The amount of time (in seconds) the outlet will delay \npowering off when a command that requires \na turn-off delay is issued.\n\nAllowed values are:\n\n-1        - never power off.\n0         - power off immediately.\n1 to 7200 - power off up to 7200 seconds after being\n           commanded.")
rPDUOutletConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigRebootDuration.setDescription("During a reboot sequence, power is turned off and then \nback on. This OID defines the amount of time to wait, \nin seconds, after turning the power off, at the start\nof the sequence, before turning power back on, at the\nend of the reboot sequence.       \n\nAllowed range is any value between 5 and 60 seconds (1 minute).")
rPDUOutletConfigOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigOutletBank.setDescription("The bank associated with this outlet.")
rPDUOutletConfigMonitoredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredTableSize.setDescription("The size of the Outlet Config Monitored Table")
rPDUOutletConfigMonitoredTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3))
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredTable.setDescription("Allows for getting/setting of outlet thresholds of an Outlet Monitored Rack PDU.")
rPDUOutletConfigMonitoredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletConfigMonitoredIndex"))
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredEntry.setDescription("This gives access to Monitored Outlet entries")
rPDUOutletConfigMonitoredIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredIndex.setDescription("The index to the RACK PDU Phase entry.")
rPDUOutletConfigMonitoredName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredName.setDescription("The name of the Monitored Outlet. The maximum string size is device dependent.\nAn error will be returned if the set request exceeds the max size.")
rPDUOutletConfigMonitoredNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredNumber.setDescription("The outlet number of an Outlet Monitored RACK PDU.")
rPDUOutletConfigMonitoredLowLoadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredLowLoadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing a low consumption condition. It is \nrepresented in Amps.  A warning will be issued when the\nload is less than the threshold value.  \n\nA threshold value of 0 Amps effectively disables this \nwarning.  \n\nMaximum value must be less than the value returned \nby the rPDUOutletConfigMonitoredNearOverloadThreshold OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.")
rPDUOutletConfigMonitoredNearOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredNearOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load is nearing an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than the value returned by\nthe rPDUOutletConfigMonitoredLowLoadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDUOutletConfigMonitoredOverloadThreshold OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.")
rPDUOutletConfigMonitoredOverloadThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletConfigMonitoredOverloadThreshold.setDescription("A threshold that indicates the power consumption of\nthe load has entered an overload condition. It is \nrepresented in Amps.  A warning will be issued when the \nload is greater than or equal to the threshold value.\n\nMinimum value must be greater than or equal to the value \nreturned by the rPDUOutletConfigMonitoredNearOverloadThreshold OID.\n\nMaximum value must be less than or equal to the value \nreturned by the rPDULoadDevMaxOutletLoad OID.\n\n0 will be returned if the unit is not Outlet Monitored Rack PDU.")
rPDUOutletStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5))
rPDUOutletStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1))
if mibBuilder.loadTexts: rPDUOutletStatusTable.setDescription("Allows for getting of status of individual outlets. The number of\nentries is contained in the rPDUOutletDevNumCntrlOutlets OID or \nrPDUOutletDevMonitoredOutlets OID.")
rPDUOutletStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletStatusIndex"))
if mibBuilder.loadTexts: rPDUOutletStatusEntry.setDescription("The outlet to gather status from.")
rPDUOutletStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusIndex.setDescription("The index to the outlet entry.")
rPDUOutletStatusOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletName.setDescription("The name of the outlet. The maximum string size is device dependent.\nThis OID is provided for informational purposes only.")
rPDUOutletStatusOutletPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,6,5,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ("phase1-2", 4), ("phase2-3", 5), ("phase3-1", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletPhase.setDescription("The phase/s associated with this outlet.\n\nFor single phase devices, this object will always \nreturn phase1(1).\n\nFor 3-phase devices, this object will return phase1 (1), \nphase2 (2), or phase3 (3) for outlets tied to a single \nphase.  For outlets tied to two phases, this object will\nreturn phase1-2 (4) for phases 1 and 2, phase2-3 (5) for \nphases 2 and 3, and phase3-1 (6) for phases 3 and 1.")
rPDUOutletStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("outletStatusOn", 1), ("outletStatusOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletState.setDescription("Getting this variable will return the outlet state. If \nthe outlet is on, the outletStatusOn (1) value will be returned.\nIf the outlet is off, the outletStatusOff (2) value will be\nreturned.")
rPDUOutletStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("outletStatusCommandPending", 1), ("outletStatusNoCommandPending", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusCommandPending.setDescription("Getting this variable will return the command pending\nstate of the outlet. If a command is pending on the \noutlet, the outletStatusCommandPending (1) value\nwill be returned. If there is not a command pending\non the outlet, the outletStatusNoCommandPending (2)\nwill be returned.")
rPDUOutletStatusOutletBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusOutletBank.setDescription("The bank associated with this outlet.")
rPDUOutletStatusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 7), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletStatusLoad.setDescription("Getting this OID will return the measured Outlet load for \nan Outlet Monitored Rack PDU in tenths of Amps. For other \nmodels this OID is not supported.")
rPDUOutletBank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6))
rPDUOutletBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1))
if mibBuilder.loadTexts: rPDUOutletBankTable.setDescription("Allows for management of outlets on a per bank basis.")
rPDUOutletBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUOutletBankIndex"))
if mibBuilder.loadTexts: rPDUOutletBankEntry.setDescription("The bank to manage.")
rPDUOutletBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUOutletBankIndex.setDescription("The index to the Switched Rack PDU bank entry.")
rPDUOutletBankOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDUOutletBankOverloadRestriction.setDescription("This OID controls the behavior of a Switched Rack PDU \nbank when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding bank to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding bank to turn on if the \nrPDULoadBankConfigNearOverloadThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding bank to turn on if the \nrPDULoadBankConfigOverloadThreshold OID is exceeded.")
rPDUPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4))
rPDUPowerSupplyDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1))
rPDUPowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("powerSupplyOneOk", 1), ("powerSupplyOneFailed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupply1Status.setDescription("Getting this OID will return powerSupply1Ok(1) if power\nsupply 1 is functioning normally.  If not functioning normally, \nthis OID will return powerSupply1Failed(2).")
rPDUPowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("powerSupplyTwoOk", 1), ("powerSupplyTwoFailed", 2), ("powerSupplyTwoNotPresent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupply2Status.setDescription("Getting this OID will return powerSupply2Ok(1) if power\nsupply 2 is functioning normally.  If not functioning normally, \nthis OID will return powerSupply2Failed(2).\n\nMetered Rack PDUs do not have a redundant powersupply.")
rPDUPowerSupplyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("allAvailablePowerSuppliesOK", 1), ("powerSupplyOneFailed", 2), ("powerSupplyTwoFailed", 3), ("powerSupplyOneandTwoFailed", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUPowerSupplyAlarm.setDescription("Getting this OID will return powerSupply Alarm")
rPDUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5))
rPDUStatusBankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankTableSize.setDescription("The size of the Status Bank Table")
rPDUStatusBankTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2))
if mibBuilder.loadTexts: rPDUStatusBankTable.setDescription("Allows for getting of status of each Rack PDU Bank")
rPDUStatusBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUStatusBankIndex"))
if mibBuilder.loadTexts: rPDUStatusBankEntry.setDescription("This gives access to Bank entries")
rPDUStatusBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankIndex.setDescription("The index to the RACK PDU Bank entry.")
rPDUStatusBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankNumber.setDescription("Getting this OID will return the bank number.")
rPDUStatusBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("bankLoadNormal", 1), ("bankLoadLow", 2), ("bankLoadNearOverload", 3), ("bankLoadOverload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusBankState.setDescription("Getting this OID will return the bank load state.\n\nbankLoadNormal(1) indicates that the bank is \noperating properly within the rPDULoadBankConfigLowLoadThreshold \nand rPDULoadBankConfigNearOverloadThreshold OID values.\n\nbankLoadLow(2) indicates that the bank load has\ndropped below the rPDULoadBankConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nbankLoadNearOverload(3) indicates that the bank load\nis greater than or equal to the \nrPDULoadBankConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nbankLoadOverload(4) indicates that the bank load is\ngreater than or equal to the rPDULoadBankConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.")
rPDUStatusPhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseTableSize.setDescription("The size of the Status Phase Table")
rPDUStatusPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4))
if mibBuilder.loadTexts: rPDUStatusPhaseTable.setDescription("Allows for getting of status of each Rack PDU Phase")
rPDUStatusPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUStatusPhaseIndex"))
if mibBuilder.loadTexts: rPDUStatusPhaseEntry.setDescription("This gives access to Phase entries")
rPDUStatusPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseIndex.setDescription("The index to the RACK PDU Phase entry.")
rPDUStatusPhaseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseNumber.setDescription("Getting this OID will return the phase number.")
rPDUStatusPhaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,3,)).subtype(namedValues=NamedValues(("phaseLoadNormal", 1), ("phaseLoadLow", 2), ("phaseLoadNearOverload", 3), ("phaseLoadOverload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusPhaseState.setDescription("Getting this OID will return the Phase load state.\n\nphaseLoadNormal(1) indicates that the Phase is \noperating properly within the rPDULoadPhaseConfigLowLoadThreshold \nand rPDULoadPhaseConfigNearOverloadThreshold OID values.\n\nphaseLoadLow(2) indicates that the Phase load has\ndropped below the rPDULoadPhaseConfigLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadNearOverload(3) indicates that the Phase load\nis greater than or equal to the \nrPDULoadPhaseConfigNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\nphaseLoadOverload(4) indicates that the Phase load is\ngreater than or equal to the rPDULoadPhaseConfigOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.")
rPDUStatusOutletTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletTableSize.setDescription("The size of the Status Outlet Table")
rPDUStatusOutletTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6))
if mibBuilder.loadTexts: rPDUStatusOutletTable.setDescription("Allows for getting of status of each Outlet of an Outlet Monitored Rack PDU.")
rPDUStatusOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1)).setIndexNames((0, "PowerNet-MIB", "rPDUStatusOutletIndex"))
if mibBuilder.loadTexts: rPDUStatusOutletEntry.setDescription("This gives access to Outlet entries")
rPDUStatusOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletIndex.setDescription("The index to the RACK PDU Outlet entry.")
rPDUStatusOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletNumber.setDescription("Getting this OID will return the Outlet number.")
rPDUStatusOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("outletLoadNormal", 1), ("outletLoadLow", 2), ("outletLoadNearOverload", 3), ("outletLoadOverload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDUStatusOutletState.setDescription("Getting this OID will return the Outlet load state.\n\noutletLoadNormal(1) indicates that the Outlet is \noperating properly within the rPDUOutletConfigMonitoredLowLoadThreshold \nand rPDUOutletConfigMonitoredNearOverloadThreshold OID values.\n\noutletLoadLow(2) indicates that the Outlet load has\ndropped below the rPDUOutletConfigMonitoredLowLoadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noutletLoadNearOverload(3) indicates that the Outlet load\nis greater than or equal to the \nrPDUOutletConfigMonitoredNearOverloadThreshold OID value.\nAn SNMP trap will occur when this state is entered or cleared.\n\noutletLoadOverload(4) indicates that the Outlet load is\ngreater than or equal to the rPDUOutletConfigMonitoredOverloadThreshold \nOID value.\nAn SNMP trap will occur when this state is entered or cleared.")
airConditioners = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13))
airFM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1))
airFMIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1))
airFMIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentName.setDescription("A character string identifying the device.")
airFMIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentTableSize.setDescription("The number of entries in the airFMIdentTable. ")
airFMIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3))
if mibBuilder.loadTexts: airFMIdentTable.setDescription("Allows for getting identification information \nfrom each module in the system. ")
airFMIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1)).setIndexNames((0, "PowerNet-MIB", "airFMIdentModuleIndex"))
if mibBuilder.loadTexts: airFMIdentEntry.setDescription("The module to get information from.")
airFMIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleIndex.setDescription("The index of the module information.")
airFMIdentModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleModelNumber.setDescription("A character string identifying the \nmodel number. ")
airFMIdentModuleDateOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleDateOfMfg.setDescription("A character string identifying the \nmanufacture date. ")
airFMIdentModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleSerialNumber.setDescription("A character string identifying the \nunit serial number. ")
airFMIdentModuleFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleFirmwareRev.setDescription("A character string identifying the \nfirmware revision. ")
airFMIdentModuleHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMIdentModuleHardwareRev.setDescription("A character string identifying the \nhardware revision. ")
airFMIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentLocation.setDescription("A character string identifying the \nlocation of the device. ")
airFMIdentContact = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMIdentContact.setDescription("A character string identifying the \nperson to contact regarding the device. ")
airFMStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2))
airFMStatusSystemOn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusOn", 1), ("statusOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemOn.setDescription("The operating state of the system.\nThis OID has been deprecated in favor of \nairFMGroupSysStatus.")
airFMStatusSystemAverageRetTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetTempC.setDescription("The system average return air \ntemperature in tenths of degrees Celsius.  \nThis OID has been deprecated in favor of \nairFMSysAvgReturnTempC.")
airFMStatusSystemAverageRetTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetTempF.setDescription("The system average return air \ntemperature in tenths of degrees Fahrenheit.\nThis OID has been deprecated in favor of \nairFMSysAvgReturnTempF.")
airFMStatusSystemAverageRetHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemAverageRetHum.setDescription("The system average return air \nhumidity in tenths of percent RH.\nThis OID has been deprecated in favor of \nairFMSysAvgReturnHum.")
airFMStatusSystemActionTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionTempC.setDescription("The system action air \ntemperature in tenths of degrees Celsius. \nThis OID has been deprecated in favor of \nairFMSysCtrlTempC.")
airFMStatusSystemActionTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionTempF.setDescription("The system action air \ntemperature in tenths of degrees Fahrenheit. \nThis OID has been deprecated in favor of \nairFMSysCtrlTempF.")
airFMStatusSystemActionHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemActionHum.setDescription("The system action air humidity in tenths of percent RH.\nThis OID has been deprecated in favor of \nairFMSysCtrlHum.")
airFMStatusSystemRemoteHighTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteHighTempC.setDescription("The system remote high air \ntemperature in tenths of degrees Celsius. \nThis OID has been deprecated in favor of \nairFMSysMaxRemoteTempC.")
airFMStatusSystemRemoteHighTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteHighTempF.setDescription("The system remote high air \ntemperature in tenths of degrees Fahrenheit. \nThis OID has been deprecated in favor of \nairFMSysMaxRemoteTempF.")
airFMStatusSystemRemoteAvgTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgTempC.setDescription("The system remote average air \ntemperature in tenths of degrees Celsius. \nThis OID has been deprecated in favor of \nairFMSysAvgRemoteTempC.")
airFMStatusSystemRemoteAvgTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgTempF.setDescription("The system remote average air \ntemperature in tenths of degrees Fahrenheit. \nThis OID has been deprecated in favor of \nairFMSysAvgRemoteTempF.")
airFMStatusSystemRemoteAvgHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteAvgHum.setDescription("The system remote average air \nhumidity in tenths of percent RH. \nThis OID has been deprecated in favor of\nairFMSysAvgRemoteHum.")
airFMStatusSystemRemoteLowTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteLowTempC.setDescription("The system remote low air \ntemperature in tenths of degrees Celsius. \nThis OID has been deprecated in favor of \nairFMSysMinRemoteTempC.")
airFMStatusSystemRemoteLowTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemRemoteLowTempF.setDescription("The system remote low air \ntemperature in tenths of degrees Fahrenheit. \nThis OID has been deprecated in favor of \nairFMSysMinRemoteTempF.")
airFMStatusSystemCoolingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemCoolingEnabled.setDescription("The state of the system cooling\nfunction enable.  \nThis OID has been deprecated in favor of \nairFMSysCoolState.")
airFMStatusSystemReheatingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemReheatingEnabled.setDescription("The state of the system reheating\nfunction enable.  \nThis OID has been deprecated in favor of \nairFMSysReheatState.")
airFMStatusSystemHumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemHumidifyEnabled.setDescription("The state of the system humidify\nfunction enable.  \nThis OID has been deprecated in favor of \nairFMSysHumState.")
airFMStatusSystemDehumidifyEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("enabledYes", 1), ("enabledNo", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusSystemDehumidifyEnabled.setDescription("The state of the system dehumidify\nfunction enable.  \nThis OID has been deprecated in favor of \nairFMSysDehumState.")
airFMStatusModuleTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleTableSize.setDescription("The number of entries in the airFMStatusModuleTable.")
airFMStatusModuleTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20))
if mibBuilder.loadTexts: airFMStatusModuleTable.setDescription("Allows for getting information from each module\nin the system.")
airFMStatusModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1)).setIndexNames((0, "PowerNet-MIB", "airFMStatusModuleIndex"))
if mibBuilder.loadTexts: airFMStatusModuleEntry.setDescription("The module to get status from.")
airFMStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleIndex.setDescription("The index of the module information.")
airFMStatusModuleOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleOutputCapacity.setDescription("The module output capacity in kilowatts.\nThis OID has been deprecated in favor of \nairFMModOutputCapacity.")
airFMStatusModuleSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyTempC.setDescription("The module supply air temperature in \ntenths of degrees Celsius.\nThis OID has been deprecated in favor of \nairFMModSupplyTempC.")
airFMStatusModuleSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyTempF.setDescription("The module supply air temperature in \ntenths of degrees Fahrenheit.\nThis OID has been deprecated in favor of \nairFMModSupplyTempF.")
airFMStatusModuleSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleSupplyHum.setDescription("The module supply air humidity in tenths of percent RH.\nThis OID has been deprecated in favor of \nairFMModSupplyHum.")
airFMStatusModuleReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnTempC.setDescription("The module return air temperature in \ntenths of degrees Celsius.\nThis OID has been deprecated in favor of \nairFMModReturnTempC.")
airFMStatusModuleReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnTempF.setDescription("The module return air temperature in \ntenths of degrees Fahrenheit.\nThis OID has been deprecated in favor of \nairFMModReturnTempF.")
airFMStatusModuleReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMStatusModuleReturnHum.setDescription("The module return air humidity in tenths of percent RH.\nThis OID has been deprecated in favor of \nairFMModReturnHum.")
airFMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3))
airFMGroupSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,3,2,1,5,7,)).subtype(namedValues=NamedValues(("statusOnLine", 1), ("statusIdle", 2), ("statusLoadShare", 3), ("statusOffLine", 4), ("statusFailed", 5), ("statusDisabled", 6), ("statusUndefined", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysStatus.setDescription("The status of this system within the group.")
airFMGroupSysRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRuntime.setDescription("The number of hours the system has been running.")
airFMGroupSysRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("rolePrimary", 1), ("roleBackup", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRole.setDescription("The role of this system within the group.")
airFMGroupSysRoles = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4))
airFMGroupSysRolesTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRolesTableSize.setDescription("The number of entries in the airFMGroupSysRolesTable. ")
airFMGroupSysRolesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2))
if mibBuilder.loadTexts: airFMGroupSysRolesTable.setDescription("Allows for getting information from each system\nin the group. ")
airFMGroupSysRolesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMGroupSysIndex"))
if mibBuilder.loadTexts: airFMGroupSysRolesEntry.setDescription("The system to get status from.")
airFMGroupSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysIndex.setDescription("The index of the system information.")
airFMGroupSysRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(6,4,5,7,3,1,2,)).subtype(namedValues=NamedValues(("reserved1", 1), ("reserved2", 2), ("onLine", 3), ("idle", 4), ("loadShare", 5), ("failed", 6), ("offLine", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRoleStatus.setDescription("The present mode of the System.")
airFMGroupSysPresentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("primary", 1), ("backup", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysPresentRole.setDescription("The present role of the System in a Group.")
airFMGroupSysManualRoleSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("primary", 1), ("backup", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupSysManualRoleSetting.setDescription("The manual role setting of the System in a Group.\nOnly applies if Role Assignment Method is set\nto static (Manually Assigned Roles).")
airFMGroupSysRunHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysRunHours.setDescription("The total number of hours the System has been \ncontributing to environmental control.")
airFMGroupSysComm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("commLost", 1), ("commEstablished", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysComm.setDescription("Indicates whether a system is communicating with the \nother Systems in the Group.")
airFMGroupSysIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupSysIPAddress.setDescription("The IP Address of the System.")
airFMGroupSysRoleAssignment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("staticManual", 1), ("dynamicAutomatic", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupSysRoleAssignment.setDescription("The method used to assign roles (i.e. Primary, Backup) \nto the Systems in a Group. \n\nstaticManual: Manually assign Primary or Backup to \nregulate run hours across the Group.\ndynamicAutomatic: User indicates the number of Systems \nthat will be assigned a primary role in this Group.")
airFMGroupAutoRoleNumPrimary = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupAutoRoleNumPrimary.setDescription("The number of Systems assigned the 'primary' role in \nthis Group.  Only applies if Role Assignment Method \nis set to dynamic (Automatic Run Hour Balancing).")
airFMGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5))
airFMGroupCfgName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgName.setDescription("A character string identifying the group name.")
airFMGroupCfgNumSystems = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgNumSystems.setDescription("The number of Systems in this Group.")
airFMGroupCfgIdleBlower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("off", 1), ("minimumSpeed", 2), ("normalSpeed", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgIdleBlower.setDescription("Blower behavior for backup Systems and Systems that \nhave entered a failure mode.")
airFMGroupCfgShutdownSmoke = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgShutdownSmoke.setDescription("If enabled, all Systems in the Group will shut down \nif smoke is detected.")
airFMGroupCfgShutdownFire = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgShutdownFire.setDescription("If enabled, all Systems in the Group will shut down \nif fire is detected.")
airFMGroupCfgFailoverCommLoss = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgFailoverCommLoss.setDescription("Failover on Comm Loss enables an available backup \nSystem to run in place of a System that has lost \ncommunication with the Group.")
airFMGroupCfgDmdFightStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupCfgDmdFightStatus.setDescription("Demand Fighting and Setpoint Sharing are \nautomatically enabled when a System is responding to \na Load Sharing Request.")
airFMGroupCfgDmdFightSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgDmdFightSetting.setDescription("Demand Fighting prevents a System from engaging \nreheat in a Group where any System is cooling.")
airFMGroupCfgSetpointShareStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMGroupCfgSetpointShareStatus.setDescription("Demand Fighting and Setpoint Sharing are \nautomatically enabled when a System is responding to \nLoad Sharing Request.")
airFMGroupCfgSetpointShareSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgSetpointShareSetting.setDescription("All Systems in the Group use the same setpoints.")
airFMGroupCfgResetFieldServiceDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupCfgResetFieldServiceDefaults.setDescription("Setting this OID to reset(2) will reset all Group \nparameters, which can only be edited by a field \nservice engineer, to their factory default values.\n\nGetting this OID will do nothing and return the \nnoOperation(1) value.")
airFMGroupLoadShare = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6))
airFMGroupLoadShareCoolRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolRequests.setDescription("Systems that are cooling may request assistance from \nother Systems in the Group.")
airFMGroupLoadShareCoolThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolThreshC.setDescription("Temperature threshold at which a System will generate \na load sharing request for cooling.  Measured in \ntenths of degrees Celsius.")
airFMGroupLoadShareCoolThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareCoolThreshF.setDescription("Temperature threshold at which a System will generate \na load sharing request for cooling.  Measured in \ntenths of degrees Fahrenheit.")
airFMGroupLoadShareReheatRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatRequests.setDescription("Systems that are reheating may request assistance \nfrom other Systems in the Group.")
airFMGroupLoadShareReheatThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatThreshC.setDescription("Temperature threshold at which a System will generate \na load sharing request for reheating.  Measured in \ntenths of degrees Celsius.")
airFMGroupLoadShareReheatThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareReheatThreshF.setDescription("Temperature threshold at which a System will generate \na load sharing request for reheating.  Measured in \ntenths of degrees Fahrenheit.")
airFMGroupLoadShareHumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareHumRequests.setDescription("Systems that are humidifying may request humidification \nassistance from other Systems in the Group.")
airFMGroupLoadShareHumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareHumThresh.setDescription("Humidity threshold at which a System will generate a \nload sharing request for humidification.  Measured in\ntenths of percent relative humidity.")
airFMGroupLoadShareDehumRequests = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareDehumRequests.setDescription("Systems that are dehumidifying may request assistance \nfrom other Systems in the Group.")
airFMGroupLoadShareDehumThresh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupLoadShareDehumThresh.setDescription("Humidity threshold at which a System will generate a \nload sharing request for dehumidification.  Measured in\ntenths of percent relative humidity.")
airFMGroupFailover = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7))
airFMGroupFailoverSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1))
airFMGroupFailoverSysAnyMinorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysAnyMinorAlarm.setDescription("Enabling this OID will cause the system to enter \na failure state if any minor system alarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysAnyMajorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysAnyMajorAlarm.setDescription("Enabling this OID will cause the system to enter \na failure state if any major system alarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysHighEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysHighEnvTemp.setDescription("Enabling this OID will cause the system to enter \na failure state if the high environmental temperature \nalarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysLowEnvTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysLowEnvTemp.setDescription("Enabling this OID will cause the system to enter \na failure state if the low environmental temperature\nalarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysHighEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysHighEnvHum.setDescription("Enabling this OID will cause the system to enter \na failure state if the high environmental humidity\nalarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysLowEnvHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysLowEnvHum.setDescription("Enabling this OID will cause the system to enter \na failure state if the low environmental humidity\nalarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysFireAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysFireAlarm.setDescription("Enabling this OID will cause the system to enter \na failure state if the fire alarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysSmokeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSmokeAlarm.setDescription("Enabling this OID will cause the system to enter \na failure state if the smoke alarm is active. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysCommLost = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysCommLost.setDescription("Enabling this OID will cause the system to enter \na failure state if the system has lost comm. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysSupplySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSupplySensorFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the supply sensor has failed. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysReturnSensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysReturnSensorFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the return sensor has failed. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysPrimarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysPrimarySensorFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the primary sensor has failed. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysSecondarySensorFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysSecondarySensorFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the secondary sensor has failed. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverSysNoSensorsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverSysNoSensorsAvailable.setDescription("Enabling this OID will cause the system to enter \na failure state if no sensors are available. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2))
airFMGroupFailoverModMaintRequired = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModMaintRequired.setDescription("Enabling this OID will cause the system to enter \na failure state if maintenance is required on a \nmodule. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModCoolFail.setDescription("Enabling this OID will cause the system to enter \na failure state if cooling has failed on a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModHumFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHumFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the humidifier has failed on a\nmodule. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModBlwrCntrl1Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModBlwrCntrl1Fail.setDescription("Enabling this OID will cause the system to enter \na failure state if blower controller 1 has failed on\na module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModBlwrCntrl2Fail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModBlwrCntrl2Fail.setDescription("Enabling this OID will cause the system to enter \na failure state if blower controller 2 has failed on\na module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModHighFilterDP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHighFilterDP.setDescription("Enabling this OID will cause the system to enter \na failure state if a high filter differential \npressure is present on a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModHighSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHighSupplyTemp.setDescription("Enabling this OID will cause the system to enter \na failure state if a high supply temperature is \nactive on a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModLowSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModLowSupplyTemp.setDescription("Enabling this OID will cause the system to enter \na failure state if a low supply temperature is active\non a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModLossOrLowAirFlow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModLossOrLowAirFlow.setDescription("Enabling this OID will cause the system to enter \na failure state if there is a loss of air flow or low\nair flow on a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModHumReplaceCylinder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModHumReplaceCylinder.setDescription("Enabling this OID will cause the system to enter \na failure state if a humidifier needs its cylinder\nreplaced on a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModAirBlockInterlockOpen = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModAirBlockInterlockOpen.setDescription("Enabling this OID will cause the system to enter \na failure state if the air block interlock is open\non a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModWaterDetected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModWaterDetected.setDescription("Enabling this OID will cause the system to enter \na failure state if water is detected by a module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMGroupFailoverModCondensatePumpFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMGroupFailoverModCondensatePumpFail.setDescription("Enabling this OID will cause the system to enter \na failure state if the condensate pump has failed in \na module. \nOnce in the failure state, environmental control \nceases for the system, and the blowers enter the \nIdle Blower Operation mode.  \nA value of notApplicable indicates that this alarm \ndoes not apply to this device due to its configuration.")
airFMSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4))
airFMSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1))
airFMSysNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,5,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumber.setDescription("The number of the system within the group.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysPresentStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,6,7,8,4,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("reserved1", 2), ("reserved2", 3), ("onLine", 4), ("idle", 5), ("loadShare", 6), ("failed", 7), ("offLine", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysPresentStatus.setDescription("The present mode of the System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysPresentRole = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("primary", 2), ("backup", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysPresentRole.setDescription("The present role of the System in the Group.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysRunHours.setDescription("The total number of hours the System has been \ncontributing to environmental control.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidTempC.setDescription("The temperature of the coolant at the fluid coil \ninlet.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidTempF.setDescription("The temperature of the coolant at the fluid coil \ninlet.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHotWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterTempC.setDescription("The hot water temperature.  Measured in degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHotWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterTempF.setDescription("The hot water temperature.  Measured in degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnTempC.setDescription("The average return temperature calculated from all \npresent modules. Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnTempF.setDescription("The average return temperature calculated from all \npresent modules. Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgReturnHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgReturnHum.setDescription("The average return humidity calculated from all \npresent modules. Measured in tenths of percent RH.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteTempC.setDescription("The average temperature calculated from all \noperational remote sensors.  Measured in tenths of\ndegrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteTempF.setDescription("The average temperature calculated from all \noperational remote sensors. Measured in tenths of\ndegrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAvgRemoteHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAvgRemoteHum.setDescription("The average return humidity calculated from all \npresent modules. Measured in tenths of percent RH.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysMaxRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMaxRemoteTempC.setDescription("The maximum temperature reading from all operational \nremote sensors. Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysMaxRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMaxRemoteTempF.setDescription("The maximum temperature reading from all operational \nremote sensors. Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysMinRemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMinRemoteTempC.setDescription("The minimum temperature reading from all operational \nremote sensors. Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysMinRemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMinRemoteTempF.setDescription("The minimum temperature reading from all operational \nremote sensors. Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysTempCtrlMethod.setDescription("The method of environment temperature control \nselected to regulate the temperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualTempCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("avgReturn", 2), ("avgRemote", 3), ("maxRemote", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualTempCtrlMethod.setDescription("The actual method of environment temperature control \nbeing used to regulate the temperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,5,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHumCtrlMethod.setDescription("The method of environment humidity control selected \nto regulate the humidity.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualHumCtrlMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,5,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("avgReturnRH", 2), ("avgReturnDewPt", 3), ("avgRemoteRH", 4), ("avgRemoteDewPt", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualHumCtrlMethod.setDescription("The actual method of environment humidity control \nbeing used to regulate the humidity.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlTempC.setDescription("The system environmental control air temperature from\nthe sensor denoted by airFMSysActualTempCtrl.  \nMeasured in tenths of degrees Celsius. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlTempF.setDescription("The system environmental control air temperature from\nthe sensor denoted by airFMSysActualTempCtrl.  \nMeasured in tenths of degrees Fahrenheit. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCtrlHum.setDescription("The system environmental control air humidity from\nthe sensor denoted by airFMSysActualHumCtrl.  \nMeasured in percent relative humidity. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDemands = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2))
airFMSysDXCoolingDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXCoolingDmd.setDescription("The direct expansion cooling output demanded by the \nSystem.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDXDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXDehumDmd.setDescription("The direct expansion dehumidification output demanded \nby the System.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDXActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDXActualCoolDehum.setDescription("The direct expansion cooling or dehumidification \noutput measured by the System.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidCoolDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidCoolDmd.setDescription("The fluid coil cooling output demanded by the System.\nMeasured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidDehumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidDehumDmd.setDescription("The fluid coil dehumidification output demanded by \nthe System.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidActualCoolDehum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidActualCoolDehum.setDescription("The fluid coil cooling or dehumidification output \nmeasured by the System.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysElectricReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysElectricReheatDmd.setDescription("The electric reheating output demanded by the System.\nMeasured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualElectricReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualElectricReheat.setDescription("The electric reheating output of the System.  \nMeasured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysSteamHotGasReheatDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamHotGasReheatDmd.setDescription("The steam, hot water, or hot gas reheating output \ndemanded by the System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMSysActualSteamHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamHotGasReheat.setDescription("The steam, hot water, or hot gas reheating output of \nthe System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMSysSteamElectrodeHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamElectrodeHumDmd.setDescription("The steam electrode humidification output demanded by \nthe System.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualSteamElectrodeHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamElectrodeHum.setDescription("The average steam electrode humidification output \nmeasured for the Modules in the System.  Measured in \npercent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysSteamHumDmd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysSteamHumDmd.setDescription("The steam humidification output demanded by the System.  \nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualSteamHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualSteamHum.setDescription("The steam humidification output for the System.  \nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3))
airFMSysNumModules = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumModules.setDescription("The number of Modules in this System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysNumPCIOMs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,5,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumPCIOMs.setDescription("The number of Programmable Customer Input/Output \nModules (PCIOMs) installed in the Main Module of this \nSystem. Each PCIOM adds four input contacts and four \noutput relays to the System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysMainsVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysMainsVlt.setDescription("The mains voltage for the Modules in this System.\nA value of N/A indicates that this OID does not apply \nto this device due to its configuration.")
airFMSysUPSVlt = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysUPSVlt.setDescription("The UPS voltage for the Modules in this System.\nA value of N/A indicates that this OID does not apply \nto this device due to its configuration.")
airFMSysCoilCfg = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,1,2,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("dx", 2), ("econ", 3), ("multicool", 4), ("chilledWater", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilCfg.setDescription("The type of cooling coils installed in the Modules in \nthis System: DX coil, DX and MultiCool (chilled water) \ncoils, DX and Economizer coils, or only a Chilled \nLiquid coil.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysRefrigType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("r22", 2), ("r407C", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysRefrigType.setDescription("The type of refrigerant used by each compressor in \nthe system.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHeatRejection = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("airCooled", 2), ("waterCooled", 3), ("glycolCooled", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHeatRejection.setDescription("The method the Modules in this System use to transfer \nheat away from the refrigerant.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDischAirPtrn = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("upFlow", 2), ("downFlow", 3), ("horizFlow", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysDischAirPtrn.setDescription("The discharge air pattern for the Modules in this \nSystem.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAirFltr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("standard", 2), ("highEfficiency", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAirFltr.setDescription("The type of air filters (standard or high efficiency) \ninstalled in the Modules of this System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysFlowSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,4,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("dxEcon", 3), ("multiCoolChillWater", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysFlowSwitch.setDescription("The location of the optional flow switch. \nNone: No flow switch is installed in this System.\nDX: Coolant input to the heat exchanger (condenser). \nMultiCool: Chilled water input to the MultiCool coil. \n\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidVlvAct.setDescription("The type of valve actuator installed on the coil \nfluid valve. The coil fluid valve controls the flow \nof coolant into a fluid cooling coil, such as a \nMultiCool or Economizer coil.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCoilFluidVlvType.setDescription("The type of coil fluid valve installed for the \nModules in this System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCndsrFluidVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("floatingControl", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvAct.setDescription("The type of valve actuator installed on the Condenser \nfluid valve. The Condenser fluid valve controls the \nflow of coolant into the heat exchanger (condenser) \nto regulate head pressure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCndsrFluidVlvType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("twoWay", 2), ("threeWay", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvType.setDescription("The type of Condenser fluid valve installed for the \nModules in this System.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHotWaterVlvAct = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("springAnalog", 3), ("floatingControl", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysHotWaterVlvAct.setDescription("The type of valve actuator installed on the hot water \nvalve.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysNumRemoteSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysNumRemoteSensors.setDescription("The number of remote sensors detected by the system.")
airFMSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4))
airFMSysPrimaryControlSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("return", 2), ("remote", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysPrimaryControlSensor.setDescription("Selects whether return or remote sensors will control \nthe system.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysRemoteSensorData = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("average", 2), ("maximum", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysRemoteSensorData.setDescription("Selects whether average temperature or max temperature\nwill be used when remote sensors are selected for \ncontrol of the system.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysFastStartup = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysFastStartup.setDescription("Minimizes the time for the cooling process to begin \nafter other delay constraints have been met.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysStartupDelay.setDescription("Set the delay that begins when power is applied and \nends when the System starts. This allows you to \ncreate a staged restart among your Systems after a \npower loss.  Measured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysModeDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysModeDelay.setDescription("Set the delay between starting the blowers and \nengaging the modes. It allows the sensors to read \nroom conditions accurately and allows the controller \nto check for major alarms before engaging a mode.\nMeasured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCommLossShutdownDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCommLossShutdownDelay.setDescription("Set the delay between an Expansion Module losing \ncommunication with the Main Module and the Expansion \nModule shutting down. A value of -1 will keep \nthe Expansion Module running after a communication \nloss.  Measured in hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysResetSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetSysFailure.setDescription("Setting this OID to reset(2) will allows the system \nto return from any failure condition, if the \nfailure(s) have cleared.\nGetting this OID will do nothing and return the noOperation(1) value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysResetUserDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetUserDflts.setDescription("Setting this OID to reset(2) will reset all system \nparameters that can be edited by the user to their \nfactory default values.\nGetting this OID will do nothing and return the noOperation(1) value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysResetFldSrvcDflts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetFldSrvcDflts.setDescription("Setting this OID to reset(2) will reset all system \nparameters that can only be edited by the field \nservice engineer to their factory default values.\nGetting this OID will do nothing and return the noOperation(1) value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysResetRunHours = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysResetRunHours.setDescription("Setting this OID to reset(2) will reset the system Run Hours.\nGetting this OID will do nothing and return the noOperation(1) value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5))
airFMSysCompMinOnTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompMinOnTime.setDescription("Set the minimum time the compressor continues to \noperate after it is started. The delay protects the \ncompressor from damage. Caution: Reducing this delay \nshortens compressor life.  Measured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCompMinOffTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompMinOffTime.setDescription("Set the minimum time the compressor will remain off \nafter it ceases operation. The delay protects the \ncompressor from damage. Caution: Reducing this delay \nshortens compressor life.  Measured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCompRotPeriod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCompRotPeriod.setDescription("Set how often to perform compressor runtime \nbalancing.  Measured in hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysEconIsolVlvOpenDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysEconIsolVlvOpenDelay.setDescription("Set the delay between opening the Economizer Isolator \noutput relay and engaging the compressors.  Measured\nin seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysEconIsolVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysEconIsolVlvCloseDelay.setDescription("Set the delay between disengaging the compressor and \nclosing the Economizer Isolator output relay.\nMeasured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCndsrFluidVlvCloseDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCndsrFluidVlvCloseDelay.setDescription("Set the time the condenser valve remains open after \nthe compressors disengage.  Measured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysInterstageDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInterstageDelay.setDescription("The DX interstage delay allows the first compressor's \ncooling to take effect before engaging the second \ncompressor. This prevents the second compressor from \ncycling on and off excessively.  Measured in seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolState.setDescription("Set the mode to enabled or disabled. Disabled modes \nwill not operate, and you cannot make changes to \ntheir settings while they are disabled.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolEssFunction.setDescription("Set the priority of the mode for alarms and events \nwith the nonessential stop behavior. Nonessential \nmodes are disabled during nonessential stop alarms \nand events.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolSetpointC.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 C above the \nreheat setpoint if a heater is installed.  Measured\nin tenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolSetpointF.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 C above the \nreheat setpoint if a heater is installed.  Measured\nin tenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolDeadbandC.setDescription("The temperature range that controls output when the \nselected control sensor temperature is above the \nsetpoint. At the top of this range, the cool mode \noutputs at 100%. The deadband does not apply to PID-\ncontrolled modes.  Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolDeadbandF.setDescription("The temperature range that controls output when the \nselected control sensor temperature is above the \nsetpoint. At the top of this range, the cool mode \noutputs at 100%. The deadband does not apply to PID-\ncontrolled modes.  Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolEconIsolFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolEconIsolFunction.setDescription("Set the Economizer Automatic Coolant Isolation valve \nto enabled or disabled. This valve anticipates a \ncooling demand and opens the coil fluid valve.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysSuctPresCompensation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysSuctPresCompensation.setDescription("Set the Suction Pressure Compensation to enabled or \ndisabled. This function attempts to keep the suction \npressure from exceeding 95 psi.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidActivThreshC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivThreshC.setDescription("The minimum coolant temperature required to use the \noptional MultiCool or Economizer coil.  Measured in\ntenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidActivThreshF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivThreshF.setDescription("The minimum coolant temperature required to use the \noptional MultiCool or Economizer coil.  Measured in\ntenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidActivDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivDeadbandC.setDescription("The controller will disengage the MultiCool or \nEconomizer coil when the coolant temperature reaches \nthe coil fluid temperature activation threshold plus \nthe deadband.  Measured in tenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoilFluidActivDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoilFluidActivDeadbandF.setDescription("The controller will disengage the MultiCool or \nEconomizer coil when the coolant temperature reaches \nthe coil fluid temperature activation threshold plus \nthe deadband.  Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDMethod.setDescription("Set the multipliers that the PID algorithm will use \nto calculate the cool output. Proportional, \nProportional + Integral, or Proportional + Integral \n+ Derivative.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDGainP.setDescription("Set the proportional multiplier to correct for \ndifferences between the selected control sensor \nactual temperature and the setpoint.  Measured in\n%/C.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDResetRateI.setDescription("Set the integral multiplier to correct for the \nproportional offset.  Measured in %/(C * min).\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysCoolPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysCoolPIDDerivativeD.setDescription("Set the derivative multiplier to counteract overshoot \nand droop during changes in the room load.  Measured\nin %/(C / min).\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6))
airFMSysHumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumState.setDescription("Set the mode to enabled or disabled. Disabled modes \nwill not operate, and you cannot make changes to their \nsettings while they are disabled.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumEssFunction.setDescription("Set the priority of the mode for alarms and events \nwith the nonessential stop behavior. Nonessential \nmodes are disabled during nonessential stop alarms \nand events.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumSetpoint.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 % RH below \nthe dehumidification setpoint.  Measured in tenths of\npercent relative humidity. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumDeadband.setDescription("The humidity range that controls output when the \nselected control sensor humidity is below the \nsetpoint. At the top of this range, the \nhumidification mode outputs at 100%. The deadband \ndoes not apply to PID-controlled modes.  Measured in \ntenths of percent relative humidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumCtrlSetting = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumCtrlSetting.setDescription("Set the method to control the humidity in the room. \nThe two methods are Relative Humidity (RH) or Dew \nPoint of the selected control sensor air. The dew \npoint method helps correct for hot spots near the \nselected control sensors.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysActualHumCtrl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("relativeHum", 2), ("dewPoint", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysActualHumCtrl.setDescription("The humidity control method the system is using.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumSensBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumSensBand.setDescription("The percentage of relative humidity below the \nsetpoint at which the humidifier will output at 100% \nof capacity.  Measured in percent relative humidity. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumidify = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7))
airFMSysDehumState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumState.setDescription("Set the mode to enabled or disabled. Disabled modes \nwill not operate, and you cannot make changes to their \nsettings while they are disabled.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumEssFunction.setDescription("Set the priority of the mode for alarms and events \nwith the nonessential stop behavior. Nonessential \nmodes are disabled during nonessential stop alarms \nand events.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumSetpoint.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 % RH above \nthe humidification setpoint if a humidifier is \ninstalled.  Measured in tenths of percent relative \nhumidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumDeadband.setDescription("The humidity range above the setpoint at which the \ndehumidification mode will output at 100%. The \ndeadband does not apply to PID controlled modes.  \nMeasured in tenths of percent relative humidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("half", 2), ("full", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumCapacity.setDescription("Set the dehumidification mode to use either half of \nthe cooling coil or the full coil when dehumidifying \nthe room.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDMethod.setDescription("Set the multipliers that the PID algorithm will use \nto calculate the output. Proportional, \nProportional + Integral, or Proportional + Integral \n+ Derivative.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDGainP.setDescription("Set the proportional multiplier to correct for \ndifferences between the selected control sensor \nactual humidity and the setpoint.  Measured in %/%RH.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDResetRateI.setDescription("Set the integral multiplier to correct for the \nproportional offset.  Measured in %/(%RH * min).\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysDehumPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysDehumPIDDerivativeD.setDescription("Set the derivative multiplier to counteract overshoot \nand droop during changes in the room humidity.  \nMeasure in %/(%RH / min). \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheat = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8))
airFMSysReheatState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatState.setDescription("Set the mode to enabled or disabled. Disabled modes \nwill not operate, and you cannot make changes to their \nsettings while they are disabled.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatEssFunction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("yes", 2), ("no", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatEssFunction.setDescription("Set the priority of the mode for alarms and events \nwith the nonessential stop behavior. Nonessential \nmodes are disabled during nonessential stop alarms \nand events.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatSetpointC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatSetpointC.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 C below the \ncooling setpoint.  Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatSetpointF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatSetpointF.setDescription("The target value for the selected control sensor air \nfor this mode. It must be at least 1.0 C below the \ncooling setpoint.  Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatDeadbandC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatDeadbandC.setDescription("The temperature range that controls output when the \nselected control sensor temperature is below the \nsetpoint. At the bottom of this range, the reheat \nmode outputs at 100%. The deadband does not apply to \nPID-controlled modes.  Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatDeadbandF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatDeadbandF.setDescription("The temperature range that controls output when the \nselected control sensor temperature is below the \nsetpoint. At the bottom of this range, the reheat \nmode outputs at 100%. The deadband does not apply to \nPID-controlled modes.  Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatPIDMethod = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("p", 2), ("pi", 3), ("pid", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDMethod.setDescription("Set the multipliers that the PID algorithm will use \nto calculate the output. Proportional, \nProportional + Integral, or Proportional + Integral \n+ Derivative.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatPIDGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDGainP.setDescription("Set the proportional multiplier to correct for \ndifferences between the selected control sensor \nactual temperature and the setpoint.  Measured in \n%/C.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatPIDResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDResetRateI.setDescription("Set the integral multiplier to correct for the \nproportional offset.  Measured in %/(C * min). \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysReheatPIDDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysReheatPIDDerivativeD.setDescription("Set the derivative multiplier to counteract overshoot \nand droop during changes in the room load.  Measured\nin %/(C / min).\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9))
airFMSysHighSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighSplyTempC.setDescription("The high temperature threshold for air blown into the \nroom (supply). If the supply temperature exceeds the \nthreshold, an alarm will occur.  Measured in tenths \nof degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighSplyTempF.setDescription("The high temperature threshold for air blown into the \nroom (supply). If the supply temperature exceeds the \nthreshold, an alarm will occur.  Measured in tenths \nof degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowSplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowSplyTempC.setDescription("The low temperature threshold for air blown into the \nroom (supply). If the supply temperature drops below \nthe threshold, an alarm will occur.  Measured in \ntenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowSplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowSplyTempF.setDescription("The low temperature threshold for air blown into the \nroom (supply). If the supply temperature drops below \nthe threshold, an alarm will occur. Measured in \ntenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCoilFluidTempC.setDescription("The high temperature threshold for coolant at the \ninlet to the fluid coil. If the fluid coil coolant \ntemperature exceeds the threshold, an alarm will \noccur.  Measured in tenths of degrees Celsius. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCoilFluidTempF.setDescription("The high temperature threshold for coolant at the \ninlet to the fluid coil. If the fluid coil coolant \ntemperature exceeds the threshold, an alarm will \noccur.  Measured in tenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowCoilFluidTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCoilFluidTempC.setDescription("The low temperature threshold for coolant at the \ninlet to the fluid coil. If the fluid coil coolant \ntemperature drops below the threshold, an alarm will \noccur.  Measured in tenths of degrees Celsius. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowCoilFluidTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCoilFluidTempF.setDescription("The low temperature threshold for coolant at the \ninlet to the fluid coil. If the fluid coil coolant \ntemperature drops below the threshold, an alarm will \noccur.  Measured in tenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlTempC.setDescription("The high temperature threshold for air monitored by \nthe System. If the temperature exceeds the threshold, \nan alarm will occur.  Measured in tenths of degrees \nCelsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlTempF.setDescription("The high temperature threshold for air monitored by \nthe System. If the temperature exceeds the threshold, \nan alarm will occur.  Measured in tenths of degrees \nFahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowCtrlTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlTempC.setDescription("The low temperature threshold for air monitored by \nthe System. If the temperature drops below the \nthreshold, an alarm will occur.  Measured in tenths \nof degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowCtrlTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlTempF.setDescription("The low temperature threshold for air monitored by \nthe System. If the temperature drops below the \nthreshold, an alarm will occur.  Measured in tenths \nof degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHighCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHighCtrlHum.setDescription("The high humidity threshold for air monitored by the \nSystem. If the humidity exceeds the threshold, an \nalarm will occur.  Measured in tenths of percent\nrelative humidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysLowCtrlHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysLowCtrlHum.setDescription("The low humidity threshold for air monitored by the \nSystem. If the humidity drops below the threshold, \nan alarm will occur.  Measured in tenths of percent\nrelative humidity. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysTempAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysTempAlarmDelay.setDescription("The amount of time the blower must be on before a \ntemperature alarm can be issued.  Measured in \nseconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysHumAlarmDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysHumAlarmDelay.setDescription("The amount of time the blower must be on before a \nhumidity alarm can be issued.  Measured in seconds. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysInputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10))
airFMSysInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputTableSize.setDescription("The number of entries in the airFMSysInputTable. ")
airFMSysInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2))
if mibBuilder.loadTexts: airFMSysInputTable.setDescription("Allows for getting information from each input \ncontact.")
airFMSysInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysInputIndex"))
if mibBuilder.loadTexts: airFMSysInputEntry.setDescription("The input contact to obtain status from.")
airFMSysInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputIndex.setDescription("The number designator of the Input Contact.")
airFMSysInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputName.setDescription("The configurable name for the Input Contact.  Maximum \ntext input is 13 characters.")
airFMSysInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysInputStatus.setDescription("The state of this contact: Open or Closed. A \nviolation will occur when this relay is not in its \nnormal state.")
airFMSysInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputNormalState.setDescription("Set the normal state of this contact (the state when \nno alarm/event exists).")
airFMSysInputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputDelay.setDescription("Set the delay between this contact exiting its normal \nstate and an alarm being triggered.  Measured in \nseconds.")
airFMSysInputAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,5,6,2,)).subtype(namedValues=NamedValues(("statusOnly", 1), ("minor", 2), ("major", 3), ("remoteRunStop", 4), ("nonessStop", 5), ("immShutdown", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysInputAlarmAction.setDescription("Sets the behavior for this contact when it exits its \nnormal state.")
airFMSysOutputs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11))
airFMSysOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputTableSize.setDescription("The number of entries in the airFMSysOutputTable. ")
airFMSysOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2))
if mibBuilder.loadTexts: airFMSysOutputTable.setDescription("Allows for getting information from each output relay. ")
airFMSysOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysOutputIndex"))
if mibBuilder.loadTexts: airFMSysOutputEntry.setDescription("The output relay to obtain status from.")
airFMSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputIndex.setDescription("The number designator of the output relay.")
airFMSysOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysOutputStatus.setDescription("The state of this relay: Open or Closed. A violation \nwill occur when this relay is not in its normal state.")
airFMSysOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysOutputNormalState.setDescription("Set the normal state of this relay (the state when no \nalarm/event exists).")
airFMSysAlarmMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12))
airFMSysAlarmMapSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1))
airFMSysAlarmMapSysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapSysTableSize.setDescription("The number of entries in the airFMSysAlarmMapSysTable. ")
airFMSysAlarmMapSysTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapSysTable.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapSysOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapSysEntry.setDescription("The system alarm map type to reference.")
airFMSysAlarmMapSysOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapSysOutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapSysAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysAnyAlarm.setDescription("System alarm map setting for Any Alarm.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSystemOn = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSystemOn.setDescription("System alarm map setting for System On.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSystemOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSystemOffline.setDescription("System alarm map setting for System Offline.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysHighEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysHighEnvTemp.setDescription("System alarm map setting for High Environmental \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysLowEnvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysLowEnvTemp.setDescription("System alarm map setting for Low Environmental \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysHighEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysHighEnvHum.setDescription("System alarm map setting for High Environmental \nHumidity.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysLowEnvHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysLowEnvHum.setDescription("System alarm map setting for Low Environmental \nHumidity.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysFireDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysFireDet.setDescription("System alarm map setting for Fire Detected.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysSmokeDet = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSmokeDet.setDescription("System alarm map setting for Smoke Detected.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysEconIsol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysEconIsol.setDescription("System alarm map setting for Econ Isolator.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysSupplySensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSupplySensFail.setDescription("System alarm map setting for Supply Sensor Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysReturnSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysReturnSensFail.setDescription("System alarm map setting for Return Sensor Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysRemSensRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysRemSensRemoved.setDescription("System alarm map setting for Remote Sensor Removed.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysPrimSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysPrimSensFail.setDescription("System alarm map setting for Primary Sensor Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysSecSensFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSecSensFail.setDescription("System alarm map setting for Secondary Sensor Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapSysSecSensActive = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapSysSecSensActive.setDescription("System alarm map setting for Secondary Sensor Active.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainMod = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2))
airFMSysAlarmMapMainModTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModTableSize.setDescription("The number of entries in the airFMSysAlarmMapMainModTable. ")
airFMSysAlarmMapMainModTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapMainModTable.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapMainModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapMainModOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapMainModEntry.setDescription("The main module alarm map type to reference.")
airFMSysAlarmMapMainModOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModOutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapMainModAnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModAnyAlarm.setDescription("Main Module alarm map setting for Any Alarm.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModMaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModMaintReq.setDescription("Main Module alarm map setting for Module Maintenance\nRequired.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModCoolFail.setDescription("Main Module alarm map setting for Module Cooling \nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModHighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHighSupplyTemp.setDescription("Main Module alarm map setting for High Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModLowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModLowSupplyTemp.setDescription("Main Module alarm map setting for Low Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModHumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHumFail.setDescription("Main Module alarm map setting for Humidifier Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModHumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHumReplCyl.setDescription("Main Module alarm map setting for Humidifier Replace\nCylinder.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModCondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModCondPumpFail.setDescription("Main Module alarm map setting for Condensate Pump\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModBlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModBlwrCntl1Fail.setDescription("Main Module alarm map setting for Blower Controller 1\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModBlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModBlwrCntl2Fail.setDescription("Main Module alarm map setting for Blower Controller 2\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModHighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModHighFltrDP.setDescription("Main Module alarm map setting for High Filter \nDifferential Pressure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModLowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModLowAirFlow.setDescription("Main Module alarm map setting for Low Air Flow.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModAirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModAirBlckIntOpen.setDescription("Main Module alarm map setting for Air Block Interlock\nOpen.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapMainModWaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapMainModWaterDetected.setDescription("Main Module alarm map setting for Water Detected.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3))
airFMSysAlarmMapExpMod1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1TableSize.setDescription("The number of entries in the airFMSysAlarmMapExpMod1Table. ")
airFMSysAlarmMapExpMod1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1Table.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapExpMod1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod1OutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1Entry.setDescription("The expansion module 1 alarm map type to reference.")
airFMSysAlarmMapExpMod1OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1OutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapExpMod1AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1AnyAlarm.setDescription("Exp Module 1 alarm map setting for Any Alarm.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1MaintReq.setDescription("Exp Module 1 alarm map setting for Module Maintenance\nRequired.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1CoolFail.setDescription("Exp Module 1 alarm map setting for Module Cooling \nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HighSupplyTemp.setDescription("Exp Module 1 alarm map setting for High Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1LowSupplyTemp.setDescription("Exp Module 1 alarm map setting for Low Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HumFail.setDescription("Exp Module 1 alarm map setting for Humidifier Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HumReplCyl.setDescription("Exp Module 1 alarm map setting for Humidifier Replace\nCylinder.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1CondPumpFail.setDescription("Exp Module 1 alarm map setting for Condensate Pump\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1BlwrCntl1Fail.setDescription("Exp Module 1 alarm map setting for Blower Controller 1\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1BlwrCntl2Fail.setDescription("Exp Module 1 alarm map setting for Blower Controller 2\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1HighFltrDP.setDescription("Exp Module 1 alarm map setting for High Filter \nDifferential Pressure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1LowAirFlow.setDescription("Exp Module 1 alarm map setting for Low Air Flow.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1AirBlckIntOpen.setDescription("Exp Module 1 alarm map setting for Air Block Interlock\nOpen.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod1WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod1WaterDetected.setDescription("Exp Module 1 alarm map setting for Water Detected.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4))
airFMSysAlarmMapExpMod2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2TableSize.setDescription("The number of entries in the \nairFMSysAlarmMapExpMod2Table.")
airFMSysAlarmMapExpMod2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2Table.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapExpMod2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapExpMod2OutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2Entry.setDescription("The expansion module 2 alarm map type to reference.")
airFMSysAlarmMapExpMod2OutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2OutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapExpMod2AnyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2AnyAlarm.setDescription("Exp Module 2 alarm map setting for Any Alarm.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2MaintReq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2MaintReq.setDescription("Exp Module 2 alarm map setting for Module Maintenance\nRequired.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2CoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2CoolFail.setDescription("Exp Module 2 alarm map setting for Module Cooling \nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2HighSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HighSupplyTemp.setDescription("Exp Module 2 alarm map setting for High Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2LowSupplyTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2LowSupplyTemp.setDescription("Exp Module 2 alarm map setting for Low Supply \nTemperature.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2HumFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HumFail.setDescription("Exp Module 2 alarm map setting for Humidifier Failure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2HumReplCyl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HumReplCyl.setDescription("Exp Module 2 alarm map setting for Humidifier Replace\nCylinder.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2CondPumpFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2CondPumpFail.setDescription("Exp Module 2 alarm map setting for Condensate Pump\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2BlwrCntl1Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2BlwrCntl1Fail.setDescription("Exp Module 2 alarm map setting for Blower Controller 1\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2BlwrCntl2Fail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2BlwrCntl2Fail.setDescription("Exp Module 2 alarm map setting for Blower Controller 2\nFailure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2HighFltrDP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2HighFltrDP.setDescription("Exp Module 2 alarm map setting for High Filter \nDifferential Pressure.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2LowAirFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2LowAirFlow.setDescription("Exp Module 2 alarm map setting for Low Air Flow.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2AirBlckIntOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2AirBlckIntOpen.setDescription("Exp Module 2 alarm map setting for Air Block Interlock\nOpen.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapExpMod2WaterDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapExpMod2WaterDetected.setDescription("Exp Module 2 alarm map setting for Water Detected.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5))
airFMSysAlarmMapInputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapInputTableSize.setDescription("The number of entries in the airFMSysAlarmMapInputTable. ")
airFMSysAlarmMapInputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapInputTable.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapInputOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapInputEntry.setDescription("The input contact alarm map type to reference.")
airFMSysAlarmMapInputOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapInputOutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput1.setDescription("Input contact 1 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput2.setDescription("Input contact 2 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput3.setDescription("Input contact 3 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput4.setDescription("Input contact 4 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput5.setDescription("Input contact 5 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput6.setDescription("Input contact 6 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput7.setDescription("Input contact 7 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput8.setDescription("Input contact 8 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput9.setDescription("Input contact 9 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput10.setDescription("Input contact 10 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput11.setDescription("Input contact 11 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput12.setDescription("Input contact 12 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput13.setDescription("Input contact 13 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput14.setDescription("Input contact 14 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput15.setDescription("Input contact 15 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapInput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapInput16.setDescription("Input contact 16 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6))
airFMSysAlarmMapOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapOutputTableSize.setDescription("The number of entries in the \nairFMSysAlarmMapOutputTable. ")
airFMSysAlarmMapOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2))
if mibBuilder.loadTexts: airFMSysAlarmMapOutputTable.setDescription("Allows for getting alarm map information.")
airFMSysAlarmMapOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMSysAlarmMapOutputIndex"))
if mibBuilder.loadTexts: airFMSysAlarmMapOutputEntry.setDescription("The input contact alarm map type to reference.")
airFMSysAlarmMapOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMSysAlarmMapOutputIndex.setDescription("The index of the output relay.")
airFMSysAlarmMapOutput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput1.setDescription("Output relay 1 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput2.setDescription("Output relay 2 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput3.setDescription("Output relay 3 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput4.setDescription("Output relay 4 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput5.setDescription("Output relay 5 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput6 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput6.setDescription("Output relay 6 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput7 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput7.setDescription("Output relay 7 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput8 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput8.setDescription("Output relay 8 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput9 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput9.setDescription("Output relay 9 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput10 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput10.setDescription("Output relay 10 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput11 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput11.setDescription("Output relay 11 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput12 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput12.setDescription("Output relay 12 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput13 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput13.setDescription("Output relay 13 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput14 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput14.setDescription("Output relay 14 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput15 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput15.setDescription("Output relay 15 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMSysAlarmMapOutput16 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMSysAlarmMapOutput16.setDescription("Output relay 16 alarm map setting.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5))
airFMModIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1))
airFMModIdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModIdentTableSize.setDescription("The number of entries in the airFMModIdentTable. ")
airFMModIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2))
if mibBuilder.loadTexts: airFMModIdentTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModIdentModuleIndex"))
if mibBuilder.loadTexts: airFMModIdentEntry.setDescription("The module to get information from.")
airFMModIdentModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModIdentModuleIndex.setDescription("The index of the module.")
airFMModModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModModelNumber.setDescription("Model number of the Module.")
airFMModSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSerialNumber.setDescription("Unique identification number for this Module.")
airFMModManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModManufactureDate.setDescription("Date the Module was manufactured.")
airFMModFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFirmwareRev.setDescription("Revision number of the firmware installed on this \nModule.")
airFMModHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHardwareRev.setDescription("Revision number of the hardware installed on this \nModule.")
airFMModStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2))
airFMModStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModStatusTableSize.setDescription("The number of entries in the airFMModStatusTable. ")
airFMModStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2))
if mibBuilder.loadTexts: airFMModStatusTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModStatusModuleIndex"))
if mibBuilder.loadTexts: airFMModStatusEntry.setDescription("The module to get information from.")
airFMModStatusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModStatusModuleIndex.setDescription("The index of the module.")
airFMModSupplyTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyTempC.setDescription("The temperature measured at the supply sensor.  \nMeasured in tenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModSupplyTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyTempF.setDescription("The temperature measured at the supply sensor.\nMeasured in tenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModSupplyHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSupplyHum.setDescription("The humidity measured at the supply sensor.\nMeasured in tenths of percent relative humidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModReturnTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnTempC.setDescription("The temperature measured at the return sensor.\nMeasured in tenths of degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModReturnTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnTempF.setDescription("The temperature measured at the return sensor.\nMeasured in tenths of degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModReturnHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModReturnHum.setDescription("The humidity measured at the return sensor.\nMeasured in tenths of percent relative humidity.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModFilterDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFilterDiffPresPa.setDescription("The difference in pressure on either side of the air \nfilters. A high differential pressure indicates a \nclogged filter.  Measured in Pascals.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModFilterDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFilterDiffPresInWC.setDescription("The difference in pressure on either side of the air \nfilters. A high differential pressure indicates a \nclogged filter.  Measured in hundredths of inches \nwater column.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilDiffPresPa.setDescription("The difference in pressure on either side of the \ncooling/dehumidification coils.  Measured in Pascals.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilDiffPresInWC.setDescription("The difference in pressure on either side of the \ncooling/dehumidification coils.  Measured in \nhundredths of inches water column.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModProperties = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3))
airFMModPropTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModPropTableSize.setDescription("The number of entries in the airFMModPropTable. ")
airFMModPropTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2))
if mibBuilder.loadTexts: airFMModPropTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModPropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModPropModuleIndex"))
if mibBuilder.loadTexts: airFMModPropEntry.setDescription("The module to get information from.")
airFMModPropModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModPropModuleIndex.setDescription("The index of the module.")
airFMModOutputCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,5,1,2,4,6,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("kw45", 2), ("kw35", 3), ("kw40", 4), ("kw50", 5), ("kw80", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModOutputCapacity.setDescription("The cooling capacity (in Kilowatts) of the displayed \nModule.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModCapacityCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("tandem", 2), ("hotGasBypass", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCapacityCtrl.setDescription("The method used to load and unload the compressors. \nTandem compressor Modules use two stages (one \ncompressor each). Single compressor Modules use hot \ngas bypass.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,7,3,5,4,8,6,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("electricSCR", 3), ("steam", 4), ("hotWaterOnOff", 5), ("hotGasReheat", 6), ("hotGasAndElectric", 7), ("hotWaterProp", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHeaterType.setDescription("The type of reheating device installed in this Module.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModElectricHeaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("kw10", 2), ("kw15", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModElectricHeaterType.setDescription("The type/capacity of the electric heater, if installed.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModHumidifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumidifierType.setDescription("The type of equipment installed in the Module to run \nthe humidification mode.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModBlwrFreqSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwrFreqSetting.setDescription("Frequency of the blower in tenths of hertz.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModNomCoilDiffPresPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModNomCoilDiffPresPa.setDescription("The difference in pressure on either side of the \ncooling/dehumidification coils.  Measured in Pascals.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModNomCoilDiffPresInWC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModNomCoilDiffPresInWC.setDescription("The difference in pressure on either side of the \ncooling/dehumidification coils.  Measured in \nhundredths of inches water column.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModCondPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCondPump.setDescription("Indicates the presence of a condensate pump in the \nModules of this System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModFireDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModFireDetector.setDescription("Indicates the presence of a fire detector for each \nof the Modules in this System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModSmokeDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSmokeDetector.setDescription("Indicates the presence of a smoke detector for each \nof the Modules in this System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModWaterDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("notPresent", 2), ("present", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModWaterDetector.setDescription("Indicates the presence of a water leak detector for \neach of the Modules in this System.\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4))
airFMModCoolTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoolTableSize.setDescription("The number of entries in the airFMModCoolTable. ")
airFMModCoolTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2))
if mibBuilder.loadTexts: airFMModCoolTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModCoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModCoolModuleIndex"))
if mibBuilder.loadTexts: airFMModCoolEntry.setDescription("The module to get information from.")
airFMModCoolModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoolModuleIndex.setDescription("The index of the module.")
airFMModComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModComp1.setDescription("The status of compressor 1 of the tandem compressor \nunit (on or off).\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModComp2.setDescription("The status of compressor 2 of the tandem compressor \nunit (on or off).\nA value of notApplicable indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModSuctPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSuctPresKPa.setDescription("The refrigerant pressure measured at the suction \ninlet of the compressor.  Measured in kiloPascals.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModSuctPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModSuctPresPSI.setDescription("The refrigerant pressure measured at the suction \ninlet of the compressor.  Measured in pounds per\nsquare inch.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModDischPresKPa = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModDischPresKPa.setDescription("The refrigerant pressure measured at the discharge \noutlet of the compressor.  Measured in kiloPascals.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModDischPresPSI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModDischPresPSI.setDescription("The refrigerant pressure measured at the discharge \noutlet of the compressor.  Measured in pounds per\nsquare inch.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModCondFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCondFluidVlvPos.setDescription("The position of the condenser fluid valve. The valve \nregulates the flow of liquid coolant into the heat \nexchanger (condenser). 100% indicates the valve is \ncompletely open, and 0% indicates that the valve is \nclosed.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModCoilFluidVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModCoilFluidVlvPos.setDescription("The position of the coil fluid valve. The valve \nregulates the flow of liquid coolant in the fluid \ncooling coil (MultiCool, Economizer, or Chilled \nWater). 100% indicates the valve is completely open, \nand 0% indicates that the valve is closed.  Measured\nin percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5))
airFMModHumTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumTableSize.setDescription("The number of entries in the airFMModHumTable. ")
airFMModHumTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2))
if mibBuilder.loadTexts: airFMModHumTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModHumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModHumModuleIndex"))
if mibBuilder.loadTexts: airFMModHumEntry.setDescription("The module to get information from.")
airFMModHumModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumModuleIndex.setDescription("The index of the module.")
airFMModHumidifier = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("steamElectrode", 3), ("liveSteam", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumidifier.setDescription("The type of equipment installed in the Module to run \nthe humidification mode.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModElectrodeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModElectrodeCurrent.setDescription("The current drawn by the electrodes of the steam \ncylinder humidifier.  Measured in tenths of amps.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModHumActualOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHumActualOutput.setDescription("The humidification output of an individual Module.\nMeasured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModWaterConductivity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModWaterConductivity.setDescription("The conductivity of the water in the humidifier \ncylinder.  Measured in microSiemens per centimeter.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModHotWaterVlvPos = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModHotWaterVlvPos.setDescription("The position of the hot water valve. 100% indicates \nthe valve is completely open, and 0% indicates that \nthe valve is closed.  Measured in percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModStmElectHumMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("auto", 3), ("drain", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModStmElectHumMode.setDescription("Set the humidifier function mode. \nOff: Remove power from electrodes. \nAuto: Humidifier controlled by Module controller. \nDrain: Remove power from electrodes and drain the cylinder.\n\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlower1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6))
airFMModBlwr1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1TableSize.setDescription("The number of entries in the airFMModBlwr1Table. ")
airFMModBlwr1Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2))
if mibBuilder.loadTexts: airFMModBlwr1Table.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModBlwr1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr1ModuleIndex"))
if mibBuilder.loadTexts: airFMModBlwr1Entry.setDescription("The module to get information from.")
airFMModBlwr1ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ModuleIndex.setDescription("The index of the module.")
airFMModBlwr1CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CtrlType.setDescription("The type of blower controller.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CmdFreq.setDescription("The requested operating frequency for the blower.\nMeasured in tenths of hertz.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ActFreq.setDescription("The frequency at which the blower controller is \noperating.  Measured in tenths of hertz.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Poles.setDescription("The number of poles of the blower motor that the \nblower controller is controlling.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1RatedHorsePower.setDescription("The power rating of the blower motor.  Measured in \nhundredths of horsepower.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1RatedCurrent.setDescription("The current rating of the blower motor.  Measured in\nhundredths of amps.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ActTorq.setDescription("The actual torque of the blower motor.  Measured in \nhundredths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Current.setDescription("The percent of rated current drawn by the blower \nmotor.  Measured in hundredths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1Vlt.setDescription("The voltage supplied to the blower motor.  Measured \nin tenths of volts RMS.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1DCLinkVlt.setDescription("The voltage of the blower controller's DC bus.  \nMeasured in volts DC.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1AccTime.setDescription("The time to accelerate the blower to the specified \nfrequency.  Measured in tenths of seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1DecTime.setDescription("The time to decelerate the blower frequency to zero.\nMeasured in tenths of seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CapLife.setDescription("The remaining life of the main circuit capacitor. \nMeasured in tenths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1CtrlCoolFanLife.setDescription("The total operation time of the blower controller \ncooling fan.  Measured in hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvMode.setDescription("Enables or disables the electronic overload relay.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvSetting.setDescription("The electronic overload relay is activated when the \ncurrent exceeds this threshold.  Measured in \nhundredths of amps.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ElOvTimeConst.setDescription("The delay between the current exceeding the overload \nthreshold and the activation of the electronic \noverload relay.  Measured in tenths of minutes.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1FanPower.setDescription("The actual power of the blower motor.  Measured in \ntenths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1HeatsinkTempC.setDescription("The temperature of the heatsink on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1HeatsinkTempF.setDescription("The temperature of the heatsink on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ChokeTempC.setDescription("The temperature of the choke on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1ChokeTempF.setDescription("The temperature of the choke on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1InverterTempC.setDescription("The temperature of the inverter on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr1InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr1InverterTempF.setDescription("The temperature of the inverter on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlower2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7))
airFMModBlwr2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2TableSize.setDescription("The number of entries in the airFMModBlwr2Table. ")
airFMModBlwr2Table = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2))
if mibBuilder.loadTexts: airFMModBlwr2Table.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModBlwr2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModBlwr2ModuleIndex"))
if mibBuilder.loadTexts: airFMModBlwr2Entry.setDescription("The module to get information from.")
airFMModBlwr2ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ModuleIndex.setDescription("The index of the module.")
airFMModBlwr2CtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("fujiVFD", 2), ("ecController", 3), ("danfossVFD", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CtrlType.setDescription("The type of blower controller.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2CmdFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CmdFreq.setDescription("The requested operating frequency for the blower.\nMeasured in tenths of hertz.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ActFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ActFreq.setDescription("The frequency at which the blower controller is \noperating.  Measured in tenths of hertz.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2Poles = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Poles.setDescription("The number of poles of the blower motor that the \nblower controller is controlling.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2RatedHorsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2RatedHorsePower.setDescription("The power rating of the blower motor.  Measured in \nhundredths of horsepower.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2RatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2RatedCurrent.setDescription("The current rating of the blower motor.  Measured in\nhundredths of amps.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ActTorq = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ActTorq.setDescription("The actual torque of the blower motor.  Measured in \nhundredths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Current.setDescription("The percent of rated current drawn by the blower \nmotor.  Measured in hundredths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2Vlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2Vlt.setDescription("The voltage supplied to the blower motor.  Measured \nin tenths of volts RMS.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2DCLinkVlt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2DCLinkVlt.setDescription("The voltage of the blower controller's DC bus.  \nMeasured in volts DC.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2AccTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2AccTime.setDescription("The time to accelerate the blower to the specified \nfrequency.  Measured in tenths of seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2DecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2DecTime.setDescription("The time to decelerate the blower frequency to zero.\nMeasured in tenths of seconds.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2CapLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CapLife.setDescription("The remaining life of the main circuit capacitor. \nMeasured in tenths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2CtrlCoolFanLife = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2CtrlCoolFanLife.setDescription("The total operation time of the blower controller \ncooling fan.  Measured in hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ElOvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("inactive", 2), ("active", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvMode.setDescription("Enables or disables the electronic overload relay.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ElOvSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvSetting.setDescription("The electronic overload relay is activated when the \ncurrent exceeds this threshold.  Measured in \nhundredths of amps.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ElOvTimeConst = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ElOvTimeConst.setDescription("The delay between the current exceeding the overload \nthreshold and the activation of the electronic \noverload relay.  Measured in tenths of minutes.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2FanPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2FanPower.setDescription("The actual power of the blower motor.  Measured in \ntenths of percent.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2HeatsinkTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2HeatsinkTempC.setDescription("The temperature of the heatsink on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2HeatsinkTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2HeatsinkTempF.setDescription("The temperature of the heatsink on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ChokeTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ChokeTempC.setDescription("The temperature of the choke on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2ChokeTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2ChokeTempF.setDescription("The temperature of the choke on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2InverterTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2InverterTempC.setDescription("The temperature of the inverter on the blower \ncontroller.  Measured in degrees Celsius.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModBlwr2InverterTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModBlwr2InverterTempF.setDescription("The temperature of the inverter on the blower \ncontroller.  Measured in degrees Fahrenheit.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8))
airFMModRHTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHTableSize.setDescription("The number of entries in the airFMModRHTable. ")
airFMModRHTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2))
if mibBuilder.loadTexts: airFMModRHTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModRHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModRHModuleIndex"))
if mibBuilder.loadTexts: airFMModRHEntry.setDescription("The module to get information from.")
airFMModRHModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHModuleIndex.setDescription("The index of the module.")
airFMModRHComp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHComp1.setDescription("Compressor 1 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHComp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHComp2.setDescription("Compressor 2 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHHeater = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHHeater.setDescription("Heater run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHHum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHHum.setDescription("Humidifier run hours\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHBlwr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwr1.setDescription("Blower 1 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHBlwr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwr2.setDescription("Blower 2 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHBlwrCtrl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwrCtrl1.setDescription("Blower Controller 1 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHBlwrCtrl2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModRHBlwrCtrl2.setDescription("Blower Controller 2 run hours.\nA value of -2147483648 indicates that this OID \ndoes not apply to this device due to its configuration.")
airFMModRHComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHComp1Reset.setDescription("Reset the compressor 1 run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRHComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHComp2Reset.setDescription("Reset the compressor 2 run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRHHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHHeaterReset.setDescription("Reset the heater run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRHHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHHumReset.setDescription("Reset the humidifier run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRHBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHBlwr1Reset.setDescription("Reset the blower 1 run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModRHBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModRHBlwr2Reset.setDescription("Reset the blower 2 run hours.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9))
airFMModServIntComp1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp1.setDescription("The interval at which to generate a maintenance alarm \nfor compressor 1. Values stored in increments of 100 \nhours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntComp2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp2.setDescription("The interval at which to generate a maintenance alarm \nfor compressor 2. Values stored in increments of 100 \nhours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHeater.setDescription("The interval at which to generate a maintenance alarm \nfor the reheat components. Values stored in \nincrements of 100 hours. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntHum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHum.setDescription("The interval at which to generate a maintenance alarm \nfor the humidifier. Values stored in increments of \n100 hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwr1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr1.setDescription("The interval at which to generate a maintenance alarm \nfor blower 1. Values stored in increments of 100 \nhours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr2.setDescription("The interval at which to generate a maintenance alarm \nfor blower 2. Values stored in increments of 100 \nhours. \nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwrCtrl1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl1.setDescription("The interval at which to generate a maintenance alarm \nfor blower controller 1. Values stored in increments \nof 100 hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwrCtrl2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl2.setDescription("The interval at which to generate a maintenance alarm \nfor blower controller 2. Values stored in increments \nof 100 hours.\nA value of -2147483648 indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntResets = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10))
airFMModServIntResetTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModServIntResetTableSize.setDescription("The number of entries in the airFMModServIntTable. ")
airFMModServIntResetTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2))
if mibBuilder.loadTexts: airFMModServIntResetTable.setDescription("Allows for getting information from each module in \nthe system. ")
airFMModServIntResetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airFMModServIntResetModuleIndex"))
if mibBuilder.loadTexts: airFMModServIntResetEntry.setDescription("The module to get information from.")
airFMModServIntResetModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMModServIntResetModuleIndex.setDescription("The index of the module.")
airFMModServIntComp1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp1Reset.setDescription("Reset the compressor 1 service interval maintenance \nalarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntComp2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntComp2Reset.setDescription("Reset the compressor 2 service interval maintenance \nalarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntHeaterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHeaterReset.setDescription("Reset the heater service interval maintenance alarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntHumReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntHumReset.setDescription("Reset the humidifier service interval maintenance \nalarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwr1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr1Reset.setDescription("Reset the blower 1 service interval maintenance \nalarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwr2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwr2Reset.setDescription("Reset the blower 2 service interval maintenance \nalarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwrCtrl1Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl1Reset.setDescription("Reset the blower controller 1 service interval \nmaintenance alarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMModServIntBlwrCtrl2Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notApplicable", 1), ("noOperation", 2), ("reset", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMModServIntBlwrCtrl2Reset.setDescription("Reset the blower controller 2 service interval \nmaintenance alarm.\nGetting this OID will do nothing and return the \nnoOperation value.\nA value of notApplicable indicates that this OID does \nnot apply to this device due to its configuration.")
airFMAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6))
airFMAlarmClearActiveGroupAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMAlarmClearActiveGroupAlarms.setDescription("Clear active group alarms.  If alarm conditions are \nstill present, new alarms will be generated for those \nconditions.\nGetting this OID will do nothing and return the \nnoOperation value.")
airFMAlarmClearActiveSysModAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("clearAlarms", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airFMAlarmClearActiveSysModAlarms.setDescription("Clear active system and module alarms.  If alarm \nconditions are still present, new alarms will be \ngenerated for those conditions.\nGetting this OID will do nothing and return the \nnoOperation value.")
airFMAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmConditionsTableSize.setDescription("The number of active alarm conditions in the \nairFMAlarmConditionTable.")
airFMAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4))
if mibBuilder.loadTexts: airFMAlarmConditionsTable.setDescription("Table of active alarm conditions for the device.")
airFMAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1)).setIndexNames((0, "PowerNet-MIB", "airFMAlarmConditionsIndex"))
if mibBuilder.loadTexts: airFMAlarmConditionsEntry.setDescription("Alarm condition specification")
airFMAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmConditionsIndex.setDescription("Alarm condition index.")
airFMAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("informational", 1), ("warningMinor", 2), ("criticalMajor", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmSeverity.setDescription("Severity of the alarm.")
airFMAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,5,4,3,)).subtype(namedValues=NamedValues(("group", 1), ("system", 2), ("mainMod", 3), ("expMod1", 4), ("expMod2", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmType.setDescription("Type of alarm.")
airFMEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMEventCode.setDescription("APC event code for the alarm.")
airFMAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmDate.setDescription("Date the alarm was recorded.")
airFMAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmTime.setDescription("Time the alarm was recorded.")
airFMAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFMAlarmDescription.setDescription("Description of the alarm.")
airPA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2))
airPAIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1))
airPAIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAIdentName.setDescription("A character string identifying the device name.")
airPAModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAModelNumber.setDescription("A character string identifying the device model number.")
airPADateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPADateOfManufacture.setDescription("A character string identifying when the device was produced.")
airPASerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASerialNumber.setDescription("A character string identifying the device serial number.")
airPAFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAFirmwareRevision.setDescription("A character string identifying the device firmware revision.")
airPAHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAHardwareRevision.setDescription("A character string identifying the device hardware revision.")
airPAStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2))
airPASystemPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("powerON", 1), ("powerOFF", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASystemPower.setDescription("The status of the unit's system power setting.\n\nON(1)   The system power is turned on.\nOFF(2)  The system power is turned off. ")
airPAOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("modeOFF", 1), ("modeVENTING", 2), ("modeCOOLING", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAOperatingMode.setDescription("The current operating mode of the unit.\n\nOFF(1)      The system is off.\nVENTING(2)  The system's venting function is active.\nCOOLING(3)  The system's cooling function is active. ")
airPASetpointTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASetpointTempF.setDescription("The temperature setpoint in Fahrenheit to which the unit is controlling. ")
airPASetpointTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASetpointTempC.setDescription("The temperature setpoint in Celsius to which the unity is controlling. ")
airPABlowerSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("speedLOW", 1), ("speedHIGH", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPABlowerSpeed.setDescription("The unit's blower speed setting.\n\nLOW(1)      The blower speed is low.\nHIGH(2)     The blower speed is high. ")
airPACompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACompressor.setDescription("The unit's compressor status.\n\nON(1)   The compressor is turned on.\nOFF(2)  The compressor is turned off. ")
airPACondenserFan = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACondenserFan.setDescription("The unit's condenser fan status.\n\nON(1)   The condenser fan is turned on.\nOFF(2)  The condenser fan is turned off. ")
airPACondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("statusON", 1), ("statusOFF", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPACondensatePump.setDescription("The unit's condensate pump status.\n\nON(1)   The condensate pump is turned on.\nOFF(2)  The condensate pump is turned off. ")
airPASupplyTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASupplyTempF.setDescription("The supply temperature in degrees Fahrenheit. ")
airPASupplyTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPASupplyTempC.setDescription("The supply temperature in degrees Celsius. ")
airPAReturnTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAReturnTempF.setDescription("The return temperature in degrees Fahrenheit. ")
airPAReturnTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPAReturnTempC.setDescription("The return temperature in degrees Celsius. ")
airPARemoteTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteTempF.setDescription("The remote temperature in degrees Fahrenheit. ")
airPARemoteTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteTempC.setDescription("The remote temperature in degrees Celsius. ")
airPARemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airPARemoteHumidity.setDescription("The remote humidity. ")
airIR = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3))
airIRAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1))
airIRAlarmConditionsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmConditionsTableSize.setDescription("The number of active alarm conditions in the airIRAlarmConditionTable.")
airIRAlarmConditionsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2))
if mibBuilder.loadTexts: airIRAlarmConditionsTable.setDescription("Table of active alarm conditions for the device.")
airIRAlarmConditionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRAlarmConditionsIndex"))
if mibBuilder.loadTexts: airIRAlarmConditionsEntry.setDescription("Alarm condition specification")
airIRAlarmConditionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmConditionsIndex.setDescription("Alarm condition index.")
airIREventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIREventCode.setDescription("Code for the alarm.")
airIRAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRAlarmDescription.setDescription("Description of the alarm.")
airIRRC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2))
airIRRCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1))
airIRRCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1))
airIRRCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusCoolOutput.setDescription("Group coolant output in tenths of kW.")
airIRRCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusCoolDemand.setDescription("Group coolant demand in tenths of kW.")
airIRRCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusAirFlowUS.setDescription("Group air flow in cubic feet per minute.")
airIRRCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusAirFlowMetric.setDescription("Group air flow in liters per second.")
airIRRCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMaxRackInletTempUS.setDescription("Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMaxRackInletTempMetric.setDescription("Group maximum rack inlet temperature in tenths of \ndegrees Celsius.")
airIRRCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMinRackInletTempUS.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusMinRackInletTempMetric.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRCGroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCGroupStatusActiveFlowControlStatus.setDescription("Status of the active flow control\nsystem.")
airIRRCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2))
airIRRCGroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsCoolUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRRCGroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsCoolMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRRCGroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsSupplyAirUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRRCGroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsSupplyAirMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRRCGroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,1,)).subtype(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsFanSpeedPreference.setDescription("The preferred fan speed setting.")
airIRRCGroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsFanSpeedControl.setDescription("The fan speed control setting.\nAutomatic(1) - controller manages fan speed.\nManual(2) - fan speed is fixed and set by the fan speed preference.\nSee airIRRCGroupSetpointsFanSpeedPreference.")
airIRRCGroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupSetpointsActiveFlowControlBias.setDescription("The active flow control bias setting.")
airIRRCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3))
airIRRCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigNumberofCoolingUnits.setDescription("The number of cooling units present in the group.")
airIRRCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigConfigurationType.setDescription("The group configuration type.")
airIRRCGroupConfigPctGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigPctGlycol.setDescription("The glycol mixture in percent.")
airIRRCGroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolGainP.setDescription("The gain component of the PID in hundredths.")
airIRRCGroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolResetRateI.setDescription("The integral component of the PID in hundredths.")
airIRRCGroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigCoolDerivativeD.setDescription("The derivative component of the PID in hundredths.")
airIRRCGroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigMaxFanSpeed.setDescription("The maximum desired fan speed setting in percent.")
airIRRCGroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigNumberOfActiveFlowControllers.setDescription("The number of active flow controllers\npresent in the group.")
airIRRCGroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigActiveFlowControllerLampTest.setDescription("Turns off/on the active flow\ncontroller lamp test.")
airIRRCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigAltitudeUS.setDescription("The group altitude of the units above sea level in feet.")
airIRRCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCGroupConfigAltitudeMetric.setDescription("The group altitude of the units above sea level in meters.")
airIRRCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2))
airIRRCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1))
airIRRCUnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentID.setDescription("The unit identification number.")
airIRRCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentName.setDescription("A character string identifying the  \nunit name.")
airIRRCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitIdentLocation.setDescription("A character string identifying the  \nunit location.")
airIRRCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentModelNumber.setDescription("A character string identifying the  \nunit model number.")
airIRRCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentSerialNumber.setDescription("A character string identifying the  \nunit serial number.")
airIRRCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentFirmwareRevision.setDescription("A character string identifying the  \nunit firmware version.")
airIRRCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentHardwareRevision.setDescription("A character string identifying the  \nunit controller hardware revision.")
airIRRCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitIdentManufactureDate.setDescription("A character string identifying the  \nunit manufacture date.")
airIRRCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2))
airIRRCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusOperateMode.setDescription("The cooling unit operating mode.")
airIRRCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusCoolOutput.setDescription("The unit cooling output in tenths of kW.")
airIRRCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusCoolDemand.setDescription("The unit cooling demand in tenths of kW.")
airIRRCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusAirFlowUS.setDescription("The unit air flow in cubic feet per minute.")
airIRRCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusAirFlowMetric.setDescription("The unit air flow in hundredths of \nliters per second.")
airIRRCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusRackInletTempUS.setDescription("The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusRackInletTempMetric.setDescription("The unit rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusSupplyAirTempUS.setDescription("The unit supply air temperature in tenths of\ndegrees Fahrenheit.")
airIRRCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusSupplyAirTempMetric.setDescription("The unit supply air temperature in tenths of\ndegrees Celsius.")
airIRRCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusReturnAirTempUS.setDescription("The unit return air temperature in tenths of\ndegrees Fahrenheit.")
airIRRCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusReturnAirTempMetric.setDescription("The unit return air temperature in tenths of\ndegrees Celsius.")
airIRRCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusContainmtDPUS.setDescription("The unit containment differential pressure in \nhundredths of inches of water.")
airIRRCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusContainmtDPMetric.setDescription("The unit containment differential pressure in Pa.")
airIRRCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFilterDPUS.setDescription("The unit air filter differential pressure in \nhundredths of inches of water.")
airIRRCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFilterDPMetric.setDescription("The unit air filter differential pressure in Pa.")
airIRRCUnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFanSpeed.setDescription("The unit average fan speed in tenths of percent.")
airIRRCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusInputState.setDescription("The state of the input contact.")
airIRRCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusOutputState.setDescription("The state of the output relay.")
airIRRCUnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusActivePowerSource.setDescription("The power source that is powering the unit.")
airIRRCUnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidValvePosition.setDescription("The fluid valve position in percent open.")
airIRRCUnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidFlowUS.setDescription("The fluid flow in tenths of gallons per minute.")
airIRRCUnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusFluidFlowMetric.setDescription("The fluid flow in hundredths of liters per second.")
airIRRCUnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusEnteringFluidTemperatureUS.setDescription("The temperature of the entering fluid in \ntenths of degrees Fahrenheit.")
airIRRCUnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusEnteringFluidTemperatureMetric.setDescription("The temperature of the entering fluid in \ntenths of degrees Celsius.")
airIRRCUnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusLeavingFluidTemperatureUS.setDescription("The temperature of the Leaving fluid in \ntenths of degrees Fahrenheit.")
airIRRCUnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitStatusLeavingFluidTemperatureMetric.setDescription("The temperature of the Leaving fluid in \ntenths of degrees Celsius.")
airIRRCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3))
airIRRCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursAirFilter.setDescription("Unit air filter run hours.")
airIRRCUnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan1.setDescription("Unit fan 1 run hours.")
airIRRCUnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan2.setDescription("Unit fan 2 run hours.")
airIRRCUnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan3.setDescription("Unit fan 3 run hours.")
airIRRCUnitRunHoursFan4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan4.setDescription("Unit fan 4 run hours.")
airIRRCUnitRunHoursFan5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan5.setDescription("Unit fan 5 run hours.")
airIRRCUnitRunHoursFan6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan6.setDescription("Unit fan 6 run hours.")
airIRRCUnitRunHoursFan7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan7.setDescription("Unit fan 7 run hours.")
airIRRCUnitRunHoursFan8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFan8.setDescription("Unit fan 8 run hours.")
airIRRCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyLeft.setDescription("Unit fan left power supply run hours.")
airIRRCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyRight.setDescription("Unit fan right power supply run hours.")
airIRRCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursCondensatePump.setDescription("Unit condensate pump run hours.")
airIRRCUnitRunHoursFanPowerSupplyFeedALeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedALeft.setDescription("Unit fan, DC power feed A, left power supply run hours.\nThis is only valid for a DC input unit.")
airIRRCUnitRunHoursFanPowerSupplyFeedARight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedARight.setDescription("Unit fan, DC power feed A, right power supply run hours.\nThis is only valid for a DC input unit.")
airIRRCUnitRunHoursFanPowerSupplyFeedBLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedBLeft.setDescription("Unit fan, DC power feed B, left power supply run hours.\nThis is only valid for a DC input unit.")
airIRRCUnitRunHoursFanPowerSupplyFeedBRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRCUnitRunHoursFanPowerSupplyFeedBRight.setDescription("Unit fan, DC power feed B, right power supply run hours.\nThis is only valid for a DC input unit.")
airIRRCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4))
airIRRCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitServiceIntervalsAirFilter.setDescription("Air filter service interval in weeks.")
airIRRCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitServiceIntervalsAirFilterAlarm.setDescription("The air filter service interval alarm enable/disable.")
airIRRCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5))
airIRRCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsRackInletHighTempUS.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsRackInletHighTempMetric.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.")
airIRRCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsSupplyAirHighTempUS.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsSupplyAirHighTempMetric.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Celsius.")
airIRRCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsReturnAirHighTempUS.setDescription("Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsReturnAirHighTempMetric.setDescription("Unit return air high temperature threshold in \ntenths of degrees Celsius.")
airIRRCUnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsEnteringFluidHighTempUS.setDescription("Unit entering fluid high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRCUnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitThresholdsEnteringFluidHighTempMetric.setDescription("Unit incoming fluid high temperature threshold in \ntenths of degrees Celsius.")
airIRRCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6))
airIRRCUnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("automatic", 1), ("maximum", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigCoolCapacity.setDescription("The cooling capacity options setting.")
airIRRCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigStartupDelay.setDescription("The startup delay in seconds.")
airIRRCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigIdleOnLeakDetect.setDescription("The idle on leak options setting.")
airIRRCUnitConfigPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ("sourceAandB", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigPowerSource.setDescription("The configured power source of the unit.")
airIRRCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigInputNormalState.setDescription("The normal state of the input contact.")
airIRRCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigOutputNormalState.setDescription("The normal state of the output relay.")
airIRRCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigOutputSource.setDescription("The source of output relay change.")
airIRRCUnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRCUnitConfigIdleOnCoolFail.setDescription("The idle on cool fail options setting.\nIf yes, the system will go into idle mode \nwhen a cooling failure is detected.\nIf no, the system will not go into idle mode \nwhen a cooling failure is detected. ")
airIRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3))
airIRRP100 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1))
airIRRP100Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1))
airIRRP100GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1))
airIRRP100GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusAirFlowUS.setDescription("Group air flow in cubic feet per minute.")
airIRRP100GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusAirFlowMetric.setDescription("Group air flow in liters per second.")
airIRRP100GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMaxRackInletTempUS.setDescription("Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMaxRackInletTempMetric.setDescription("Group maximum rack inlet temperature in tenths of \ndegrees Celsius.")
airIRRP100GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMinRackInletTempUS.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusMinRackInletTempMetric.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRP100GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusCoolDemand.setDescription("Group coolant demand in tenths of kiloWatts.")
airIRRP100GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusCoolOutput.setDescription("Group coolant output in tenths of kiloWatts.")
airIRRP100GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusHumidifyDemand.setDescription("The amount of humidification the group is demanding \nfrom the humidifiers in percent.")
airIRRP100GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusHumidifyOutput.setDescription("The actual amount of humidification the group is \nsupplying in percent.")
airIRRP100GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDehumidifyDemand.setDescription("The amount of dehumidification the group is demanding \nfrom the electric heaters in percent.")
airIRRP100GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDehumidifyOutput.setDescription("The actual amount of dehumidification the group is \nsupplying in percent.")
airIRRP100GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusReheatDemand.setDescription("The amount of heating the group is demanding \nfrom the electric heaters in percent.")
airIRRP100GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusReheatOutput.setDescription("The actual amount of heating the group is \nsupplying in percent.")
airIRRP100GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusActiveFlowControlStatus.setDescription("Status of the active flow control\nsystem.")
airIRRP100GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDewPointTempUS.setDescription("Group average dew point temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100GroupStatusDewPointTempMetric.setDescription("Group average dew point temperature in tenths of\ndegrees Celsius.")
airIRRP100GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2))
airIRRP100GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsCoolUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsCoolMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRRP100GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsSupplyAirUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsSupplyAirMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRRP100GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsHumidify.setDescription("Group humidify setpoint in tenths of\npercent relative humidity.")
airIRRP100GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsDehumidify.setDescription("Group dehumidify setpoint in tenths of\npercent relative humidity.")
airIRRP100GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsDehumidifyDeadband.setDescription("Group dehumidify deadband in percent relative humidity.")
airIRRP100GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsReheatUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP100GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsReheatMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRRP100GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,1,)).subtype(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsFanSpeedPreference.setDescription("The preferred fan speed setting.")
airIRRP100GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsFanSpeedControl.setDescription("The fan speed control setting.")
airIRRP100GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupSetpointsActiveFlowControlBias.setDescription("The active flow control bias setting.")
airIRRP100GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3))
airIRRP100GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberofCoolingUnits.setDescription("The number of cooling units present in the group.")
airIRRP100GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigConfigurationType.setDescription("The group configuration type.")
airIRRP100GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolGainP.setDescription("The gain component of the cool PID in hundredths.")
airIRRP100GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolResetRateI.setDescription("The integral component of the cool PID in hundredths.")
airIRRP100GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigCoolDerivativeD.setDescription("The derivative component of the cool PID in hundredths.")
airIRRP100GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigHumidifySensitivityBand.setDescription("The percent relative humidity below the setpoint that \nwill cause the humidifier to run at 100% capacity.")
airIRRP100GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatGainP.setDescription("The gain component of the reheat PID in hundredths.")
airIRRP100GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatResetRateI.setDescription("The integral component of the reheat PID in hundredths.")
airIRRP100GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigReheatDerivativeD.setDescription("The derivative component of the reheat PID in hundredths.")
airIRRP100GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberofBackupUnits.setDescription("The number of backup units.")
airIRRP100GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigRuntimeBalancingEnable.setDescription("Enable or disable runtime balancing feature.")
airIRRP100GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigLoadAssistEnable.setDescription("Enable or disable load assist feature.")
airIRRP100GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigFullRPBackups.setDescription("The number of full featured RPs that can be used as backup units.")
airIRRP100GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigMaxFanSpeed.setDescription("The maximum desired fan speed setting in percent.")
airIRRP100GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigNumberOfActiveFlowControllers.setDescription("The number of active flow controllers\npresent in the group.")
airIRRP100GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigActiveFlowControllerLampTest.setDescription("Turns off/on the active flow\ncontroller lamp test.")
airIRRP100GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigAltitudeUS.setDescription("The group altitude of the units above sea level in feet.")
airIRRP100GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100GroupConfigAltitudeMetric.setDescription("The group altitude of the units above sea level in meters.")
airIRRP100Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2))
airIRRP100UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1))
airIRRP100UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentID.setDescription("The unit identification number.")
airIRRP100UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentName.setDescription("A character string identifying the  \nunit name.")
airIRRP100UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitIdentLocation.setDescription("A character string identifying the  \nunit location.")
airIRRP100UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentModelNumber.setDescription("A character string identifying the  \nunit model number.")
airIRRP100UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentSerialNumber.setDescription("A character string identifying the  \nunit serial number.")
airIRRP100UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentFirmwareRevision.setDescription("A character string identifying the  \nunit firmware version.")
airIRRP100UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentHardwareRevision.setDescription("A character string identifying the  \nunit controller hardware revision.")
airIRRP100UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitIdentManufactureDate.setDescription("A character string identifying the  \nunit manufacture date.")
airIRRP100UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2))
airIRRP100UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,7,5,1,4,6,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("service", 5), ("backup", 6), ("assist", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusOperateMode.setDescription("The cooling unit operating mode.")
airIRRP100UnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTempUS.setDescription("The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTempMetric.setDescription("The unit rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyAirTempUS.setDescription("The unit supply air temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyAirTempMetric.setDescription("The unit supply air temperature in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnAirTempUS.setDescription("The unit return air temperature in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnAirTempMetric.setDescription("The unit return air temperature in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSupplyHumidity.setDescription("The relative humidity of the supply air in\ntenths of percent.")
airIRRP100UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReturnHumidity.setDescription("The relative humidity of the return air in\ntenths of percent.")
airIRRP100UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusAirFlowUS.setDescription("The unit air flow in cubic feet per minute.")
airIRRP100UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusAirFlowMetric.setDescription("The unit air flow in hundredths of \nliters per second.")
airIRRP100UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFanSpeed.setDescription("The unit average fan speed in tenths of percent.")
airIRRP100UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCoolDemand.setDescription("The unit cooling demand in tenths of kiloWatts.")
airIRRP100UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCoolOutput.setDescription("The unit cooling output in tenths of kiloWatts.")
airIRRP100UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifyDemand.setDescription("The amount of humidification the unit is demanding \nfrom the humidifier in percent.")
airIRRP100UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifyOutput.setDescription("The actual humidification output of the unit\nin percent.")
airIRRP100UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDehumidifyDemand.setDescription("The amount of dehumidification the unit is \ndemanding in percent.")
airIRRP100UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDehumidifyOutput.setDescription("The actual dehumidification output of the unit\nin percent.")
airIRRP100UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReheatDemand.setDescription("The amount of heating the unit is demanding \nfrom the electric heater in percent.")
airIRRP100UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusReheatOutput.setDescription("The actual heating output of the unit\nin percent.")
airIRRP100UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusInputState.setDescription("The state of the input contact.")
airIRRP100UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusOutputState.setDescription("The state of the output relay.")
airIRRP100UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature1US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature1Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature2US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature2Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature3US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP100UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusRackInletTemperature3Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP100UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFilterDPUS.setDescription("The unit air filter differential pressure in \nhundredths of inches of water.")
airIRRP100UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusFilterDPMetric.setDescription("The unit air filter differential pressure in Pa.")
airIRRP100UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusContainmtDPUS.setDescription("The unit containment differential pressure in \nhundredths of inches of water.")
airIRRP100UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusContainmtDPMetric.setDescription("The unit containment differential pressure in Pa.")
airIRRP100UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifierCurrent.setDescription("The humidifier current of the unit\nin tenths of amperes.")
airIRRP100UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusHumidifierWaterConductivity.setDescription("The water conductivity in the humidifier of the unit\nin microSiemens/cm.")
airIRRP100UnitStatusCompressorDriveSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveSpeed.setDescription("The compressor drive speed in hundredths of Hertz.")
airIRRP100UnitStatusCompressorDrivePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDrivePower.setDescription("The compressor drive power consumption in \ntenths of kiloWatts.")
airIRRP100UnitStatusCompressorDriveVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveVoltage.setDescription("The compressor drive voltage consumption in \ntenths of volts.")
airIRRP100UnitStatusCompressorDriveCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveCurrent.setDescription("The compressor drive voltage consumption in \ntenths of amperes.")
airIRRP100UnitStatusCompressorDriveDCLinkVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveDCLinkVoltage.setDescription("The compressor drive DC link voltage in \ntenths of volts.")
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveHeatSinkTempUS.setDescription("The temperature of the compressor drive heatsink\nin tenths of degrees Fahrenheit.")
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric.setDescription("The temperature of the compressor drive heatsink\nin tenths of degrees Celsius.")
airIRRP100UnitStatusCompressorDriveControlCardTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveControlCardTempUS.setDescription("The temperature of the compressor drive control card\nin tenths of degrees Fahrenheit.")
airIRRP100UnitStatusCompressorDriveControlCardTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveControlCardTempMetric.setDescription("The temperature of the compressor drive control card\nin tenths of degrees Celsius.")
airIRRP100UnitStatusCompressorDriveWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveWarningStatus.setDescription("The four byte warning status of the compressor drive \nin hexadecimal.")
airIRRP100UnitStatusCompressorDriveAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusCompressorDriveAlarmStatus.setDescription("The four byte alarm status of the compressor drive \nin hexadecimal.")
airIRRP100UnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSuctionPressureUS.setDescription("Unit suction pressure in pounds per square inch (PSI).")
airIRRP100UnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusSuctionPressureMetric.setDescription("Unit suction pressure in kiloPascals (kPa).")
airIRRP100UnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDischargePressureUS.setDescription("Unit discharge pressure in pounds per square inch (PSI).")
airIRRP100UnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusDischargePressureMetric.setDescription("Unit discharge pressure in kiloPascals (kPa).")
airIRRP100UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no-leak", 1), ("leak", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitStatusLeakSensor.setDescription("The state (no-leak/leak) of the leak sensor.")
airIRRP100UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3))
airIRRP100UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursAirFilter.setDescription("Unit air filter run hours.")
airIRRP100UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursCondensatePump.setDescription("Unit condensate pump run hours.")
airIRRP100UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHumidifier.setDescription("Unit fan right power supply run hours.")
airIRRP100UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursFan1.setDescription("Unit fan 1 run hours.")
airIRRP100UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHeater1.setDescription("Unit heater 1 run hours.")
airIRRP100UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursFan2.setDescription("Unit fan 2 run hours.")
airIRRP100UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursHeater2.setDescription("Unit Heater 2 run hours.")
airIRRP100UnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursCompressor.setDescription("Unit compressor run hours.")
airIRRP100UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP100UnitRunHoursSystem.setDescription("Total system run hours.")
airIRRP100UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4))
airIRRP100UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalAirFilter.setDescription("Air filter service interval in weeks.")
airIRRP100UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalAirFilterAlarm.setDescription("The air filter service interval alarm enable/disable.")
airIRRP100UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHumidifier.setDescription("Humidifier service interval in weeks.")
airIRRP100UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHumidifierAlarm.setDescription("The humidifier service interval alarm enable/disable.")
airIRRP100UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHeater.setDescription("Heater service interval in weeks.")
airIRRP100UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalHeaterAlarm.setDescription("The heater service interval alarm enable/disable.")
airIRRP100UnitServiceIntervalCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCompressor.setDescription("Compressor service interval in weeks.")
airIRRP100UnitServiceIntervalCompressorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCompressorAlarm.setDescription("The compressor service interval alarm enable/disable.")
airIRRP100UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCondensatePump.setDescription("Condensate pump service interval in weeks.")
airIRRP100UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalCondensatePumpAlarm.setDescription("The condensate pump service interval alarm enable/disable.")
airIRRP100UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalFans.setDescription("Fans service interval in weeks.")
airIRRP100UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitServiceIntervalFansAlarm.setDescription("The fans service interval alarm enable/disable.")
airIRRP100UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5))
airIRRP100UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsRackInletHighTempUS.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP100UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsRackInletHighTempMetric.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.")
airIRRP100UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyAirHighTempUS.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP100UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyAirHighTempMetric.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Celsius.")
airIRRP100UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsReturnAirHighTempUS.setDescription("Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP100UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsReturnAirHighTempMetric.setDescription("Unit return air high temperature threshold in \ntenths of degrees Celsius.")
airIRRP100UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyHumidityHigh.setDescription("Unit supply humidity high threshold in \ntenths of percent relative humidity.")
airIRRP100UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitThresholdsSupplyHumidityLow.setDescription("Unit supply humidity low threshold in \ntenths of percent relative humidity.")
airIRRP100UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6))
airIRRP100UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigStartupDelay.setDescription("The startup delay in seconds.")
airIRRP100UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("automatic", 1), ("maximum", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigCoolCapacity.setDescription("The cooling capacity options setting.")
airIRRP100UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigIdleOnLeakDetect.setDescription("The idle on leak options setting.")
airIRRP100UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigInputNormalState.setDescription("The normal state of the input contact.")
airIRRP100UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigOutputNormalState.setDescription("The normal state of the output relay.")
airIRRP100UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigOutputSource.setDescription("The source of output relay change.")
airIRRP100UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHumidifyEnable.setDescription("Enable/disable humidification.")
airIRRP100UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("drainOff", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHumidifierControl.setDescription("The humidifier drain control.")
airIRRP100UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigDehumidifyEnable.setDescription("Enable/disable dehumidification.")
airIRRP100UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigReheatEnable.setDescription("Enable/disable reheat.")
airIRRP100UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigHeatAssistEnable.setDescription("Enable/disable heat assist.")
airIRRP100UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("single", 1), ("dual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigPowerSourceConfig.setDescription("Configure the input power source:  (1) single feed or (2) dual feed.")
airIRRP100UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigUnitRoleOverride.setDescription("When this OID value is (1) automatic, the system determines\nwhich units are used as primary units and which units are used as backups.\nWhen this OID value is (2) forcedOn, the connected unit is set as a primary\nunit.")
airIRRP100UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("full", 1), ("reduced", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigSecondaryPowerFeedCapability.setDescription("Available on chilled water units.  When the power source config setting\nis set to dual, setting this value to reduced (2) will inhibit the heater \nand humdifier when the unit is being powered from the secondary\ninput.")
airIRRP100UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP100UnitConfigIdleOnCoolFail.setDescription("When this OID value is (1) enable, the unit idles if it detects that it is blowing warm \nair into the cold aisle.  The unit will attempt to restart at 5 minute intervals.")
airIRRP500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2))
airIRRP500Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1))
airIRRP500GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1))
airIRRP500GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusAirFlowUS.setDescription("Group air flow in cubic feet per minute.")
airIRRP500GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusAirFlowMetric.setDescription("Group air flow in liters per second.")
airIRRP500GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMaxRackInletTempUS.setDescription("Group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMaxRackInletTempMetric.setDescription("Group maximum rack inlet temperature in tenths of \ndegrees Celsius.")
airIRRP500GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMinRackInletTempUS.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusMinRackInletTempMetric.setDescription("Group minimum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRP500GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusCoolDemand.setDescription("Group coolant demand in tenths of kiloWatts.")
airIRRP500GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusCoolOutput.setDescription("Group coolant output in tenths of kiloWatts.")
airIRRP500GroupStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusHumidifyDemand.setDescription("The amount of humidification the group is demanding \nfrom the humidifiers in percent.")
airIRRP500GroupStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusHumidifyOutput.setDescription("The actual amount of humidification the group is \nsupplying in percent.")
airIRRP500GroupStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDehumidifyDemand.setDescription("The amount of dehumidification the group is demanding \nfrom the electric heaters in percent.")
airIRRP500GroupStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDehumidifyOutput.setDescription("The actual amount of dehumidification the group is \nsupplying in percent.")
airIRRP500GroupStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusReheatDemand.setDescription("The amount of heating the group is demanding \nfrom the electric heaters in percent.")
airIRRP500GroupStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusReheatOutput.setDescription("The actual amount of heating the group is \nsupplying in percent.")
airIRRP500GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusActiveFlowControlStatus.setDescription("Status of the active flow control\nsystem.")
airIRRP500GroupStatusDewPointTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDewPointTempUS.setDescription("Group average dew point temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupStatusDewPointTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500GroupStatusDewPointTempMetric.setDescription("Group average dew point temperature in tenths of\ndegrees Celsius.")
airIRRP500GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2))
airIRRP500GroupSetpointsCoolUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsCoolUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupSetpointsCoolMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsCoolMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRRP500GroupSetpointsSupplyAirUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsSupplyAirUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupSetpointsSupplyAirMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsSupplyAirMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRRP500GroupSetpointsHumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsHumidify.setDescription("Group humidify setpoint in tenths of\npercent relative humidity.")
airIRRP500GroupSetpointsDehumidify = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsDehumidify.setDescription("Group dehumidify setpoint in tenths of\npercent relative humidity.")
airIRRP500GroupSetpointsDehumidifyDeadband = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsDehumidifyDeadband.setDescription("Group dehumidify deadband in \npercent relative humidity.")
airIRRP500GroupSetpointsReheatUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsReheatUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRRP500GroupSetpointsReheatMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsReheatMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRRP500GroupSetpointsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,1,)).subtype(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsFanSpeedPreference.setDescription("The preferred fan speed setting.")
airIRRP500GroupSetpointsFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsFanSpeedControl.setDescription("The fan speed control setting.")
airIRRP500GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupSetpointsActiveFlowControlBias.setDescription("The active flow control bias setting.")
airIRRP500GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3))
airIRRP500GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberofCoolingUnits.setDescription("The number of cooling units.")
airIRRP500GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("racs", 1), ("hacs", 2), ("in-row", 3), ("cacs", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigConfigurationType.setDescription("The group configuration type.")
airIRRP500GroupConfigPercentGlycol = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigPercentGlycol.setDescription("The glycol mixture in percent.")
airIRRP500GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolGainP.setDescription("The gain component of the cool PID in hundredths.")
airIRRP500GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolResetRateI.setDescription("The integral component of the cool PID in hundredths.")
airIRRP500GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigCoolDerivativeD.setDescription("The derivative component of the cool PID in hundredths.")
airIRRP500GroupConfigHumidifySensitivityBand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigHumidifySensitivityBand.setDescription("The percent relative humidity below the setpoint that\nwill cause the humidifier to run at 100% capacity.")
airIRRP500GroupConfigReheatGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatGainP.setDescription("The gain component of the reheat PID in hundredths.")
airIRRP500GroupConfigReheatResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatResetRateI.setDescription("The integral component of the reheat PID in hundredths.")
airIRRP500GroupConfigReheatDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigReheatDerivativeD.setDescription("The derivative component of the reheat PID in hundredths.")
airIRRP500GroupConfigMaxFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigMaxFanSpeed.setDescription("The maximum desired fan speed setting in percent.")
airIRRP500GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberofBackupUnits.setDescription("The number of backup units.")
airIRRP500GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigRuntimeBalancingEnable.setDescription("Enable or disable runtime balancing feature.")
airIRRP500GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigLoadAssistEnable.setDescription("Enable or disable load assist feature.")
airIRRP500GroupConfigFullRPBackups = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigFullRPBackups.setDescription("The number of full featured RPs that can be used as backup units.")
airIRRP500GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigNumberOfActiveFlowControllers.setDescription("The number of active flow controllers\npresent in the group.")
airIRRP500GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigActiveFlowControllerLampTest.setDescription("Turns off/on the active flow\ncontroller lamp test.")
airIRRP500GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigAltitudeUS.setDescription("The group altitude of the units above sea level in feet.")
airIRRP500GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500GroupConfigAltitudeMetric.setDescription("The group altitude of the units above sea level in meters.")
airIRRP500Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2))
airIRRP500UnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1))
airIRRP500UnitIdentID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentID.setDescription("The unit identification number.")
airIRRP500UnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentName.setDescription("A character string identifying the  \nunit name.")
airIRRP500UnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitIdentLocation.setDescription("A character string identifying the  \nunit location.")
airIRRP500UnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentModelNumber.setDescription("A character string identifying the  \nunit model number.")
airIRRP500UnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentSerialNumber.setDescription("A character string identifying the  \nunit serial number.")
airIRRP500UnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentFirmwareRevision.setDescription("A character string identifying the  \nunit firmware version.")
airIRRP500UnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentHardwareRevision.setDescription("A character string identifying the  \nunit controller hardware revision.")
airIRRP500UnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitIdentManufactureDate.setDescription("A character string identifying the  \nunit manufacture date.")
airIRRP500UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2))
airIRRP500UnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,6,4,1,3,5,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("prestart", 4), ("backup", 5), ("assist", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusOperateMode.setDescription("The cooling unit operating mode.")
airIRRP500UnitStatusMaximumRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusMaximumRackInletTempUS.setDescription("The maximum unit rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusMaximumRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusMaximumRackInletTempMetric.setDescription("The maximum unit rack inlet temperature in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyAirTempUS.setDescription("The unit supply air temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyAirTempMetric.setDescription("The unit supply air temperature in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnAirTempUS.setDescription("The unit return air temperature in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnAirTempMetric.setDescription("The unit return air temperature in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusSupplyHumidity.setDescription("The relative humidity of the supply air in\ntenths of percent.")
airIRRP500UnitStatusReturnHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReturnHumidity.setDescription("The relative humidity of the return air in\ntenths of percent.")
airIRRP500UnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusAirFlowUS.setDescription("The unit air flow in cubic feet per minute.")
airIRRP500UnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusAirFlowMetric.setDescription("The unit air flow in hundredths of \nliters per second.")
airIRRP500UnitStatusFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFanSpeed.setDescription("The unit average fan speed in tenths of percent.")
airIRRP500UnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusCoolDemand.setDescription("The unit cooling demand in tenths of kiloWatts.")
airIRRP500UnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusCoolOutput.setDescription("The unit cooling output in tenths of kiloWatts.")
airIRRP500UnitStatusHumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifyDemand.setDescription("The amount of humidification the unit is demanding \nfrom the humidifier in percent.")
airIRRP500UnitStatusHumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifyOutput.setDescription("The actual humidification output of the unit\nin percent.")
airIRRP500UnitStatusDehumidifyDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusDehumidifyDemand.setDescription("The amount of dehumidification the unit is \ndemanding in percent.")
airIRRP500UnitStatusDehumidifyOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusDehumidifyOutput.setDescription("The actual dehumidification output of the unit\nin percent.")
airIRRP500UnitStatusReheatDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReheatDemand.setDescription("The amount of heating the unit is demanding \nfrom the electric heater in percent.")
airIRRP500UnitStatusReheatOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusReheatOutput.setDescription("The actual heating output of the unit\nin percent.")
airIRRP500UnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusInputState.setDescription("The state of the input contact.")
airIRRP500UnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusOutputState.setDescription("The state of the output relay.")
airIRRP500UnitStatusRackInletTemperature1US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature1US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusRackInletTemperature1Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature1Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusRackInletTemperature2US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature2US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusRackInletTemperature2Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature2Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusRackInletTemperature3US = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature3US.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Fahrenheit.")
airIRRP500UnitStatusRackInletTemperature3Metric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusRackInletTemperature3Metric.setDescription("The unit rack inlet temperature sensor in tenths of\ndegrees Celsius.")
airIRRP500UnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusContainmtDPUS.setDescription("The unit containment differential pressure in \nhundredths of inches of water.")
airIRRP500UnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusContainmtDPMetric.setDescription("The unit containment differential pressure in Pa.")
airIRRP500UnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFilterDPUS.setDescription("The unit air filter differential pressure in \nhundredths of inches of water.")
airIRRP500UnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFilterDPMetric.setDescription("The unit air filter differential pressure in Pa.")
airIRRP500UnitStatusHumidifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifierCurrent.setDescription("The humidifier current of the unit\nin tenths of amperes.")
airIRRP500UnitStatusHumidifierWaterConductivity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusHumidifierWaterConductivity.setDescription("The water conductivity in the humidifier of the unit\nin microSiemens/cm.")
airIRRP500UnitStatusActivePowerSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 35), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("sourceA", 1), ("sourceB", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusActivePowerSource.setDescription("The power source that is powering the unit.")
airIRRP500UnitStatusFluidValvePosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidValvePosition.setDescription("The fluid valve position in percent open.")
airIRRP500UnitStatusFluidFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidFlowUS.setDescription("The fluid flow in tenths of gallons per minute.")
airIRRP500UnitStatusFluidFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusFluidFlowMetric.setDescription("The fluid flow in hundredths of liters per second.")
airIRRP500UnitStatusEnteringFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusEnteringFluidTemperatureUS.setDescription("The temperature of the entering fluid in \ntenths of degrees Fahrenheit.")
airIRRP500UnitStatusEnteringFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusEnteringFluidTemperatureMetric.setDescription("The temperature of the entering fluid in \ntenths of degrees Celsius.")
airIRRP500UnitStatusLeavingFluidTemperatureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeavingFluidTemperatureUS.setDescription("The temperature of the Leaving fluid in \ntenths of degrees Fahrenheit.")
airIRRP500UnitStatusLeavingFluidTemperatureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeavingFluidTemperatureMetric.setDescription("The temperature of the Leaving fluid in \ntenths of degrees Celsius.")
airIRRP500UnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 43), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no-leak", 1), ("leak", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitStatusLeakSensor.setDescription("The state (no-leak/leak) of the leak sensor.")
airIRRP500UnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3))
airIRRP500UnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursAirFilter.setDescription("Unit air filter run hours in hours.")
airIRRP500UnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursCondensatePump.setDescription("Unit condensate pump run hours in hours.")
airIRRP500UnitRunHoursHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHumidifier.setDescription("Unit fan right power supply run hours in hours.")
airIRRP500UnitRunHoursFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan1.setDescription("Unit fan 1 run hours in hours.")
airIRRP500UnitRunHoursHeater1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater1.setDescription("Unit heater 1 run hours in hours.")
airIRRP500UnitRunHoursFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan2.setDescription("Unit fan 2 run hours in hours.")
airIRRP500UnitRunHoursHeater2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater2.setDescription("Unit Heater 2 run hours in hours.")
airIRRP500UnitRunHoursFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursFan3.setDescription("Unit fan 3 run hours in hours.")
airIRRP500UnitRunHoursHeater3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursHeater3.setDescription("Unit heater 3 run hours in hours.")
airIRRP500UnitRunHoursSystem = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRRP500UnitRunHoursSystem.setDescription("Total system run hours.")
airIRRP500UnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4))
airIRRP500UnitServiceIntervalAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalAirFilter.setDescription("Air filter service interval in weeks.")
airIRRP500UnitServiceIntervalAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalAirFilterAlarm.setDescription("The air filter service interval alarm enable/disable.")
airIRRP500UnitServiceIntervalHumidifier = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHumidifier.setDescription("Humidifier service interval in weeks.")
airIRRP500UnitServiceIntervalHumidifierAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHumidifierAlarm.setDescription("The humidifier service interval alarm enable/disable.")
airIRRP500UnitServiceIntervalHeater = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHeater.setDescription("Heater service interval in weeks.")
airIRRP500UnitServiceIntervalHeaterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalHeaterAlarm.setDescription("The heater service interval alarm enable/disable.")
airIRRP500UnitServiceIntervalCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalCondensatePump.setDescription("Condensate pump service interval in weeks.")
airIRRP500UnitServiceIntervalCondensatePumpAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalCondensatePumpAlarm.setDescription("The condensate pump service interval alarm enable/disable.")
airIRRP500UnitServiceIntervalFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalFans.setDescription("Fans service interval in weeks.")
airIRRP500UnitServiceIntervalFansAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitServiceIntervalFansAlarm.setDescription("The fans service interval alarm enable/disable.")
airIRRP500UnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5))
airIRRP500UnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsRackInletHighTempUS.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP500UnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsRackInletHighTempMetric.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.")
airIRRP500UnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyAirHighTempUS.setDescription("Unit supply air temperature high threshold in \ntenths of degrees Fahrenheit.")
airIRRP500UnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyAirHighTempMetric.setDescription("Unit supply air high temperature high threshold in \ntenths of degrees Celsius.")
airIRRP500UnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnAirHighTempUS.setDescription("Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP500UnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsReturnAirHighTempMetric.setDescription("Unit return air high temperature threshold in \ntenths of degrees Celsius.")
airIRRP500UnitThresholdsSupplyHumidityHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyHumidityHigh.setDescription("Unit supply humidity high threshold in \ntenths of percent relative humidity.")
airIRRP500UnitThresholdsSupplyHumidityLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsSupplyHumidityLow.setDescription("Unit supply humidity low threshold in \ntenths of percent relative humidity.")
airIRRP500UnitThresholdsEnteringFluidHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsEnteringFluidHighTempUS.setDescription("Entering fluid high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRRP500UnitThresholdsEnteringFluidHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitThresholdsEnteringFluidHighTempMetric.setDescription("Entering fluid high temperature threshold in \ntenths of degrees Celsius.")
airIRRP500UnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6))
airIRRP500UnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigStartupDelay.setDescription("The startup delay in seconds.")
airIRRP500UnitConfigCoolCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("automatic", 1), ("maximum", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigCoolCapacity.setDescription("The cooling capacity options setting.")
airIRRP500UnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigIdleOnLeakDetect.setDescription("The idle on leak options setting.")
airIRRP500UnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigInputNormalState.setDescription("The normal state of the input contact.")
airIRRP500UnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigOutputNormalState.setDescription("The normal state of the output relay.")
airIRRP500UnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigOutputSource.setDescription("The source of output relay change.")
airIRRP500UnitConfigHumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHumidifyEnable.setDescription("Enable/disable humidification.")
airIRRP500UnitConfigHumidifierControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("auto", 1), ("drainOff", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHumidifierControl.setDescription("The humidifier drain control.")
airIRRP500UnitConfigDehumidifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigDehumidifyEnable.setDescription("Enable/disable dehumidification.")
airIRRP500UnitConfigReheatEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigReheatEnable.setDescription("Enable/disable reheat.")
airIRRP500UnitConfigHeatAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigHeatAssistEnable.setDescription("Enable/disable heat assist.")
airIRRP500UnitConfigPowerSourceConfig = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("single", 1), ("dual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigPowerSourceConfig.setDescription("Configure the input power source:  (1) single feed or (2) dual feed.")
airIRRP500UnitConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigUnitRoleOverride.setDescription("When this OID value is (1) automatic, the system determines\nwhich units are used as primary units and which units are used as backups.\nWhen this OID value is (2) forcedOn, the connected unit is set as a primary\nunit.")
airIRRP500UnitConfigSecondaryPowerFeedCapability = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("full", 1), ("reduced", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigSecondaryPowerFeedCapability.setDescription("Available on chilled water units.  When the power source config setting\nis set to dual, setting this value to reduced (2) will inhibit the heater \nand humdifier when the unit is being powered from the secondary\ninput.")
airIRRP500UnitConfigIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRRP500UnitConfigIdleOnCoolFail.setDescription("When this OID value is (1) enable, the unit idles if it detects that it is blowing warm \nair into the cold aisle.  The unit will attempt to restart at 5 minute intervals.")
airIRSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4))
airIRSCUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1))
airIRSCUnitIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1))
airIRSCUnitIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitIdentName.setDescription("A character string identifying the  \nunit name.")
airIRSCUnitIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitIdentLocation.setDescription("A character string identifying the  \nunit location.")
airIRSCUnitIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentModelNumber.setDescription("A character string identifying the  \nunit model number.")
airIRSCUnitIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentSerialNumber.setDescription("A character string identifying the  \nunit serial number.")
airIRSCUnitIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentFirmwareRevision.setDescription("A character string identifying the  \nunit firmware version.")
airIRSCUnitIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentHardwareRevision.setDescription("A character string identifying the  \nunit controller hardware revision.")
airIRSCUnitIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitIdentManufactureDate.setDescription("A character string identifying the  \nunit manufacture date.")
airIRSCUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2))
airIRSCUnitStatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusOperateMode.setDescription("The cooling unit operating mode.")
airIRSCUnitStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCoolOutput.setDescription("The unit cooling output in tenths of kW.")
airIRSCUnitStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCoolDemand.setDescription("The unit cooling demand in tenths of kW.")
airIRSCUnitStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusAirFlowUS.setDescription("The unit air flow in cubic feet per minute.")
airIRSCUnitStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusAirFlowMetric.setDescription("The unit air flow in liters per second.")
airIRSCUnitStatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusRackInletTempUS.setDescription("The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusRackInletTempMetric.setDescription("The unit rack inlet temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSupplyAirTempUS.setDescription("The unit supply air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSupplyAirTempMetric.setDescription("The unit supply air temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusReturnAirTempUS.setDescription("The unit return air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusReturnAirTempMetric.setDescription("The unit return air temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionTempUS.setDescription("The unit suction temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionTempMetric.setDescription("The unit suction temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuperheatTempUS.setDescription("The unit superheat temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuperheatTempMetric.setDescription("The unit superheat temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusContainmtDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusContainmtDPUS.setDescription("The unit containment differential pressure in \nhundredths of inches of water.")
airIRSCUnitStatusContainmtDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusContainmtDPMetric.setDescription("The unit containment differential pressure in Pa.")
airIRSCUnitStatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusFilterDPUS.setDescription("The unit air filter differential pressure in \nhundredths of inches of water.")
airIRSCUnitStatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusFilterDPMetric.setDescription("The unit air filter differential pressure in Pa.")
airIRSCUnitStatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionPressureUS.setDescription("Unit suction pressure in pounds per square inch (PSI).")
airIRSCUnitStatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusSuctionPressureMetric.setDescription("Unit suction pressure in kiloPascals (kPa).")
airIRSCUnitStatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusDischargePressureUS.setDescription("Unit discharge pressure in pounds per square inch (PSI).")
airIRSCUnitStatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusDischargePressureMetric.setDescription("Unit discharge pressure in kiloPascals (kPa).")
airIRSCUnitStatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusEvaporatorFanSpeed.setDescription("The unit average evaporator fan speed in tenths of percent.")
airIRSCUnitStatusCondenserFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondenserFanSpeed.setDescription("The unit average condenser fan speed in tenths of percent.")
airIRSCUnitStatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 26), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusInputState.setDescription("The state of the input contact.")
airIRSCUnitStatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusOutputState.setDescription("The state of the output relay.")
airIRSCUnitStatusCondOutletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondOutletTempUS.setDescription("The unit condenser outlet air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusCondOutletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondOutletTempMetric.setDescription("The unit condenser outlet air temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusCondInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondInletTempUS.setDescription("The unit condenser inlet air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCUnitStatusCondInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCondInletTempMetric.setDescription("The unit condenser inlet air temperature in tenths of\ndegrees Celsius.")
airIRSCUnitStatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusCompressor.setDescription("The state (off/on) of the compressor.")
airIRSCUnitStatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 33), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no-leak", 1), ("leak", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitStatusLeakSensor.setDescription("The state (no-leak/leak) of the leak sensor.")
airIRSCUnitRunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3))
airIRSCUnitRunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursAirFilter.setDescription("Unit air filter run hours.")
airIRSCUnitRunHoursEvaporatorFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan1.setDescription("Unit evaporator fan 1 run hours.")
airIRSCUnitRunHoursEvaporatorFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan2.setDescription("Unit evaporator fan 2 run hours.")
airIRSCUnitRunHoursEvaporatorFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursEvaporatorFan3.setDescription("Unit evaporator fan 3 run hours.")
airIRSCUnitRunHoursCondenserFan1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan1.setDescription("Unit condenser fan 1 run hours.")
airIRSCUnitRunHoursCondenserFan2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan2.setDescription("Unit condenser fan 2 run hours.")
airIRSCUnitRunHoursCondenserFan3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondenserFan3.setDescription("Unit condenser fan 3 run hours.")
airIRSCUnitRunHoursFanPowerSupplyLeft = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursFanPowerSupplyLeft.setDescription("Unit fan left power supply run hours.")
airIRSCUnitRunHoursFanPowerSupplyRight = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursFanPowerSupplyRight.setDescription("Unit fan right power supply run hours.")
airIRSCUnitRunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCondensatePump.setDescription("Unit condensate pump run hours.")
airIRSCUnitRunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCUnitRunHoursCompressor.setDescription("Unit compressor run hours.")
airIRSCUnitServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4))
airIRSCUnitServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitServiceIntervalsAirFilter.setDescription("Air filter service interval in weeks.")
airIRSCUnitServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitServiceIntervalsAirFilterAlarm.setDescription("The air filter service interval alarm enable/disable.")
airIRSCUnitThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5))
airIRSCUnitThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsRackInletHighTempUS.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRSCUnitThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsRackInletHighTempMetric.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.")
airIRSCUnitThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsSupplyAirHighTempUS.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRSCUnitThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsSupplyAirHighTempMetric.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Celsius.")
airIRSCUnitThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsReturnAirHighTempUS.setDescription("Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRSCUnitThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitThresholdsReturnAirHighTempMetric.setDescription("Unit return air high temperature threshold in \ntenths of degrees Celsius.")
airIRSCUnitSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6))
airIRSCUnitSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolSetpointUS.setDescription("Unit cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRSCUnitSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolSetpointMetric.setDescription("Unit cooling setpoint in tenths of\ndegrees Celsius.")
airIRSCUnitSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolDeadbandUS.setDescription("Unit cooling deadband in tenths of\ndegrees Fahrenheit.")
airIRSCUnitSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsCoolDeadbandMetric.setDescription("Unit cooling deadband in tenths of\ndegrees Celsius.")
airIRSCUnitSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsFanSpeedPreference.setDescription("The preferred fan speed setting.")
airIRSCUnitSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsSupplyAirSetpointUS.setDescription("Unit supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRSCUnitSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitSetptsSupplyAirSetpointMetric.setDescription("Unit supply air setpoint in tenths of\ndegrees Celsius.")
airIRSCUnitConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7))
airIRSCUnitConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 1), AirIRSCConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigConfigurationType.setDescription("The unit configuration type.")
airIRSCUnitConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 2), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigCapacityControlType.setDescription("The unit capacity control.")
airIRSCUnitConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigStartupDelay.setDescription("The startup delay in seconds.")
airIRSCUnitConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigIdleOnLeakDetect.setDescription("The idle on leak options setting.")
airIRSCUnitConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigInputNormalState.setDescription("The normal state of the input contact.")
airIRSCUnitConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOutputNormalState.setDescription("The normal state of the output relay.")
airIRSCUnitConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOutputSource.setDescription("The source of output relay change.")
airIRSCUnitConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigAltitudeUS.setDescription("The altitude of the unit above sea level in feet.")
airIRSCUnitConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigAltitudeMetric.setDescription("The altitude of the unit above sea level in meters.")
airIRSCUnitConfigOpControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCUnitConfigOpControl.setDescription("The unit operational control.")
airIRSCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2))
airIRSCGroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1))
airIRSCGroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusCoolOutput.setDescription("The group cooling output in tenths of kW.")
airIRSCGroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusCoolDemand.setDescription("The group cooling demand in tenths of kW.")
airIRSCGroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusAirFlowUS.setDescription("The group air flow in cubic feet per minute.")
airIRSCGroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusAirFlowMetric.setDescription("The group air flow in liters per second.")
airIRSCGroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxRackInletTempUS.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRSCGroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxRackInletTempMetric.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRSCGroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinRackInletTempUS.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRSCGroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinRackInletTempMetric.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRSCGroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxReturnAirTempUS.setDescription("The group maximum return air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCGroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMaxReturnAirTempMetric.setDescription("The group maximum return air temperature in tenths of\ndegrees Celsius.")
airIRSCGroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinReturnAirTempUS.setDescription("The group minimum return air temperature in tenths of\ndegrees Fahrenheit.")
airIRSCGroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusMinReturnAirTempMetric.setDescription("The group minimum return air temperature in tenths of\ndegrees Celsius.")
airIRSCGroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRSCGroupStatusActiveFlowControlStatus.setDescription("Status of the active flow control\nsystem.")
airIRSCGroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2))
airIRSCGroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolSetpointUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRSCGroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolSetpointMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRSCGroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolDeadbandUS.setDescription("Group cooling deadband in tenths of\ndegrees Fahrenheit.")
airIRSCGroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsCoolDeadbandMetric.setDescription("Group cooling deadband in tenths of\ndegrees Celsius.")
airIRSCGroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 5), AirIRSCFanSpeedPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsFanSpeedPreference.setDescription("The group preferred fan speed setting.")
airIRSCGroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsSupplyAirSetpointUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRSCGroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetptsSupplyAirSetpointMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRSCGroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupSetpointsActiveFlowControlBias.setDescription("The active flow control bias setting.")
airIRSCGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3))
airIRSCGroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigNumberofCoolingUnits.setDescription("The number of cooling units.")
airIRSCGroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 2), AirIRSCConfigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigConfigurationType.setDescription("The group configuration type.")
airIRSCGroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 3), AirIRSCCapacityControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigCapacityControlType.setDescription("The group capacity control.")
airIRSCGroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigAltitudeUS.setDescription("The group altitude of the units above sea level in feet.")
airIRSCGroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigAltitudeMetric.setDescription("The group altitude of the units above sea level in meters.")
airIRSCGroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 6), AirIRSCFanSpeedControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigFanSpeedControl.setDescription("The group fan speed control.")
airIRSCGroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigNumberOfActiveFlowControllers.setDescription("The number of active flow controllers\npresent in the group.")
airIRSCGroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRSCGroupConfigActiveFlowControllerLampTest.setDescription("Turns off/on the active flow\ncontroller lamp test.")
airIRGen2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4))
airIRG2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1))
airIRG2IdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2IdentName.setDescription("A character string identifying the unit name.")
airIRG2IdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2IdentLocation.setDescription("A character string identifying the unit location.")
airIRG2IdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentModelNumber.setDescription("A character string identifying the unit model number.")
airIRG2IdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentSerialNumber.setDescription("A character string identifying the unit serial number.")
airIRG2IdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentFirmwareRevision.setDescription("A character string identifying the unit firmware version.")
airIRG2IdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentHardwareRevision.setDescription("A character string identifying the unit controller hardware revision.")
airIRG2IdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentManufactureDate.setDescription("A character string identifying the unit manufacture date.")
airIRG2IdentUnitSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentUnitSysOID.setDescription("This OID contains an OID path to the device's top level unit data.")
airIRG2IdentGroupSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2IdentGroupSysOID.setDescription("This OID contains an OID path to the device's top level group data.")
airIRG2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2))
airIRG2GroupStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1))
airIRG2GroupStatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusCoolOutput.setDescription("The group cooling output in tenths of kilowatts (kW).")
airIRG2GroupStatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusCoolDemand.setDescription("The group cooling demand in tenths of kilowatts (kW).")
airIRG2GroupStatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusAirFlowUS.setDescription("The group air flow in cubic feet per minute.")
airIRG2GroupStatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusAirFlowMetric.setDescription("The group air flow in hundredths of \nliters per second.")
airIRG2GroupStatusMaxRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxRackInletTempUS.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRG2GroupStatusMaxRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxRackInletTempMetric.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRG2GroupStatusMinRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinRackInletTempUS.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRG2GroupStatusMinRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinRackInletTempMetric.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Celsius.")
airIRG2GroupStatusMaxReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxReturnAirTempUS.setDescription("The group maximum return air temperature in tenths of\ndegrees Fahrenheit.")
airIRG2GroupStatusMaxReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMaxReturnAirTempMetric.setDescription("The group maximum return air temperature in tenths of\ndegrees Celsius.")
airIRG2GroupStatusMinReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinReturnAirTempUS.setDescription("The group minimum return air temperature in tenths of\ndegrees Fahrenheit.")
airIRG2GroupStatusMinReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusMinReturnAirTempMetric.setDescription("The group minimum return air temperature in tenths of\ndegrees Celsius.")
airIRG2GroupStatusActiveFlowControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("under", 1), ("okay", 2), ("over", 3), ("notApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2GroupStatusActiveFlowControlStatus.setDescription("Status of the active flow control\nsystem.")
airIRG2GroupSetpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2))
airIRG2GroupSetptsCoolSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolSetpointUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRG2GroupSetptsCoolSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolSetpointMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRG2GroupSetptsCoolDeadbandUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolDeadbandUS.setDescription("Group cooling deadband in tenths of\ndegrees Fahrenheit.")
airIRG2GroupSetptsCoolDeadbandMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsCoolDeadbandMetric.setDescription("Group cooling deadband in tenths of\ndegrees Celsius.")
airIRG2GroupSetptsFanSpeedPreference = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,1,)).subtype(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsFanSpeedPreference.setDescription("The group preferred fan speed setting.")
airIRG2GroupSetptsSupplyAirSetpointUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsSupplyAirSetpointUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRG2GroupSetptsSupplyAirSetpointMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetptsSupplyAirSetpointMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRG2GroupSetpointsActiveFlowControlBias = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,3,2,4,)).subtype(namedValues=NamedValues(("positive", 1), ("slightlyPositive", 2), ("zero", 3), ("slightlyNegative", 4), ("negative", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupSetpointsActiveFlowControlBias.setDescription("The active flow control bias setting.")
airIRG2GroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3))
airIRG2GroupConfigNumberofCoolingUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberofCoolingUnits.setDescription("The number of cooling units.")
airIRG2GroupConfigConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,2,4,3,)).subtype(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4), ("cacs", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigConfigurationType.setDescription("The group configuration type.")
airIRG2GroupConfigCapacityControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("discrete", 1), ("proportional", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCapacityControlType.setDescription("The group capacity control.")
airIRG2GroupConfigFanSpeedControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigFanSpeedControl.setDescription("The group fan speed control.")
airIRG2GroupConfigCoolGainP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolGainP.setDescription("The gain component of the PID in hundredths.")
airIRG2GroupConfigCoolResetRateI = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolResetRateI.setDescription("The integral component of the PID in hundredths.")
airIRG2GroupConfigCoolDerivativeD = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolDerivativeD.setDescription("The derivative component of the PID in hundredths.")
airIRG2GroupConfigCoolPIDReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("readBack", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigCoolPIDReset.setDescription("Will reset the PID coefficients back to the factory defaults.")
airIRG2GroupConfigNumberofBackupUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberofBackupUnits.setDescription("The number of backup units.")
airIRG2GroupConfigRuntimeBalancingEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigRuntimeBalancingEnable.setDescription("Enable or disable runtime balancing feature.")
airIRG2GroupConfigLoadAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigLoadAssistEnable.setDescription("Enable or disable load assist feature.")
airIRG2GroupConfigNumberOfActiveFlowControllers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigNumberOfActiveFlowControllers.setDescription("The number of active flow controllers\npresent in the group.")
airIRG2GroupConfigActiveFlowControllerLampTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigActiveFlowControllerLampTest.setDescription("Turns off/on the active flow\ncontroller lamp test.")
airIRG2GroupConfigAltitudeUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigAltitudeUS.setDescription("The group altitude of the units above sea level in feet.")
airIRG2GroupConfigAltitudeMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2GroupConfigAltitudeMetric.setDescription("The group altitude of the units above sea level in meters.")
airIRG2Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3))
airIRG2AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsTableSize.setDescription("The number of active alarms in the airIRG2AlarmsTable.")
airIRG2AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2))
if mibBuilder.loadTexts: airIRG2AlarmsTable.setDescription("Table of active alarms for the device.")
airIRG2AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG2AlarmsIndex"))
if mibBuilder.loadTexts: airIRG2AlarmsEntry.setDescription("Alarms specification")
airIRG2AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsIndex.setDescription("Alarm index.")
airIRG2AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsEventCode.setDescription("Code for the alarm.")
airIRG2AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2AlarmsDescription.setDescription("Description of the alarm.")
airIRG2RC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 4))
airIRG2RD = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5))
airIRG2RDType1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 1))
airIRG2RDType2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2))
airIRG2RDT2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1))
airIRG2RDT2StatusOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,5,1,3,)).subtype(namedValues=NamedValues(("standby", 1), ("on", 2), ("idle", 3), ("reserved", 4), ("service", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOperateMode.setDescription("The cooling unit operating mode.")
airIRG2RDT2StatusCoolOutput = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCoolOutput.setDescription("The unit cooling output in tenths of kilowatts (kW).")
airIRG2RDT2StatusCoolDemand = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCoolDemand.setDescription("The unit cooling demand in tenths of kilowatts (kW).")
airIRG2RDT2StatusAirFlowUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusAirFlowUS.setDescription("The unit air flow in cubic feet per minute.")
airIRG2RDT2StatusAirFlowMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusAirFlowMetric.setDescription("The unit air flow in liters per second.")
airIRG2RDT2StatusRackInletTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusRackInletTempUS.setDescription("The unit rack inlet temperature in tenths of\ndegrees Fahrenheit.")
airIRG2RDT2StatusRackInletTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusRackInletTempMetric.setDescription("The unit rack inlet temperature in tenths of\ndegrees Celsius.")
airIRG2RDT2StatusSupplyAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSupplyAirTempUS.setDescription("The unit supply air temperature in tenths of\ndegrees Fahrenheit.")
airIRG2RDT2StatusSupplyAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSupplyAirTempMetric.setDescription("The unit supply air temperature in tenths of\ndegrees Celsius.")
airIRG2RDT2StatusReturnAirTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusReturnAirTempUS.setDescription("The unit return air temperature in tenths of\ndegrees Fahrenheit.")
airIRG2RDT2StatusReturnAirTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusReturnAirTempMetric.setDescription("The unit return air temperature in tenths of\ndegrees Celsius.")
airIRG2RDT2StatusSuctionTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionTempUS.setDescription("The unit suction temperature in tenths of\ndegrees Fahrenheit.")
airIRG2RDT2StatusSuctionTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionTempMetric.setDescription("The unit suction temperature in tenths of\ndegrees Celsius.")
airIRG2RDT2StatusSuperheatTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuperheatTempUS.setDescription("The unit superheat temperature in tenths of\ndegrees Fahrenheit.")
airIRG2RDT2StatusSuperheatTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuperheatTempMetric.setDescription("The unit superheat temperature in tenths of\ndegrees Celsius.")
airIRG2RDT2StatusFilterDPUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFilterDPUS.setDescription("The unit air filter differential pressure in \nhundredths of inches of water.")
airIRG2RDT2StatusFilterDPMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFilterDPMetric.setDescription("The unit air filter differential pressure in pascals (Pa).")
airIRG2RDT2StatusSuctionPressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionPressureUS.setDescription("Unit suction pressure in pounds per square inch (PSI).")
airIRG2RDT2StatusSuctionPressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusSuctionPressureMetric.setDescription("Unit suction pressure in kiloPascals (kPa).")
airIRG2RDT2StatusDischargePressureUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusDischargePressureUS.setDescription("Unit discharge pressure in pounds per square inch (PSI).")
airIRG2RDT2StatusDischargePressureMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusDischargePressureMetric.setDescription("Unit discharge pressure in kiloPascals (kPa).")
airIRG2RDT2StatusEvaporatorFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusEvaporatorFanSpeed.setDescription("The unit average evaporator fan speed in tenths of percent.")
airIRG2RDT2StatusInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 23), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusInputState.setDescription("The state of the input contact.")
airIRG2RDT2StatusOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 24), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOutputState.setDescription("The state of the output relay.")
airIRG2RDT2StatusOHEInputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 25), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOHEInputState.setDescription("The state of the outside heat exchanger(OHE) input contact.")
airIRG2RDT2StatusOHEOutputState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 26), AirIRG2RDType2IOState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusOHEOutputState.setDescription("The state of the outside heat exchanger(OHE) output relay.")
airIRG2RDT2StatusCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 27), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusCompressor.setDescription("The state (off/on) of the compressor.")
airIRG2RDT2StatusFluidValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusFluidValvePos.setDescription("The position of the fluid valve in percent. This OID is only valid\nwhen airIRG2RDT2ConfigUnitType indicates fluidCooled(1).")
airIRG2RDT2StatusHotGasBypassValvePos = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusHotGasBypassValvePos.setDescription("The position of the hot gas bypass valve in hundredths of percent.")
airIRG2RDT2StatusLeakSensor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no-leak", 1), ("leak", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2StatusLeakSensor.setDescription("The state (no-leak/leak) of the leak sensor.")
airIRG2RDT2RunHours = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2))
airIRG2RDT2RunHoursAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursAirFilter.setDescription("Unit air filter run hours.")
airIRG2RDT2RunHoursCondensatePump = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursCondensatePump.setDescription("Unit condensate pump run hours.")
airIRG2RDT2RunHoursCompressor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursCompressor.setDescription("Unit compressor run hours.")
airIRG2RDT2RunHoursFanPSTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSTableSize.setDescription("The number of entries in the run hour fan power supply table\n(airIRG2RDT2RunHoursFanPSTable).")
airIRG2RDT2RunHoursFanPSTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSTable.setDescription("Allows for getting run hour information from each power supply.")
airIRG2RDT2RunHoursFanPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursFanPSIndex"))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSEntry.setDescription("The run hours fan power supply table entry.")
airIRG2RDT2RunHoursFanPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSIndex.setDescription("Index of run hours fan power supply table.")
airIRG2RDT2RunHoursFanPSHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSHours.setDescription("Fan power supply run time in hours.")
airIRG2RDT2RunHoursFanPSPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("upper", 1), ("lower", 2), ("left", 3), ("right", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursFanPSPosition.setDescription("Position of fan power supply within the unit.")
airIRG2RDT2RunHoursEvapFanTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanTableSize.setDescription("The number of entries in the run hour evaporator fan table\n(airIRG2RDT2RunHoursEvapFanTable).")
airIRG2RDT2RunHoursEvapFanTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanTable.setDescription("Allows for getting information from each evaporator fan run\nhour in the system. ")
airIRG2RDT2RunHoursEvapFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG2RDT2RunHoursEvapFanIndex"))
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanEntry.setDescription("Allows for getting information from each evaporator fan run\nhour in the system. ")
airIRG2RDT2RunHoursEvapFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanIndex.setDescription("Index of run hours evaporator fan table.")
airIRG2RDT2RunHoursEvapFanHours = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursEvapFanHours.setDescription("Evaporator fan run time in hours.")
airIRG2RDT2RunHoursUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2RunHoursUnit.setDescription("Unit run time in hours.")
airIRG2RDT2ServiceIntervals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3))
airIRG2RDT2ServiceIntervalsAirFilter = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ServiceIntervalsAirFilter.setDescription("Air filter service interval in weeks.")
airIRG2RDT2ServiceIntervalsAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ServiceIntervalsAirFilterAlarm.setDescription("The air filter service interval alarm enable/disable.")
airIRG2RDT2Thresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4))
airIRG2RDT2ThresholdsRackInletHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsRackInletHighTempUS.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRG2RDT2ThresholdsRackInletHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsRackInletHighTempMetric.setDescription("Unit rack inlet air high temperature threshold in \ntenths of degrees Celsius.")
airIRG2RDT2ThresholdsSupplyAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsSupplyAirHighTempUS.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRG2RDT2ThresholdsSupplyAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsSupplyAirHighTempMetric.setDescription("Unit supply air high temperature threshold in \ntenths of degrees Celsius.")
airIRG2RDT2ThresholdsReturnAirHighTempUS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsReturnAirHighTempUS.setDescription("Unit return air high temperature threshold in \ntenths of degrees Fahrenheit.")
airIRG2RDT2ThresholdsReturnAirHighTempMetric = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ThresholdsReturnAirHighTempMetric.setDescription("Unit return air high temperature threshold in \ntenths of degrees Celsius.")
airIRG2RDT2Setpoints = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 5))
airIRG2RDT2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6))
airIRG2RDT2ConfigUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("fluidCooled", 1), ("airCooled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitType.setDescription("The type of the unit.")
airIRG2RDT2ConfigStartupDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigStartupDelay.setDescription("The startup delay in seconds.")
airIRG2RDT2ConfigIdleOnLeakDetect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigIdleOnLeakDetect.setDescription("The idle on leak options setting.")
airIRG2RDT2ConfigInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 4), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigInputNormalState.setDescription("The normal state of the input contact.")
airIRG2RDT2ConfigOutputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 5), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOutputNormalState.setDescription("The normal state of the output relay.")
airIRG2RDT2ConfigOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyAlarm", 1), ("criticalAlarm", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOutputSource.setDescription("The source of output relay change.")
airIRG2RDT2ConfigOHEInputNormalState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 7), AirIRG2RDType2IOState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigOHEInputNormalState.setDescription("The normal state of the outside heat exchanger(OHE) input relay.")
airIRG2RDT2ConfigUnitRoleOverride = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("forcedOn", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitRoleOverride.setDescription("When this OID value is (1) automatic, the system determines\nwhich units are used as primary units and which units are used as backups.\nWhen this OID value is (2) forcedOn, the connected unit is set as a primary\nunit.")
airIRG2RDT2ConfigUnitIdleOnCoolFail = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG2RDT2ConfigUnitIdleOnCoolFail.setDescription("When this OID value is (2) yes, the unit idles if it detects that it is blowing warm \nair into the cold aisle.  The unit will attempt to restart at 5 minute intervals.")
airIRG2SC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 6))
airIRG2RA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 7))
airInRoom = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5))
airIRmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1))
airIRmIdentName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmIdentName.setDescription("A character string identifying the unit name.")
airIRmIdentLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmIdentLocation.setDescription("A character string identifying the unit location.")
airIRmIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentModelNumber.setDescription("A character string identifying the unit model number.")
airIRmIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentSerialNumber.setDescription("A character string identifying the unit serial number.")
airIRmIdentFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentFirmwareRevision.setDescription("A character string identifying the unit firmware version.")
airIRmIdentHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentHardwareRevision.setDescription("A character string identifying the unit controller hardware revision.")
airIRmIdentManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentManufactureDate.setDescription("A character string identifying the unit manufacture date.")
airIRmIdentSysOID = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmIdentSysOID.setDescription("This OID contains an OID path to the device's top level data.")
airIRmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2))
airIRmAlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsTableSize.setDescription("The number of active alarms in the airIRG2AlarmsTable.")
airIRmAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2))
if mibBuilder.loadTexts: airIRmAlarmsTable.setDescription("Table of active alarms for the device.")
airIRmAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRmAlarmsIndex"))
if mibBuilder.loadTexts: airIRmAlarmsEntry.setDescription("Alarms specification")
airIRmAlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsIndex.setDescription("Alarm index.")
airIRmAlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsEventCode.setDescription("Code for the alarm.")
airIRmAlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmAlarmsDescription.setDescription("Description of the alarm.")
airIRmPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3))
airIRmPmCommon1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2))
airIRmPmUnitType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(8,7,4,9,2,3,1,256,10,5,6,)).subtype(namedValues=NamedValues(("mc", 1), ("cw2", 10), ("dx", 2), ("unknown", 256), ("cw", 3), ("ch", 4), ("ecoCool", 5), ("msc", 6), ("ge1", 7), ("ge2", 8), ("dualFluid", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitType.setDescription("Unit type (1).")
airIRmPmSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSwVersion.setDescription("Software version (3).")
airIRmPmBusAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmBusAddress.setDescription("Bus addresss of unit (5).")
airIRmPmControllerType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(8,10,11,6,12,5,1,7,2,3,9,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("c7000PT", 10), ("c5MSC", 11), ("c7000PT2", 12), ("c4000", 2), ("c1001", 3), ("c1002", 4), ("c5000", 5), ("c6000", 6), ("c1010", 7), ("c7000IOC", 8), ("c7000AT", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmControllerType.setDescription("Controller type (7).")
airIRmPmGeneralError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 8), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGeneralError.setDescription("General Error (8)")
airIRmPmErrorOnBus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 9), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmErrorOnBus.setDescription("Error On Bus (9)")
airIRmPmCommon2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3))
airIRmPmPCStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 1), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPCStop.setDescription("PC-STOP (1000)")
airIRmPmRemoteStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 2), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRemoteStop.setDescription("Remote Stop (1001)")
airIRmPmLocalStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 3), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLocalStop.setDescription("Local Stop (1002)")
airIRmPmTimerStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 4), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmTimerStop.setDescription("Timer Stop (1003)")
airIRmPmSeqStop = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 5), AirIRmStopState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSeqStop.setDescription("Seq. Stop (1004)")
airIRmPmRemoteUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRemoteUPS.setDescription("Remote UPS (1006)")
airIRmPmLocalUPS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 8), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLocalUPS.setDescription("Local UPS (1007)")
airIRmPmCommonAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 11), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCommonAlarm.setDescription("Common alarm (1010).")
airIRmPmResetAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("doNothing", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmResetAllAlarms.setDescription("Reset all alarms control (1011).")
airIRmPmUnitOnOff = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 14), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitOnOff.setDescription("Unit running state (1013).")
airIRmPmMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("notNecessary", 1), ("necessary", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMaintenance.setDescription("Maintenance necessary state (1014).")
airIRmPmUnitTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 23), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureScale.setDescription("Current Unit Temperature Scale (1022).")
airIRmPmUnitWinterMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("summer", 1), ("winter", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitWinterMode.setDescription("Winter or summer configuration mode (1023).")
airIRmPmDayNightMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 25), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("day", 1), ("night", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDayNightMode.setDescription("Day or night configuration mode (1024).")
airIRmPmCommon3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4))
airIRmPmLastMaintenanceYear = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceYear.setDescription("Last maintenance year (1160).")
airIRmPmLastMaintenanceMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceMonth.setDescription("Last maintenance month (1161).")
airIRmPmLastMaintenanceDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLastMaintenanceDay.setDescription("Last maintenance day (1162).")
airIRmPmUnitMaintenanceInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitMaintenanceInterval.setDescription("Unit maintenance interval in months (1163).")
airIRmPmRuntimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeUnit.setDescription("Runtime unit in hours (1164).")
airIRmPmStoptimeUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmStoptimeUnit.setDescription("Unit stoptime in hours (1165)")
airIRmPmRuntimeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeCooling.setDescription("Cooling runtime in hours (1166)")
airIRmPmRuntimeHeating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeHeating.setDescription("Heating runtime in hours (1167)")
airIRmPmRuntimeHumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeHumidification.setDescription("Humidification runtime in hours (1168)")
airIRmPmRuntimeDehumidification = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeDehumidification.setDescription("Dehumidification runtime in hours (1169)")
airIRmPmUnitTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11))
airIRmPmUnitTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureC.setDescription("Unit temperature in tenths of degrees Celsius (1170).")
airIRmPmUnitTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitTemperatureF.setDescription("Unit temperature in tenths of degrees Fahrenheit (1170).")
airIRmPmUnitHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitHumidity.setDescription("Unit humidity in tenths of %RH (1171).")
airIRmPmSetpointTemperatureDay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14))
airIRmPmSetpointTemperatureDayC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureDayC.setDescription("Setpoint daytime temperature in tenths\nof degrees Celsius (1173).")
airIRmPmSetpointTemperatureDayF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureDayF.setDescription("Setpoint daytime temperature in tenths\nof degrees Fahrenheit (1173).")
airIRmPmSetpointTemperatureNight = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15))
airIRmPmSetpointTemperatureNightC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureNightC.setDescription("Setpoint nighttime temperature in tenths\nof degrees Celsius (1174).")
airIRmPmSetpointTemperatureNightF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointTemperatureNightF.setDescription("Setpoint nighttime temperature in tenths\nof degrees Fahrenheit (1174).")
airIRmPmSetpointHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmSetpointHumidity.setDescription("Setpoint humidity in tenths of %RH (1176).")
airIRmPmUnitControlType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 24), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("room", 1), ("supply", 2), ("room-SupplyLimit", 3), ("supply-RoomLimit", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitControlType.setDescription("Current unit control type (1183).")
airIRmPmWinterModeStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29))
airIRmPmWinterModeStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeStartTempC.setDescription("Winter mode start temperature in tenths of degrees Celsius (1188).")
airIRmPmWinterModeStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeStartTempF.setDescription("Winter mode start temperature in tenths of degrees Fahrenheit (1188).")
airIRmPmWinterModeHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30))
airIRmPmWinterModeHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeHysteresisK.setDescription("Winter mode hysteresis in tenths of Kelvins (1189)")
airIRmPmWinterModeHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWinterModeHysteresisF.setDescription("Winter mode hysteresis in tenths of degrees Fahrenheit (1189)")
airIRmPmWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32))
airIRmPmWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureC.setDescription("Water temperature in tenths of degrees Celsius (1191).")
airIRmPmWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureF.setDescription("Water temperature in tenths of degrees Fahrenheit (1191).")
airIRmPmReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33))
airIRmPmReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureC.setDescription("Return air temperature in tenths of degrees Celsius (1192).")
airIRmPmReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureF.setDescription("Return air temperature in tenths of degrees Fahrenheit (1192).")
airIRmPmSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34))
airIRmPmSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureC.setDescription("Supply air temperature in tenths of degrees Celsius (1193).")
airIRmPmSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureF.setDescription("Supply air temperature in tenths of degrees Fahrenheit (1193).")
airIRmPmReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidity.setDescription("Return air humidity in tenths of %RH (1194).")
airIRmPmSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidity.setDescription("Supply air humidity in tenths of %RH (1195).")
airIRmPmOutsideAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37))
airIRmPmOutsideAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirTemperatureC.setDescription("Outside air temperature in tenths of degrees Celsius (1196)")
airIRmPmOutsideAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirTemperatureF.setDescription("Outside air temperature in tenths of degrees Fahrenheit (1196)")
airIRmPmOutsideAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmOutsideAirHumidity.setDescription("Outside air humidity in tenths of percent relative humidity (1197)")
airIRmPmCoolingPriority = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 39), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("ge", 1), ("cw", 2), ("dx", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCoolingPriority.setDescription("Cooling priority (1198).")
airIRmPmWaterTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43))
airIRmPmWaterTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperature2C.setDescription("Water temperature 2 in tenths of degrees Celsius (1202).")
airIRmPmWaterTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperature2F.setDescription("Water temperature 2 in tenths of degrees Fahrenheit (1202).")
airIRmPmRuntimeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeFreeCooling.setDescription("Freecooling runtime in hours (1203)")
airIRmPmRuntimeMixedModeFreeCooling = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmRuntimeMixedModeFreeCooling.setDescription("Mixed mode freecooling runtime in hours (1203)")
airIRmPmCommon4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5))
airIRmPmNumberOfCompressors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfCompressors.setDescription("Number of compressors (1761)")
airIRmPmNumberOfSuctionValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfSuctionValves.setDescription("Number of suction valves (1762)")
airIRmPmNumberOfDryCoolers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfDryCoolers.setDescription("Number of drycoolers (1763)")
airIRmPmNumberOfPumps = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfPumps.setDescription("Number of pumps (1764)")
airIRmPmNumberOfElectricHeaters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfElectricHeaters.setDescription("Number of electric heaters (1765)")
airIRmPmNumberOfHumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfHumidifiers.setDescription("Number of humidifiers (1766)")
airIRmPmNumberOfFans = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfFans.setDescription("Number of fans (1767)")
airIRmPmNumberOfLouvers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfLouvers.setDescription("Number of louvers (1768)")
airIRmPmNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfSensors.setDescription("Number of sensors (1769)")
airIRmPmNumberOfExternalAlarmInputs = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfExternalAlarmInputs.setDescription("Number of external alarm inputs (1770)")
airIRmPmNumberOfGECWValves = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfGECWValves.setDescription("Number of GE/CW valves (1771)")
airIRmPmNumberOfHotGasReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfHotGasReheat.setDescription("Number of hot gas reheaters (1772)")
airIRmPmNumberOfPWWReheat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfPWWReheat.setDescription("Number of PWW reheaters (1773)")
airIRmPmNumberOfDehumidifiers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmNumberOfDehumidifiers.setDescription("Number of dehumidifiers (1774)")
airIRmPmCommon5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6))
airIRmPmUnitEvaporationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1))
airIRmPmUnitEvaporationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature1C.setDescription("Unit evaporation temperature 1 in tenths\nof degrees Celsius (2232)")
airIRmPmUnitEvaporationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature1F.setDescription("Unit evaporation temperature 1 in tenths\nof degrees Fahrenheit (2232)")
airIRmPmUnitEvaporationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationPressure1.setDescription("Unit evaporation pressure 1 in tenths\nof Bars (2233)")
airIRmPmUnitCondensationTemperature1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3))
airIRmPmUnitCondensationTemperature1C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature1C.setDescription("Unit condensation temperature 1 in tenths\nof degrees Celsius (2234)")
airIRmPmUnitCondensationTemperature1F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature1F.setDescription("Unit condensation temperature 1 in tenths\nof degrees Fahrenheit (2234)")
airIRmPmUnitCondensationPressure1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationPressure1.setDescription("Unit condensation pressure 1 in tenths\nof Bars (2235)")
airIRmPmMaxLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8))
airIRmPmMaxLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirTemperatureC.setDescription("Maximum limit return air temperature in tenths\nof degrees Celsius (2239).")
airIRmPmMaxLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirTemperatureF.setDescription("Maximum limit return air temperature in tenths\nof degrees Fahrenheit (2239).")
airIRmPmMinLimitReturnAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9))
airIRmPmMinLimitReturnAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirTemperatureC.setDescription("Minimum limit return air temperature in tenths\nof degrees Celsius (2240).")
airIRmPmMinLimitReturnAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirTemperatureF.setDescription("Minimum limit return air temperature in tenths\nof degrees Fahrenheit (2240).")
airIRmPmMaxLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10))
airIRmPmMaxLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirTemperatureC.setDescription("Maximum limit supply air temperature in tenths\nof degrees Celsius (2241).")
airIRmPmMaxLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirTemperatureF.setDescription("Maximum limit supply air temperature in tenths\nof degrees Fahrenheit (2241).")
airIRmPmMinLimitSupplyAirTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11))
airIRmPmMinLimitSupplyAirTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirTemperatureC.setDescription("Minimum limit supply air temperature in tenths\nof degrees Celsius (2242).")
airIRmPmMinLimitSupplyAirTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirTemperatureF.setDescription("Minimum limit supply air temperature in tenths\nof degrees Fahrenheit (2242).")
airIRmPmMaxLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12))
airIRmPmMaxLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitWaterTemperatureC.setDescription("Maximum limit water temperature in tenths of degrees Celsius (2243).")
airIRmPmMaxLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitWaterTemperatureF.setDescription("Maximum limit water temperature in tenths\nof degrees Fahrenheit (2243).")
airIRmPmMinLimitWaterTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13))
airIRmPmMinLimitWaterTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitWaterTemperatureC.setDescription("Minimum limit water temperature in tenths\nof degrees Celsius (2244).")
airIRmPmMinLimitWaterTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitWaterTemperatureF.setDescription("Minimum limit water temperature in tenths\nof degrees Fahrenheit (2244).")
airIRmPmMaxLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitReturnAirHumidity.setDescription("Maximum limit return air humidity in tenths of %RH (2245).")
airIRmPmMinLimitReturnAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitReturnAirHumidity.setDescription("Minimum limit return air humidity in tenths of %RH (2246).")
airIRmPmMaxLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMaxLimitSupplyAirHumidity.setDescription("Maximum limit supply air humidity in tenths of %RH (2247).")
airIRmPmMinLimitSupplyAirHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmMinLimitSupplyAirHumidity.setDescription("Minimum limit supply air humidity in tenths of %RH (2248).")
airIRmPmLowPressureWinterDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLowPressureWinterDelay.setDescription("Winter mode low pressure delay in seconds (2249)")
airIRmPmUnitCondensationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationPressure2.setDescription("Unit condensation pressure 2 in tenths of Bars (2250)")
airIRmPmUnitOverloadSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitOverloadSwitch.setDescription("Unit overload switch setting in tenths of Kelvins (2251)")
airIRmPmUnitCondensationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41))
airIRmPmUnitCondensationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature2C.setDescription("Unit condensation temperature 2 in tenths \nof degrees Celsius (2272)")
airIRmPmUnitCondensationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitCondensationTemperature2F.setDescription("Unit condensation temperature 2 in tenths \nof degrees Fahrenheit (2272)")
airIRmPmUnitEvaporationPressure2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationPressure2.setDescription("Unit evaporation pressure 2 in tenths\nof Bars (2273)")
airIRmPmUnitEvaporationTemperature2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43))
airIRmPmUnitEvaporationTemperature2C = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature2C.setDescription("Unit evaporation temperature 2 in tenths \nof degrees Celsius (2274)")
airIRmPmUnitEvaporationTemperature2F = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmUnitEvaporationTemperature2F.setDescription("Unit evaporation temperature 2 in tenths \nof degrees Fahrenheit (2274)")
airIRmPmCompressor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7))
airIRmPmCmp1ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1ManOperationActive.setDescription("Compressor 1 manual operation active (4401)")
airIRmPmCmp1ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1ManOperationState.setDescription("Compressor 1 manual operation state (4402)")
airIRmPmCmp1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1Running.setDescription("Compressor 1 running (4403)")
airIRmPmCmp1StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17))
airIRmPmCmp1StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempSummerK.setDescription("Compressor 1 summer mode start temperature \nin tenths of Kelvins (4416)")
airIRmPmCmp1StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempSummerF.setDescription("Compressor 1 summer mode start temperature \nin tenths of degrees Fahrenheit (4416)")
airIRmPmCmp1HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18))
airIRmPmCmp1HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisSummerK.setDescription("Compressor 1 summer mode hysteresis setting \nin tenths of Kelvins (4417)")
airIRmPmCmp1HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisSummerF.setDescription("Compressor 1 summer mode hysteresis setting \nin tenths of Fahrenheit (4417)")
airIRmPmCmp1StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19))
airIRmPmCmp1StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempWinterK.setDescription("Compressor 1 winter mode start temperature \nin tenths of Kelvins (4418)")
airIRmPmCmp1StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1StartTempWinterF.setDescription("Compressor 1 winter mode start temperature \nin tenths of degrees Fahrenheit (4418)")
airIRmPmCmp1HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20))
airIRmPmCmp1HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisWinterK.setDescription("Compressor 1 Winter mode hysteresis setting \nin tenths of Kelvins (4419)")
airIRmPmCmp1HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp1HysteresisWinterF.setDescription("Compressor 1 Winter mode hysteresis setting \nin tenths of Fahrenheit (4419)")
airIRmPmCmp1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp1Runtime.setDescription("Compressor 1 runtime in hours (4428)")
airIRmPmCompressor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8))
airIRmPmCmp2ManOperationActive = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2ManOperationActive.setDescription("Compressor 2 manual operation active (4501)")
airIRmPmCmp2ManOperationState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2ManOperationState.setDescription("Compressor 2 manual operation state (4502)")
airIRmPmCmp2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2Running.setDescription("Compressor 2 running (4503)")
airIRmPmCmp2StartTempSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17))
airIRmPmCmp2StartTempSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempSummerK.setDescription("Compressor 2 summer mode start temperature \nin tenths of Kelvins (4516)")
airIRmPmCmp2StartTempSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempSummerF.setDescription("Compressor 2 summer mode start temperature \nin tenths of degrees Fahrenheit (4516)")
airIRmPmCmp2HysteresisSummer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18))
airIRmPmCmp2HysteresisSummerK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisSummerK.setDescription("Compressor 2 summer mode hysteresis setting \nin tenths of Kelvins (4517)")
airIRmPmCmp2HysteresisSummerF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisSummerF.setDescription("Compressor 2 summer mode hysteresis setting \nin tenths of Fahrenheit (4517)")
airIRmPmCmp2StartTempWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19))
airIRmPmCmp2StartTempWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempWinterK.setDescription("Compressor 2 winter mode start temperature \nin tenths of Kelvins (4518)")
airIRmPmCmp2StartTempWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2StartTempWinterF.setDescription("Compressor 2 winter mode start temperature \nin tenths of degrees Fahrenheit (4518)")
airIRmPmCmp2HysteresisWinter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20))
airIRmPmCmp2HysteresisWinterK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisWinterK.setDescription("Compressor 2 Winter mode hysteresis setting \nin tenths of Kelvins (4519)")
airIRmPmCmp2HysteresisWinterF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmCmp2HysteresisWinterF.setDescription("Compressor 2 Winter mode hysteresis setting \nin tenths of Fahrenheit (4519)")
airIRmPmCmp2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCmp2Runtime.setDescription("Compressor 2 runtime in hours (4528)")
airIRmPmSuctionValve1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 9))
airIRmPmSuctionValve2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 10))
airIRmPmEheating1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11))
airIRmPmEheating1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1ManOpEnable.setDescription("Electric heater #1 manual operation enable (4801)")
airIRmPmEheating1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Running.setDescription("Electric heater #1 running state (4803)")
airIRmPmEheating1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1ManOpRunning.setDescription("Electric heater #1 running in manual operation mode (4804)")
airIRmPmEheating1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("pwm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Type.setDescription("Electric heater #1 type (4808)")
airIRmPmEheating1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10))
airIRmPmEheating1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1StartTemperatureK.setDescription("Electric heater #1 start temperature in tenths of Kelvins (4809)")
airIRmPmEheating1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1StartTemperatureF.setDescription("Electric heater #1 start temperature in tenths of degrees Fahrenheit (4809)")
airIRmPmEheating1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11))
airIRmPmEheating1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1HysteresisK.setDescription("Electric heater #1 hysteresis in tenths of Kelvins (4810)")
airIRmPmEheating1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating1HysteresisF.setDescription("Electric heater #1 hysteresis in tenths of degrees Fahrenheit (4810)")
airIRmPmEheating1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating1Runtime.setDescription("Electric heater #1 runtime in hours (4816)")
airIRmPmEheating2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12))
airIRmPmEheating2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2ManOpEnable.setDescription("Electric heater #2 manual operation enable (4901)")
airIRmPmEheating2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Running.setDescription("Electric heater #2 running state (4903)")
airIRmPmEheating2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2ManOpRunning.setDescription("Electric heater #2 running in manual operation mode (4904)")
airIRmPmEheating2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("pwm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Type.setDescription("Electric heater #2 type (4908)")
airIRmPmEheating2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10))
airIRmPmEheating2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2StartTemperatureK.setDescription("Electric heater #2 start temperature in tenths of Kelvins (4909)")
airIRmPmEheating2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2StartTemperatureF.setDescription("Electric heater #2 start temperature in tenths of degrees Fahrenheit (4909)")
airIRmPmEheating2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11))
airIRmPmEheating2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2HysteresisK.setDescription("Electric heater #2 hysteresis in tenths of Kelvins (4910)")
airIRmPmEheating2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating2HysteresisF.setDescription("Electric heater #2 hysteresis in tenths of degrees Fahrenheit (4910)")
airIRmPmEheating2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating2Runtime.setDescription("Electric heater #2 runtime in hours (4916)")
airIRmPmEheating3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13))
airIRmPmEheating3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3ManOpEnable.setDescription("Electric heater #3 manual operation enable (5001)")
airIRmPmEheating3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Running.setDescription("Electric heater #3 running state (5003)")
airIRmPmEheating3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3ManOpRunning.setDescription("Electric heater #3 running in manual operation mode (5004)")
airIRmPmEheating3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("pwm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Type.setDescription("Electric heater #3 type (5008)")
airIRmPmEheating3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10))
airIRmPmEheating3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3StartTemperatureK.setDescription("Electric heater #3 start temperature in tenths of Kelvins (5009)")
airIRmPmEheating3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3StartTemperatureF.setDescription("Electric heater #3 start temperature in tenths of degrees Fahrenheit (5009)")
airIRmPmEheating3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11))
airIRmPmEheating3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3HysteresisK.setDescription("Electric heater #3 hysteresis in tenths of Kelvins (5010)")
airIRmPmEheating3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating3HysteresisF.setDescription("Electric heater #3 hysteresis in tenths of degrees Fahrenheit (5010)")
airIRmPmEheating3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating3Runtime.setDescription("Electric heater #3 runtime in hours (5016)")
airIRmPmEheating4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14))
airIRmPmEheating4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4ManOpEnable.setDescription("Electric heater #4 manual operation enable (5101)")
airIRmPmEheating4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 4), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Running.setDescription("Electric heater #4 running state (5103)")
airIRmPmEheating4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4ManOpRunning.setDescription("Electric heater #4 running in manual operation mode (5104)")
airIRmPmEheating4Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("pwm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Type.setDescription("Electric heater #4 type (5108)")
airIRmPmEheating4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10))
airIRmPmEheating4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4StartTemperatureK.setDescription("Electric heater #4 start temperature in tenths of Kelvins (5109)")
airIRmPmEheating4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4StartTemperatureF.setDescription("Electric heater #4 start temperature in tenths of degrees Fahrenheit (5109)")
airIRmPmEheating4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11))
airIRmPmEheating4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4HysteresisK.setDescription("Electric heater #4 hysteresis in tenths of Kelvins (5110)")
airIRmPmEheating4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmEheating4HysteresisF.setDescription("Electric heater #4 hysteresis in tenths of degrees Fahrenheit (5110)")
airIRmPmEheating4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEheating4Runtime.setDescription("Electric heater #4 runtime in hours (5116)")
airIRmPmGECWvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15))
airIRmPmGECWvalveManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveManOpEnable.setDescription("GE/CW valve manual operation enable (5201)")
airIRmPmGECWvalveStartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9))
airIRmPmGECWvalveStartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveStartTemperatureK.setDescription("GE/CW valve start temperature in tenths of Kelvins (5208)")
airIRmPmGECWvalveStartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveStartTemperatureF.setDescription("GE/CW valve start temperature in tenths of degrees Fahrenheit (5208)")
airIRmPmGECWvalveLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10))
airIRmPmGECWvalveLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveLinearRangeK.setDescription("GE/CW valve linear range in tenths of Kelvins (5209)")
airIRmPmGECWvalveLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveLinearRangeF.setDescription("GE/CW valve linear range in tenths of degrees Fahrenheit (5209)")
airIRmPmGECWvalveGEOffTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12))
airIRmPmGECWvalveGEOffTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveGEOffTempC.setDescription("GE/CW valve GE off temperature in tenths of degrees Celsius (5211)")
airIRmPmGECWvalveGEOffTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmGECWvalveGEOffTempF.setDescription("GE/CW valve GE off temperature in tenths of degrees Fahrenheit (5211)")
airIRmPmGECWvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveOpeningGrade.setDescription("GE/CW valve opening grade in percent (5214)")
airIRmPmGECWvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGECWvalveManOpOpeningGrade.setDescription("GE/CW valve manual operation opening grade in percent (5215)")
airIRmPmGvalve = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16))
airIRmPmGvalveManOperationEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveManOperationEnable.setDescription("G-valve manual operation enable (5301)")
airIRmPmGvalvePreOpeningTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalvePreOpeningTime.setDescription("G-valve pre-opening time in seconds (5310)")
airIRmPmGvalvePreOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalvePreOpeningGrade.setDescription("G-valve pre-opening grade in percent (5311)")
airIRmPmGvalveOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveOpeningGrade.setDescription("G-valve opening grade in percent (5312)")
airIRmPmGvalveManOpOpeningGrade = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGvalveManOpOpeningGrade.setDescription("G-valve manual operation opening grade in percent (5313)")
airIRmPmDrycooler1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17))
airIRmPmDrycooler1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1ManOpEnable.setDescription("Drycooler 1 manual operation enable setting (5401)")
airIRmPmDrycooler1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Running.setDescription("Drycooler 1 running (5402)")
airIRmPmDrycooler1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1ManOpRunning.setDescription("Drycooler 1 manual operation running (5404)")
airIRmPmDrycooler1WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9))
airIRmPmDrycooler1WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1WinterStartTempC.setDescription("Drycooler 1 winter mode start temperature \nin tenths of degrees Celsius (5408)")
airIRmPmDrycooler1WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1WinterStartTempF.setDescription("Drycooler 1 winter mode start temperature \nin tenths of degrees Fahrenheit (5408)")
airIRmPmDrycooler1SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10))
airIRmPmDrycooler1SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1SummerStartTempC.setDescription("Drycooler 1 summer mode start temperature \nin tenths of degrees Celsius (5409)")
airIRmPmDrycooler1SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1SummerStartTempF.setDescription("Drycooler 1 summer mode start temperature \nin tenths of degrees Fahrenheit (5409)")
airIRmPmDrycooler1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11))
airIRmPmDrycooler1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1HysteresisK.setDescription("Drycooler 1 hysteresis in tenths of Kelvins (5410)")
airIRmPmDrycooler1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler1HysteresisF.setDescription("Drycooler 1 hysteresis in tenths of degrees Fahrenheit (5410)")
airIRmPmDrycooler1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Runtime.setDescription("Drycooler 1 runtime in hours (5415)")
airIRmPmDrycooler2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18))
airIRmPmDrycooler2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2ManOpEnable.setDescription("Drycooler 2 manual operation enable setting (5501)")
airIRmPmDrycooler2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Running.setDescription("Drycooler 2 running (5502)")
airIRmPmDrycooler2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2ManOpRunning.setDescription("Drycooler 2 manual operation running (5504)")
airIRmPmDrycooler2WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9))
airIRmPmDrycooler2WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2WinterStartTempC.setDescription("Drycooler 2 winter mode start temperature \nin tenths of degrees Celsius (5508)")
airIRmPmDrycooler2WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2WinterStartTempF.setDescription("Drycooler 2 winter mode start temperature \nin tenths of degrees Fahrenheit (5508)")
airIRmPmDrycooler2SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10))
airIRmPmDrycooler2SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2SummerStartTempC.setDescription("Drycooler 2 summer mode start temperature \nin tenths of degrees Celsius (5509)")
airIRmPmDrycooler2SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2SummerStartTempF.setDescription("Drycooler 2 summer mode start temperature \nin tenths of degrees Fahrenheit (5509)")
airIRmPmDrycooler2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11))
airIRmPmDrycooler2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2HysteresisK.setDescription("Drycooler 2 hysteresis in tenths of Kelvins (5510)")
airIRmPmDrycooler2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler2HysteresisF.setDescription("Drycooler 2 hysteresis in tenths of degrees Fahrenheit (5510)")
airIRmPmDrycooler2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Runtime.setDescription("Drycooler 2 runtime in hours (5515)")
airIRmPmDrycooler3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19))
airIRmPmDrycooler3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3ManOpEnable.setDescription("Drycooler 3 manual operation enable setting (5601)")
airIRmPmDrycooler3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Running.setDescription("Drycooler 3 running (5602)")
airIRmPmDrycooler3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3ManOpRunning.setDescription("Drycooler 3 manual operation running (5604)")
airIRmPmDrycooler3WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9))
airIRmPmDrycooler3WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3WinterStartTempC.setDescription("Drycooler 3 winter mode start temperature \nin tenths of degrees Celsius (5608)")
airIRmPmDrycooler3WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3WinterStartTempF.setDescription("Drycooler 3 winter mode start temperature \nin tenths of degrees Fahrenheit (5608)")
airIRmPmDrycooler3SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10))
airIRmPmDrycooler3SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3SummerStartTempC.setDescription("Drycooler 3 summer mode start temperature \nin tenths of degrees Celsius (5609)")
airIRmPmDrycooler3SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3SummerStartTempF.setDescription("Drycooler 3 summer mode start temperature \nin tenths of degrees Fahrenheit (5609)")
airIRmPmDrycooler3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11))
airIRmPmDrycooler3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3HysteresisK.setDescription("Drycooler 3 hysteresis in tenths of Kelvins (5610)")
airIRmPmDrycooler3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler3HysteresisF.setDescription("Drycooler 3 hysteresis in tenths of degrees Fahrenheit (5610)")
airIRmPmDrycooler3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Runtime.setDescription("Drycooler 3 runtime in hours (5615)")
airIRmPmDrycooler4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20))
airIRmPmDrycooler4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4ManOpEnable.setDescription("Drycooler 4 manual operation enable setting (5701)")
airIRmPmDrycooler4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Running.setDescription("Drycooler 4 running (5702)")
airIRmPmDrycooler4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4ManOpRunning.setDescription("Drycooler 4 manual operation running (5704)")
airIRmPmDrycooler4WinterStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9))
airIRmPmDrycooler4WinterStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4WinterStartTempC.setDescription("Drycooler 4 winter mode start temperature \nin tenths of degrees Celsius (5708)")
airIRmPmDrycooler4WinterStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4WinterStartTempF.setDescription("Drycooler 4 winter mode start temperature \nin tenths of degrees Fahrenheit (5708)")
airIRmPmDrycooler4SummerStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10))
airIRmPmDrycooler4SummerStartTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4SummerStartTempC.setDescription("Drycooler 4 summer mode start temperature \nin tenths of degrees Celsius (5709)")
airIRmPmDrycooler4SummerStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4SummerStartTempF.setDescription("Drycooler 4 summer mode start temperature \nin tenths of degrees Fahrenheit (5709)")
airIRmPmDrycooler4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11))
airIRmPmDrycooler4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4HysteresisK.setDescription("Drycooler 4 hysteresis in tenths of Kelvins (5710)")
airIRmPmDrycooler4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDrycooler4HysteresisF.setDescription("Drycooler 4 hysteresis in tenths of degrees Fahrenheit (5710)")
airIRmPmDrycooler4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Runtime.setDescription("Drycooler 4 runtime in hours (5715)")
airIRmPmPump1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21))
airIRmPmPump1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1ManOpEnable.setDescription("Pump 1 manual operation enable state (5801)")
airIRmPmPump1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Running.setDescription("Pump 1 running (5802)")
airIRmPmPump1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1ManOpRunning.setDescription("Pump 1 manual operation running (5805)")
airIRmPmPump1StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10))
airIRmPmPump1StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1StartTemperatureK.setDescription("Pump 1 starting temperature in tenths of Kelvins (5809)")
airIRmPmPump1StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1StartTemperatureF.setDescription("Pump 1 starting temperature in tenths of degrees Fahrenheit (5809)")
airIRmPmPump1Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11))
airIRmPmPump1HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1HysteresisK.setDescription("Pump 1 hysteresis in tenths of Kelvins (5810)")
airIRmPmPump1HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1HysteresisF.setDescription("Pump 1 hysteresis in tenths of degrees Fahrenheit (5810)")
airIRmPmPump1LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12))
airIRmPmPump1LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1LinearRangeK.setDescription("Pump 1 linear range in tenths of Kelvins (5811)")
airIRmPmPump1LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1LinearRangeF.setDescription("Pump 1 linear range in tenths of degrees Fahrenheit (5811)")
airIRmPmPump1PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1PressureSetpoint.setDescription("Pump 1 pressure setpoint in tenths of Bars (5812)")
airIRmPmPump1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Runtime.setDescription("Pump 1 runtime in hours (5820)")
airIRmPmPump1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Speed.setDescription("Pump 1 speed in percent (5821)")
airIRmPmPump1ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1ControlCycle.setDescription("Pump 1 control cycle length in seconds (5827)")
airIRmPmPump1MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1MaxAdjust.setDescription("Pump 1 maximum adjustment in percent (5828)")
airIRmPmPump1ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump1ControlFactor.setDescription("Pump 1 control factor setting (5829)")
airIRmPmPump2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22))
airIRmPmPump2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2ManOpEnable.setDescription("Pump 2 manual operation enable state (5901)")
airIRmPmPump2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Running.setDescription("Pump 2 running (5902)")
airIRmPmPump2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2ManOpRunning.setDescription("Pump 2 manual operation running (5905)")
airIRmPmPump2StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10))
airIRmPmPump2StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2StartTemperatureK.setDescription("Pump 2 starting temperature in tenths of Kelvins (5909)")
airIRmPmPump2StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2StartTemperatureF.setDescription("Pump 2 starting temperature in tenths of degrees Fahrenheit (5909)")
airIRmPmPump2Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11))
airIRmPmPump2HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2HysteresisK.setDescription("Pump 2 hysteresis in tenths of Kelvins (5910)")
airIRmPmPump2HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2HysteresisF.setDescription("Pump 2 hysteresis in tenths of degrees Fahrenheit (5910)")
airIRmPmPump2LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12))
airIRmPmPump2LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2LinearRangeK.setDescription("Pump 2 linear range in tenths of Kelvins (5911)")
airIRmPmPump2LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2LinearRangeF.setDescription("Pump 2 linear range in tenths of degrees Fahrenheit (5911)")
airIRmPmPump2PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2PressureSetpoint.setDescription("Pump 2 pressure setpoint in tenths of Bars (5912)")
airIRmPmPump2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Runtime.setDescription("Pump 2 runtime in hours (5920)")
airIRmPmPump2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Speed.setDescription("Pump 2 speed in percent (5921)")
airIRmPmPump2ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2ControlCycle.setDescription("Pump 2 control cycle length in seconds (5927)")
airIRmPmPump2MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2MaxAdjust.setDescription("Pump 2 maximum adjustment in percent (5928)")
airIRmPmPump2ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump2ControlFactor.setDescription("Pump 2 control factor setting (5929)")
airIRmPmPump3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23))
airIRmPmPump3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3ManOpEnable.setDescription("Pump 3 manual operation enable state (6001)")
airIRmPmPump3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Running.setDescription("Pump 3 running (6002)")
airIRmPmPump3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3ManOpRunning.setDescription("Pump 3 manual operation running (6005)")
airIRmPmPump3StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10))
airIRmPmPump3StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3StartTemperatureK.setDescription("Pump 3 starting temperature in tenths of Kelvins (6009)")
airIRmPmPump3StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3StartTemperatureF.setDescription("Pump 3 starting temperature in tenths of degrees Fahrenheit (6009)")
airIRmPmPump3Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11))
airIRmPmPump3HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3HysteresisK.setDescription("Pump 3 hysteresis in tenths of Kelvins (6010)")
airIRmPmPump3HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3HysteresisF.setDescription("Pump 3 hysteresis in tenths of degrees Fahrenheit (6010)")
airIRmPmPump3LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12))
airIRmPmPump3LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3LinearRangeK.setDescription("Pump 3 linear range in tenths of Kelvins (6011)")
airIRmPmPump3LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3LinearRangeF.setDescription("Pump 3 linear range in tenths of degrees Fahrenheit (6011)")
airIRmPmPump3PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3PressureSetpoint.setDescription("Pump 3 pressure setpoint in tenths of Bars (6012)")
airIRmPmPump3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Runtime.setDescription("Pump 3 runtime in hours (6020)")
airIRmPmPump3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Speed.setDescription("Pump 3 speed in percent (6021)")
airIRmPmPump3ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3ControlCycle.setDescription("Pump 3 control cycle length in seconds (6027)")
airIRmPmPump3MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3MaxAdjust.setDescription("Pump 3 maximum adjustment in percent (6028)")
airIRmPmPump3ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump3ControlFactor.setDescription("Pump 3 control factor setting (6029)")
airIRmPmPump4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24))
airIRmPmPump4ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4ManOpEnable.setDescription("Pump 4 manual operation enable state (6101)")
airIRmPmPump4Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Running.setDescription("Pump 4 running (6102)")
airIRmPmPump4ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4ManOpRunning.setDescription("Pump 4 manual operation running (6105)")
airIRmPmPump4StartTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10))
airIRmPmPump4StartTemperatureK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4StartTemperatureK.setDescription("Pump 4 starting temperature in tenths of Kelvins (6109)")
airIRmPmPump4StartTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4StartTemperatureF.setDescription("Pump 4 starting temperature in tenths of degrees Fahrenheit (6109)")
airIRmPmPump4Hysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11))
airIRmPmPump4HysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4HysteresisK.setDescription("Pump 4 hysteresis in tenths of Kelvins (6110)")
airIRmPmPump4HysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4HysteresisF.setDescription("Pump 4 hysteresis in tenths of degrees Fahrenheit (6110)")
airIRmPmPump4LinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12))
airIRmPmPump4LinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4LinearRangeK.setDescription("Pump 4 linear range in tenths of Kelvins (6111)")
airIRmPmPump4LinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4LinearRangeF.setDescription("Pump 4 linear range in tenths of degrees Fahrenheit (6111)")
airIRmPmPump4PressureSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4PressureSetpoint.setDescription("Pump 4 pressure setpoint in tenths of Bars (6112)")
airIRmPmPump4Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Runtime.setDescription("Pump 4 runtime in hours (6120)")
airIRmPmPump4Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Speed.setDescription("Pump 4 speed in percent (6121)")
airIRmPmPump4ControlCycle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4ControlCycle.setDescription("Pump 4 control cycle length in seconds (6127)")
airIRmPmPump4MaxAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4MaxAdjust.setDescription("Pump 4 maximum adjustment in percent (6128)")
airIRmPmPump4ControlFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPump4ControlFactor.setDescription("Pump 4 control factor setting (6129)")
airIRmPmHotgasHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25))
airIRmPmHotgasHeatRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHotgasHeatRunning.setDescription("Hotgas heat running state. (6202)")
airIRmPmPWWHeating = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26))
airIRmPmPWWHeatingManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpEnable.setDescription("PWW-heating manual operation enable (6301)")
airIRmPmPWWHeatingRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingRunning.setDescription("PWW-heating running (6302)")
airIRmPmPWWHeatingManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 4), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpRunning.setDescription("PWW-heating manual operation running (6303)")
airIRmPmPWWHeatingType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("undefined", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPWWHeatingType.setDescription("PWW-heating type (6308)")
airIRmPmPWWHeatingStartTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10))
airIRmPmPWWHeatingStartTempK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingStartTempK.setDescription("PWW-heating starting temperature in Kelvins (6309)")
airIRmPmPWWHeatingStartTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingStartTempF.setDescription("PWW-heating starting temperature in degrees Fahrenheit (6309)")
airIRmPmPWWHeatingHysteresis = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12))
airIRmPmPWWHeatingHysteresisK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingHysteresisK.setDescription("PWW-heating hysteresis in Kelvins (6311)")
airIRmPmPWWHeatingHysteresisF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingHysteresisF.setDescription("PWW-heating hysteresis in degrees Fahrenheit (6311)")
airIRmPmPWWHeatingLinearRange = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13))
airIRmPmPWWHeatingLinearRangeK = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingLinearRangeK.setDescription("PWW-heating linear range in Kelvins (6312)")
airIRmPmPWWHeatingLinearRangeF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingLinearRangeF.setDescription("PWW-heating linear range in degrees Fahrenheit (6312)")
airIRmPmPWWHeatingCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingCurrentValue.setDescription("PWW-heating current value in percent (6315)")
airIRmPmPWWHeatingManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmPWWHeatingManOpValue.setDescription("PWW-heating manual operation value in percent (6316)")
airIRmPmHumidifier1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27))
airIRmPmHumidifier1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpEnable.setDescription("Humidifier #1 manual operation enable (6401)")
airIRmPmHumidifier1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Running.setDescription("Humidifier #1 running state (6402)")
airIRmPmHumidifier1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpRunning.setDescription("Humidifier #1 manual operation running state (6404)")
airIRmPmHumidifier1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("proportional", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Type.setDescription("Humidifier #1 type (6416)")
airIRmPmHumidifier1StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1StartHumidity.setDescription("Humidifier #1 start humidity in tenths \nof percent relative humidity (6417)")
airIRmPmHumidifier1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1Hysteresis.setDescription("Humidifier #1 hysteresis in tenths \nof percent relative humidity (6419)")
airIRmPmHumidifier1LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1LinearRange.setDescription("Humidifier #1 linear range in tenths \nof percent relative humidity per Kelvin (6420)")
airIRmPmHumidifier1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Runtime.setDescription("Humidifier #1 runtime in hours (6426)")
airIRmPmHumidifier1CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1CurrentValue.setDescription("Humidifier #1 current value in percent (6427)")
airIRmPmHumidifier1ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier1ManOpValue.setDescription("Humidifier #1 manual operation value in percent (6428)")
airIRmPmHumidifier2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28))
airIRmPmHumidifier2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpEnable.setDescription("Humidifier #2 manual operation enable (6501)")
airIRmPmHumidifier2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Running.setDescription("Humidifier #2 running state (6502)")
airIRmPmHumidifier2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpRunning.setDescription("Humidifier #2 manual operation running state (6504)")
airIRmPmHumidifier2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("proportional", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Type.setDescription("Humidifier #2 type (6516)")
airIRmPmHumidifier2StartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2StartHumidity.setDescription("Humidifier #2 start humidity in tenths \nof percent relative humidity (6517)")
airIRmPmHumidifier2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2Hysteresis.setDescription("Humidifier #2 hysteresis in tenths \nof percent relative humidity (6519)")
airIRmPmHumidifier2LinearRange = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2LinearRange.setDescription("Humidifier #2 linear range in tenths \nof percent relative humidity per Kelvin (6520)")
airIRmPmHumidifier2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Runtime.setDescription("Humidifier #2 runtime in hours (6526)")
airIRmPmHumidifier2CurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2CurrentValue.setDescription("Humidifier #2 current value in percent (6527)")
airIRmPmHumidifier2ManOpValue = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmHumidifier2ManOpValue.setDescription("Humidifier #2 manual operation value in percent (6528)")
airIRmPmDehumidification = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31))
airIRmPmDehumidificManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificManOpEnable.setDescription("Dehumidifier manual operation enable setting (6801)")
airIRmPmDehumidificRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 3), AirIRmControlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificRunning.setDescription("Dehumidifier running state (6802)")
airIRmPmDehumidificManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 5), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDehumidificManOpRunning.setDescription("Dehumidifier manual operation running (6804)")
airIRmPmDehumidificStartHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificStartHumidity.setDescription("Dehumidifier start humidity in tenths of percent relative humidity (6809)")
airIRmPmDehumidificHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificHysteresis.setDescription("Dehumidifier hysteresis in tenths of percent relative humidity (6811)")
airIRmPmDehumidificMinWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18))
airIRmPmDehumidificMinWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMinWaterTempC.setDescription("Dehumidifier minimum water temperature in tenths of \ndegrees Celsius (6817)")
airIRmPmDehumidificMinWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMinWaterTempF.setDescription("Dehumidifier minimum water temperature in tenths of \ndegrees Fahrenheit (6817)")
airIRmPmDehumidificMaxWaterTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19))
airIRmPmDehumidificMaxWaterTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMaxWaterTempC.setDescription("Dehumidifier maximum water temperature in tenths of \ndegrees Celsius (6818)")
airIRmPmDehumidificMaxWaterTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificMaxWaterTempF.setDescription("Dehumidifier maximum water temperature in tenths of \ndegrees Fahrenheit (6818)")
airIRmPmDehumidificRuntime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRmPmDehumidificRuntime.setDescription("Dehumidifier runtime in hours (6820)")
airIRmPmFan1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32))
airIRmPmFan1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpEnable.setDescription("Fan 1 manual operation enable (6901)")
airIRmPmFan1Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Running.setDescription("Fan 1 running (6902)")
airIRmPmFan1ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpRunning.setDescription("Fan 1 manual operation running (6905)")
airIRmPmFan1Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("proportional", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Type.setDescription("Fan 1 type (6908)")
airIRmPmFan1Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Runtime.setDescription("Fan 1 runtime in hours (6931)")
airIRmPmFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Speed.setDescription("Fan 1 speed in percent (6932)")
airIRmPmFan1ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1ManOpSpeed.setDescription("Fan 1 manual operation speed in percent (6933)")
airIRmPmFan2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33))
airIRmPmFan2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpEnable.setDescription("Fan 1 manual operation enable (7001)")
airIRmPmFan2Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Running.setDescription("Fan 1 running (7002)")
airIRmPmFan2ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpRunning.setDescription("Fan 1 manual operation running (7005)")
airIRmPmFan2Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("proportional", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Type.setDescription("Fan 2 type (7008)")
airIRmPmFan2Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Runtime.setDescription("Fan 1 runtime in hours (7031)")
airIRmPmFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Speed.setDescription("Fan 1 speed in percent (7032)")
airIRmPmFan2ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2ManOpSpeed.setDescription("Fan 1 manual operation speed in percent (7033)")
airIRmPmFan3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34))
airIRmPmFan3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpEnable.setDescription("Fan 1 manual operation enable (7101)")
airIRmPmFan3Running = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 3), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Running.setDescription("Fan 1 running (7102)")
airIRmPmFan3ManOpRunning = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 6), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpRunning.setDescription("Fan 1 manual operation running (7105)")
airIRmPmFan3Type = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("direct", 1), ("proportional", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Type.setDescription("Fan 3 type (7108)")
airIRmPmFan3Runtime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Runtime.setDescription("Fan 1 runtime in hours (7131)")
airIRmPmFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Speed.setDescription("Fan 1 speed in percent (7132)")
airIRmPmFan3ManOpSpeed = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3ManOpSpeed.setDescription("Fan 1 manual operation speed in percent (7133)")
airIRmPmLouver1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35))
airIRmPmLouver1ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1ManOpEnable.setDescription("Louver 1 manual operation enable (7201)")
airIRmPmLouver1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1Position.setDescription("Louver 1 position (7202)")
airIRmPmLouver1ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver1ManOpPosition.setDescription("Louver 1 manual operation position setting (7203)")
airIRmPmLouver2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36))
airIRmPmLouver2ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2ManOpEnable.setDescription("Louver 2 manual operation enable (7301)")
airIRmPmLouver2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2Position.setDescription("Louver 2 position (7302)")
airIRmPmLouver2ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver2ManOpPosition.setDescription("Louver 2 manual operation position setting (7303)")
airIRmPmLouver3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37))
airIRmPmLouver3ManOpEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 2), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3ManOpEnable.setDescription("Louver 3 manual operation enable (7401)")
airIRmPmLouver3Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3Position.setDescription("Louver 3 position (7402)")
airIRmPmLouver3ManOpPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("closed", 1), ("open", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmLouver3ManOpPosition.setDescription("Louver 3 manual operation position setting (7403)")
airIRmPmAuxAlarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 38))
airIRmPmAuxAlarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 39))
airIRmPmAuxAlarm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 40))
airIRmPmAuxAlarm4 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 41))
airIRmPmAuxAlarm5 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 42))
airIRmPmAlarmBits = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43))
airIRmPmFan1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 1), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Failure.setDescription("Fan #1 failure (8500).")
airIRmPmFan2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 2), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Failure.setDescription("Fan #2 failure (8501).")
airIRmPmFan3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 3), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Failure.setDescription("Fan #3 failure (8502).")
airIRmPmCompressor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 4), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1Failure.setDescription("Compressor #1 failure (8503).")
airIRmPmCompressor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 5), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2Failure.setDescription("Compressor #2 failure (8504).")
airIRmPmWaterDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 6), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterDetector.setDescription("Water detector alarm (8505).")
airIRmPmPhaseFailure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 7), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPhaseFailure.setDescription("Phase failure (8506).")
airIRmPmFireSmokeDetector = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 8), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFireSmokeDetector.setDescription("Fire/smoke detector (8507).")
airIRmPmReturnAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 9), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureTooHigh.setDescription("Return air temperature too high (8508).")
airIRmPmReturnAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 10), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidityTooHigh.setDescription("Return air humidity too high (8509).")
airIRmPmSupplyAirTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 11), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureTooHigh.setDescription("Supply air temperature too high (8510).")
airIRmPmSupplyAirHumidityTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 12), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidityTooHigh.setDescription("Supply air humidity too high (8511).")
airIRmPmWaterTemperatureTooHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 13), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureTooHigh.setDescription("Water temperature too high (8512).")
airIRmPmReturnAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 14), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirTemperatureTooLow.setDescription("Return air temperature too low (8513).")
airIRmPmReturnAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 15), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReturnAirHumidityTooLow.setDescription("Return air humidity too low (8514).")
airIRmPmSupplyAirTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 16), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirTemperatureTooLow.setDescription("Supply air temperature too low (8515).")
airIRmPmSupplyAirHumidityTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 17), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSupplyAirHumidityTooLow.setDescription("Supply air humidity too low (8516).")
airIRmPmWaterTemperatureTooLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 18), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmWaterTemperatureTooLow.setDescription("Water temperature too low (8517).")
airIRmPmSensor1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 19), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor1Failure.setDescription("Sensor #1 failure (8518).")
airIRmPmSensor2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 20), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor2Failure.setDescription("Sensor #2 failure (8519).")
airIRmPmSensor3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 21), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor3Failure.setDescription("Sensor #3 failure (8520).")
airIRmPmSensor4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 22), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor4Failure.setDescription("Sensor #4 failure (8521).")
airIRmPmSensor5Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 23), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor5Failure.setDescription("Sensor #5 failure (8522).")
airIRmPmSensor6Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 24), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor6Failure.setDescription("Sensor #6 failure (8523).")
airIRmPmSensor7Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 25), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor7Failure.setDescription("Sensor #7 failure (8524).")
airIRmPmSensor8Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 26), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor8Failure.setDescription("Sensor #8 failure (8525).")
airIRmPmSensor9Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 27), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor9Failure.setDescription("Sensor #9 failure (8526).")
airIRmPmSensor10Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 28), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor10Failure.setDescription("Sensor #10 failure (8527).")
airIRmPmSensor11Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 29), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor11Failure.setDescription("Sensor #11 failure (8528).")
airIRmPmSensor12Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 30), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor12Failure.setDescription("Sensor #12 failure (8529).")
airIRmPmSensor13Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 31), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor13Failure.setDescription("Sensor #13 failure (8530).")
airIRmPmSensor14Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 32), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor14Failure.setDescription("Sensor #14 failure (8531).")
airIRmPmSensor15Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 33), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor15Failure.setDescription("Sensor #15 failure (8532).")
airIRmPmSensor16Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 34), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor16Failure.setDescription("Sensor #16 failure (8533).")
airIRmPmSensor17Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 35), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor17Failure.setDescription("Sensor #17 failure (8534).")
airIRmPmSensor18Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 36), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor18Failure.setDescription("Sensor #18 failure (8535).")
airIRmPmSensor19Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 37), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor19Failure.setDescription("Sensor #19 failure (8536).")
airIRmPmSensor20Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 38), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor20Failure.setDescription("Sensor #20 failure (8537).")
airIRmPmSensor21Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 39), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor21Failure.setDescription("Sensor #21 failure (8538).")
airIRmPmSensor1Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 40), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor1Defect.setDescription("Sensor #1 defect (8539).")
airIRmPmSensor2Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 41), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor2Defect.setDescription("Sensor #2 defect (8540).")
airIRmPmSensor3Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 42), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor3Defect.setDescription("Sensor #3 defect (8541).")
airIRmPmSensor4Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 43), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor4Defect.setDescription("Sensor #4 defect (8542).")
airIRmPmSensor5Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 44), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor5Defect.setDescription("Sensor #5 defect (8543).")
airIRmPmSensor6Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 45), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor6Defect.setDescription("Sensor #6 defect (8544).")
airIRmPmSensor7Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 46), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor7Defect.setDescription("Sensor #7 defect (8545).")
airIRmPmSensor8Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 47), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor8Defect.setDescription("Sensor #8 defect (8546).")
airIRmPmSensor9Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 48), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor9Defect.setDescription("Sensor #9 defect (8547).")
airIRmPmSensor10Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 49), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor10Defect.setDescription("Sensor #10 defect (8548).")
airIRmPmSensor11Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 50), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor11Defect.setDescription("Sensor #11 defect (8549).")
airIRmPmSensor12Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 51), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor12Defect.setDescription("Sensor #12 defect (8550).")
airIRmPmSensor13Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 52), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor13Defect.setDescription("Sensor #13 defect (8551).")
airIRmPmSensor14Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 53), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor14Defect.setDescription("Sensor #14 defect (8552).")
airIRmPmSensor15Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 54), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor15Defect.setDescription("Sensor #15 defect (8553).")
airIRmPmSensor16Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 55), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor16Defect.setDescription("Sensor #16 defect (8554).")
airIRmPmSensor17Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 56), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor17Defect.setDescription("Sensor #17 defect (8555).")
airIRmPmSensor18Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 57), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor18Defect.setDescription("Sensor #18 defect (8556)")
airIRmPmSensor19Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 58), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor19Defect.setDescription("Sensor #19 defect (8557).")
airIRmPmSensor20Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 59), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor20Defect.setDescription("Sensor #20 defect (8558).")
airIRmPmSensor21Defect = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 60), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmSensor21Defect.setDescription("Sensor #21 defect (8559).")
airIRmPmCompressor1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 61), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1Alarm.setDescription("Compressor #1 alarm (8560).")
airIRmPmCompressor2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 62), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2Alarm.setDescription("Compressor #2 alarm (8561).")
airIRmPmCompressor1LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 63), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor1LowPressure.setDescription("Compressor #1 low pressure (8562).")
airIRmPmCompressor2LowPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 64), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmCompressor2LowPressure.setDescription("Compressor #2 low pressure (8563).")
airIRmPmReheat1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 65), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat1Failure.setDescription("Reheat #1 failure (8564).")
airIRmPmReheat2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 66), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat2Failure.setDescription("Reheat #2 failure (8565).")
airIRmPmReheat3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 67), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat3Failure.setDescription("Reheat #3 failure (8566).")
airIRmPmReheat4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 68), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmReheat4Failure.setDescription("Reheat #4 failure (8567).")
airIRmPmDrycooler1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 69), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler1Failure.setDescription("Drycooler #1 failure (8568).")
airIRmPmDrycooler2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 70), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler2Failure.setDescription("Drycooler #2 failure (8569).")
airIRmPmDrycooler3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 71), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler3Failure.setDescription("Drycooler #3 failure (8570).")
airIRmPmDrycooler4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 72), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmDrycooler4Failure.setDescription("Drycooler #4 failure (8571).")
airIRmPmPump1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 73), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump1Failure.setDescription("Pump #1 failure (8572).")
airIRmPmPump2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 74), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump2Failure.setDescription("Pump #2 failure (8573).")
airIRmPmPump3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 75), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump3Failure.setDescription("Pump #3 failure (8574).")
airIRmPmPump4Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 76), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmPump4Failure.setDescription("Pump #4 failure (8575).")
airIRmPmHumidifier1Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 77), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Failure.setDescription("Humidifier #1 failure (8576).")
airIRmPmHumidifier2Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 78), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Failure.setDescription("Humidifier #2 failure (8577).")
airIRmPmHumidifier3Failure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 79), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Failure.setDescription("Humidifier #3 failure (8578).")
airIRmPmHumidifier1Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 80), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Alarm5us.setDescription("Humidifier #1 5us alarm (8579).")
airIRmPmHumidifier2Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 81), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Alarm5us.setDescription("Humidifier #2 5us alarm (8580).")
airIRmPmHumidifier3Alarm5us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 82), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Alarm5us.setDescription("Humidifier #3 5us alarm (8581).")
airIRmPmHumidifier1Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 83), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier1Alarm20us.setDescription("Humidifier #1 20us alarm (8582).")
airIRmPmHumidifier2Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 84), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier2Alarm20us.setDescription("Humidifier #2 20us alarm (8583).")
airIRmPmHumidifier3Alarm20us = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 85), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHumidifier3Alarm20us.setDescription("Humidifier #3 20us alarm (8584).")
airIRmPmFan1Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 86), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan1Alarm.setDescription("Fan #1 alarm (8585).")
airIRmPmFan2Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 87), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan2Alarm.setDescription("Fan #2 alarm (8586).")
airIRmPmFan3Alarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 88), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFan3Alarm.setDescription("Fan #3 alarm (8587).")
airIRmPmFilter1Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 89), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter1Clogged.setDescription("Filter #1 clogged (8588).")
airIRmPmFilter2Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 90), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter2Clogged.setDescription("Filter #2 clogged (8589).")
airIRmPmFilter3Clogged = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 91), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmFilter3Clogged.setDescription("Filter #3 clogged (8590).")
airIRmPmAuxiliaryAlarm1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 92), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm1.setDescription("Auxiliary #1 alarm (8591).")
airIRmPmAuxiliaryAlarm2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 93), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm2.setDescription("Auxiliary #2 alarm (8592).")
airIRmPmAuxiliaryAlarm3 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 94), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm3.setDescription("Auxiliary #3 alarm (8593).")
airIRmPmAuxiliaryAlarm4 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 95), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm4.setDescription("Auxiliary #4 alarm (8594).")
airIRmPmAuxiliaryAlarm5 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 96), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm5.setDescription("Auxiliary #5 alarm (8595).")
airIRmPmAuxiliaryAlarm6 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 97), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm6.setDescription("Auxiliary #6 alarm (8596).")
airIRmPmAuxiliaryAlarm7 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 98), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm7.setDescription("Auxiliary #7 alarm (8597).")
airIRmPmAuxiliaryAlarm8 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 99), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm8.setDescription("Auxiliary #8 alarm (8598).")
airIRmPmAuxiliaryAlarm9 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 100), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm9.setDescription("Auxiliary #9 alarm (8599).")
airIRmPmAuxiliaryAlarm10 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 101), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmAuxiliaryAlarm10.setDescription("Auxiliary #10 alarm (8600).")
airIRmPmHotGasHeatingAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 102), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmHotGasHeatingAlarm.setDescription("Hot gas heating alarm (8601).")
airIRmPmEEV1PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 103), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1PressureSensorError.setDescription("EEV1 pressure sensor error (8602).")
airIRmPmEEV1TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 104), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1TemperatureSensorError.setDescription("EEV1 temperature sensor error (8603).")
airIRmPmEEV1StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 105), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV1StepperMotorError.setDescription("EEV1 stepper motor error (8604).")
airIRmPmEEV2PressureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 106), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2PressureSensorError.setDescription("EEV2 pressure sensor error (8605).")
airIRmPmEEV2TemperatureSensorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 107), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2TemperatureSensorError.setDescription("EEV2 temperature sensor error (8606).")
airIRmPmEEV2StepperMotorError = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 108), AirIRmAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmEEV2StepperMotorError.setDescription("EEV2 stepper motor error (8607).")
airIRmPmMyZone = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44))
airIRmPmMyZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneNumber.setDescription("My zone number (11700).")
airIRmPmMyZoneRoomTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2))
airIRmPmMyZoneRoomTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomTemperatureC.setDescription("My zone room temperature in tenths of degrees Celsius (11701).")
airIRmPmMyZoneRoomTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomTemperatureF.setDescription("My zone room temperature in tenths of degrees Fahrenheit (11701).")
airIRmPmMyZoneRoomHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneRoomHumidity.setDescription("My zone room humidity in tenths of %RH (11702).")
airIRmPmMyZoneSupplyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4))
airIRmPmMyZoneSupplyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyTemperatureC.setDescription("My zone supply temperature in tenths of degrees Celsius (11703).")
airIRmPmMyZoneSupplyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyTemperatureF.setDescription("My zone supply temperature in tenths\nof degrees Fahrenheit (11703).")
airIRmPmMyZoneSupplyHumidity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSupplyHumidity.setDescription("My zone supply humidity in tenths of %RH (11704).")
airIRmPmMyZoneSequencingTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneSequencingTime.setDescription("My zone sequencing time in minutes (11705).")
airIRmPmMyZoneNumberOfErrorUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneNumberOfErrorUnits.setDescription("Number of error units in my zone (11706).")
airIRmPmMyZoneEmergencyTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8))
airIRmPmMyZoneEmergencyTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneEmergencyTemperatureC.setDescription("My zone emergency temperature in tenths of degrees Celsius (11707).")
airIRmPmMyZoneEmergencyTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneEmergencyTemperatureF.setDescription("My zone emergency temperature in tenths\nof degrees Fahrenheit (11707).")
airIRmPmMyZoneCWEnergySaveMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 9), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmMyZoneCWEnergySaveMode.setDescription("My zone CW energy save mode (11708).")
airIRmPmGlobalZoneData = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45))
airIRmPmGlobalZoneDataEmergencyOpMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45, 1), AirIRmActivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRmPmGlobalZoneDataEmergencyOpMode.setDescription("Emergency operation mode (11800).")
airIRGen3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6))
airIRG3Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1))
airIRG3IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentTableSize.setDescription("The ident table size.")
airIRG3IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2))
if mibBuilder.loadTexts: airIRG3IdentTable.setDescription("Allows to get ident information of current RDU and its assigned CM's.")
airIRG3IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3IdentIndex"))
if mibBuilder.loadTexts: airIRG3IdentEntry.setDescription("The ident table entry.")
airIRG3IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentIndex.setDescription("Index of ident table.")
airIRG3IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3IdentName.setDescription("A character string identifying the unit name.")
airIRG3IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3IdentLocation.setDescription("A character string identifying the unit location.")
airIRG3IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentModelNumber.setDescription("A character string identifying the unit model number.")
airIRG3IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentSerialNumber.setDescription("A character string identifying the unit serial number.")
airIRG3IdentFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentFirmwareRevision.setDescription("A character string identifying the unit firmware version.")
airIRG3IdentHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentHardwareRevision.setDescription("A character string identifying the unit controller hardware revision.")
airIRG3IdentManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentManufactureDate.setDescription("A character string identifying the unit manufacture date.")
airIRG3IdentRDUSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentRDUSysOID.setDescription("This OID contains an OID path to the RDU data.")
airIRG3IdentCMSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentCMSysOID.setDescription("This OID contains an OID path to the cooling module data.")
airIRG3IdentGroupSysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3IdentGroupSysOID.setDescription("This OID contains an OID path to the group data.")
airIRG3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2))
airIRG3GroupTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupTableSize.setDescription("The group table size.")
airIRG3GroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2))
if mibBuilder.loadTexts: airIRG3GroupStatusTable.setDescription("Allows to get group status information.")
airIRG3GroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupStatusIndex"))
if mibBuilder.loadTexts: airIRG3GroupStatusEntry.setDescription("The group staus table entry.")
airIRG3GroupStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusIndex.setDescription("Index of group status table.")
airIRG3GroupStatusCoolOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusCoolOutput.setDescription("The group cooling output in tenths of kilowatts (kW).\nReturns (-1) if not supported.")
airIRG3GroupStatusCoolDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusCoolDemand.setDescription("The group cooling demand in tenths of kilowatts (kW).\nReturns (-1) if not supported.")
airIRG3GroupStatusAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAirFlowUS.setDescription("The group air flow in cubic feet per minute (CFM).\nReturns (-1) if not supported.")
airIRG3GroupStatusAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAirFlowMetric.setDescription("The group air flow in liters per second (L/s).\nReturns (-1) if not supported.")
airIRG3GroupStatusMaxRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxRackInletTempUS.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusMaxRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxRackInletTempMetric.setDescription("The group maximum rack inlet temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusMinRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinRackInletTempUS.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusMinRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinRackInletTempMetric.setDescription("The group minimum rack inlet temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusMaxReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxReturnAirTempUS.setDescription("The group maximum return air temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusMaxReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMaxReturnAirTempMetric.setDescription("The group maximum return air temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusMinReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinReturnAirTempUS.setDescription("The group minimum return air temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusMinReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusMinReturnAirTempMetric.setDescription("The group minimum return air temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusAvgSupplyTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgSupplyTempUS.setDescription("The group average supply air temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusAvgSupplyTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgSupplyTempMetric.setDescription("The group average supply air temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusAvgReturnTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgReturnTempUS.setDescription("The group average return air temperature in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupStatusAvgReturnTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgReturnTempMetric.setDescription("The group average return air temperature in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupStatusAvgFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgFanSpeed.setDescription("The group average fan speed in revolutions per minute (RPM). \nReturns (-1) if not supported.")
airIRG3GroupStatusAvgAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgAirFlowUS.setDescription("The group average air flow in cubic feet per minute (CFM).\nReturns (-1) if not supported.")
airIRG3GroupStatusAvgAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusAvgAirFlowMetric.setDescription("The group average air flow in liters per second (L/s).\nReturns (-1) if not supported.")
airIRG3GroupStatusTotalAirFlowUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusTotalAirFlowUS.setDescription("The group total air flow in cubic feet per minute (CFM).\nReturns (-1) if not supported.")
airIRG3GroupStatusTotalAirFlowMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupStatusTotalAirFlowMetric.setDescription("The group total air flow in liters per second (L/s).\nReturns (-1) if not supported.")
airIRG3GroupSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3))
if mibBuilder.loadTexts: airIRG3GroupSetpointsTable.setDescription("Allows to access the group setpoints.")
airIRG3GroupSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupSetpointsIndex"))
if mibBuilder.loadTexts: airIRG3GroupSetpointsEntry.setDescription("The group setpoints table entry.")
airIRG3GroupSetpointsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupSetpointsIndex.setDescription("Index of group setpoints table.")
airIRG3GroupSetpointsCoolSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolSetpointUS.setDescription("Group cooling setpoint in tenths of\ndegrees Fahrenheit.")
airIRG3GroupSetpointsCoolSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolSetpointMetric.setDescription("Group cooling setpoint in tenths of\ndegrees Celsius.")
airIRG3GroupSetpointsCoolDeadbandUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolDeadbandUS.setDescription("Group cooling deadband in tenths of\ndegrees Fahrenheit. Returns (-1) if not supported.")
airIRG3GroupSetpointsCoolDeadbandMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsCoolDeadbandMetric.setDescription("Group cooling deadband in tenths of\ndegrees Celsius. Returns (-1) if not supported.")
airIRG3GroupSetpointsFanSpeedPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,5,4,1,)).subtype(namedValues=NamedValues(("low", 1), ("med-low", 2), ("med", 3), ("med-high", 4), ("high", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsFanSpeedPreference.setDescription("The group preferred fan speed setting.")
airIRG3GroupSetpointsSupplyAirSetpointUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsSupplyAirSetpointUS.setDescription("Group supply air setpoint in tenths of\ndegrees Fahrenheit.")
airIRG3GroupSetpointsSupplyAirSetpointMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsSupplyAirSetpointMetric.setDescription("Group supply air setpoint in tenths of\ndegrees Celsius.")
airIRG3GroupSetpointsAirFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsAirFlowControl.setDescription("The group air flow control.")
airIRG3GroupSetpointsLightingOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupSetpointsLightingOnTime.setDescription("The group lighting on time in minutes.")
airIRG3GroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4))
if mibBuilder.loadTexts: airIRG3GroupConfigTable.setDescription("Allows to access group configuration table.")
airIRG3GroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3GroupConfigIndex"))
if mibBuilder.loadTexts: airIRG3GroupConfigEntry.setDescription("The group config table entry.")
airIRG3GroupConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3GroupConfigIndex.setDescription("Index of group config table.")
airIRG3GroupConfigNumberofCoolingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigNumberofCoolingUnits.setDescription("The number of cooling units.")
airIRG3GroupConfigConfigurationType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("racs", 1), ("spot", 2), ("in-row", 3), ("hacs", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigConfigurationType.setDescription("The group configuration type. \nThe spot configuration type is not supported.\nReturns (-1) if not supported.")
airIRG3GroupConfigCapacityControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("discrete", 1), ("proportional", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCapacityControlType.setDescription("The group capacity control. Returns (-1) if not supported.")
airIRG3GroupConfigFanSpeedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("automatic", 1), ("manual", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigFanSpeedControl.setDescription("The group fan speed control.")
airIRG3GroupConfigCoolGainP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolGainP.setDescription("The gain component of the PID in hundredths.")
airIRG3GroupConfigCoolResetRateI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolResetRateI.setDescription("The integral component of the PID in hundredths.")
airIRG3GroupConfigCoolDerivativeD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolDerivativeD.setDescription("The derivative component of the PID in hundredths.")
airIRG3GroupConfigCoolPIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("readBack", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigCoolPIDReset.setDescription("Will reset the PID coefficients back to the factory defaults.\nReadback is not supported, returns -1.")
airIRG3GroupConfigNumberofBackupUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigNumberofBackupUnits.setDescription("The number of backup units.")
airIRG3GroupConfigRuntimeBalancingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigRuntimeBalancingEnable.setDescription("Enable or disable runtime balancing feature.")
airIRG3GroupConfigLoadAssistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3GroupConfigLoadAssistEnable.setDescription("Enable or disable load assist feature.")
airIRG3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3))
airIRG3AlarmsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsTableSize.setDescription("The number of active alarms in the airIRG3AlarmsTable.")
airIRG3AlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2))
if mibBuilder.loadTexts: airIRG3AlarmsTable.setDescription("Table of active alarms for the device.")
airIRG3AlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3AlarmsIndex"))
if mibBuilder.loadTexts: airIRG3AlarmsEntry.setDescription("Alarms specification")
airIRG3AlarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsIndex.setDescription("Alarm index.")
airIRG3AlarmsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsEventCode.setDescription("Event Code for the alarm. Returns (-1) if not supported.")
airIRG3AlarmsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3AlarmsDescription.setDescription("Description of the alarm. Returns (-1) if not supported.")
airIRG3RDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4))
airIRG3RDUTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUTableSize.setDescription("The RDU table size.")
airIRG3RDUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2))
if mibBuilder.loadTexts: airIRG3RDUStatusTable.setDescription("Allows to access RDU status table.")
airIRG3RDUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUStatusDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUStatusEntry.setDescription("The RDU status table entry.")
airIRG3RDUStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDeviceIndex.setDescription("Index of RDU status table.")
airIRG3RDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUID.setDescription("The current RDU ID (1 to F). \nConfigured RDU only shall display ID, else return -1. ")
airIRG3RDUStatusOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOnReadyStandby.setDescription("The RDU current status.")
airIRG3RDUStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,5,)).subtype(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3), ("stop", 4), ("maintenancemode", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOperatingMode.setDescription("The RDU actual operating mode.")
airIRG3RDUStatusLeadPump = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("pump1", 1), ("pump2", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusLeadPump.setDescription("The RDU lead pump.")
airIRG3RDUStatusStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusStartupDelay.setDescription("The RDU start up delay in seconds.")
airIRG3RDUStatusPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpChangeOverInterval.setDescription("The RDU pump change over interval in days.")
airIRG3RDUStatusStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusStopOnLeakDetect.setDescription("The RDU status of stop on leak detect.")
airIRG3RDUStatusPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPowerSource.setDescription("The RDU power source status.")
airIRG3RDUStatusTotalRDUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusTotalRDUOutputPower.setDescription("The RDU output power in tenths of kilowatts (kW).")
airIRG3RDUStatusInletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInletWaterTempUS.setDescription("The RDU inlet water temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusInletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInletWaterTempMetric.setDescription("The RDU inlet water temperature in tenths of\ndegrees Celsius.")
airIRG3RDUStatusOutletWaterTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutletWaterTempUS.setDescription("The RDU outlet water temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusOutletWaterTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutletWaterTempMetric.setDescription("The RDU outlet water temperature in tenths of\ndegrees Celsius.")
airIRG3RDUStatusCondenserSaturationTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserSaturationTempUS.setDescription("The RDU condenser saturation temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusCondenserSaturationTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserSaturationTempMetric.setDescription("The RDU condenser saturation temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusDewPointTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDewPointTempUS.setDescription("The RDU dew point temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusDewPointTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDewPointTempMetric.setDescription("The RDU dew point temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusPumpOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpOutletTempUS.setDescription("The RDU pump outlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusPumpOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPumpOutletTempMetric.setDescription("The RDU pump outlet temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusSubcoolerOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusSubcoolerOutletTempUS.setDescription("The RDU sub cooler outlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusSubcoolerOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusSubcoolerOutletTempMetric.setDescription("The RDU sub cooler outlet temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusCondenserOutletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletTempUS.setDescription("The RDU condenser outlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusCondenserOutletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletTempMetric.setDescription("The RDU condenser outlet temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusCondenserInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserInletTempUS.setDescription("The RDU condenser inlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUStatusCondenserInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserInletTempMetric.setDescription("The RDU condenser inlet temperature in tenths of \ndegrees Celsius.")
airIRG3RDUStatusCondenserOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletPressureUS.setDescription("The RDU condenser outlet pressure in \npounds per square inch (PSI).")
airIRG3RDUStatusCondenserOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCondenserOutletPressureMetric.setDescription("The RDU condenser outlet pressure in kiloPascals (KPa).")
airIRG3RDUStatusPump1HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1HeadPressureUS.setDescription("The RDU Pump 1 head pressure in pounds per square inch (PSI).")
airIRG3RDUStatusPump1HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1HeadPressureMetric.setDescription("The RDU Pump 1 head pressure in kiloPascals (KPa).")
airIRG3RDUStatusPump2HeadPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2HeadPressureUS.setDescription("The RDU Pump 2 head pressure in pounds per square inch (PSI).")
airIRG3RDUStatusPump2HeadPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2HeadPressureMetric.setDescription("The RDU Pump 2 head pressure in kiloPascals (KPa).")
airIRG3RDUStatusPump1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump1Speed.setDescription("The RDU Pump 1 speed in revolutions per minute (RPM).")
airIRG3RDUStatusPump2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusPump2Speed.setDescription("The RDU Pump 2 speed in revolutions per minute (RPM).")
airIRG3RDUStatusCWValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusCWValvePosition.setDescription("The RDU CW Valve position in % open")
airIRG3RDUStatusReceiverLiquidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusReceiverLiquidLevel.setDescription("The RDU receiver liquid level in % Full")
airIRG3RDUStatusDCPowerSupply1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDCPowerSupply1Current.setDescription("The RDU DC Power Supply 1 Current in Amps")
airIRG3RDUStatusDCPowerSupply2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusDCPowerSupply2Current.setDescription("The RDU DC Power Supply 2 Current in Amps")
airIRG3RDUStatusTotalDCPowerSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusTotalDCPowerSupplyCurrent.setDescription("The RDU Total DC Power Supply Current in Amps")
airIRG3RDUStatusInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 40), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusInputState.setDescription("The RDU Input state.")
airIRG3RDUStatusOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 41), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusOutputState.setDescription("The RDU Output state")
airIRG3RDUStatusByPassValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusByPassValvePosition.setDescription("The RDU By Pass Valve position in % open")
airIRG3RDUStatusRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 43), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("suspended", 1), ("calibrating", 2), ("operating", 3), ("disabled", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUStatusRefrigerantLeakDetector.setDescription("The RDU refrigerant leak detector status.")
airIRG3RDURunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3))
if mibBuilder.loadTexts: airIRG3RDURunHoursTable.setDescription("Allows to access RDU run hours table.")
airIRG3RDURunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDURunHoursDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDURunHoursEntry.setDescription("The RDU run hours table entry.")
airIRG3RDURunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursDeviceIndex.setDescription("Index of RDU run hours table.")
airIRG3RDURunHoursRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursRDUID.setDescription("The current RDU ID (1 to F). \nConfigured RDU only shall display ID, else return -1. ")
airIRG3RDURunHoursPump1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPump1.setDescription("The RDU run hours of Pump 1.")
airIRG3RDURunHoursPump2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPump2.setDescription("The RDU run hours of Pump 2.")
airIRG3RDURunHoursPowerSupply1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPowerSupply1.setDescription("The RDU run hours of power supply 1.")
airIRG3RDURunHoursPowerSupply2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDURunHoursPowerSupply2.setDescription("The RDU run hours of power supply 2.")
airIRG3RDUServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4))
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsTable.setDescription("Allows to access RDU service intervals table.")
airIRG3RDUServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUServiceIntervalsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsEntry.setDescription("The service interval table entry.")
airIRG3RDUServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsDeviceIndex.setDescription("Index of service interval table.")
airIRG3RDUServiceIntervalsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsRDUID.setDescription("The current RDU ID (1 to F). \nConfigured RDU only shall display ID, else return -1. ")
airIRG3RDUServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsAirFilterInterval.setDescription("The RDU service interval for air filter in hours.\nReturns -1 if not supported.")
airIRG3RDUServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUServiceIntervalsAirFilterAlarm.setDescription("The RDU service interval air filter alarm status.\nReturns -1 if not supported.")
airIRG3RDUThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5))
if mibBuilder.loadTexts: airIRG3RDUThresholdsTable.setDescription("Allows to access RDU thresholds table.")
airIRG3RDUThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUThresholdsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUThresholdsEntry.setDescription("The RDU thresholds table entry.")
airIRG3RDUThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUThresholdsDeviceIndex.setDescription("Index of RDU thresholds table.")
airIRG3RDUThresholdsRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUThresholdsRDUID.setDescription("The current RDU ID (1 to F). \nConfigured RDU only shall display ID, else return -1. ")
airIRG3RDUThresholdsEnteringFluidTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUThresholdsEnteringFluidTempHighUS.setDescription("The RDU threshold for entering fluid temperature in tenths of \ndegrees Fahrenheit.")
airIRG3RDUThresholdsEnteringFluidTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUThresholdsEnteringFluidTempHighMetric.setDescription("The RDU threshold for entering fluid temperature in tenths of \ndegrees Celsius.")
airIRG3RDUSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6))
if mibBuilder.loadTexts: airIRG3RDUSetpointsTable.setDescription("Allows to access RDU set points table.")
airIRG3RDUSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUSetpointsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUSetpointsEntry.setDescription("The RDU set points table entry.")
airIRG3RDUSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUSetpointsDeviceIndex.setDescription("Index of RDU set points table.")
airIRG3RDUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7))
if mibBuilder.loadTexts: airIRG3RDUConfigTable.setDescription("Allows to access RDU configuration table.")
airIRG3RDUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3RDUConfigDeviceIndex"))
if mibBuilder.loadTexts: airIRG3RDUConfigEntry.setDescription("The RDU configuration table entry.")
airIRG3RDUConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUConfigDeviceIndex.setDescription("Index of RDU configuration table.")
airIRG3RDUConfigRDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3RDUConfigRDUID.setDescription("The current RDU ID (1 to F). \nConfigured RDU only shall display ID, else return -1. ")
airIRG3RDUConfigStopOnLeakDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigStopOnLeakDetect.setDescription("The RDU stop on leak detect set.")
airIRG3RDUConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigStartupDelay.setDescription("The RDU start up delay in seconds.")
airIRG3RDUConfigPumpChangeOverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigPumpChangeOverInterval.setDescription("The RDU pump change over interval in days.")
airIRG3RDUConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigPowerSource.setDescription("The RDU power source.")
airIRG3RDUConfigOutputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("anyalarm", 1), ("onlycriticalalarms", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOutputSource.setDescription("The RDU output source.")
airIRG3RDUConfigInputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigInputNormalState.setDescription("The RDU Input Normal State.")
airIRG3RDUConfigOutputNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOutputNormalState.setDescription("The RDU Output Normal State.")
airIRG3RDUConfigByPassValveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigByPassValveEnabled.setDescription("The RDU By Pass Valve Enabled State.")
airIRG3RDUConfigRefrigerantLeakDetectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigRefrigerantLeakDetectorEnabled.setDescription("The RDU Refrigerant Leak Detector Enabled State.")
airIRG3RDUConfigCalibrateRefrigerantLeakDetector = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigCalibrateRefrigerantLeakDetector.setDescription("This parameter allows to calibrate the RDU Refrigerant Leak Detector and is write only. \nThe read returns -1. Only 'yes' is supported.")
airIRG3RDUConfigOnReadyStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("standby", 1), ("ready", 2), ("on", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3RDUConfigOnReadyStandby.setDescription("This parameter allows to configure RDU on/standby parameter. \nReady is currently not supported. If unsupported returns -1. ")
airIRG3CM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5))
airIRG3CMTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMTableSize.setDescription("The cooling module table size.")
airIRG3CMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2))
if mibBuilder.loadTexts: airIRG3CMStatusTable.setDescription("Allows to access CM status table.")
airIRG3CMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMStatusDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMStatusEntry.setDescription("The CM status table entry.")
airIRG3CMStatusDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusDeviceIndex.setDescription("Index of CM status table.")
airIRG3CMStatusCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusCMID.setDescription("The CM ID (RDU Number - Group Number - CM Unit Number).")
airIRG3CMStatusOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("standBy", 1), ("on", 2), ("idle", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusOperatingMode.setDescription("The current operating mode of the CM.")
airIRG3CMStatusUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("unconfigured", 1), ("oa", 2), ("ra", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusUnitType.setDescription("The current CM unit type.")
airIRG3CMStatusRackInletTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusRackInletTempUS.setDescription("The CM rack inlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMStatusRackInletTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusRackInletTempMetric.setDescription("The CM rack inlet temperature in tenths of \ndegrees Celsius.")
airIRG3CMStatusReturnAirTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusReturnAirTempUS.setDescription("The CM return air temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMStatusReturnAirTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusReturnAirTempMetric.setDescription("The CM return air temperature in tenths of \ndegrees Celsius.")
airIRG3CMStatusLiquidTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidTempUS.setDescription("The CM liquid temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMStatusLiquidTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidTempMetric.setDescription("The CM liquid temperature in tenths of \ndegrees Celsius.")
airIRG3CMStatusVaporTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporTempUS.setDescription("The CM vapor temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMStatusVaporTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporTempMetric.setDescription("The CM vapor temperature in tenths of \ndegrees Celsius.")
airIRG3CMStatusEvaporatorTempUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEvaporatorTempUS.setDescription("The CM saturation temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMStatusEvaporatorTempMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEvaporatorTempMetric.setDescription("The CM saturation temperature in tenths of \ndegrees Celsius.")
airIRG3CMStatusLiquidInletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidInletPressureUS.setDescription("The CM Liquid Inlet pressure in pounds per square inch (PSI).")
airIRG3CMStatusLiquidInletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLiquidInletPressureMetric.setDescription("The CM Liquid Inlet pressure in kiloPascals (kPa).")
airIRG3CMStatusVaporOutletPressureUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporOutletPressureUS.setDescription("The CM Vapor Outlet pressure in pounds per square inch (PSI).")
airIRG3CMStatusVaporOutletPressureMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusVaporOutletPressureMetric.setDescription("The CM Vapor Outlet pressure in kiloPascals (kPa).")
airIRG3CMStatusExpansionValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusExpansionValvePosition.setDescription("The CM expansion valve position in % open")
airIRG3CMStatusEPRValvePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusEPRValvePosition.setDescription("The CM Evaporator Pressure Regulator Valve Position\nin tenths of percent open")
airIRG3CMStatusLocalDisplayOnOffEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 21), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusLocalDisplayOnOffEnabled.setDescription("The status of the on/off control on the CM local display.")
airIRG3CMStatusAverageFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMStatusAverageFanSpeed.setDescription("The CM Average Fan Speed.")
airIRG3CMRunHoursTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3))
if mibBuilder.loadTexts: airIRG3CMRunHoursTable.setDescription("Allows to access CM run hours table.")
airIRG3CMRunHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMRunHoursDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMRunHoursEntry.setDescription("The CM run hours table entry.")
airIRG3CMRunHoursDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursDeviceIndex.setDescription("Index of CM run hours table.")
airIRG3CMRunHoursCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursCMID.setDescription("The CM ID (RDU Number - Group Number - CM Unit Number).")
airIRG3CMRunHoursFan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan1.setDescription("The CM run hours for Fan1.\nReturns (-1) if not appilcable.")
airIRG3CMRunHoursFan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan2.setDescription("The CM run hours for Fan2.\nReturns (-1) if not appilcable.")
airIRG3CMRunHoursFan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan3.setDescription("The CM run hours for Fan3.\nReturns (-1) if not appilcable.")
airIRG3CMRunHoursFan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan4.setDescription("The CM run hours for Fan4.\nReturns (-1) if not appilcable.")
airIRG3CMRunHoursFan5 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursFan5.setDescription("The CM run hours for Fan5.\nReturns (-1) if not appilcable.")
airIRG3CMRunHoursAirFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMRunHoursAirFilter.setDescription("The CM run hours for air filter.")
airIRG3CMServiceIntervalsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4))
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsTable.setDescription("Allows to access CM service intervals table.")
airIRG3CMServiceIntervalsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMServiceIntervalsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsEntry.setDescription("The CM service interval table entry.")
airIRG3CMServiceIntervalsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsDeviceIndex.setDescription("Index of CM service intervals table.")
airIRG3CMServiceIntervalsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsCMID.setDescription("The CM ID (RDU Number - Group Number - CM Unit Number).")
airIRG3CMServiceIntervalsAirFilterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsAirFilterInterval.setDescription("The CM service interval for air filter in weeks.\nSupported only for RA. Returns -1 if not supported.")
airIRG3CMServiceIntervalsAirFilterAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("disable", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMServiceIntervalsAirFilterAlarm.setDescription("The CM service interval air filter alarm status.\nSupported only for RA. Returns -1 if not supported.")
airIRG3CMThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5))
if mibBuilder.loadTexts: airIRG3CMThresholdsTable.setDescription("Allows to access CM thresholds table.")
airIRG3CMThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMThresholdsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMThresholdsEntry.setDescription("The CM thresholds table entry.")
airIRG3CMThresholdsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMThresholdsDeviceIndex.setDescription("Index for CM thresholds table.")
airIRG3CMThresholdsCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMThresholdsCMID.setDescription("The CM ID (RDU Number - Group Number - CM Unit Number).")
airIRG3CMThresholdsRackInletTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsRackInletTempHighUS.setDescription("The CM high threshold for rack inlet temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMThresholdsRackInletTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsRackInletTempHighMetric.setDescription("The CM high threshold for rack inlet temperature in tenths of \ndegrees Celsius.")
airIRG3CMThresholdsSupplyAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsSupplyAirTempHighUS.setDescription("The CM high threshold for supply air temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMThresholdsSupplyAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsSupplyAirTempHighMetric.setDescription("The CM high threshold for supply air temperature in tenths of \ndegrees Celsius.")
airIRG3CMThresholdsReturnAirTempHighUS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsReturnAirTempHighUS.setDescription("The CM high threshold for return air temperature in tenths of \ndegrees Fahrenheit.")
airIRG3CMThresholdsReturnAirTempHighMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMThresholdsReturnAirTempHighMetric.setDescription("The CM high threshold for return air temperature in tenths of \ndegrees Celsius.")
airIRG3CMSetpointsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6))
if mibBuilder.loadTexts: airIRG3CMSetpointsTable.setDescription("Allows to access CM set points table.")
airIRG3CMSetpointsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMSetpointsDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMSetpointsEntry.setDescription("The CM set points table entry.")
airIRG3CMSetpointsDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMSetpointsDeviceIndex.setDescription("Index of CM set points table.")
airIRG3CMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7))
if mibBuilder.loadTexts: airIRG3CMConfigTable.setDescription("Allows to access CM configuration table.")
airIRG3CMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1)).setIndexNames((0, "PowerNet-MIB", "airIRG3CMConfigDeviceIndex"))
if mibBuilder.loadTexts: airIRG3CMConfigEntry.setDescription("The CM configuration table entry.")
airIRG3CMConfigDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMConfigDeviceIndex.setDescription("Index of CM configuration table.")
airIRG3CMConfigCMID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airIRG3CMConfigCMID.setDescription("The CM ID (RDU Number - Group Number - CM Unit Number).")
airIRG3CMConfigStopOnCoolFail = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigStopOnCoolFail.setDescription("Enable/Disable Stop On cool fail. When enabled, stops the unit \nif it detects that it is blowing warm air into the cold aisle.")
airIRG3CMConfigStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigStartupDelay.setDescription("The CM start up delay in seconds.")
airIRG3CMConfigRemoteOnStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("standBy", 1), ("on", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigRemoteOnStandby.setDescription("The CM configuration for operating mode.")
airIRG3CMConfigPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("singleFeed", 1), ("dualFeed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airIRG3CMConfigPowerSource.setDescription("The CM power source.")
rARU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14))
rARUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1))
rARUIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1))
if mibBuilder.loadTexts: rARUIdentTable.setDescription("Allows for query of the individual devices. \nThe number of entries is contained in the \nrARUStatusAruDeviceCount OID.")
rARUIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rARUIdentAruIndex"))
if mibBuilder.loadTexts: rARUIdentEntry.setDescription("The device to query.")
rARUIdentAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUIdentAruIndex.setDescription("The index to the ARU entry.")
rARUIdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUIdentName.setDescription("A character string identifying the device. ")
rARUConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2))
rARUConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1))
if mibBuilder.loadTexts: rARUConfigTable.setDescription("Allows for configuration of the individual ARU devices accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.")
rARUConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rARUConfigAruIndex"))
if mibBuilder.loadTexts: rARUConfigEntry.setDescription("The ARUs to configure.")
rARUConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUConfigAruIndex.setDescription("The index to the ARU entry.")
rARUConfigAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruName.setDescription("The name of the ARU.")
rARUConfigAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(15,5,6,13,10,2,8,7,1,14,9,4,12,16,18,17,3,11,)).subtype(namedValues=NamedValues(("aruOff", 1), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruRemoteSetpoint.setDescription("This OID defines the desired base airflow of the ARU, and sets the \nspeed of the ARU fans when the temperature override is inactive.\n\nValues specified in cfm (cubic feet per minute) can be converted\nto metric values using the conversion factor:\n\n   1 cfm = 1.70 m^3/hr (cubic meters per hour).\n\nValues (1) through (9) are for support of legacy (1st generation) ARUs.\nWriting these values to a 2nd generation ARU will result in the following:\nA value greater than (9) will be ignored by a 1st generation ARU.\n\n   aruOff      (1) - Ignored\n   aru85F-29C  (2) - 1200 cfm\n   aru90F-32C  (3) - 800 cfm\n   aru95F-35C  (4) - 500 cfm\n   aru100F-38C (5) - 400 cfm\n   aru7kW      (6) - 1200 cfm\n   aru5kW      (7) - 800 cfm\n   aru3kW      (8) - 500 cfm\n   aru2kW      (9) - 400 cfm\n\nNOTE: -1 will be returned if the ARU is not communicating.")
rARUConfigAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruTempOvrdEnableDisable.setDescription("This OID is used to enable/disable the remote temperature override setting of the ARU.\n\nIf this OID is set to 1, the remote setting for temperature override is disabled.\nIf this OID is set to 2, the remote setting for temperature override is enabled.")
rARUConfigAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruTempOvrdSetpoint.setDescription("This OID is the Temperature Override setpoint of the ARU.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees using the \nunits specified in the rARUStatusSysTempUnits OID (Celsius or Fahrenheit).")
rARUConfigAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUConfigAruMasterControl.setDescription("This is the master on/off control for the ARU.")
rARUStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3))
rARUStatusAruDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruDeviceCount.setDescription("The total number of ARUs accessible from this IP.")
rARUStatusSysTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusSysTempUnits.setDescription("The temperature scale used to display the temperature\nin the system, Celsius(1) or Fahrenheit(2).\nThis setting is based on the system preferences\nconfiguration in the agent.")
rARUStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3))
if mibBuilder.loadTexts: rARUStatusTable.setDescription("Allows for query of the individual ARUs accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.")
rARUStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rARUStatusAruIndex"))
if mibBuilder.loadTexts: rARUStatusEntry.setDescription("The ARUs to access.")
rARUStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruIndex.setDescription("The index to the ARU entry.")
rARUStatusAruName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruName.setDescription("The name of the ARU.")
rARUStatusAruRemoteSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(15,5,6,13,10,2,8,7,1,14,9,4,12,16,18,17,3,11,)).subtype(namedValues=NamedValues(("aruOff", 1), ("aru400cfm", 10), ("aru600cfm", 11), ("aru700cfm", 12), ("aru900cfm", 13), ("aru1000cfm", 14), ("aru1400cfm", 15), ("aru1600cfm", 16), ("aru1800cfm", 17), ("aru2000cfm", 18), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW-1200cfm", 6), ("aru5kW-800cfm", 7), ("aru3kW-500cfm", 8), ("aru2kW-300cfm", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruRemoteSetpoint.setDescription("This OID defines the desired base airflow of the ARU, or the \nspeed of the ARU fans when the temperature override is inactive.\n\nSee also the rARUConfigAruRemoteSetpoint OID.\n\nNOTE: -1 will be returned if the ARU is not communicating.")
rARUStatusAruManualSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(10,8,7,2,6,5,9,1,4,3,)).subtype(namedValues=NamedValues(("aruOff", 1), ("aruRem", 10), ("aru85F-29C", 2), ("aru90F-32C", 3), ("aru95F-35C", 4), ("aru100F-38C", 5), ("aru7kW", 6), ("aru5kW", 7), ("aru3kW", 8), ("aru2kW", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruManualSetpoint.setDescription("Manual operating setpoint of the ARU, which is set on the\npanel of the ARU. If the ARU doesn't have a manual , \nthe OID will always return a value of aruRem (10).\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees or kW.\nIf the manual setpoint is set to Remote, or if the ARU doesn't\nhave a manual switch, this OID will return aruRem.")
rARUStatusAruTemp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp1.setDescription("ARU temperature probe #1 reading. \nThe summary exhaust temperature on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).")
rARUStatusAruTemp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp2.setDescription("ARU temperature probe #2 reading. \nThe exhaust temperature in the upper plenum on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).")
rARUStatusAruTemp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTemp3.setDescription("ARU temperature probe #3 reading. \nThe exhaust temperature in the lower plenum on 2nd generation ARUs.\n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).")
rARUStatusAruTempOvrdEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdEnableDisable.setDescription("This OID indicates whether the ARU remote temperature override is enabled or disabled.\nIf this OID is a 1, the remote setting for temperature override is disabled.\nIf this OID is a 2, the remote setting for temperature override is enabled.")
rARUStatusAruTempOvrdSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdSetpoint.setDescription("ARU remote temperature override setpoint setting. \n\nNOTE: -1 will be returned if the ARU is not communicating.\n\nValues are represented in whole number degrees.\nUnits are displayed in the scale shown in\nthe rARUStatusSysTempUnits OID (Celsius or Fahrenheit).")
rARUStatusAruAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruAlarmState.setDescription("An ASCII string containing the 8 flags representing\nthe current alarm state of the ARU. If the state of \nthe ARU is unknown, this variable is set to 'UNKNOWN'.\n\nThe flags are numbered 1 to 8, read from left to\nright. The flags are defined as follows:\n\nFlag  1: Fan Fail 1\nFlag  2: Fan Fail 2\nFlag  3: Fan Fail 3\nFlag  4: Smoke (if ARU is equipped with smoke detector)\n     \nFlag  5: High Temp (Out of Thermal Control)\nFlag  6: Over Temp (Exhaust Temp. Exceeds Override Setpoint)\nFlag  7: Fan Fail 4 (Gen 2 ARU only)\nFlag  8: Reserved")
rARUStatusAruCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("commsNeverDiscovered", 1), ("commsEstablished", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruCommStatus.setDescription("The state of communications to the device.\ncommNeverDiscovered(1) indicates there has never been communications with this device.\ncommsEstablished(2) indicates communication is normal and active with this device.\ncommsLost(3) indicates communication had been established, but is no device.")
rARUStatusAruTempOvrdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTempOvrdStatus.setDescription("Specifies whether the ARU is increasing airflow because\nexhaust air temperature has exceeded the setting specified in the \nrARUConfigAruTempOvrdSetpoint OID.")
rARUStatusAruMasterControl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("aruOn", 1), ("aruOff", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruMasterControl.setDescription("This is the master on/off control for the ARU.")
rARUStatusAruTotalAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUStatusAruTotalAirflow.setDescription("The total airflow provided by the aru. Specified in cfm (cubic feet per minute).\nCan be converted to metric values using the conversion factor:\n1 cfm = 1.70 m^3/hr (cubic meters per hour).")
rARUFanStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4))
rARUFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1))
if mibBuilder.loadTexts: rARUFanStatusTable.setDescription("Allows for query of the individual devices. \nThe number of entries is contained in the \nrARUStatusAruDeviceCount OID.")
rARUFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rARUFanStatusAruIndex"), (0, "PowerNet-MIB", "rARUFanStatusFanIndex"))
if mibBuilder.loadTexts: rARUFanStatusEntry.setDescription("The device to query.")
rARUFanStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusAruIndex.setDescription("The index to the ARU entry.")
rARUFanStatusNominalFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusNominalFanSpeed.setDescription("The nominal rotational speed (RPM) of the fans when they are\noperating at the 100% level.")
rARUFanStatusSelectedFanLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusSelectedFanLevel.setDescription("The currently selected ARU speed level, \nspecified in percent of full capacity.")
rARUFanStatusReplacementThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,5,3,4,2,7,)).subtype(namedValues=NamedValues(("disabled", 1), ("khr20", 2), ("khr25", 3), ("khr30", 4), ("khr35", 5), ("khr40", 6), ("khr50", 7), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusReplacementThreshold.setDescription("Threshold above which a run hour alarm will exist, indicating\nthat it might be time to proactively replace a fan.")
rARUFanStatusFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanIndex.setDescription("The index to an individual fan table entry.")
rARUFanStatusFanOperatingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,5,4,3,)).subtype(namedValues=NamedValues(("unknown", 1), ("off", 2), ("onOk", 3), ("onDegraded", 4), ("offFailed", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanOperatingStatus.setDescription("The current operating state of the fan.")
rARUFanStatusFanRpmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanRpmSpeed.setDescription("The current rotational speed of the fan, \nspecified in rotations per minute (RPM).")
rARUFanStatusFanFlowRate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanFlowRate.setDescription("The flow rate provided by the fan, based on its measured rotational speed.\nSpecified in cfm (cubic feet per minute). Can be converted to metric values\nusing the conversion factor: 1 cfm = 1.70 m^3/hr (cubic meters per hour).")
rARUFanStatusFanInServiceDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusFanInServiceDate.setDescription("The installation/replacement date of the fan.")
rARUFanStatusFanRunhourCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUFanStatusFanRunhourCounter.setDescription("The total time for which the fan has been running.\nSpecified in 10ths of hours.")
rARUFanStatusFanRunhourReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUFanStatusFanRunhourReset.setDescription("Writing yes to this This OID will reset a fan's total run hour counter,\nwhich is shown in the rARUFanStatusFanRunhourCounter OID.")
rARUPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5))
rARUPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1))
if mibBuilder.loadTexts: rARUPowerStatusTable.setDescription("Allows for query of the individual ARUs accessible from this IP address. \nThe number of entries is contained in the rARUStatusAruDeviceCount OID.")
rARUPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rARUPowerStatusAruIndex"))
if mibBuilder.loadTexts: rARUPowerStatusEntry.setDescription("The device to query.")
rARUPowerStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusAruIndex.setDescription("The index to the ARU entry.")
rARUPowerStatusPrimaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusPrimaryAcPresent.setDescription("Indicates whether or not line voltage is present on AC input 1.")
rARUPowerStatusAuxiliaryAcPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUPowerStatusAuxiliaryAcPresent.setDescription("Indicates whether or not line voltage is present on AC input 2.")
rARUPowerStatusRedundantAcConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("singleCord", 1), ("dualCord", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUPowerStatusRedundantAcConfig.setDescription("Indicates whether or not a dual cord is in use.\nWhen this setting is set to dualCord (2), aruRedundantPowerLostAlarm\ntraps will be generated when either primary or auxiliary input\nvoltage is not present. When this setting is set to singleCord (1),\naruRedundantPowerLostAlarm traps will not be generated.")
rARUSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6))
rARUSensorsStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusTableSize.setDescription("The number of entries in the rARUSensorsStatusTable.")
rARUSensorsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2))
if mibBuilder.loadTexts: rARUSensorsStatusTable.setDescription("Allows for getting environmental sensor status information.")
rARUSensorsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rARUSensorsStatusAruIndex"), (0, "PowerNet-MIB", "rARUSensorsStatusSensorNumber"))
if mibBuilder.loadTexts: rARUSensorsStatusEntry.setDescription("The unit to get data from.")
rARUSensorsStatusAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusAruIndex.setDescription("The index to the ARU entry.")
rARUSensorsStatusSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsStatusSensorNumber.setDescription("The number of the sensor on the device.")
rARUSensorsTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsTemperature.setDescription("The sensor's current temperature reading. The temperature scale \nis based on the system preferences configuration.")
rARUSensorsConfigTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigTableSize.setDescription("The number of entries in the rARUSensorsConfigTable.")
rARUSensorsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4))
if mibBuilder.loadTexts: rARUSensorsConfigTable.setDescription("Allows for getting configuration information from \nenvironmental sensors attached to the device.")
rARUSensorsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1)).setIndexNames((0, "PowerNet-MIB", "rARUSensorsConfigAruIndex"), (0, "PowerNet-MIB", "rARUSensorsConfigSensorNumber"))
if mibBuilder.loadTexts: rARUSensorsConfigEntry.setDescription("The unit to get data from.")
rARUSensorsConfigAruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigAruIndex.setDescription("The index to the ARU entry.")
rARUSensorsConfigSensorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rARUSensorsConfigSensorNumber.setDescription("The number of the sensor on the device.")
rARUSensorsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsName.setDescription("A descriptive name for the sensor.")
rARUSensorsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsLocation.setDescription("The location of the sensor.")
rARUSensorsTempMaxThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempMaxThresh.setDescription("The temperature at which a maximum temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempHighThresh.setDescription("The temperature at which a high temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLowThresh.setDescription("The temperature at which a low temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempMinThresh.setDescription("The temperature at which a min temperature threshold \nviolation alarm will be generated for this sensor.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempThreshHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempThreshHysteresis.setDescription("The change in temperature required to cause a\ntemperature alarm to change from an active to an\ninactive state. The temperature scale is based on \nthe system preferences configuration.")
rARUSensorsTempShortDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortDecRateThreshValue.setDescription("The value of the temperature short-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempShortDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortDecRateThreshTime.setDescription("The time over which the temperature may not decrease\nbeyond the value specified by the temperature short-term\ndecreasing rate threshold value.")
rARUSensorsTempShortIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortIncRateThreshValue.setDescription("The value of the temperature short-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempShortIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempShortIncRateThreshTime.setDescription("The time over which the temperature may not increase\nbeyond the value specified by the temperature short-term\nincreasing rate threshold value.")
rARUSensorsTempLongDecRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongDecRateThreshValue.setDescription("The value of the temperature long-term decreasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempLongDecRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongDecRateThreshTime.setDescription("The time over which the temperature may not decrease\nbeyond the value specified by the temperature long-term\ndecreasing rate threshold value.")
rARUSensorsTempLongIncRateThreshValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongIncRateThreshValue.setDescription("The value of the temperature long-term increasing rate\ntime that will cause an alarm to be generated.\nThe temperature scale is based on the system preferences\nconfiguration.")
rARUSensorsTempLongIncRateThreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rARUSensorsTempLongIncRateThreshTime.setDescription("The time over which the temperature may not increase\nbeyond the value specified by the temperature long-term\nincreasing rate threshold value.")
xPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15))
xPDUIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1))
xPDUIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUIdentProductName.setDescription("The name of the PDU.")
xPDUIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentHardwareRev.setDescription("The hardware revision of the PDU. \nThis value is set at the factory.")
xPDUIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareAppRev.setDescription("An ID string identifying the application firmware revision of the  PDU.")
xPDUIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareAppOSRev.setDescription("An ID string identifying the application operating system firmware revision of the PDU.")
xPDUIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentFirmwareControllerRev.setDescription("An ID string identifying the PDU controller firmware revision.")
xPDUIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentDateOfManufacture.setDescription("The date when the PDU was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
xPDUIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentModelNumber.setDescription("A character string identifying the model number of \nthe PDU. This value is set at the factory.")
xPDUIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUIdentSerialNumber.setDescription("A character string identifying the serial number of \nthe PDU. This value is set at the factory.")
xPDUDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2))
xPDUDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceNominalMainInputVoltage.setDescription("The nominal main input voltage to the PDU. Measured in Volts, \nline-to-line for a 3-wire (delta) service or line-to-neutral for a \n4-wire (wye) service.")
xPDUDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceServiceType.setDescription("The type of utility input to the PDU. Either 3 wires (delta), or 4 wires (wye).")
xPDUDeviceNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceNominalOutputVoltage.setDescription("The nominal line-to-neutral output voltage to the load measured in Volts.")
xPDUDeviceMainInputBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceMainInputBreakerRating.setDescription("The rating of the main input breaker measured in Amps.")
xPDUDevicePanelBreakerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDevicePanelBreakerRating.setDescription("The rating of the panel breaker measured in Amps.")
xPDUDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceTransformerPresent.setDescription("Indicates whether or not a transformer is installed in the PDU.")
xPDUDeviceLoadTieBreakerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceLoadTieBreakerPresent.setDescription("Indicates whether or not a load tie breaker is installed in the PDU.")
xPDUDeviceLoadTestPortPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceLoadTestPortPresent.setDescription("Indicates whether or not a load test port is installed in the PDU.")
xPDUDeviceFusesPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceFusesPresent.setDescription("Indicates whether or not the UPS feed from the PDU includes fuses.")
xPDUDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceFansPresent.setDescription("Indicates whether or not cooling fans are installed in the PDU.")
xPDUDeviceBypassInputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceBypassInputPresent.setDescription("Indicates whether or not the PDU is equipped with a second feed for\nthe UPS's bypass input.")
xPDUDeviceCrossTieOutputPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceCrossTieOutputPresent.setDescription("Indicates whether or not the PDU is equipped with a cross-tie output.")
xPDUDeviceEarthGroundMonitorPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceEarthGroundMonitorPresent.setDescription("Indicates whether or not the PDU can provide ground current measurements.")
xPDUDeviceInfraStruXureType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("typeB", 1), ("typeC", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUDeviceInfraStruXureType.setDescription("Indicates the configuration of this PDU system. \nType-B PDU is in a distributed UPS system and has bypass capabilities. \nType-C PDU receives power from a larger central UPS.")
xPDUACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3))
xPDUMainInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1))
xPDUMainInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUMainInputOverVoltThreshold.setDescription("Threshold above which an input over voltage condition will be generated.\nSpecified as percent deviation from nominal.")
xPDUMainInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUMainInputUnderVoltThreshold.setDescription("Threshold below which an input under voltage condition will be generated.\nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.")
xPDUMainInputVoltageTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageTableSize.setDescription("The number of Main input voltage entries.")
xPDUMainInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4))
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseTable.setDescription("A list of input voltage table entries. The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUMainInputVoltageTableSize OID.")
xPDUMainInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUMainInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseEntry.setDescription("An entry containing information applicable to a \nparticular main input voltage phase.")
xPDUMainInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltagePhaseIndex.setDescription("Description of each input phase entry in the table.")
xPDUMainInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageLtoL.setDescription("Line-to-line PDU input voltage when an isolation transformer is present, \nor -1 if no transformer present in this PDU. Measured in tenths of Volts.")
xPDUMainInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUMainInputVoltageLtoN.setDescription("Line-to-neutral PDU input voltage when an isolation transformer is not present,\nor -1 if a transformer is present in this PDU. Measured in tenths of Volts.")
xPDUBypassInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2))
xPDUBypassInputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBypassInputOverVoltThreshold.setDescription("Threshold above which a bypass input over voltage condition will be generated. \nSpecified as percent deviation from nominal.")
xPDUBypassInputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBypassInputUnderVoltThreshold.setDescription("Threshold below which an bypass input under voltage condition will be generated. \nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.")
xPDUBypassInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseTableSize.setDescription("The number of bypass input voltage entries.")
xPDUBypassInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4))
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseTable.setDescription("A list of output table entries.  The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUBypassInputVoltagePhaseTableSize OID.")
xPDUBypassInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUBypassInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseEntry.setDescription("An entry containing information applicable to a \nparticular bypass input voltage phase.")
xPDUBypassInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltagePhaseIndex.setDescription("Index of each bypass input phase entry in the table.")
xPDUBypassInputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltageLtoL.setDescription("Line-to-line bypass input voltage, or -1 if no bypass \nfeed is present in this PDU. Measured in tenths of Volts.")
xPDUBypassInputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBypassInputVoltageLtoN.setDescription("Line-to-neutral bypass input voltage, or -1 if no bypass\nfeed is present in this PDU. Measured in tenths of Volts.")
xPDUUPSInput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3))
xPDUUPSInputVoltagePhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseTableSize.setDescription("The number of UPS input voltage entries.")
xPDUUPSInputVoltagePhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2))
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseTable.setDescription("A list of UPS input table entries.  The number of \nentries are the phase entries.\nThe number of entries is contained in the \nxPDUUPSInputVoltagePhaseTableSize OID.")
xPDUUPSInputVoltagePhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUUPSInputVoltagePhaseIndex"))
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseEntry.setDescription("An entry containing information applicable to a \nparticular UPS input voltage phase.")
xPDUUPSInputVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltagePhaseIndex.setDescription("Description of each UPS input phase entry in the table.")
xPDUUPSInputVoltageLtoNPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUUPSInputVoltageLtoNPresent.setDescription("Indicates whether or not voltage is present at the UPS feed.")
xPDUSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4))
xPDUSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputFrequency.setDescription("The system output frequency in tenths of Hertz.")
xPDUSystemOutputNeutralCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputNeutralCurrent.setDescription("Shows the neutral current measured at the system output in tenths of Amps.")
xPDUSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalPower.setDescription("Shows the total system output power in tenths of kW.")
xPDUSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalApparentPower.setDescription("Shows the total system output power in tenths of kVA.")
xPDUSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTotalPowerFactor.setDescription("Indicates the total power factor of the system output.\nA value of 100 representing a unity power factor (1.00).\nMeasured in hundredths.")
xPDUSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(7,5,8,1,4,2,6,9,10,3,)).subtype(namedValues=NamedValues(("freqToleranceOff", 1), ("freqToleranceNine", 10), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputFrequencyTolerance.setDescription("Shows the circuit panel output frequency tolerance in Hertz.")
xPDUSystemOutputMaxKWPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputMaxKWPower.setDescription("Defines 100% load in kW. \nPurpose is to set to match UPS capabilities.")
xPDUSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverVoltThreshold.setDescription("Threshold above which an output over voltage condition will be generated. \nSpecified as percent deviation from nominal.")
xPDUSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputUnderVoltThreshold.setDescription("Threshold below which an output under voltage condition will be generated. \nSpecified as percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.")
xPDUSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverCurrentThreshold.setDescription("Threshold above which an over current condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.")
xPDUSystemOutputOverCurrentNeutralThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputOverCurrentNeutralThreshold.setDescription("Threshold above which an Over current neutral condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.")
xPDUSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUSystemOutputUnderCurrentThreshold.setDescription("Threshold below which an under current condition will be generated. \nSpecified as a percent of the panel breaker rating.\nA value of zero indicates that the threshold is disabled.")
xPDUSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputTableSize.setDescription("The number of System Output phase entries.")
xPDUSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14))
if mibBuilder.loadTexts: xPDUSystemOutputPhaseTable.setDescription("A list of system output table entries.\nThe number of entries is contained in the \nxPDUSystemOutputTableSize OID.")
xPDUSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUSystemOutputPhaseIndex"))
if mibBuilder.loadTexts: xPDUSystemOutputPhaseEntry.setDescription("An entry containing information applicable to a \nparticular system output phase.")
xPDUSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPhaseIndex.setDescription("Description of each output phase entry in the table.")
xPDUSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputVoltageLtoL.setDescription("Line-to-line system output voltage available at the circuit panel. \nMeasured in tenths of Volts.")
xPDUSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputVoltageLtoN.setDescription("Line-to-neutral system output voltage available at the circuit panel. \nMeasured in tenths of Volts.")
xPDUSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPhaseCurrent.setDescription("System load current per phase. Measured in tenths of Amps.")
xPDUSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPower.setDescription("System output power per phase. Measured in tenths of kW.")
xPDUSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputApparentPower.setDescription("System output power per phase. Measured in tenths of kVA.")
xPDUSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemOutputPowerFactor.setDescription("Indicates the Power Factor of the system output per phase.\nA value of 100 representing a unity Power Factor (1.00).\nMeasured in hundredths.")
xPDUGroundMonitorPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5))
xPDUGroundCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUGroundCurrent.setDescription("Shows the current measured in the earth ground conductor.\nMeasured in tenths of Amps, or -1 if not available.")
xPDUGroundCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUGroundCurrentThreshold.setDescription("Threshold above which a ground current over current \ncondition will be generated. Specified in tenths of Amps.")
xPDUCircuitBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4))
xPDUSystemBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1))
xPDUSystemBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerTableSize.setDescription("The number of system breaker entries.")
xPDUSystemBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2))
if mibBuilder.loadTexts: xPDUSystemBreakerTable.setDescription("A list of system breaker entries.\nThe number of entries is contained in the \nxPDUSystemBreakerTableSize OID.")
xPDUSystemBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUSystemBreakerTableIndex"))
if mibBuilder.loadTexts: xPDUSystemBreakerEntry.setDescription("An entry containing information applicable to a \nparticular system breaker.")
xPDUSystemBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerTableIndex.setDescription("Index of system breaker entries in the table.")
xPDUSystemBreakerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerDescription.setDescription("A brief description of the system breakers.")
xPDUSystemBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUSystemBreakerPosition.setDescription("Indicates whether this breaker is open(1) or closed(2).")
xPDUBranchBreakers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2))
xPDUNumOfBranchBreakers = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUNumOfBranchBreakers.setDescription("The number of branch breakers (panel positions) in the Panel.\nreturns 42 for a 1-panel or 84 for a 2-panel system.")
xPDUBranchBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerTableSize.setDescription("The number of branch breaker entries determined by the xPDUNumOfBranchBreakers OID.")
xPDUBranchBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3))
if mibBuilder.loadTexts: xPDUBranchBreakerTable.setDescription("A list of branch breaker table entries. The \nnumber of entries is given by the value of xPDUBranchBreakerTableSize\nThe number of entries is contained in the xPDUBranchBreakerTableSize OID.")
xPDUBranchBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUBranchBreakerTableIndex"))
if mibBuilder.loadTexts: xPDUBranchBreakerEntry.setDescription("An entry containing information applicable to a \nparticular branch breaker (panel position).")
xPDUBranchBreakerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerTableIndex.setDescription("Index of branch breaker entries in the table.")
xPDUBranchBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerRating.setDescription("Indicates current rating of this breaker.  \n0=Breaker is not present.\n1=Earth leakage connection.\n2=Neutral connection.\nA value greater than 2 indicates breaker current rating in Amps.\nA value above 60 Amp will signify a remote feed.\nThe xPDUBranchBreakerRDPFeed OID will indicate which breakers are\nconfigured as a remote drop.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.")
xPDUBranchBreakerRDPFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("remoteDistribution", 1), ("noRemoteDistribution", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerRDPFeed.setDescription("Indicates that a breaker position is feeding a remote \ndistribution panel.")
xPDUBranchBreakerTieIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("breakerUnTied", 1), ("breakerTied", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerTieIndicator.setDescription("Indicates whether or not the breaker in this position \nis logically associated with the breaker immediately below it.\nThis setting is used grouping the breakers feeding \na multi-pole branch circuit.\nNote: When setting an entry's branch breaker tie indicator to breakerTied,\nall the positions that are tied to this breaker will take on the rating\nand thresholds for this entry of the table.")
xPDUBranchBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUBranchBreakerCurrent.setDescription("Indicates the branch current in tenths of  Amps or -1 when not available.")
xPDUBranchBreakerOverCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerOverCurrentThreshold.setDescription("Threshold above which a branch circuit high current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.")
xPDUBranchBreakerUnderCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerUnderCurrentThreshold.setDescription("Threshold below which a branch circuit low current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.")
xPDUBranchBreakerMaxCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerMaxCurrentThreshold.setDescription("Threshold above which a branch circuit maximum current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.")
xPDUBranchBreakerMinCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerMinCurrentThreshold.setDescription("Threshold below which a branch circuit minimum current \ncondition will be generated. \nSpecified as a percent of the branch breaker rating.\nA value of zero indicates that the threshold is disabled.\nNote: When setting branch circuit thresholds/ratings for an entry,\nall positions tied (see the xPDUBranchBreakerTieIndicator OID)\nto this entry will inherit the new threshold/rating.")
xPDUBranchBreakerName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerName.setDescription("The description of the purpose/use of the breaker.")
xPDUBranchBreakerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUBranchBreakerLocation.setDescription("The description of the location of the breaker.")
xPDUInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5))
xPDUInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactNumContacts.setDescription("The number of contacts supported by the PDU.")
xPDUInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactTableSize.setDescription("The number of input contact entries.")
xPDUInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3))
if mibBuilder.loadTexts: xPDUInputContactTable.setDescription("A list of contacts supported by the PDU.\nThe number of entries is contained in the \nxPDUInputContactTableSize OID.")
xPDUInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUInputContactNumber"))
if mibBuilder.loadTexts: xPDUInputContactEntry.setDescription("A contact entry containing information for a given contact.")
xPDUInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactNumber.setDescription("An index identifying the contact on the PDU.")
xPDUInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUInputContactName.setDescription("The description of the purpose/use of the contact.")
xPDUInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUInputContactNormalState.setDescription("The normal operating position of the contact.")
xPDUInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUInputContactCurrentState.setDescription("This value indicates the current state of the contact.")
xPDUOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6))
xPDUOutputRelaysNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelaysNumRelays.setDescription("The number of output relays supported by the PDU.")
xPDUOutputRelaysTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelaysTableSize.setDescription("The number of output relay entries.")
xPDUOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3))
if mibBuilder.loadTexts: xPDUOutputRelayTable.setDescription("A list of output relays supported by the PDU.\nThe number of entries is contained in the \nxPDUOutputRelayTableSize OID.")
xPDUOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1)).setIndexNames((0, "PowerNet-MIB", "xPDUOutputRelayNumber"))
if mibBuilder.loadTexts: xPDUOutputRelayEntry.setDescription("A output relay entry containing information for a given contact.")
xPDUOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelayNumber.setDescription("An index identifying the output relay on the PDU.")
xPDUOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUOutputRelayName.setDescription("The description of the purpose/use of the output relay.")
xPDUOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xPDUOutputRelayNormalState.setDescription("The normal operating position of the output relay.")
xPDUOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUOutputRelayCurrentState.setDescription("This value indicates the current state of the output relay.")
xPDUMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7))
xPDUEPOMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("armed", 1), ("disarmed", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUEPOMode.setDescription("Indicates whether the EPO System is armed(1) or disarmed(2).")
xPDUTransformTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUTransformTempStatus.setDescription("Indicates if the PDU's isolation transformer is over temperature.")
xPDUCoolingFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPDUCoolingFanStatus.setDescription("Indicates if one or more of the PDU's cooling fans have failed.")
battMan = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16))
battManIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1))
battManIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManIdentProductName.setDescription("The name of the battery manager.")
battManIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentHardwareRev.setDescription("The battery manager network interface hardware revision. \nThis value is set at the factory.")
battManIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentFirmwareRev.setDescription("The battery manager network interface firmware revision. \nThis value is set at the factory and can change with firmware update.")
battManIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentDateOfManufacture.setDescription("The date the battery manager was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
battManIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentModelNumber.setDescription("The battery manager model number character string. \nThis value is set at the factory.")
battManIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManIdentSerialNumber.setDescription("The battery manager serial number character string. \nThis value is set at the factory.")
battManSystemCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2))
battManOhmicValueCorrectionFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManOhmicValueCorrectionFactor.setDescription("The system ohmic value correction factor in percent.")
battManUnitCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3))
battManUnitCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCalibTableSize.setDescription("The number of entries in the battManUnitCalibTable.")
battManUnitCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2))
if mibBuilder.loadTexts: battManUnitCalibTable.setDescription("Allows for getting calibration information from each unit in the system.")
battManUnitCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManUnitCalibIndex"))
if mibBuilder.loadTexts: battManUnitCalibEntry.setDescription("The unit to get data from.")
battManUnitCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCalibIndex.setDescription("Index of unit calibration entries in the table.")
battManUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitSerialNumber.setDescription("The serial number of the unit.")
battManBatteryVoltageZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManBatteryVoltageZeroCalib.setDescription("The unit battery voltage zero calibration in millivolts.")
battManBatteryVoltageSpanCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManBatteryVoltageSpanCalib.setDescription("The unit battery voltage span calibration in hundredths of percent.")
battManStringCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4))
battManStringCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCalibTableSize.setDescription("The number of entries in the battManStringCalibTable.")
battManStringCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2))
if mibBuilder.loadTexts: battManStringCalibTable.setDescription("Allows for getting calibration information from each string in the system.")
battManStringCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManStringCalibIndex"))
if mibBuilder.loadTexts: battManStringCalibEntry.setDescription("The string to get data from.")
battManStringCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCalibIndex.setDescription("Index of string calibration entries in the table.")
battManDCCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManDCCurrentZeroCalib.setDescription("The string DC current zero calibration in tenths of amps.")
battManACCurrentZeroCalib = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManACCurrentZeroCalib.setDescription("The string AC current zero calibration in tenths of amps.")
battManProbeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,2,1,5,)).subtype(namedValues=NamedValues(("amps1000", 1), ("amps500", 2), ("amps100", 3), ("amps200", 4), ("amps2000", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManProbeRange.setDescription("The string probe range in amps.")
battManBatteryCalib = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5))
battManString1BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCalibTableSize.setDescription("The number of entries in the battManString1BatteryCalibTable.")
battManString1BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2))
if mibBuilder.loadTexts: battManString1BatteryCalibTable.setDescription("Allows for getting calibration information from each battery in String 1.")
battManString1BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryCalibIndex"))
if mibBuilder.loadTexts: battManString1BatteryCalibEntry.setDescription("The string to get data from.")
battManString1BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCalibIndex.setDescription("Index of battery calibration entries in the table.")
battManString1BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManString1BatteryInterTierOhmicValue.setDescription("The battery inter-tier ohmic value in ohms.  This corresponds to the ohmic \nvalue for the positive terminal of the battery.")
battManString2BatteryCalibTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCalibTableSize.setDescription("The number of entries in the battManString2BatteryCalibTable.")
battManString2BatteryCalibTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4))
if mibBuilder.loadTexts: battManString2BatteryCalibTable.setDescription("Allows for getting calibration information from each battery in String 2.")
battManString2BatteryCalibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryCalibIndex"))
if mibBuilder.loadTexts: battManString2BatteryCalibEntry.setDescription("The string to get data from.")
battManString2BatteryCalibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCalibIndex.setDescription("Index of battery calibration entries in the table.")
battManString2BatteryInterTierOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManString2BatteryInterTierOhmicValue.setDescription("The battery inter-tier ohmic value in ohms.")
battManConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6))
battManConfigApplication = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("silcon", 1), ("other", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigApplication.setDescription("This OID has been deprecated.")
battManConfigBatteryChemistry = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("leadAcid", 1), ("nickel-Cadmium", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteryChemistry.setDescription("The battery chemistry of the monitored batteries: \nLeadAcid(1) Lead Acid or \nNickel-Cadmium(2) Nickel-Cadmium.")
battManConfigBatteryAHCapacity = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteryAHCapacity.setDescription("The amp hour capacity of the monitored batteries 5-4000 AH.")
battManConfigNumberofStrings = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigNumberofStrings.setDescription("The number of strings in the battery manager system.")
battManConfigBatteriesperString = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigBatteriesperString.setDescription("The number of batteries per string.")
battManConfigCellsperBattery = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,6,)).subtype(namedValues=NamedValues(("oneCell", 1), ("twoCells", 2), ("fourCells", 4), ("sixCells", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigCellsperBattery.setDescription("The number of cells per battery (1, 2, 4 or 6 for lead-acid, 1 or 2 for NiCd.")
battManConfigMinCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinCellVoltage.setDescription("The minimum battery cell voltage alarm limit in millivolts DC.")
battManConfigMaxCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxCellVoltage.setDescription("The maximum battery cell voltage alarm limit in millivolts DC.")
battManConfigMaxPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxPilotTempF.setDescription("The maximum pilot battery temperature alarm limit in tenths of degrees Fahrenheit.")
battManConfigMaxPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxPilotTempC.setDescription("The maximum pilot battery temperature alarm limit in tenths of degrees Celsius.")
battManConfigMaxAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxAmbientTempF.setDescription("The maximum ambient temperature alarm limit in tenths of degrees Fahrenheit.")
battManConfigMaxAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxAmbientTempC.setDescription("The maximum ambient temperature alarm limit in tenths of degrees Celsius.")
battManConfigMinAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinAmbientTempF.setDescription("The Minimum Ambient Temperature alarm limit in tenths of degrees Fahrenheit.")
battManConfigMinAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMinAmbientTempC.setDescription("The Minimum Ambient Temperature alarm limit in tenths of degrees Celsius.")
battManConfigMaxRippleCurrent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxRippleCurrent.setDescription("The maximum ripple current alarm limit for the monitored battery \nstrings in percent of AH capacity.")
battManConfigMaxCurrentAcceptanceDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMaxCurrentAcceptanceDeviation.setDescription("The maximum current acceptance deviation alarm limit in percent.")
battManConfigMonitorWireLength = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 17), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("fiftyFeetOrLess", 1), ("moreThanFiftyFeet", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigMonitorWireLength.setDescription("The monitor wire length:\nfiftyFeetOrLess (1) indicates that the wire length is less than or equal to 50 feet.\nmoreThanFiftyFeet (2) indicates that the wire length is greater than 50 feet.")
battManConfigDischargeVoltageAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigDischargeVoltageAlarmLevel.setDescription("The discharge voltage alarm level in percent.")
battManConfigAutoAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigAutoAnnunciatorReset.setDescription("The annunciator output signal reset method:\ndisabled(1) means the annunciator signal output will be reset when the reset button is pressed.\nenabled(2) means the annunciator will stop signaling when all alarm conditions clear.")
battManConfigSuspendCellVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigSuspendCellVoltage.setDescription("This is used along with the number of cells per battery \nand the number of batteries per string to determine if \na battery string has violated the low voltage limit. If \nso, the Battery Management System will enter suspend mode.\nMeasured in millivolts DC")
battManConfigOhmicTestWaitTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigOhmicTestWaitTime.setDescription("The amount of time in seconds after a discharge event before \ndata will be collected for the ohmic value calculation.")
battManConfigNumberOfBoosts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManConfigNumberOfBoosts.setDescription("The number of consecutive times the Battery Management \nSystem applies a charge to each battery during a boost \ncycle.  Batteries with a Rated Battery AH Capacity \nless than or equal to 120 AH will always have a value\nof one for Number of Boosts.")
battManAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7))
battManAlarmManagementController = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmManagementController.setDescription("The Management Controller Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.")
battManAlarmBatteries = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmBatteries.setDescription("The Batteries Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.")
battManAlarmCharger = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmCharger.setDescription("The Charger Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.")
battManAlarmEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManAlarmEnvironment.setDescription("The Environment Alarm is : \nnormal(1) no alarm conditions identified\nalarm(2) an alarm condition exists.")
battManSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8))
battManSystemAmbientTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientTempC.setDescription("The system ambient temperature in tenths of degrees Celsius.")
battManSystemAmbientTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientTempF.setDescription("The system ambient temperature in tenths of degrees Fahrenheit.")
battManSystemPilotTempC = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotTempC.setDescription("The system pilot temperature in tenths of degrees Celsius.")
battManSystemPilotTempF = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotTempF.setDescription("The system pilot temperature in tenths of degrees Fahrenheit.")
battManSystemAmbientHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientHighTempAlarm.setDescription("When set to alarm(2), indicates that the system has a high temperature alarm.")
battManSystemAmbientLowTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientLowTempAlarm.setDescription("When set to alarm(2), indicates that the system has a low temperature alarm.")
battManSystemPilotBatteryHighTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotBatteryHighTempAlarm.setDescription("When set to alarm(2), indicates that the system has a pilot battery high temperature alarm.")
battManSystemPilotProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemPilotProbeDisconnected.setDescription("When set to alarm(2), indicates that the system pilot probe is disconnected.")
battManSystemAmbientProbeDisconnected = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemAmbientProbeDisconnected.setDescription("When set to alarm(2), indicates that the system ambient probe is disconnected.")
battManSystemConfigurationInvalid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemConfigurationInvalid.setDescription("When set to alarm(2), indicates that the system is not configured correctly.")
battManSystemSuspendVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManSystemSuspendVoltage.setDescription("When set to alarm(2), indicates that the system has suspended voltage scans.")
battManStringStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9))
battManStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringTableSize.setDescription("The number of entries in the battManStringTable.")
battManStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2))
if mibBuilder.loadTexts: battManStringTable.setDescription("Allows for getting information from each string \nin the system. ")
battManStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManStringIndex"))
if mibBuilder.loadTexts: battManStringEntry.setDescription("The string to get data from.")
battManStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringIndex.setDescription("Index of string entries in the table.")
battManStringCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCurrent.setDescription("The string current in tenths of amps.")
battManStringRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringRippleCurrent.setDescription("The string ripple current in tenths of amps.")
battManStringChargerHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringChargerHighVoltageAlarm.setDescription("When set to alarm(2), indicates that the string charger has a high voltage alarm.")
battManStringChargerLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringChargerLowVoltageAlarm.setDescription("When set to alarm(2), indicates that the string charger has a low voltage alarm.")
battManStringCurrentProbeDisconnected = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringCurrentProbeDisconnected.setDescription("When set to alarm(2), indicates that the string charger probe is disconnected.")
battManStringOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringOnBattery.setDescription("When set to alarm(2), indicates that the string is in the on-battery state.")
battManStringHighRippleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringHighRippleCurrent.setDescription("When set to alarm(2), indicates that the string has a high ripple current.")
battManStringVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringVoltage.setDescription("The sum of the voltages for all of the batteries on a \nstring in millivolts DC.")
battManStringDischargeLess5Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischargeLess5Seconds.setDescription("The number of recorded discharges lasting less than \n5 seconds.")
battManStringDischarge5to10Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischarge5to10Seconds.setDescription("The number of recorded discharges lasting between 5 \nand 10 seconds.")
battManStringDischarge10to60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischarge10to60Seconds.setDescription("The number of recorded discharges lasting between 10 \nand 60 seconds.")
battManStringDischargeMore60Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManStringDischargeMore60Seconds.setDescription("The number of recorded discharges lasting more than \n60 seconds (1 minute).")
battManBatteryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10))
battManString1BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryTableSize.setDescription("The number of entries in the battManString1BatteryTable.")
battManString1BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2))
if mibBuilder.loadTexts: battManString1BatteryTable.setDescription("Allows for getting information from each string \nin the system. ")
battManString1BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1BatteryIndex"))
if mibBuilder.loadTexts: battManString1BatteryEntry.setDescription("The string to get data from.")
battManString1BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryIndex.setDescription("Index of string entries in the table.")
battManString1BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryVoltage.setDescription("The battery voltage in millivolts DC.")
battManString1BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryLowestVoltage.setDescription("The lowest battery discharge voltage during the last power event in millivolts DC.")
battManString1BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryCellShorted.setDescription("When set to alarm(2), indicates that a battery cell is shorted.")
battManString1BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryOpenFuseOrConnection.setDescription("When set to alarm(2), indicates that a fuse or connection is open.")
battManString1BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryLowCapacity.setDescription("When set to alarm(2), indicates a battery has low capacity.")
battManString1BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryHighOhmicValue.setDescription("When set to alarm(2), indicates a battery has a high ohmic value.")
battManString1BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryThermalRunaway.setDescription("When set to alarm(2), indicates a battery has a thermal runaway condition.")
battManString1BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryDryout.setDescription("When set to alarm(2), indicates a battery has a dryout condition.")
battManString1BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryUserHighVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe user level high voltage limit.")
battManString1BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryUserLowVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe user level low voltage limit.")
battManString1BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryChemHighVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe chemistry level high voltage limit.")
battManString1BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryChemLowVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe chemistry level low voltage limit.")
battManString1BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1BatteryOpenCell.setDescription("When set to alarm(2), indicates the battery has an open \ncell or an inter-connection is abnormal.")
battManString2BatteryTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryTableSize.setDescription("The number of entries in the battManString2BatteryTable.")
battManString2BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4))
if mibBuilder.loadTexts: battManString2BatteryTable.setDescription("Allows for getting information from each string \nin the system. ")
battManString2BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2BatteryIndex"))
if mibBuilder.loadTexts: battManString2BatteryEntry.setDescription("The string to get data from.")
battManString2BatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryIndex.setDescription("Index of string entries in the table.")
battManString2BatteryVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryVoltage.setDescription("The battery voltage in millivolts DC.")
battManString2BatteryLowestVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryLowestVoltage.setDescription("The lowest battery discharge voltage during the last power event in millivolts DC.")
battManString2BatteryCellShorted = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryCellShorted.setDescription("When set to alarm(2), indicates that a battery cell is shorted.")
battManString2BatteryOpenFuseOrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryOpenFuseOrConnection.setDescription("When set to alarm(2), indicates that a fuse or connection is open.")
battManString2BatteryLowCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryLowCapacity.setDescription("When set to alarm(2), indicates a battery has low capacity.")
battManString2BatteryHighOhmicValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryHighOhmicValue.setDescription("When set to alarm(2), indicates a battery has a high ohmic value.")
battManString2BatteryThermalRunaway = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryThermalRunaway.setDescription("When set to alarm(2), indicates a battery has a thermal runaway condition.")
battManString2BatteryDryout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryDryout.setDescription("When set to alarm(2), indicates a battery has a dryout condition.")
battManString2BatteryUserHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryUserHighVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe user level high voltage limit.")
battManString2BatteryUserLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryUserLowVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe user level low voltage limit.")
battManString2BatteryChemHighVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryChemHighVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe chemistry level high voltage limit.")
battManString2BatteryChemLowVoltageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryChemLowVoltageAlarm.setDescription("When set to alarm(2), indicates a battery has violated \nthe chemistry level low voltage limit.")
battManString2BatteryOpenCell = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2BatteryOpenCell.setDescription("When set to alarm(2), indicates the battery has an open \ncell or an inter-connection is abnormal.")
battManInputContactStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11))
battManInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactTableSize.setDescription("The number of entries in the battManInputContactTable.")
battManInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2))
if mibBuilder.loadTexts: battManInputContactTable.setDescription("Allows for getting information from each contact \nin the system. ")
battManInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManInputContactIndex"))
if mibBuilder.loadTexts: battManInputContactEntry.setDescription("The contact to get data from.")
battManInputContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactIndex.setDescription("Index of contact entries in the table.")
battManInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactName.setDescription("The name of the input contact.")
battManInputContactAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactAlarmState.setDescription("When set to alarm(2), indicates that the alarm condition is active for this contact.")
battManInputContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManInputContactState.setDescription("When set to open(1), the input contact is in the open state.\nWhen set to closed(2), the input contact is in the closed state.")
battManInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactNormalState.setDescription("When set to open(1), the input contact is normally open.\nWhen set to closed(2), the input contact is normally closed.")
battManInputContactAlarmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManInputContactAlarmDelay.setDescription("The input contact alarm delay time in seconds.")
battManControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12))
battManRemoteAnnunciatorReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManRemoteAnnunciatorReset.setDescription("Setting this OID to reset(2) will reset the user interface annunciator.\nGetting this OID will do nothing and return the noOperation(1) value.")
battManResetChargeCurrentDeviationBenchmark = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetChargeCurrentDeviationBenchmark.setDescription("Setting this OID to reset(2) will reset the charge current deviation benchmark.\nGetting this OID will do nothing and return the noOperation(1) value.")
battManResetLowestDischargeVoltages = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetLowestDischargeVoltages.setDescription("Setting this OID to reset(2) will reset the lowest discharge voltages.\nGetting this OID will do nothing and return the noOperation(1) value.")
battManResetDischargeCounters = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: battManResetDischargeCounters.setDescription("Setting this OID to reset(2) will reset all discharge event counters.\nGetting this OID will do nothing and return the noOperation(1) value.")
battManTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13))
battManString1OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueLastDischargeInfo.setDescription("Informational text showing the date/time, load, and pilot temperature for the string\nduring the last discharge when ohmic values were recorded.")
battManString1OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueTableSize.setDescription("The number of entries in the battManString1OhmicValueTable.")
battManString1OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3))
if mibBuilder.loadTexts: battManString1OhmicValueTable.setDescription("Allows for getting ohmic value information from each battery in String 1.")
battManString1OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1OhmicValueIndex"))
if mibBuilder.loadTexts: battManString1OhmicValueEntry.setDescription("The string to get data from.")
battManString1OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueIndex.setDescription("The battery number.")
battManString1OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1OhmicValueData.setDescription("The battery inter-tier ohmic value in ohms.\nNote: Zero or negative values are invalid and may indicate \nfaulty calibration of ohmic value correction factors.")
battManString1ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeTableSize.setDescription("The number of entries in the battManString1ResponseTestChangeTable.")
battManString1ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5))
if mibBuilder.loadTexts: battManString1ResponseTestChangeTable.setDescription("Allows for getting response test change information from each battery in String 1.")
battManString1ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestChangeIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestChangeEntry.setDescription("The string to get data from.")
battManString1ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeIndex.setDescription("Index of the entries in the table.")
battManString1ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestChangeData.setDescription("The battery response test change in percent.")
battManString2OhmicValueLastDischargeInfo = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueLastDischargeInfo.setDescription("Informational text showing the date/time, load, and pilot temperature for the string\nduring the last discharge when ohmic values were recorded.")
battManString2OhmicValueTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueTableSize.setDescription("The number of entries in the battManString2OhmicValueTable.")
battManString2OhmicValueTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8))
if mibBuilder.loadTexts: battManString2OhmicValueTable.setDescription("Allows for getting ohmic value information from each battery in String 2.")
battManString2OhmicValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2OhmicValueIndex"))
if mibBuilder.loadTexts: battManString2OhmicValueEntry.setDescription("The string to get data from.")
battManString2OhmicValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueIndex.setDescription("Index of battery calibration entries in the table.")
battManString2OhmicValueData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2OhmicValueData.setDescription("The battery inter-tier ohmic value in ohms.\nNote: Zero or negative values are invalid and may indicate \nfaulty calibration of ohmic value correction factors.")
battManString2ResponseTestChangeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeTableSize.setDescription("The number of entries in the battManString2ResponseTestChangeTable.")
battManString2ResponseTestChangeTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10))
if mibBuilder.loadTexts: battManString2ResponseTestChangeTable.setDescription("Allows for getting response test change information from each battery in String 2.")
battManString2ResponseTestChangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestChangeIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestChangeEntry.setDescription("The string to get data from.")
battManString2ResponseTestChangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeIndex.setDescription("Index of the entries in the table.")
battManString2ResponseTestChangeData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestChangeData.setDescription("The battery response test change in percent.")
battManString1ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentTableSize.setDescription("The number of entries in the battManString1ResponseTestCurrentTable.")
battManString1ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentTable.setDescription("Allows for getting response test current information from each battery\nin String 1.")
battManString1ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentEntry.setDescription("The string to get data from.")
battManString1ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentIndex.setDescription("Index of the entries in the table.")
battManString1ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentData.setDescription("The battery response test current in milliamps.")
battManString2ResponseTestCurrentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentTableSize.setDescription("The number of entries in the battManString2ResponseTestCurrentTable.")
battManString2ResponseTestCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentTable.setDescription("Allows for getting response test current information from each battery\nin String 2.")
battManString2ResponseTestCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentEntry.setDescription("The string to get data from.")
battManString2ResponseTestCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentIndex.setDescription("Index of the entries in the table.")
battManString2ResponseTestCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentData.setDescription("The battery response test current in milliamps.")
battManString1ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkTableSize.setDescription("The number of entries in the battManString1ResponseTestCurrentBenchmarkTable.")
battManString1ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkTable.setDescription("Allows for getting response test current benchmark information from\neach battery in String 1.")
battManString1ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1)).setIndexNames((0, "PowerNet-MIB", "battManString1ResponseTestCurrentBenchmarkIndex"))
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkEntry.setDescription("The string to get data from.")
battManString1ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkIndex.setDescription("Index of the entries in the table.")
battManString1ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString1ResponseTestCurrentBenchmarkData.setDescription("The battery response test current benchmark in milliamps.")
battManString2ResponseTestCurrentBenchmarkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkTableSize.setDescription("The number of entries in the battManString2ResponseTestCurrentBenchmarkTable.")
battManString2ResponseTestCurrentBenchmarkTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkTable.setDescription("Allows for getting response test current benchmark information from\neach battery in String 2.")
battManString2ResponseTestCurrentBenchmarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1)).setIndexNames((0, "PowerNet-MIB", "battManString2ResponseTestCurrentBenchmarkIndex"))
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkEntry.setDescription("The string to get data from.")
battManString2ResponseTestCurrentBenchmarkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkIndex.setDescription("Index of the entries in the table.")
battManString2ResponseTestCurrentBenchmarkData = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManString2ResponseTestCurrentBenchmarkData.setDescription("The battery response test current benchmark in milliamps.")
battManUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14))
battManUnitStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusTableSize.setDescription("The number of entries in the battManUnitStatusTable.")
battManUnitStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2))
if mibBuilder.loadTexts: battManUnitStatusTable.setDescription("Allows for getting status information from each unit in the system.")
battManUnitStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1)).setIndexNames((0, "PowerNet-MIB", "battManUnitStatusIndex"))
if mibBuilder.loadTexts: battManUnitStatusEntry.setDescription("The unit to get data from.")
battManUnitStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusIndex.setDescription("Index of unit status entries in the table.")
battManUnitStatusSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitStatusSerialNumber.setDescription("The battery manager unit serial number character string. \nThis value is set at the factory.")
battManUnitHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitHardwareRev.setDescription("The battery manager unit hardware revision. \nThis value is set at the factory.")
battManUnitFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitFirmwareRev.setDescription("The battery manager unit firmware revision. \nThis value is set at the factory and can change with firmware update.")
battManUnitCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitCommLoss.setDescription("When set to alarm(2), indicates the system has lost \ncommunication with the unit.")
battManUnitRelayStuck = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: battManUnitRelayStuck.setDescription("When set to alarm(2), indicates the unit monitor relay \nis stuck.")
xATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17))
xATSIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1))
xATSIdentProductName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSIdentProductName.setDescription("The name of the transfer switch unit.")
xATSIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentHardwareRev.setDescription("The hardware revision of the transfer switch. \nThis value is set at the factory.")
xATSIdentFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareAppRev.setDescription("An ID string identifying the application firmware revision of the  transfer switch.")
xATSIdentFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareAppOSRev.setDescription("An ID string identifying the application operating system firmware revision of the transfer switch.")
xATSIdentFirmwareControllerRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentFirmwareControllerRev.setDescription("An ID string identifying the transfer switch controller firmware revision.")
xATSIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentDateOfManufacture.setDescription("The date when the transfer switch was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
xATSIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentModelNumber.setDescription("A character string identifying the model number of the transfer switch.\nThis value is set at the factory.")
xATSIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSIdentSerialNumber.setDescription("A character string identifying the serial number of the transfer switch.\nThis value is set at the factory.")
xATSDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2))
xATSDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceServiceType.setDescription("The type of utility input to the transfer switch.\nEither 3 wires (delta), or 4 wires (wye).")
xATSDeviceNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceNominalVoltage.setDescription("The nominal line-to-neutral system voltage.\nMeasured in Volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service. -1 if not available.")
xATSDeviceNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceNominalFrequency.setDescription("The nominal system frequency. Measured in tenths of Hertz.\n-1 if not available.")
xATSDeviceTransferSwitchRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSDeviceTransferSwitchRating.setDescription("The rating of the transfer switch.\nMeasured in Amps.")
xATSDeviceDCBackUpPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSDeviceDCBackUpPresent.setDescription("Indicates if a DC backup is present or not.")
xATSSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3))
xATSSwitchStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1))
xATSSwitchStatusSelectedSource = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,5,)).subtype(namedValues=NamedValues(("none", 1), ("source1", 2), ("source2", 3), ("fault", 4), ("unknown", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusSelectedSource.setDescription("The source which is currently selected, i.e. supplying power to the load.")
xATSSwitchStatusOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("automatic", 1), ("notInAutoAbnormal", 2), ("notInAuto", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusOperationalMode.setDescription("The current operating mode of the transfer switch. When the ATS is in\nautomatic mode, generator starting and ATS transferring is all done automatically\nas needed based on the state of source 1.  Automatic operation is halted when the\nATS is in either of the notInAuto modes.\nA mode of notInAuto indicates that the automatic operation switch is in the\ndisabled position, as indicated by the xATSSwitchStatusAutomaticOperationSwitch OID.\nThe notInAutoAbnormal condition indicates that an abnormal\ncondition has caused the transfer switch to halt automatic operation.\nIn this case, traps can indicate the exact problem. In the case of\nnotInAutoAbnormal, refer to the operation manual for details\non how debug the condition and restore automatic operation.")
xATSSwitchStatusAutomaticOperationSwitch = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusAutomaticOperationSwitch.setDescription("The position of the automatic operation switch on the front of the transfer switch.")
xATSSwitchStatusEngineStartSignal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("run", 1), ("stop", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatusEngineStartSignal.setDescription("The position of the Start/Stop contact which signals the generator\nengine to start/run. When the ATS is in automatic mode,\ngenerator starting/stopping is under ATS control.")
xATSSwitchSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2))
xATSSwitchSettingsLowVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsLowVoltageTransferPoint.setDescription("The lowest acceptable voltage condition at source 1. \nWhen any phase of source 1 is lower than this voltage,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service.\n-1 if not available.")
xATSSwitchSettingsHighVoltageTransferPoint = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsHighVoltageTransferPoint.setDescription("The highest acceptable voltage condition at source 1. \nWhen any phase of source 1 is greater than this voltage,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in volts,  line-to-line for a 3-wire service or \nline-to-neutral for a 4-wire service.\n-1 if not available.")
xATSSwitchSettingsMaxFrequencyDeviation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMaxFrequencyDeviation.setDescription("The maximum acceptable frequency deviation condition from nominal at source 1. \nWhen source 1 frequency is outside the specified range,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation. \nSpecified in  tenths of Hertz above or below nominal.\nA value of zero indicates that frequency is ignored when \ndetermining source quality.\n-1 if not available.")
xATSSwitchSettingsMinPhaseBalance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMinPhaseBalance.setDescription("The minimum required phase balance at source 1. \nWhen the percentage difference between the minimum and maximum \nphase voltage measurements at source 1 is greater than this value,\nsource quality is considered bad and the generator run signal\nis asserted to begin generator operation.\nSpecified as a percentage. A value of zero indicates that phase balance\nis ignored when determining source quality. -1 if not available.")
xATSSwitchSettingsNominalRotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,1,2,3,)).subtype(namedValues=NamedValues(("abc", 1), ("cba", 2), ("any", 3), ("unknown", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsNominalRotation.setDescription("The nominal phase rotation (or phase sequence) required by the load.\nFor certain types of equipment, such as rotating machinery, phase rotation\nis critical for proper operation as it determines the direction which motors\nwill rotate (clockwise or counterclockwise).\nSource quality will be seen as bad if the rotation measured at that\nATS input does not match this setting.\nIf this setting is set to any, phase rotation is ignored.")
xATSSwitchSettingsAllowClosedTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ("unknown", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsAllowClosedTransfer.setDescription("This setting enables seamless (closed) transfers between sources. \nWhen possible, both source 1 and source 2 are closed to the output \nfor a brief time. If closed transfer is not possible within the amount\nof time specified by the xATSSwitchSettingsMaxSyncTime OID,\nan open transfer will be executed.")
xATSSwitchSettingsMaxSyncTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsMaxSyncTime.setDescription("When attempting/seeking to perform a closed transfer, this setting defines\nthe maximum time allowed before the transfer switch will give up and perform\nan open transfer. Specified in seconds.\n-1 if not available.")
xATSSwitchSettingsNeutralTransferTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsNeutralTransferTime.setDescription("This setting defines how long both source 1 and source 2 will be \ndisconnected from the output, during an open transfer. \nSpecified in seconds.\n-1 if not available.")
xATSSwitchSettingsClearLatchedAlarms = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsClearLatchedAlarms.setDescription("Clears any latched alarm conditions.")
xATSSwitchSettingsSetToFactoryDefaults = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchSettingsSetToFactoryDefaults.setDescription("Sets all transfer switch settings to factory default values.")
xATSSwitchTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3))
xATSSwitchTimersTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersTableSize.setDescription("The number of transfer switch timer entries.")
xATSSwitchTimersTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2))
if mibBuilder.loadTexts: xATSSwitchTimersTable.setDescription("A list of timers supported by ATS.\nThe number of entries is contained in the xATSSwitchTimersTableSize OID.")
xATSSwitchTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSwitchTimersIndex"))
if mibBuilder.loadTexts: xATSSwitchTimersEntry.setDescription("An entry containing information about an individual ATS timer.")
xATSSwitchTimersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersIndex.setDescription("Index of timer entries in the table.")
xATSSwitchTimersName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersName.setDescription("Name of the individual timer.Refer to ATS operation manual,\nor on-line help, for detailed descriptions of ATS timers.")
xATSSwitchTimersAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchTimersAbort.setDescription("This aborts the individual timer.")
xATSSwitchTimersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("inactive", 1), ("active", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersStatus.setDescription("The status of the individual timer. Designates whether this timer\nentry is currently running or inactive.")
xATSSwitchTimersRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchTimersRemainingTime.setDescription("The time remaining for this timer entry.\nSpecified in seconds.")
xATSSwitchTimersDelaySetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchTimersDelaySetting.setDescription("The delay settings associated with this timer entry.\nWhen this timer entry is active, the timer value must exceed this setting\nbefore the ATS behavior associated with this timer is executed.\nRefer to ATS operation manual, or on-line help, for detailed \ndescriptions of ATS timers.")
xATSSwitchBlockMap = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4))
xATSSwitchBlockMapTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapTableSize.setDescription("The number of blocking map entries, or how many ATS actions can be blocked.")
xATSSwitchBlockMapTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2))
if mibBuilder.loadTexts: xATSSwitchBlockMapTable.setDescription("A list of blocking maps supported by the ATS.\nThe number of entries is contained in the xATSSwitchBlockMapTableSize OID.")
xATSSwitchBlockMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSwitchBlockMapIndex"))
if mibBuilder.loadTexts: xATSSwitchBlockMapEntry.setDescription("An entry containing information about a specific ATS blocking map.")
xATSSwitchBlockMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapIndex.setDescription("Index of blocking map entries in the table.")
xATSSwitchBlockMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapName.setDescription("A string describing the ATS action to be blocked.")
xATSSwitchBlockMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchBlockMapStatus.setDescription("Represents the status of this blocking map entry, in bit-mapped format.\nA non-zero value indicates that this entry's ATS action is currently being blocked.\nThe bit(s) set indicate which input(s) are causing the blocking (bit0, bit1, etc).\n\nbit 0 - Contact 1\nbit 1 - Contact 2\nbit 2 - Contact 3\nbit 3 - Contact 4.")
xATSSwitchBlockMapSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchBlockMapSetting.setDescription("This setting designates the inputs that block the ATS action\nThe mapping is specified as a bit-field, where each bit set indicates\nthe input that blocks the ATS action associated with the entry.\n\nbit 0 - Contact 1\nbit 1 - Contact 2\nbit 2 - Contact 3\nbit 3 - Contact 4.")
xATSSwitchStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5))
xATSSwitchStatisticsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsTableSize.setDescription("The number of transfer switch statistics entries.")
xATSSwitchStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2))
if mibBuilder.loadTexts: xATSSwitchStatisticsTable.setDescription("A list of statistics supported by ATS.\nThe number of entries is contained in the xATSSwitchStatisticsTableSize OID.")
xATSSwitchStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSwitchStatisticsIndex"))
if mibBuilder.loadTexts: xATSSwitchStatisticsEntry.setDescription("An entry containing information about an individual ATS statistic.")
xATSSwitchStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsIndex.setDescription("Index of ATS statistics entries in the table.")
xATSSwitchStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsName.setDescription("This is the name of the ATS statistic associated with this entry.")
xATSSwitchStatisticsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSwitchStatisticsValue.setDescription("This is the value of the ATS statistic associated with this entry.")
xATSSwitchStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSwitchStatisticsReset.setDescription("This will reset the individual ATS statistic associated with this entry.")
xATSACMonitoringPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4))
xATSSource1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1))
xATSSource1Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSource1Name.setDescription("String used to identify source 1.")
xATSSource1Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Position.setDescription("The current position of the switch at source 1.")
xATSSource1Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Frequency.setDescription("The frequency at source 1 in tenths of Hertz.\n-1 if unavailable.")
xATSSource1Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,3,7,2,4,5,)).subtype(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Quality.setDescription("The current line quality of source 1.")
xATSSource1Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Rotation.setDescription("The phase rotation measured at the source 1 input of the ATS.\nThe sequence is a reference to the order in which the three phases \npass the zero-crossing boundary in time.")
xATSSource1TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1TableSize.setDescription("The number of input voltage entries at the source 1 input of the ATS.")
xATSSource1PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7))
if mibBuilder.loadTexts: xATSSource1PhaseTable.setDescription("A list of voltage table entries for source 1. The number of \nentries are the phase entries. The number of entries is contained in the \nxATSSource1TableSize OID.")
xATSSource1PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSource1Index"))
if mibBuilder.loadTexts: xATSSource1PhaseEntry.setDescription("An entry containing information applicable to a\nparticular input voltage phase at the source 1 input of the ATS.")
xATSSource1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1Index.setDescription("Description of each phase utilized at source 1.")
xATSSource1VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1VoltageLtoL.setDescription("Source 1 line-to-line input voltage. \nMeasured in tenths of Volts.")
xATSSource1VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource1VoltageLtoN.setDescription("Source 1 line-to-neutral input voltage. \nMeasured in tenths of Volts. -1 for a 3-wire service type.")
xATSSource2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2))
xATSSource2Name = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSource2Name.setDescription("String used to identify source 2.")
xATSSource2Position = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("tripped", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Position.setDescription("The current position of the switch at source 2.")
xATSSource2Frequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Frequency.setDescription("The frequency at source 2 in tenths of Hertz.\n-1 if not available.")
xATSSource2Quality = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,3,7,2,4,5,)).subtype(namedValues=NamedValues(("sourceGood", 1), ("lowVoltage", 2), ("highVoltage", 3), ("phaseImbalance", 4), ("freqOutOfRange", 5), ("badRotation", 6), ("unknown", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Quality.setDescription("The current line quality of source 2.")
xATSSource2Rotation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("abc", 1), ("cba", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Rotation.setDescription("The phase rotation measured at the source 2 input of the ATS.\n-1 if not available.")
xATSSource2TableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2TableSize.setDescription("The number of input voltage entries at the source 2 input of the ATS.")
xATSSource2PhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7))
if mibBuilder.loadTexts: xATSSource2PhaseTable.setDescription("A list of voltage table entries for the source 2. The number of\nentries are the phase entries. The number of entries is contained in the\nxATSSource2TableSize OID.")
xATSSource2PhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSource2Index"))
if mibBuilder.loadTexts: xATSSource2PhaseEntry.setDescription("An entry containing information applicable to a\nparticular input voltage phase at the source 2 input of the ATS.")
xATSSource2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2Index.setDescription("Description of each phase utilized at the source 2.")
xATSSource2VoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2VoltageLtoL.setDescription("Source 2 line-to-line input voltage. \nMeasured in tenths of Volts.")
xATSSource2VoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSource2VoltageLtoN.setDescription("Source 2 line-to-neutral input voltage. \nMeasured in tenths of Volts. -1 for a 3-wire service type.")
xATSSystemOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3))
xATSSystemOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputFrequency.setDescription("The system output frequency in tenths of Hertz.")
xATSSystemOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalPower.setDescription("Shows the total system output power in tenths of kW.")
xATSSystemOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalApparentPower.setDescription("Shows the total system output power in tenths of kVA.")
xATSSystemOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTotalPowerFactor.setDescription("Indicates the total power factor of the system output.\nA value of 100 representing a unity power factor (1.00)\nSpecified in hundredths.")
xATSSystemOutputFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(7,5,8,1,4,2,6,9,10,3,)).subtype(namedValues=NamedValues(("freqToleranceOff", 1), ("freqToleranceNine", 10), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputFrequencyTolerance.setDescription("Shows the panel output frequency tolerance in +/- Hertz.")
xATSSystemOutputOverVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputOverVoltThreshold.setDescription("Threshold above which an output over voltage condition will be generated. \nSpecified as tenths of percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.")
xATSSystemOutputUnderVoltThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputUnderVoltThreshold.setDescription("Threshold below which an output under voltage condition will be generated. \nSpecified as tenths of percent deviation from nominal.\nA value of zero indicates that the threshold is disabled.")
xATSSystemOutputOverCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputOverCurrentThreshold.setDescription("Threshold above which an over current condition will be generated. \nSpecified as a percent of the transfer switch rating (xATSDeviceTransferSwitchRating OID).\nA value of zero indicates that the threshold is disabled.")
xATSSystemOutputUnderCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputUnderCurrentThreshold.setDescription("Threshold below which an under current condition will be generated. \nSpecified as a percent of the transfer switch rating (xATSDeviceTransferSwitchRating OID).\nA value of zero indicates that the threshold is disabled.")
xATSSystemOutputAlarmDelayThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSSystemOutputAlarmDelayThreshold.setDescription("Delay the generation of an output alarm.\nSpecified in seconds.")
xATSSystemOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputTableSize.setDescription("The number of system output phase entries.")
xATSSystemOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12))
if mibBuilder.loadTexts: xATSSystemOutputPhaseTable.setDescription("A list of system output table entries.\nThe number of entries is contained in the xATSSystemOutputTableSize OID.")
xATSSystemOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1)).setIndexNames((0, "PowerNet-MIB", "xATSSystemOutputPhaseIndex"))
if mibBuilder.loadTexts: xATSSystemOutputPhaseEntry.setDescription("An entry containing information applicable to a \nparticular system output phase.")
xATSSystemOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPhaseIndex.setDescription("Description of each system output phase utilized in this device.")
xATSSystemOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputVoltageLtoL.setDescription("Line-to-line system output voltage available at the circuit panel. \nMeasured in tenths of Volts. -1 if not available.")
xATSSystemOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputVoltageLtoN.setDescription("Line-to-neutral system output voltage available at the circuit panel.\nMeasured in tenths of Volts. -1 for a 3-wire service type or if not available.")
xATSSystemOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPhaseCurrent.setDescription("System load current per phase. Measured in Amps.\n-1 if not available.")
xATSSystemOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPower.setDescription("System output power per phase. Measured in tenths of kW.")
xATSSystemOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputApparentPower.setDescription("system output power per phase. Measured in tenths of kVA.")
xATSSystemOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSSystemOutputPowerFactor.setDescription("indicates the power factor of the system output per phase.\nA value of 100 representing a unity power factor (1.00).\nMeasured in hundredths.")
xATSTesting = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5))
xATSTestingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1))
xATSTestingStatusSelectTestProcess = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,)).subtype(namedValues=NamedValues(("engineStartTest", 1), ("systemLoadTest", 2), ("generatorHoldTest", 3), ("cancelTest", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusSelectTestProcess.setDescription("Type of tests that can be selected when no test has been scheduled.\nengineStartTest and systemLoadTest may be selected when no tests \nare running.  Tests that are selected may be canceled manually.")
xATSTestingStatusTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(8,9,4,3,2,7,5,6,10,1,)).subtype(namedValues=NamedValues(("noTestInProcess", 1), ("holdingOnGenerator", 10), ("testPending", 2), ("startingEngine", 3), ("engineWarmingUp", 4), ("awaitingTransferToS2", 5), ("testingWithLoad", 6), ("awaitingRetransferToS1", 7), ("testingWithoutLoad", 8), ("stoppingEngine", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingStatusTestStatus.setDescription("The present system test status/state.")
xATSTestingStatusProfileWarmupTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileWarmupTime.setDescription("The amount of time that the generator will warm up during a test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value engineWarmingUp.\nSpecified in seconds.")
xATSTestingStatusProfileLoadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileLoadedTime.setDescription("The amount of time that ATS will apply the system load to the generator\nduring a system load test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value testingWithLoad.\nSpecified in minutes.")
xATSTestingStatusProfileUnloadedTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingStatusProfileUnloadedTime.setDescription("The amount of time that the generator will run following the warm up \nportion of a start test, or the loaded portion of a load test.\nThis is portion of the test when the xATSTestingStatusTestStatus \nOID returns the value testingWithoutLoad.\nSpecified in seconds.")
xATSTestingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2))
xATSTestingResultsLastDateOfTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastDateOfTest.setDescription("Date of the last test that was performed, either scheduled or manual.\nTest results are available in the xATSTestingResultsLastResult OID.\nSpecified in the dd/mm/yyyy format, or 'none' if not available.")
xATSTestingResultsLastResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(9,11,13,10,12,16,7,2,18,5,19,15,3,8,1,17,14,4,6,)).subtype(namedValues=NamedValues(("noResultsAvailable", 1), ("genFailedDuringWarmup", 10), ("failureOnXferToS1", 11), ("genFailedLoaded", 12), ("failureOnRexferToS2", 13), ("failedOnCooldown", 14), ("genFailedToStop", 15), ("failedAtsInternalFault", 16), ("failedAtsNotInAuto", 17), ("canceledManualTest", 18), ("canceledScheduledTest", 19), ("startTestPassed", 2), ("loadTestPassed", 3), ("startSignalFailure", 4), ("failedGenNotInAuto", 5), ("failedGenEmerStop", 6), ("failedGenShutdown", 7), ("failedGenDidNotStart", 8), ("failedS2NeverGood", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastResult.setDescription("The result of the last ATS/generator system test.")
xATSTestingResultsTestLastTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsTestLastTestTime.setDescription("Time of day at which the last test was performed, either scheduled or manual. \nTest results are available in the xATSTestingResultsLastResult OID.\nSpecified in the hh:mm:ss format, or 'none' if not available.")
xATSTestingResultsLastCrankDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastCrankDuration.setDescription("The time spent cranking the generator before it started during the last test.\nSpecified in seconds, or -1 if not available.")
xATSTestingResultsLastWarmupDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastWarmupDuration.setDescription("The time spent in the engineWarmingUp state during the last system test.\nSpecified in seconds, or -1 if not available.")
xATSTestingResultsLastLoadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastLoadedDuration.setDescription("The time spent in the testingWithLoad state during the last system test.\nSpecified in seconds, or -1 if not available.")
xATSTestingResultsLastUnloadedDuration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingResultsLastUnloadedDuration.setDescription("The time spent in the testingWithoutLoad state during the last system test.\nSpecified in seconds, or -1 if not available.")
xATSTestingSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3))
xATSTestingScheduleFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,1,2,)).subtype(namedValues=NamedValues(("never", 1), ("daily", 2), ("weekly", 3), ("monthly", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleFrequency.setDescription("The frequency of running scheduled tests.")
xATSTestingScheduleTestDay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestDay.setDescription("The desired day for the scheduled test. This object applies only\nwhen the xATSTestingScheduleFrequency OID is set to weekly or monthly.\nFor weekly test frequency, the string is the day the test will be run.\nFor monthly test frequency, the string indicates the day, \nand the instance within the month.\nFor example, for monthly frequency: 2nd Sunday, 3rd Monday, 4th Tuesday,\n             for weekly frequency: Sunday, Monday, Tuesday.")
xATSTestingScheduleTestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestTime.setDescription("The time of day that the scheduled test will occur.\nSpecified in the format hh:mm.")
xATSTestingScheduleTestWithLoadInterval = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,3,1,)).subtype(namedValues=NamedValues(("applyLoadEveryTest", 1), ("neverApplyLoad", 2), ("applyLoadMonthly", 3), ("applyLoadMonthlyDetailed", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestWithLoadInterval.setDescription("This setting specifies which system tests should include applying the\nload to the generator. The applyLoadMonthlyDetailed entry\nin the list will apply load once, for each month represented in the\nxATSTestingScheduleTestWithLoadSelectMonth OID.")
xATSTestingScheduleTestWithLoadSelectMonth = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingScheduleTestWithLoadSelectMonth.setDescription("The detailed selection for testing with load on a month-by-month basis.\nThis object is applicable when the xATSTestingScheduleTestWithLoadInterval\nis set to applyLoadMonthlyDetailed. Otherwise this selection will be ignored.\nFormat for this string is a comma-separated entry of months.\nFor example: Jan,Mar,Dec.\nThe string will return 'No Months Scheduled' if no months have been selected.")
xATSTestingScheduleNextTestDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingScheduleNextTestDate.setDescription("The date of the next scheduled test, in the format dd-mmm-yyyy.")
xATSTestingSimulatePowerFail = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4))
xATSTestingSimulatePowerFailTest = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(5,7,8,4,6,2,3,1,)).subtype(namedValues=NamedValues(("cancelSimulation", 1), ("fiveSecondsSimulation", 2), ("tenSecondsSimulation", 3), ("thirtySecondsSimulation", 4), ("oneMinuteSimulation", 5), ("threeMinutesSimulation", 6), ("fiveMinutesSimulation", 7), ("tenMinutesSimulation", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSTestingSimulatePowerFailTest.setDescription("This object executes a simulated power failure for the duration indicated.\nSimulation can be aborted by selecting cancelSimulation.")
xATSTestingSimulatePowerFailTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSTestingSimulatePowerFailTimeRemaining.setDescription("Indicates the time remaining in seconds, for a simulated power failure.\na value of zero indicates that simulated power failure is not active.")
xATSInputContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6))
xATSInputContactNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactNumContacts.setDescription("The number of contacts supported by the ATS.")
xATSInputContactTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactTableSize.setDescription("The number of input contact entries.")
xATSInputContactTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3))
if mibBuilder.loadTexts: xATSInputContactTable.setDescription("A list of contacts supported by the ATS.\nThe number of entries is contained in the \nxATSInputContactTableSize OID.")
xATSInputContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1)).setIndexNames((0, "PowerNet-MIB", "xATSInputContactNumber"))
if mibBuilder.loadTexts: xATSInputContactEntry.setDescription("A contact entry containing information for a given contact.")
xATSInputContactNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactNumber.setDescription("An index identifying the contact on the ATS.")
xATSInputContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSInputContactName.setDescription("The description of the purpose/use of the contact.")
xATSInputContactNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSInputContactNormalState.setDescription("The normal operating position of the contact.")
xATSInputContactCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSInputContactCurrentState.setDescription("This value indicates the current state of the contact.")
xATSOutputRelays = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7))
xATSOutputRelayNumRelays = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayNumRelays.setDescription("The number of output relays supported by the ATS.")
xATSOutputRelayTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayTableSize.setDescription("The number of output relay entries.")
xATSOutputRelayTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3))
if mibBuilder.loadTexts: xATSOutputRelayTable.setDescription("A list of output relays supported by the ATS.\nThe number of entries is contained in the \nxATSOutputRelayTableSize OID.")
xATSOutputRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1)).setIndexNames((0, "PowerNet-MIB", "xATSOutputRelayNumber"))
if mibBuilder.loadTexts: xATSOutputRelayEntry.setDescription("A output relay entry containing information for a given contact.")
xATSOutputRelayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayNumber.setDescription("An index identifying the output relay on the ATS.")
xATSOutputRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSOutputRelayName.setDescription("The description of the purpose/use of the output relay.")
xATSOutputRelayNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSOutputRelayNormalState.setDescription("The normal operating position of the output relay.")
xATSOutputRelayCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSOutputRelayCurrentState.setDescription("This value indicates the current state of the output relay.")
xATSMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 8))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18))
xATSGenerator = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1))
xATSGeneratorIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1))
xATSGeneratorIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentModelNumber.setDescription("A character string identifying the model number of the generator. \nThis value is set at the factory.")
xATSGeneratorIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentSerialNumber.setDescription("A character string identifying the serial number of the generator. \nThis value is set at the factory.")
xATSGeneratorIdentDateofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentDateofManufacture.setDescription("A character string identifying when the generator was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
xATSGeneratorIdentVoltageConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentVoltageConfiguration.setDescription("The voltage for which the generator's alternator is designed.\nSpecified in Volts line-to-line.")
xATSGeneratorIdentMaxPowerRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentMaxPowerRating.setDescription("The max power rating of the generator. Specified in kW.")
xATSGeneratorIdentAlternatorFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorIdentAlternatorFrequency.setDescription("The frequency for which the generator's alternator is designed.\nSpecified in Hertz.")
xATSGeneratorStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2))
xATSGeneratorStatusGeneratorName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorStatusGeneratorName.setDescription("The name or label for the generator connected to the source 2 of the ATS.")
xATSGeneratorStatusOperational = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,7,10,3,2,11,8,5,9,4,)).subtype(namedValues=NamedValues(("nocomm", 1), ("shutdown", 10), ("unknown", 11), ("off", 2), ("ready", 3), ("starting", 4), ("idle", 5), ("running", 6), ("normalStop", 7), ("emergencyStop", 8), ("notInAuto", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusOperational.setDescription("The operational status of the generator. unavailable when unrecognized status is received.")
xATSGeneratorStatusModeSwitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("off", 1), ("manual", 2), ("automatic", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusModeSwitchPosition.setDescription("The position of the generator's auto-mode switch.\nIn automatic mode, the generator is started and stopped via the\nremote start contact, which has state indicated in the\nxATSGeneratorStatusRemoteStart OID.\nIn manual mode generator start/stop control is via local command only.\nOff prevents the generator from running.")
xATSGeneratorStatusRemoteStart = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("stop", 1), ("run", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorStatusRemoteStart.setDescription("The status of the generator's remote start contact, which is \nprovided as an output from the transfer switch to start/stop the \ngenerator when in automatic mode.")
xATSGeneratorAdvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3))
xATSGeneratorAdvStatusBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusBatteryVoltage.setDescription("The voltage of the generator's starting battery.\nMeasured in tenths of VDC, or -1 if not available.")
xATSGeneratorAdvStatusOilPressure = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusOilPressure.setDescription("The generator's engine oil pressure.\nMeasured in tenths of Psi or kPa, based on the\nvalue of the xATSGeneratorSettingsMetricUnit OID,\nor -1 if not available.")
xATSGeneratorAdvStatusCoolantTemperature = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusCoolantTemperature.setDescription("Current coolant temperature in the generator.\nMeasured in degrees Celsius or Fahrenheit, based on the\nvalue of the xATSGeneratorSettingsMetricUnit OID,\nor -1 if not available.")
xATSGeneratorAdvStatusEngineRPM = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusEngineRPM.setDescription("Current engine speed of the generator. \nMeasured in RPM, or -1 if not available.")
xATSGeneratorAdvStatusOilLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusOilLevel.setDescription("Indicates adequate oil level in the generator.")
xATSGeneratorAdvStatusCoolantLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("ok", 1), ("low", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorAdvStatusCoolantLevel.setDescription("Indicates adequate coolant level in the generator.")
xATSGeneratorOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4))
xATSGeneratorOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputFrequency.setDescription("The output frequency of the generator.\nMeasured in tenths of Hertz, or -1 if not available.")
xATSGeneratorOutputTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalPower.setDescription("The total output power of the generator.\nMeasured in tenths of tenths of kW, or -1 if not available.")
xATSGeneratorOutputTotalApparentPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalApparentPower.setDescription("The total output power of the generator.\nMeasured in tenths of kVA, or -1 if not available.")
xATSGeneratorOutputTotalPowerFactor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTotalPowerFactor.setDescription("Indicates the total load power factor of the generator.\nA value of 100 representing a unity power factor (1.00),\nor -1 when if not available.")
xATSGeneratorOutputTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputTableSize.setDescription("The number of generator output phase entries.")
xATSGeneratorOutputPhaseTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6))
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseTable.setDescription("A list of generator output table entries.\nThe number of entries is contained in the xATSGeneratorOutputTableSize OID.")
xATSGeneratorOutputPhaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1)).setIndexNames((0, "PowerNet-MIB", "xATSGeneratorOutputPhaseIndex"))
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseEntry.setDescription("An entry containing information applicable to a \nparticular generator output phase.")
xATSGeneratorOutputPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseIndex.setDescription("Description of each generator output phase utilized in this device.")
xATSGeneratorOutputVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputVoltageLtoL.setDescription("Line-to-line generator output voltage. \nMeasured in Volts, or -1 if not available.")
xATSGeneratorOutputVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputVoltageLtoN.setDescription("Line-to-neutral generator output voltage. \nMeasured in volts, or -1 if not available.")
xATSGeneratorOutputPhaseCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPhaseCurrent.setDescription("Generator load current per phase.\nMeasured in Amps, or -1 if not available.")
xATSGeneratorOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPower.setDescription("Generator output power per phase. \nMeasured in tenths of kW, or -1 if not available.")
xATSGeneratorOutputApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputApparentPower.setDescription("Generator output power per phase. \nMeasured in tenths of kVA, or -1 if not available.")
xATSGeneratorOutputPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorOutputPowerFactor.setDescription("Indicates the load power factor of the generator output per phase.\nA value of 100 representing a unity power factor (1.00),\nor -1 if not available.")
xATSGeneratorSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5))
xATSGeneratorSettingsVoltageAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsVoltageAdjust.setDescription("The voltage adjust of the generator.\nSpecified in volts line-to-line,\nor -1 if not available.")
xATSGeneratorSettingsFrequencyAdjust = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsFrequencyAdjust.setDescription("The frequency adjust of the generator.\nSpecified in tenths of Hertz.")
xATSGeneratorSettingsStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsStartDelay.setDescription("The delay, in seconds, after the remote run signal is activated\nbefore the generator's engine will be cranked to start, \nor -1 if not available.")
xATSGeneratorSettingsStopDelay = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsStopDelay.setDescription("The delay, in seconds, before the generator will stop \nafter the remote run signal is deactivated,\nor -1 if not available.")
xATSGeneratorSettingsCrankCycleEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankCycleEnable.setDescription("When Crank Cycle is enabled, the engine will be cranked up to the time \nspecified by the xATSGeneratorSettingsCrankTime OID. \nIf the generator's engine does not start, there will be a pause as\nspecified by the xATSGeneratorSettingsCrankRestTime OID before the \nengine will be cranked again. This cycle is repeated as specified by\nthe xATSGeneratorSettingsNumberCrank OID.\nWhen crank cycle is disabled, the generator's engine will be \ncranked continuously until it starts.")
xATSGeneratorSettingsCrankTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankTime.setDescription("The duration of engine cranking, in seconds, when starting the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.")
xATSGeneratorSettingsCrankRestTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsCrankRestTime.setDescription("The pause duration, in seconds, following an unsuccessful attempt to start the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.")
xATSGeneratorSettingsNumberCrank = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorSettingsNumberCrank.setDescription("The number of failed crank attempts before giving up on starting the generator. \nApplicable when the xATSGeneratorSettingsCrankCycleEnable OID is enabled.\n-1 if not available.")
xATSGeneratorSettingsMetricUnit = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorSettingsMetricUnit.setDescription("Specifies the use of metric units in generator related OIDs, as well\nas on all other interfaces including the generator's local interface.")
xATSGeneratorService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6))
xATSGeneratorServiceTotalRunHoursLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalRunHoursLifetime.setDescription("Total time that the generator engine has been run,\nover the life of the generator. Measured in hours.\n-1 if not available.")
xATSGeneratorServiceEngineStartsLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceEngineStartsLifetime.setDescription("Number of engine starts over the life of the generator.\n-1 if not available.")
xATSGeneratorServiceTotalkWhLifetime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalkWhLifetime.setDescription("Total kWh of operation over the life of the generator.\n-1 if not available.")
xATSGeneratorServiceTotalRunHoursSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalRunHoursSinceMaintenance.setDescription("Total time that the generator engine has been run,\nsince last service maintenance. Measured in tenths of hours.\n-1 if not available.")
xATSGeneratorServiceEngineStartsSinceMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceEngineStartsSinceMaintenance.setDescription("Number of engine starts since last service maintenance.\n-1 if not available.")
xATSGeneratorServiceTotalkWhMaintenance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceTotalkWhMaintenance.setDescription("Total kWh of operation since last service maintenance.\n-1 if not available.")
xATSGeneratorServiceResetRecord = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceResetRecord.setDescription("Resets the engine start counter, engine run-hours, and kWh values that have\naccumulated in the generator since last maintenance.\nAlso, the last service date will be reset to the current system date, and \nany service alarms will be cleared.")
xATSGeneratorServiceRecordResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceRecordResetDate.setDescription("Date at which the generator's service record was reset, in dd-mmm-yyyy format.")
xATSGeneratorServiceNextServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceNextServiceDate.setDescription("Date at which the next generator service is due in dd-mmm-yyyy format. \nBased on the xATSGeneratorServiceCalendarIntervalThreshold OID \nor '' if the calendar-based threshold is set to off.")
xATSGeneratorServiceRunHoursUntilServiceDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorServiceRunHoursUntilServiceDate.setDescription("Run hours until the next generator service is due, in hours. \nBased on the xATSGeneratorServiceRunHoursThreshold OID \nor -1 if the run hour-based threshold is set to off.")
xATSGeneratorServiceRunHoursThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,6,2,3,5,8,7,)).subtype(namedValues=NamedValues(("disabled", 1), ("runThreshold100Hours", 2), ("runThreshold150Hours", 3), ("runThreshold200Hours", 4), ("runThreshold250Hours", 5), ("runThreshold300Hours", 6), ("runThreshold400Hours", 7), ("runThreshold500Hours", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceRunHoursThreshold.setDescription("Run hour-based service interval. When the run-hours since\nservice surpasses this threshold, generator service is due.")
xATSGeneratorServiceCalendarIntervalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(5,4,6,1,2,3,)).subtype(namedValues=NamedValues(("disabled", 1), ("interval1month", 2), ("interval2month", 3), ("interval3month", 4), ("interval6month", 5), ("intervalyearly", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorServiceCalendarIntervalThreshold.setDescription("Calendar-based service interval. When the next service date, \nas indicated by the xATSGeneratorServiceNextServiceDate OID\nis in the past, generator is due for service.")
xATSGeneratorFuelSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7))
xATSGeneratorFuelSystemType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("diesel", 1), ("propane", 2), ("naturalGas", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemType.setDescription("The type of fuel used by the generator.")
xATSGeneratorFuelSystemTankSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemTankSize.setDescription("Size of the generator's fuel tank.\nSpecified in gallons or liters, based on the value of the\nxATSGeneratorSettingsMetricUnit OID, or -1 if not available.")
xATSGeneratorFuelSystemFuelLevel = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemFuelLevel.setDescription("Fuel remaining in the generator tank.\nMeasured in percent of tank fill, or -1 if not available.")
xATSGeneratorFuelSystemRuntimePower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemRuntimePower.setDescription("The power value used in the runtime remaining calculation.\nMeasured in tenths of kW, or -1 if not available.")
xATSGeneratorFuelSystemEstimatedRunTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemEstimatedRunTime.setDescription("An estimate of available runtime for the generator, based on\navailable fuel as specified in the xATSGeneratorFuelSystemFuelLevel OID \nand kW load as specified in the xATSGeneratorFuelSystemRuntimePower OID.\nMeasured in tenths of hours, or -1 if not available.")
xATSGeneratorFuelSystemLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(7,14,11,2,10,4,6,1,13,3,8,5,15,9,12,)).subtype(namedValues=NamedValues(("disabled", 1), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemLowRunTimeThreshold.setDescription("Threshold below which a low runtime alarm will exist.")
xATSGeneratorFuelSystemVeryLowRunTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(7,14,11,2,10,4,6,1,13,3,8,5,15,9,12,)).subtype(namedValues=NamedValues(("disabled", 1), ("twoDays", 10), ("threeDays", 11), ("fourDays", 12), ("fiveDays", 13), ("sixDays", 14), ("sevenDays", 15), ("oneHour", 2), ("twoHours", 3), ("threeHours", 4), ("fourHours", 5), ("fiveHours", 6), ("sixHours", 7), ("twelveHours", 8), ("oneDay", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemVeryLowRunTimeThreshold.setDescription("Threshold below which a very low runtime alarm will exist.")
xATSGeneratorFuelSystemLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemLowFuelLevelThreshold.setDescription("Threshold below which a low fuel alarm will exist, with a value of 0 indicating disabled. \nSpecified as percent of tank fill.")
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xATSGeneratorFuelSystemVeryLowFuelLevelThreshold.setDescription("Threshold below which a very low fuel alarm will exist, with a value of 0 indicating disabled.\nSpecified as percent of tank fill.")
consolePortServer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19))
cpsAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1))
cpsAP930xSys = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1))
apCPSpname = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSpname.setDescription("The product's name.")
apCPSversion = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSversion.setDescription("The firmware's version.")
apCPSPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3))
apCPSPwNum = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPwNum.setDescription("The number of the power supplies.")
apCPSPw1 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPw1.setDescription("State of the first power supply. \n0 will indicate not installed,\n1 will indicate power ON,\n2 will indicate power OFF.")
apCPSPw2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSPw2.setDescription("State of the second power supply.\n0 will indicate not installed,\n1 will indicate power ON,\n2 will indicate power OFF.")
apCPSPcmcia = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4))
apCPSNPcmcia = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSNPcmcia.setDescription("Number of PCMCIA cards available.")
cpsCardIdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2))
if mibBuilder.loadTexts: cpsCardIdentTable.setDescription("A table of PCMCIA card identifications.")
cpsCardIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "cpsCardIdentIndex"))
if mibBuilder.loadTexts: cpsCardIdentEntry.setDescription("Identification information for a PCMCIA card.")
cpsCardIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentIndex.setDescription("Number to identify the socket Card.")
cpsCardIdentProd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentProd.setDescription("Product identification string.")
cpsCardIdentMan = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentMan.setDescription("Manufacturer ID code.")
cpsCardIdentFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentFunc.setDescription("Function ID code.")
cpsCardIdentPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardIdentPCI.setDescription("PCI ID")
cpsCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3))
if mibBuilder.loadTexts: cpsCardConfTable.setDescription("A table of socket configuration information.")
cpsCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "cpsCardConfIndex"))
if mibBuilder.loadTexts: cpsCardConfEntry.setDescription("Configuration information for a socket.")
cpsCardConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfIndex.setDescription("Number to identify the socket PCMCIA.")
cpsCardConfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPower.setDescription("Power Settings.")
cpsCardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfType.setDescription("Interface Type.")
cpsCardConfInter = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfInter.setDescription("Interrupt number.")
cpsCardConfFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfFunc.setDescription("Function.")
cpsCardConfCardv = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfCardv.setDescription("Card values.")
cpsCardConfPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPort1.setDescription("I/O Port 1.")
cpsCardConfPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardConfPort2.setDescription("I/O Port 2.")
cpsCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4))
if mibBuilder.loadTexts: cpsCardStatusTable.setDescription("A table of current socket status information.")
cpsCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1)).setIndexNames((0, "PowerNet-MIB", "cpsCardStatusIndex"))
if mibBuilder.loadTexts: cpsCardStatusEntry.setDescription("Current status information for a socket.")
cpsCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusIndex.setDescription("Number to identify the socket PCMCIA.")
cpsCardStatusCard = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusCard.setDescription("Current Card State.")
cpsCardStatusFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsCardStatusFunc.setDescription("Current Function.")
apCPSFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSFlashSize.setDescription("Total amount of flash memory in Mbytes.")
apCPSRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSRAMSize.setDescription("Total amount of RAM in Mbytes.")
apCPSCPUfreq = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSCPUfreq.setDescription("CPU clock in MHz.")
apCPSDevId = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apCPSDevId.setDescription("The product's identifier.")
cpsAP930xConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2))
cpsHostName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsHostName.setDescription("The Host Name.")
cpsConsoleBanner = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsConsoleBanner.setDescription("The console banner.")
cpsMotd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsMotd.setDescription("The motd message.")
cpsEthItf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4))
cpsEthDhcpc = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthDhcpc.setDescription("0 will indicate DHCP inactive,\n1 will indicate DHCP active,\n2 will indicate DHCP active and the last parameter is saved.")
cpsEthIPaddr = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPaddr.setDescription("This is the IP address of the Ethernet Interface.")
cpsEthIPmask = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPmask.setDescription("The mask for the Ethernet network.")
cpsEthMTU = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthMTU.setDescription("The Maximum Transmission Unit size, which determines \nwhether packets should be broken up.")
cpsEthIPaddr2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPaddr2.setDescription("The Ethernet secondary IP address.")
cpsEthIPmask2 = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsEthIPmask2.setDescription("The Ethernet secondary IP mask.")
cpsNameService = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5))
cpsResolverOrder = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsResolverOrder.setDescription("Specifies how host lookups are to be performed.\nValid values : empty, 'hosts', 'bind', 'hosts, bind', \n'bind, hosts' ")
cpsMultipleIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsMultipleIP.setDescription("Valid values are ON or OFF. If set to ON, the resolve \nlibrary will return all valid addresses for a host \nthat appears in the /etc/hosts file, instead of only \nthe first.  ")
cpsDNSserv = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3))
cpsDNSpriserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSpriserv.setDescription("Internet Address (in dot notation) of primary name \nserver that the resolver should query.")
cpsDNSsecserv = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSsecserv.setDescription("Internet Address (in dot notation) of secondary name \nserver that the resolver should query.")
cpsDNSdomain = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsDNSdomain.setDescription("Local domain name.")
cpsSerialPortConf = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6))
cpsSerialGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1))
cpsSerialInclude = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialInclude.setDescription("File used in centralized management.")
cpsSerialNFS = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialNFS.setDescription("Remote Network File System where data buffering will be \nwritten instead of the default directory '/var/run/DB'.")
cpsSerialLockDir = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialLockDir.setDescription("The lock directory.")
cpsSerialRlogin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialRlogin.setDescription("Location of the rlogin binary that accepts the -i flag.")
cpsSerialPppd = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPppd.setDescription("Location of the pppd binary.")
cpsSerialTelnet = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialTelnet.setDescription("Location of the telnet application.")
cpsSerialSsh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialSsh.setDescription("Location of the ssh application.")
cpsSerialLocalLogins = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialLocalLogins.setDescription("This parameter is only necessary when authentication is \nbeing performed for a port.\nThis is useful if the Radius authentication server is down.\n0 indicates OFF,\n1 indicates ON.")
cpsSerialFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialFacility.setDescription("This value (0-7) is the Local facility sent to the syslog daemon.")
cpsSerialDBFacility = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialDBFacility.setDescription("This value (0-7) is the Local facility sent to the syslog daemon.")
cpsSerialGroupTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11))
if mibBuilder.loadTexts: cpsSerialGroupTable.setDescription("")
cpsSerialGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1)).setIndexNames((0, "PowerNet-MIB", "cpsSerialGroupIndex"))
if mibBuilder.loadTexts: cpsSerialGroupEntry.setDescription("")
cpsSerialGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSerialGroupIndex.setDescription("Number to identify the group.")
cpsSerialGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialGroupName.setDescription("The group name.")
cpsSerialGroupUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialGroupUsers.setDescription("The user's names.")
cpsSerialSpec = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2))
cpsSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1))
if mibBuilder.loadTexts: cpsSerialPortTable.setDescription("This is the specific configuration per serial port.")
cpsSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "cpsSerialPortNumber"))
if mibBuilder.loadTexts: cpsSerialPortEntry.setDescription("One particular serial port configuration.")
cpsSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSerialPortNumber.setDescription("Number to identify the serial port. Value 0 is ALL.")
cpsSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTty.setDescription("The device name for the serial port.")
cpsSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortName.setDescription("Alias name given to the server connected to the serial port.")
cpsSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSpeed.setDescription("The speed of the serial port.\nSupported values are: \n 50, 75, 110, 134, 150, 200, 300, 600, \n 1200, 1800, 2400, 4800, 9600, 14400, 19200, \n 28800, 38400, 57600, 115200, 230400,  and 460800")
cpsSerialPortDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDataSize.setDescription("The data size for the serial port.")
cpsSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortStopBits.setDescription("The number of stop bits for the serial port.")
cpsSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortParity.setDescription("The parity for the serial port.")
cpsSerialPortFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortFlowCtrl.setDescription("The flow control for the serial port.")
cpsSerialPortDTRdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDTRdelay.setDescription("This specifies how long (in milliseconds) a DTR signal\nwill be turned off before it is turned on again.")
cpsSerialPortDCDCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDCDCtrl.setDescription("DCD signal controls the connection request.\n0 will indicate nocontrol,\n1 will indicate control.")
cpsSerialPortLogUtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogUtmp.setDescription("Update the login records in /var/run/utmp file.\n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortLogWtmp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogWtmp.setDescription("Update the login records in /var/run/wtmp file.\n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortLogform = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLogform.setDescription("This is the format to write the login record.")
cpsSerialPortAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthtype.setDescription("Authentication type.")
cpsSerialPortAuthSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSrv1.setDescription("IP address of the primary authentication server.")
cpsSerialPortAccSrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAccSrv1.setDescription("IP address of the primary accounting server.")
cpsSerialPortAuthTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthTmo.setDescription("This is the timeout (in seconds) for the authentication \nquery to be answered.")
cpsSerialPortAuthRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthRetr.setDescription("This defines the number of times each server is tried \nbefore another is contacted.")
cpsSerialPortAuthSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSrv2.setDescription("IP address of the secondary authentication server.")
cpsSerialPortAccSrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAccSrv2.setDescription("IP address of the secondary accounting server.")
cpsSerialPortAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthSecret.setDescription("This is the shared secret with authentication servers.")
cpsSerialPortAuthRadP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthRadP.setDescription("Radius state.\n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortAuthAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAuthAcc.setDescription("Access restriction.")
cpsSerialPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortProtocol.setDescription("Defines the serial port's protocol.")
cpsSerialPortRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortRemoteIP.setDescription("This is the default IP address of the serial port.")
cpsSerialPortSocketPort = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSocketPort.setDescription("This defines an alternative labeling system for the serial port.")
cpsSerialPortRemHost = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortRemHost.setDescription("The IP address of the host to which the serial port will connect.")
cpsSerialPortBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortBanner.setDescription("This defines the banner.")
cpsSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPrompt.setDescription("This defines the login prompt to the serial port.")
cpsSerialPortTermType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTermType.setDescription("This defines the terminal type.")
cpsSerialPortAutomUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutomUsr.setDescription("This defines the automatic user.")
cpsSerialPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortNetMask.setDescription("The network mask used in dial in connection.")
cpsSerialPortPppMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppMtu.setDescription("The PPP MTU - dial in connection.")
cpsSerialPortPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppMru.setDescription("The PPP MRU - dial in connection.")
cpsSerialPortPppOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 35), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppOptions.setDescription("The PPP options when the PPP session is autodetected.")
cpsSerialPortPppFoption = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortPppFoption.setDescription("The PPP forced options when the user has already been authenticated.")
cpsSerialPortModemChat = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 37), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortModemChat.setDescription("The initchat send to modem connected.")
cpsSerialPortSttyCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSttyCmd.setDescription("The tty settings after socket connection is established.")
cpsSerialPortSockTx = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockTx.setDescription("Defines the delay (in milliseconds) before transmission to\nthe Ethernet of data received through a serial port.")
cpsSerialPortSockPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockPoll.setDescription("Keep-alive timer (milliseconds) for the TCP connection.")
cpsSerialPortSockIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSockIdle.setDescription("The idle timeout in seconds.")
cpsSerialPortDBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBsize.setDescription("Maximum size of the data buffering file.")
cpsSerialPortDBtime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBtime.setDescription("Timestamp in data buffering. \n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortDBmode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBmode.setDescription("Data buffering mode : circ or line.")
cpsSerialPortDBsyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBsyslog.setDescription("Size of the data buffer sent to syslog.")
cpsSerialPortDBmenu = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBmenu.setDescription("Menu type for data buffering.\n0 will indicate display Menu,\n1 will indicate inactive,\n2 will indicate DB,\n3 will indicate Parc.")
cpsSerialPortDBalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortDBalarm.setDescription("Alarm generation status.\n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortSSHbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSSHbreak.setDescription("Break sequence - ssh session.")
cpsSerialPortSniffSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffSess.setDescription("Sniff session type.")
cpsSerialPortSniffAdm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffAdm.setDescription("List of admin users allowed to sniff session.")
cpsSerialPortSniffEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffEsc.setDescription("Escape sequence used in sniff session.")
cpsSerialPortSniffMsess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSniffMsess.setDescription("")
cpsSerialPortTelnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortTelnetMode.setDescription("Mode negotiated by client telnet with the server.\n0 will indicate text,\n1 will indicate binary.")
cpsSerialPortSysBufSess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortSysBufSess.setDescription("Syslog Buffering at all times.\n0 will indicate yes,\n1 will indicate no.")
cpsSerialPortLFSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortLFSuppress.setDescription("LF suppression in socket_server session.\n0 will indicate inactive,\n1 will indicate active.")
cpsSerialPortAutoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutoInput.setDescription("Input string used for auto answer.")
cpsSerialPortAutoOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortAutoOutput.setDescription("Output string used for auto answer.")
cpsSerialPortBreakInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSerialPortBreakInterval.setDescription("The break interval in milliseconds.")
cpsAP930xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3))
cpsInfoSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1))
if mibBuilder.loadTexts: cpsInfoSerialPortTable.setDescription("This is the information of the specific serial port.")
cpsInfoSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1)).setIndexNames((0, "PowerNet-MIB", "cpsInfoSerialPortNumber"))
if mibBuilder.loadTexts: cpsInfoSerialPortEntry.setDescription("One particular serial port.")
cpsInfoSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortNumber.setDescription("Number to identify the serial port.")
cpsInfoSerialPortTty = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortTty.setDescription("The device name for the serial port.")
cpsInfoSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortName.setDescription("Alias name given to the server connected to the serial port.")
cpsInfoSerialPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSpeed.setDescription("The speed for serial port.")
cpsInfoSerialPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortTxBytes.setDescription("The number of transmitted bytes by the serial port.")
cpsInfoSerialPortRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortRXBytes.setDescription("The number of received bytes by the serial port.")
cpsInfoSerialPortErrFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrFrame.setDescription("The number of frame errors.")
cpsInfoSerialPortErrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrParity.setDescription("The number of parity errors.")
cpsInfoSerialPortErrBreaks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrBreaks.setDescription("The number of breaks errors.")
cpsInfoSerialPortErrOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortErrOverrun.setDescription("The number of overrun errors.")
cpsInfoSerialPortSigDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigDTR.setDescription("The state of the DTR signal.\n0 will indicate down,\n1 will indicate up.")
cpsInfoSerialPortSigCD = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigCD.setDescription("The state of the DCD signal.\n0 will indicate down,\n1 will indicate up.")
cpsInfoSerialPortSigDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigDSR.setDescription("The state of the DSR signal.\n0 will indicate down,\n1 will indicate up.")
cpsInfoSerialPortSigRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigRTS.setDescription("The state of the RTS signal.\n0 will indicate down,\n1 will indicate up.")
cpsInfoSerialPortSigCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigCTS.setDescription("The state of the CTS signal.\n0 will indicate down,\n1 will indicate up.")
cpsInfoSerialPortSigRI = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsInfoSerialPortSigRI.setDescription("The state of the RI signal.\n0 will indicate down,\n1 will indicate up.")
cpsAP930xAdm = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4))
apCPSSave = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCPSSave.setDescription("Exec saveconf command.\n0 will indicate don't save,\n1 will indicate save.")
apCPSSerialHUP = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCPSSerialHUP.setDescription("Exec signal_ras hup command.\n0 will indicate no restart,\n1 will indicate restart.")
accessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20))
accessPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1))
accessPXIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1))
accessPXIdentAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentAlarmStatus.setDescription("Access PX alarm status\n1 = Normal\n2 = Warning\n3 = Critical.")
accessPXIdentProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentProductNumber.setDescription("The product number of the Access PX.")
accessPXIdentHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentHardwareRev.setDescription("The hardware revision number of the Access PX.")
accessPXIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentDateOfManufacture.setDescription("The date of manufacture of the Access PX.")
accessPXIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXIdentSerialNumber.setDescription("The serial number of the Access PX.")
accessPXConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2))
accessPXConfigCardReaderEnableDisableAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enable", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigCardReaderEnableDisableAction.setDescription("Action to disable/enable the card reader.")
accessPXConfigAutoRelockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigAutoRelockTime.setDescription("Time (10 - 60) in seconds when the door will automatically relock\nafter it has been unlocked and the handle has not been opened.")
accessPXConfigCardFormat = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,4,2,1,)).subtype(namedValues=NamedValues(("hidStd26", 1), ("hid37Bit", 2), ("hid37BitWithFacility", 3), ("hidCorp1000", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigCardFormat.setDescription("Indicates and controls the HID card format.\nNOTE: This OID is only valid for HID systems.")
accessPXConfigFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3))
accessPXConfigFrontDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,4,)).subtype(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigFrontDoorLockControl.setDescription("Control action (unlock, lock) for the front door. Setting this OID \nwill unlock or lock the front door.  Getting this OID will respond \nwith the current state of the front door lock which could be \n1 = unlocked,\n2 = locked,   \n3 = not installed,\n4 = disconnected.")
accessPXConfigFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigFrontDoorMaxOpenTime.setDescription("Time in minutes, (1 - 120), that the front door can be \nallowed to remain open without generating an alarm condition.")
accessPXStatusFront = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4))
accessPXStatusFrontDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorLock.setDescription("Present state of the front door lock: unlocked, locked,\nnot installed, or disconnected.")
accessPXStatusFrontDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoor.setDescription("Present state of the front door: open, closed,\nnot installed, or disconnected.")
accessPXStatusFrontDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorHandle.setDescription("Present state of the front door handle: open, closed,\nnot installed, or disconnected.")
accessPXStatusFrontDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorMaxOpenTime.setDescription("Time in minutes, (1 - 120), that the front door can be \nallowed to remain open without generating an alarm condition.")
accessPXStatusFrontDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusFrontDoorAlarmStatus.setDescription("Front door alarm status\n1 = Normal\n2 = Warning\n3 = Critical\n4 = Front door not installed.")
accessPXConfigRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5))
accessPXConfigRearDoorLockControl = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,4,)).subtype(namedValues=NamedValues(("unlock", 1), ("lock", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigRearDoorLockControl.setDescription("Control action (unlock, lock) for the rear door. Setting this OID \nwill unlock or lock the rear door.  Getting this OID will respond \nwith the current state of the rear door lock which could be \n1 = unlocked,\n2 = locked,\n3 = not installed,\n4 = disconnected.")
accessPXConfigRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigRearDoorMaxOpenTime.setDescription("Time in minutes, (1 - 120), that the rear door can be \nallowed to remain open without generating an alarm condition.")
accessPXStatusRear = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6))
accessPXStatusRearDoorLock = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorLock.setDescription("Present state of the rear door lock: unlocked, locked,\nnot installed, or disconnected.")
accessPXStatusRearDoor = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoor.setDescription("Present state of the rear door: open, closed, \nnot installed, or disconnected.")
accessPXStatusRearDoorHandle = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,4,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorHandle.setDescription("Present state of the rear door handle: open, closed, \nnot installed, or disconnected.")
accessPXStatusRearDoorMaxOpenTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorMaxOpenTime.setDescription("Time in minutes, (1 - 120), that the rear door can be \nallowed to remain open without generating an alarm condition.")
accessPXStatusRearDoorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusRearDoorAlarmStatus.setDescription("Rear door alarm status\n1 = Normal\n2 = Warning\n3 = Critical\n4 = Rear door not installed.")
accessPXConfigBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7))
accessPXConfigBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconName.setDescription("A descriptive name for the Beacon.")
accessPXConfigBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconLocation.setDescription("A descriptive name for the location of the Beacon.")
accessPXConfigBeaconAction = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,1,)).subtype(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("notInstalledReadOnly", 3), ("disconnectedReadOnly", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessPXConfigBeaconAction.setDescription("Control action (turnOff, turnOn) for the beacon. Setting this OID \nwill turn the beacon off or on.  Getting this OID will respond \nwith the current state which could be \n1 = off,\n2 = on,\n3 = not installed, \n4 = disconnected.")
accessPXStatusBeacon = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8))
accessPXStatusBeaconName = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconName.setDescription("The name of the beacon.")
accessPXStatusBeaconLocation = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconLocation.setDescription("The name of the location of the beacon.")
accessPXStatusBeaconCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ("notInstalled", 3), ("disconnected", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessPXStatusBeaconCurrentState.setDescription("The current state of the beacon: off, on, \nnot installed, or disconnected.")
apcLocalDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21))
apcLocalDisplayIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1))
apcLocalDisplayIdentDisplayType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("noDisplayFound", 1), ("powerviewRM", 2), ("powerviewWW", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentDisplayType.setDescription("Numeric value used to identify the type of display in use.")
apcLocalDisplayIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentModelNumber.setDescription("The model number of the local display.")
apcLocalDisplayIdentFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentFirmwareRev.setDescription("The firmware revision number of the local display.")
apcLocalDisplayIdentOptions = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentOptions.setDescription("A display-specific string identifying options in the local display.")
apcLocalDisplayIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentDateOfManufacture.setDescription("The date of manufacture of the local display, if available.")
apcLocalDisplayIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apcLocalDisplayIdentSerialNumber.setDescription("The serial number of the local display, if available.")
apcLocalDisplayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2))
apcLocalDisplayConfigAlarmBeeper = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("beeperDisabled", 1), ("beeperEnabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigAlarmBeeper.setDescription("The alarm beeper setting for the local display. \nWhen enabled, the alarm beeper will begin to sound whenever \nthere a new alarm becomes active. The alarm beeper will continue to \nperiodically sound until a key is pressed on the display.")
apcLocalDisplayConfigBeeperVolume = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,4,1,)).subtype(namedValues=NamedValues(("beeperDisabled", 1), ("beeperLow", 2), ("beeperMedium", 3), ("beeperHigh", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigBeeperVolume.setDescription("The volume setting of the beeper on the local display.")
apcLocalDisplayConfigCheckLogIndicator = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,4,1,5,3,)).subtype(namedValues=NamedValues(("checklogNotPresent", 1), ("checklogDisabled", 2), ("checklogInformational", 3), ("checklogWarning", 4), ("checklogCritical", 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigCheckLogIndicator.setDescription("The minimum level event severity level required to illuminate \nthe check log light on the local display.\nnotPresent (1) indicates that the display does not have a check log light.")
apcLocalDisplayConfigKeyClick = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("keyclickDisabled", 1), ("keyclickEnabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigKeyClick.setDescription("The key click setting of the local display.")
apcLocalDisplayConfigContrast = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(8,3,2,1,7,6,5,4,)).subtype(namedValues=NamedValues(("contrast1", 1), ("contrast2", 2), ("contrast3", 3), ("contrast4", 4), ("contrast5", 5), ("contrast6", 6), ("contrast7", 7), ("contrast8", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apcLocalDisplayConfigContrast.setDescription("The contrast level of the local display.")
isxModularDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22))
isxModularDistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1))
isxModularDistInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoTableSize.setDescription("The number of entries in the isxModularDistInfoTable.")
isxModularDistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2))
if mibBuilder.loadTexts: isxModularDistInfoTable.setDescription("Allows for getting information about the modular\ndistribution metering equipment.")
isxModularDistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistInfoSegmentIndex"))
if mibBuilder.loadTexts: isxModularDistInfoEntry.setDescription("An entry containing information about an individual metering segment.")
isxModularDistInfoSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoSegmentIndex.setDescription("The index of the metering segment.")
isxModularDistInfoMeterModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterModelNumber.setDescription("The model number of the metering board for this segment.")
isxModularDistInfoMeterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterSerialNumber.setDescription("The serial number of the metering board for this segment.")
isxModularDistInfoMeterDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterDateOfManufacture.setDescription("The date of manufacture for the metering board for this segment,\nin the format mm/dd/yyyy.")
isxModularDistInfoMeterFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterFirmwareRev.setDescription("The firmware revision number of the metering board for this segment.")
isxModularDistInfoMeterHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistInfoMeterHardwareRev.setDescription("The hardware revision number of the metering board for this segment.")
isxModularDistModules = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2))
isxModularDistModuleInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoTableSize.setDescription("The number of entries in the isxModularDistModuleInfoTable.")
isxModularDistModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2))
if mibBuilder.loadTexts: isxModularDistModuleInfoTable.setDescription("Allows for getting basic information about the distribution modules\ninstalled in the system.")
isxModularDistModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleInfoModIndex"))
if mibBuilder.loadTexts: isxModularDistModuleInfoEntry.setDescription("An entry containing information about a specific distribution module.")
isxModularDistModuleInfoModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoModIndex.setDescription("The number of the distribution module.")
isxModularDistModuleInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,5,2,3,4,)).subtype(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoAlarmStatus.setDescription("The status of this module. This reflects the indicator lamp(s) on the front of the module.\nA value of notPresent indicates that the module is not installed.\nA value of unknown indicates that there is no communication with the\nmetering segment for this module.")
isxModularDistModuleInfoModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoModelNumber.setDescription("The model number of the distribution module.")
isxModularDistModuleInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoSerialNumber.setDescription("The serial number of the distribution module.")
isxModularDistModuleInfoDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoDateOfManufacture.setDescription("The date that the distribution module was manufactured.")
isxModularDistModuleInfoNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleInfoNumCables.setDescription("The number of cables provided by this distribution module.")
isxModularDistModuleBreakerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerTableSize.setDescription("The number of entries in the isxModularDistModuleBreakerTable.")
isxModularDistModuleBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4))
if mibBuilder.loadTexts: isxModularDistModuleBreakerTable.setDescription("Allows for getting operational information about the distribution modules.")
isxModularDistModuleBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleBreakerModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleBreakerPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistModuleBreakerEntry.setDescription("An entry containing information about a specific distribution modules and circuit breakers.")
isxModularDistModuleBreakerModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerModIndex.setDescription("The distribution module number.")
isxModularDistModuleBreakerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("phaseL1", 1), ("phaseL2", 2), ("phaseL3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPhaseIndex.setDescription("The index to an individual breaker in the distribution module. The index also corresponds\nto the system phase to  which the breaker is attached.")
isxModularDistModuleBreakerAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerAlarmStatus.setDescription("This is a bit map representing the active alarms for this breaker:\n\nb0 - Minimum current threshold exceeded (critical)\nb1 - Low current threshold exceeded (warning)\nb2 - High current threshold exceeded (warning)\nb3 - Maximum current threshold exceeded (critical)\nb4 - Breaker is open (critical)\n\nIf a bit is set, the corresponding alarm is active.")
isxModularDistModuleBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerRating.setDescription("The current rating of the breaker.")
isxModularDistModuleBreakerPhysicalGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPhysicalGroup.setDescription("Numeric value used to indicate that a breaker is a part of a multi-pole breaker.\nBreakers within a distribution module, with equivalent physical group numbers, \nmay have their handles physically tied together.\nA value of 1 indicates breakers that are physically tied together as part of a \nmulti-pole breaker.\nA value of 0 indicates a single-handle breaker that is not physically tied to \nanother breaker.")
isxModularDistModuleBreakerCableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerCableNum.setDescription("Numeric value used to indicate the distribution cable to which \nthis breaker is connected. These distribution cables are described\nin the table isxModularDistModuleOutputTable,\nand indexed by the OID isxModularDistModuleOutputCordIndex.")
isxModularDistModuleBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPosition.setDescription("The physical status of this breaker pole, either closed or open (including tripped).")
isxModularDistModuleBreakerPositionAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPositionAlarms.setDescription("Enable or disable breaker position alarms for this circuit breaker.")
isxModularDistModuleBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerCurrent.setDescription("The current flowing though this breaker. Measured in tenths of amps.")
isxModularDistModuleBreakerPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPercent.setDescription("The loading on this breaker as a percentage of the breaker's current rating.\nExpressed in tenths of percent.")
isxModularDistModuleBreakerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleBreakerPower.setDescription("The power being supplied through this breaker. Measured in tenths of kW.")
isxModularDistModuleOutputsTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputsTableSize.setDescription("The number of entries in the isxModularDistModuleOutputTable.")
isxModularDistModuleOutputTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6))
if mibBuilder.loadTexts: isxModularDistModuleOutputTable.setDescription("Allows for getting and setting information related to the \nload equipment being fed by the distribution modules in the ISX\nModular Distribution System.")
isxModularDistModuleOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistModuleOutputModIndex"), (0, "PowerNet-MIB", "isxModularDistModuleOutputCordIndex"))
if mibBuilder.loadTexts: isxModularDistModuleOutputEntry.setDescription("An entry containing information about a specific distribution module\nand its output distribution cables.")
isxModularDistModuleOutputModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputModIndex.setDescription("The number of the distribution module supplying power to the load equipment.")
isxModularDistModuleOutputNumCables = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputNumCables.setDescription("The number of distribution cables provided by this module.")
isxModularDistModuleOutputCordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputCordIndex.setDescription("The index of an individual distribution cable supplied by this module.")
isxModularDistModuleOutputName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputName.setDescription("A string describing the load equipment being supplied by this distribution cable.")
isxModularDistModuleOutputLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputLocation.setDescription("A string describing the location of equipment being supplied by distribution cable.")
isxModularDistModuleOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,6,2,3,4,)).subtype(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("notPresent", 4), ("unknown", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputStatus.setDescription("This reflects the worse case severity for alarms associated with this distribution cable.\nA value of notPresent indicates that the cable does not exist for this module.\nA value of unknown indicates that the there is no communication with the\nmetering segment for this distribution cable's module.")
isxModularDistModuleOutputAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmGeneration.setDescription("Enable or disable all alarm generation related to this distribution cable.")
isxModularDistModuleOutputBreakerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputBreakerMap.setDescription("This is a bit map representing the breaker poles within the \nmodule that are associated with this distribution cable.\nThe following 3 bits are used to indicate the indices of\nthe breakers feeding the cable:\n\n  b0 - Module breaker L1\n  b1 - Module breaker L2\n  b2 - Module breaker L3\n\nIf a bit is set, the breaker is used to feed this distribution cable.\nThese breakers are described in the table isxModularDistModuleBreakerTable,\nand indexed by the OID isxModularDistModuleBreakerPhaseIndex.")
isxModularDistModuleOutputThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdMin.setDescription("When the current drops below this value a critical alarm will exist.")
isxModularDistModuleOutputThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdLow.setDescription("When the current drops below this value a warning alarm will exist.")
isxModularDistModuleOutputThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdHigh.setDescription("When the current exceeds this value a warning alarm will exist.")
isxModularDistModuleOutputThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputThresholdMax.setDescription("When the current exceeds this value a critical alarm will exist.")
isxModularDistModuleOutputAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmMinEnable.setDescription("Enable or disable minimum current alarm generation for this distribution cable.")
isxModularDistModuleOutputAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmLowEnable.setDescription("Enable or disable low current alarm generation for this distribution cable.")
isxModularDistModuleOutputAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmHighEnable.setDescription("Enable or disable high current alarm generation for this distribution cable.")
isxModularDistModuleOutputAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputAlarmMaxEnable.setDescription("Enable or disable maximum current alarm generation for this distribution cable.")
isxModularDistModuleOutputCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputCableLength.setDescription("The length of this distribution cable. Specified in tenths of meters.")
isxModularDistModuleOutputConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputConnectorType.setDescription("A string describing the connector on the end of this distribution cable.")
isxModularDistModuleOutputAvailableVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputAvailableVoltages.setDescription("This is a bit map representing the voltages that are available at the connector.\n6 bits are used to indicate the following:\n\n  b0 - L1\n  b1 - L2\n  b2 - L3\n  b3 - L1-2\n  b4 - L2-3\n  b5 - L3-1")
isxModularDistModuleOutputTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputTotalPower.setDescription("The total power being consumed by the load equipment supplied by this distribution cable.\nMeasured in tenths of kW.")
isxModularDistModuleOutputKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhUsage.setDescription("The total energy consumed by the load equipment fed by this distribution cable.\nThis is the total since the date specified in the isxModularDistModuleOutputKwhResetDate\nOID, and may be cleared using the isxModularDistModuleOutputKwhReset OID.\nMeasured in tenths of kWh.")
isxModularDistModuleOutputKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 22), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhReset.setDescription("Writing yes to this OID will reset the total kWh usage shown\nin the isxModularDistModuleOutputKwhUsage OID.")
isxModularDistModuleOutputKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistModuleOutputKwhResetDate.setDescription("The date that the kWh usage was reset, in the format mm/dd/yyyy. Example: 01/01/2000.")
isxModularDistSubFeeds = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3))
isxModularDistSubFeedInfoTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTableSize.setDescription("The number of entries in the isxModularDistSubFeedInfoTable.")
isxModularDistSubFeedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2))
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTable.setDescription("Allows for getting information about distribution subfeed breakers.")
isxModularDistSubFeedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedInfoSubIndex"))
if mibBuilder.loadTexts: isxModularDistSubFeedInfoEntry.setDescription("An entry containing information about a specific distribution subfeed.")
isxModularDistSubFeedInfoSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoSubIndex.setDescription("The index of an individual subfeed.")
isxModularDistSubFeedInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoName.setDescription("A string describing the load equipment being supplied by this subfeed.")
isxModularDistSubFeedInfoLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoLocation.setDescription("A string describing the location of the equipment being supplied by this subfeed.")
isxModularDistSubFeedInfoBreakerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerRating.setDescription("The current rating of this subfeed breaker.")
isxModularDistSubFeedInfoBreakerPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerPosition.setDescription("The operational status of this breaker, either closed or open (including tripped).")
isxModularDistSubFeedInfoAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmStatus.setDescription("The worst case alarm status for this subfeed.")
isxModularDistSubFeedInfoAlarmGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmGeneration.setDescription("Enable or disable all alarm generation related to this subfeed.")
isxModularDistSubFeedInfoThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdMin.setDescription("When the current drops below this value a critical alarm will exist.")
isxModularDistSubFeedInfoThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdLow.setDescription("When the current drops below this value a warning alarm will exist.")
isxModularDistSubFeedInfoThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdHigh.setDescription("When the current exceeds this value a warning alarm will exist.")
isxModularDistSubFeedInfoThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoThresholdMax.setDescription("When the current exceeds this value a critical alarm will exist.")
isxModularDistSubFeedInfoAlarmMinEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmMinEnable.setDescription("Enable or disable minimum current alarm generation for this subfeed.")
isxModularDistSubFeedInfoAlarmLowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmLowEnable.setDescription("Enable or disable low current alarm generation for this subfeed.")
isxModularDistSubFeedInfoAlarmHighEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmHighEnable.setDescription("Enable or disable high current alarm generation for this subfeed.")
isxModularDistSubFeedInfoAlarmMaxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 15), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoAlarmMaxEnable.setDescription("Enable or disable maximum current alarm generation for this subfeed.")
isxModularDistSubFeedInfoBreakerAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 16), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoBreakerAlarmEnable.setDescription("Enable or disable breaker position alarms for this subfeed.")
isxModularDistSubFeedInfoTotalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoTotalPower.setDescription("The total power being supplied by this subfeed. Measured in tenths of kW.")
isxModularDistSubFeedInfoKwhUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhUsage.setDescription("The total energy consumed by the load equipment fed by this subfeed.\nThis is the total since the date specified in the isxModularDistSubFeedInfoKwhResetDate\nOID, and may be cleared using the isxModularDistSubFeedInfoKwhReset OID.\nMeasured in tenths of kWh.")
isxModularDistSubFeedInfoKwhReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 19), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhReset.setDescription("Writing yes to this OID will reset the total kWh usage shown\nin the isxModularDistSubFeedInfoKwhUsage OID.")
isxModularDistSubFeedInfoKwhResetDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedInfoKwhResetDate.setDescription("The date that the kWh usage was reset, in the format mm/dd/yyyy. Example: 01/01/2000.")
isxModularDistSubFeedLoadingTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingTableSize.setDescription("The number of entries in the isxModularDistSubFeedLoadingTable.")
isxModularDistSubFeedLoadingTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4))
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingTable.setDescription("Allows for getting subfeed phase loading information.")
isxModularDistSubFeedLoadingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistSubFeedLoadingSubIndex"), (0, "PowerNet-MIB", "isxModularDistSubFeedLoadingPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingEntry.setDescription("An entry containing data for an individual subfeed.")
isxModularDistSubFeedLoadingSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingSubIndex.setDescription("The index of an individual subfeed.")
isxModularDistSubFeedLoadingPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPhaseIndex.setDescription("Description of each input phase entry in the table.")
isxModularDistSubFeedLoadingAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingAlarmStatus.setDescription("This is a bit map representing the active alarms for this subfeed:\n\nb0 - Minimum current threshold exceeded (critical)\nb1 - Low current threshold exceeded (warning)\nb2 - High current threshold exceeded (warning)\nb3 - Maximum current threshold exceeded (critical)\nb4 - Breaker is open (critical)\n\nIf a bit is set, the corresponding alarm is active.")
isxModularDistSubFeedLoadingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingCurrent.setDescription("The current flowing though this subfeed phase. Measured in tenths of amps.")
isxModularDistSubFeedLoadingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPercent.setDescription("The loading on this subfeed phase as a percentage of the subfeed's current rating.\nExpressed in tenths of percent.")
isxModularDistSubFeedLoadingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSubFeedLoadingPower.setDescription("The power being supplied by this subfeed phase. Measured in tenths of kW.")
isxModularDistTotals = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4))
isxModularDistSysVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1))
isxModularDistSysOutputVoltageNominalLineToNeutral = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageNominalLineToNeutral.setDescription("The nominal line-to-neutral voltage available at the distribution panel.")
isxModularDistSysOutputVoltageNominalLineToLine = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageNominalLineToLine.setDescription("The nominal line-to-line voltage available at the distribution panel.")
isxModularDistSysOutputNominalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputNominalFrequency.setDescription("The nominal system output frequency. Measured in tenths of Hertz.")
isxModularDistSysOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputFrequency.setDescription("The system output frequency in tenths of Hertz.\n-1 if not available.")
isxModularDistSysOutputVoltageMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageMonitoring.setDescription("Indicates whether or not output voltage alarm generation is present.")
isxModularDistSysOutputVoltageThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdMin.setDescription("When the line-to-neutral voltage of any phase drops below this value a critical alarm will exist.\nSpecified as a percent of the nominal voltage, isxModularDistSysOutputVoltageNominalLineToNeutral.\nThis value is returned as a positive number which represents a negative percentage.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysOutputVoltageThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdLow.setDescription("When the line-to-neutral voltage of any phase drops below this value a warning alarm will exist.\nSpecified as a percent of the nominal voltage, isxModularDistSysOutputVoltageNominalLineToNeutral.\nThis value is returned as a positive number which represents a negative percentage.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysOutputVoltageThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdHigh.setDescription("When the line-to-neutral voltage of any phase exceeds this value a warning alarm will exist.\nSpecified as a percent of the nominal voltage, isxModularDistSysOutputVoltageNominalLineToNeutral.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysOutputVoltageThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageThresholdMax.setDescription("When the line-to-neutral voltage of any phase exceeds this value a critical alarm will exist.\nSpecified as a percent of the nominal voltage, isxModularDistSysOutputVoltageNominalLineToNeutral.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysOutputVoltageAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmMinEnable.setDescription("Enable or disable minimum voltage alarm generation for the distribution panel.")
isxModularDistSysOutputVoltageAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmLowEnable.setDescription("Enable or disable low voltage alarm generation for the distribution panel.")
isxModularDistSysOutputVoltageAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmHighEnable.setDescription("Enable or disable high voltage alarm generation for the distribution panel.")
isxModularDistSysOutputVoltageAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageAlarmMaxEnable.setDescription("Enable or disable maximum voltage alarm generation for the distribution panel.")
isxModularDistSysOutputVoltageFrequencyTolerance = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(7,5,8,1,4,11,2,6,9,10,3,)).subtype(namedValues=NamedValues(("freqToleranceOff", 1), ("freqToleranceNine", 10), ("freqToleranceNotAvailable", 11), ("freqTolerancePointTwo", 2), ("freqTolerancePointFive", 3), ("freqToleranceOne", 4), ("freqToleranceOnePointFive", 5), ("freqToleranceTwo", 6), ("freqToleranceThree", 7), ("freqToleranceFour", 8), ("freqToleranceFive", 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysOutputVoltageFrequencyTolerance.setDescription("The circuit panel output frequency tolerance in Hertz.\nWhen the system output frequency deviates from the nominal by more than this range,\na critical alarm will be generated.")
isxModularDistSysVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15))
if mibBuilder.loadTexts: isxModularDistSysVoltageTable.setDescription("Allows for getting the system output voltage information.")
isxModularDistSysVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysVoltagePhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysVoltageEntry.setDescription("An entry containing data for an individual system output phase.")
isxModularDistSysVoltagePhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltagePhaseIndex.setDescription("Description of each phase entry in the table.")
isxModularDistSysVoltageAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageAlarmStatus.setDescription("This is a bit map representing the active alarms for this output phase:\n\nb0 - Minimum voltage threshold exceeded (critical)\nb1 - Low voltage threshold exceeded (warning)\nb2 - High voltage threshold exceeded (warning)\nb3 - Maximum voltage threshold exceeded (critical)\n\nIf a bit is set, the corresponding alarm is active.")
isxModularDistSysVoltageLtoN = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageLtoN.setDescription("Line-to-neutral system output voltage available at the distribution panel.\nMeasured in tenths of Volts.")
isxModularDistSysVoltageLtoL = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysVoltageLtoL.setDescription("Line-to-line system output voltage available at the distribution panel.\nMeasured in tenths of Volts.")
isxModularDistSysCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2))
isxModularDistSysCurrentRating = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentRating.setDescription("The 100 percent current rating of the distribution panel.")
isxModularDistSysCurrentMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentMonitoring.setDescription("Indicates whether or not total output current measurements and alarm generation are present.")
isxModularDistSysCurrentThresholdMin = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdMin.setDescription("When total system current in any phase drops below this value a critical alarm will exist.\nSpecified as a percent of the panel rating, isxModularDistSysCurrentRating.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysCurrentThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdLow.setDescription("When total system current in any phase drops below this value a warning alarm will exist.\nSpecified as a percent of the panel rating, isxModularDistSysCurrentRating.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysCurrentThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdHigh.setDescription("When total system current in any phase exceeds this value a warning alarm will exist.\nSpecified as a percent of the panel rating, isxModularDistSysCurrentRating.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysCurrentThresholdMax = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentThresholdMax.setDescription("When total system current in any phase exceeds this value a critical alarm will exist.\nSpecified as a percent of the panel rating, isxModularDistSysCurrentRating.\nA value of -1 indicates that the threshold is not available in the device.")
isxModularDistSysCurrentAlarmMinEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmMinEnable.setDescription("Enable or disable minimum total output current alarm generation.")
isxModularDistSysCurrentAlarmLowEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmLowEnable.setDescription("Enable or disable low total output current alarm generation.")
isxModularDistSysCurrentAlarmHighEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmHighEnable.setDescription("Enable or disable high total output current alarm generation.")
isxModularDistSysCurrentAlarmMaxEnable = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmMaxEnable.setDescription("Enable or disable maximum total output current alarm generation.")
isxModularDistSysCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11))
if mibBuilder.loadTexts: isxModularDistSysCurrentTable.setDescription("Allows for getting the total system phase current information.")
isxModularDistSysCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysCurrentPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysCurrentEntry.setDescription("An entry containing data for an individual system output phase.")
isxModularDistSysCurrentPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentPhaseIndex.setDescription("Description of each phase entry in the table.")
isxModularDistSysCurrentAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentAlarmStatus.setDescription("This is a bit map representing the active alarms for this output phase:\n\nb0 - Minimum current threshold exceeded (critical)\nb1 - Low current threshold exceeded (warning)\nb2 - High current threshold exceeded (warning)\nb3 - Maximum current threshold exceeded (critical)\n\nIf a bit is set, the corresponding alarm is active.")
isxModularDistSysCurrentAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentAmps.setDescription("The current flowing though this system output phase. Measured in tenths of amps.")
isxModularDistSysCurrentPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysCurrentPercent.setDescription("The loading on this system output phase as a percentage of the panel current rating.\nExpressed in tenths of percent.")
isxModularDistSysPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3))
isxModularDistSysPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerTotal.setDescription("The total system power being supplied. Measured in tenths of kW.")
isxModularDistSysPowerKwhUsage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhUsage.setDescription("The total system energy consumed by the load equipment.\nThis is the total since the date specified in the isxModularDistSysOutputKwhResetDate\nOID, and may be cleared using the isxModularDistSysOutputKwhReset OID.\nMeasured in tenths of kWh.")
isxModularDistSysPowerKwhReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("no", 1), ("yes", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhReset.setDescription("Writing yes to this OID will reset the total kWh usage shown\nin the isxModularDistSysPowerKwhUsage OID.")
isxModularDistSysPowerKwhResetDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhResetDate.setDescription("The date that the kWh usage was reset, in the format mm/dd/yyyy. Example: 01/01/2000.")
isxModularDistSysPowerTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5))
if mibBuilder.loadTexts: isxModularDistSysPowerTable.setDescription("Allows for getting the total system phase power loading information.")
isxModularDistSysPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1)).setIndexNames((0, "PowerNet-MIB", "isxModularDistSysPowerPhaseIndex"))
if mibBuilder.loadTexts: isxModularDistSysPowerEntry.setDescription("An entry containing data for an individual system output phase.")
isxModularDistSysPowerPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("phase1", 1), ("phase2", 2), ("phase3", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerPhaseIndex.setDescription("Description of each phase entry in the table.")
isxModularDistSysPowerKw = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKw.setDescription("The power being supplied by this system output phase. Measured in tenths of kW.")
isxModularDistSysPowerKwhPhaseUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularDistSysPowerKwhPhaseUsage.setDescription("The energy consumed by the load equipment on this system output phase.\nThis is the total since the date specified in the isxModularDistSysPowerKwhResetDate\nOID, and may be cleared using the isxModularDistSysPowerKwhReset OID.\nMeasured in tenths of kWh.")
isxModularPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23))
isxModularPduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1))
isxModularPduIdentModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentModelNumber.setDescription("A character string identifying the model number of the PDU.\nThis value is set at the factory.")
isxModularPduIdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentSerialNumber.setDescription("A character string identifying the serial number of the PDU.\nThis value is set at the factory.")
isxModularPduIdentDateOfManufacture = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentDateOfManufacture.setDescription("The date when the PDU was manufactured in mm/dd/yyyy format. \nThis value is set at the factory.")
isxModularPduIdentMonitorCardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardSerialNumber.setDescription("A character string identifying the serial number of the PDU monitor card.\nThis value is set at the factory.")
isxModularPduIdentMonitorCardHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardHardwareRev.setDescription("The hardware revision of the PDU monitor card. \nThis value is set at the factory.")
isxModularPduIdentMonitorCardFirmwareAppRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardFirmwareAppRev.setDescription("An ID string identifying the application firmware revision of the \nPDU monitor card.")
isxModularPduIdentMonitorCardFirmwareAppOSRev = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduIdentMonitorCardFirmwareAppOSRev.setDescription("An ID string identifying the application operating system firmware revision of the \nPDU monitor card.")
isxModularPduDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2))
isxModularPduDeviceTransformerPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("isoXfmrPresent", 2), ("autoXfmrPresent", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceTransformerPresent.setDescription("Indicates the type of transformer present in this PDU.")
isxModularPduDeviceServiceType = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("threeWire", 1), ("fourWire", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceServiceType.setDescription("The type of utility input to the PDU. Either 3 wires (delta), or 4 wires (wye).")
isxModularPduDeviceFansPresent = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("notPresent", 1), ("present", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceFansPresent.setDescription("Indicates whether or not cooling fans are installed in the PDU.")
isxModularPduDeviceNominalMainInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduDeviceNominalMainInputVoltage.setDescription("The nominal main input voltage to the system. Measured in Volts, \nline-to-line for a 3-wire (delta) service or line-to-neutral for a \n4-wire (wye) service. -1 if main input voltage is not being measured.")
isxModularPduStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3))
isxModularPduAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduAlarmStatus.setDescription("The overall status (worst case) of this PDU.")
isxModularPduTransformerTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("overtemp", 2), ("noTransformerPresent", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduTransformerTempStatus.setDescription("Indicates if the PDU isolation transformer is over temperature.")
isxModularPduFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,4,)).subtype(namedValues=NamedValues(("normal", 1), ("failed", 2), ("noCoolingFansPresent", 3), ("unknown", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isxModularPduFanStatus.setDescription("Indicates if one or more of the PDU's cooling fans have failed.")
universalInputOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25))
uioSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1))
uioSensorStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTableSize.setDescription("The number of entries in the uioSensorStatusTable.")
uioSensorStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2))
if mibBuilder.loadTexts: uioSensorStatusTable.setDescription("Allows for getting sensor status information.")
uioSensorStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "uioSensorStatusPortID"), (0, "PowerNet-MIB", "uioSensorStatusSensorID"))
if mibBuilder.loadTexts: uioSensorStatusEntry.setDescription("The unit from which to get data.")
uioSensorStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusPortID.setDescription("The ID of the Universal IO port to which the sensor is attached.")
uioSensorStatusSensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorID.setDescription("The ID of the sensor.")
uioSensorStatusSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorName.setDescription("The sensor name.")
uioSensorStatusSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusSensorLocation.setDescription("The location of the sensor.")
uioSensorStatusTemperatureDegF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTemperatureDegF.setDescription("The sensor's current temperature reading in tenths of degrees Fahrenheit.")
uioSensorStatusTemperatureDegC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusTemperatureDegC.setDescription("The sensor's current temperature reading in tenths of degrees Celsius.")
uioSensorStatusHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusHumidity.setDescription("The current humidity reading in tenths of percent from the sensor.")
uioSensorStatusViolationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusViolationStatus.setDescription("The violation status of the sensor.  This integer should be interpreted\nas a bit map, with each bit representing the presence or absence of\nthe specific alarm conditions listed below.  The bit will be '1' if\nthe condition is present, and '0' if the condition is not present.\n\nBit  Hex. Value  Description\n1    0x0001      Maximum temperature exceeded.\n2    0x0002      High temperature exceeded.\n3    0x0004      Low temperature exceeded.\n4    0x0008      Minimum temperature exceeded.\n5    0x0010      Short-term increasing temperature rate exceeded (Not used).\n6    0x0020      Short-term decreasing temperature rate exceeded (Not used).\n7    0x0040      Long-term increasing temperature rate exceeded (Not used).\n8    0x0080      Long-term decreasing temperature rate exceeded (Not used).\n9    0x0100      Maximum humidity exceeded.\n10   0x0200      High humidity exceeded.\n11   0x0400      Low humidity exceeded.\n12   0x0800      Minimum humidity exceeded.")
uioSensorStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,4,)).subtype(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("sensorStatusNotApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusAlarmStatus.setDescription("The alarm status of the sensor.")
uioSensorStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioSensorStatusCommStatus.setDescription("The communications status of the sensor.")
uioInputContact = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2))
uioInputContactStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusTableSize.setDescription("The number of entries in the uioInputContactStatusTable.")
uioInputContactStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2))
if mibBuilder.loadTexts: uioInputContactStatusTable.setDescription("Allows for getting input contact status information.")
uioInputContactStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "uioInputContactStatusPortID"), (0, "PowerNet-MIB", "uioInputContactStatusContactID"))
if mibBuilder.loadTexts: uioInputContactStatusEntry.setDescription("The input contact from which to get data.")
uioInputContactStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusPortID.setDescription("The ID of the port to which the input contact is attached.")
uioInputContactStatusContactID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactID.setDescription("The ID of the input contact on the module.")
uioInputContactStatusContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactName.setDescription("The input contact name.")
uioInputContactStatusContactLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusContactLocation.setDescription("The location of the input contact.")
uioInputContactStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,4,)).subtype(namedValues=NamedValues(("uioInputClosed", 1), ("uioInputOpen", 2), ("uioInputDisabled", 3), ("inputStateNotApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusCurrentState.setDescription("The current state of the input contact. ")
uioInputContactStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusAlarmStatus.setDescription("The alarm status of the input contact.")
uioInputContactStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioInputContactStatusCommStatus.setDescription("The communications status of the input contact.")
uioOutputRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3))
uioOutputRelayStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusTableSize.setDescription("The number of entries in the uioOutputRelayStatusTable.")
uioOutputRelayStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2))
if mibBuilder.loadTexts: uioOutputRelayStatusTable.setDescription("Allows for getting output relay status information.")
uioOutputRelayStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "uioOutputRelayStatusPortID"), (0, "PowerNet-MIB", "uioOutputRelayStatusRelayID"))
if mibBuilder.loadTexts: uioOutputRelayStatusEntry.setDescription("The unit from which to get data.")
uioOutputRelayStatusPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusPortID.setDescription("The ID of the module to which the output relay is attached.")
uioOutputRelayStatusRelayID = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayID.setDescription("The ID of the output relay on the module.")
uioOutputRelayStatusRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayName.setDescription("The output relay name.")
uioOutputRelayStatusRelayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusRelayLocation.setDescription("The location of the output relay.")
uioOutputRelayStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("uioOutputClosed", 1), ("uioOutputOpen", 2), ("outputStateNotApplicable", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusCurrentState.setDescription("The current state of the output relay.")
uioOutputRelayStatusAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,4,3,)).subtype(namedValues=NamedValues(("uioNormal", 1), ("uioWarning", 2), ("uioCritical", 3), ("inputStatusNotApplicable", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusAlarmStatus.setDescription("The alarm status of the output relay.")
uioOutputRelayStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uioOutputRelayStatusCommStatus.setDescription("The communications status of the output relay.")
rPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26))
rPDU2IdentTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentTableSize.setDescription("The total number of Rack PDUs")
rPDU2IdentTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2))
if mibBuilder.loadTexts: rPDU2IdentTable.setDescription("A table of Rack PDU identification data")
rPDU2IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2IdentIndex"))
if mibBuilder.loadTexts: rPDU2IdentEntry.setDescription("Identification data from Rack PDU being queried")
rPDU2IdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentIndex.setDescription("The index to the Rack PDU identification table\nentry")
rPDU2IdentModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2IdentName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentName.setDescription("A user-defined string identifying the Rack PDU")
rPDU2IdentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentLocation.setDescription("A user-defined string identifying the location\nof the Rack PDU")
rPDU2IdentHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentHardwareRev.setDescription("The Rack PDU hardware version")
rPDU2IdentFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentFirmwareRev.setDescription("The Rack PDU firware version")
rPDU2IdentDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentDateOfManufacture.setDescription("The date the Rack PDU was manufactured \nin mm/dd/yyyy format")
rPDU2IdentModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentModelNumber.setDescription("The Rack PDU model number")
rPDU2IdentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentSerialNumber.setDescription("The Rack PDU serial number")
rPDU2IdentContact = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2IdentContact.setDescription("A user-defined string identifying the \nperson to contact regarding the Rack PDU")
rPDU2DeviceTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceTableSize.setDescription("The total number of Rack PDUs")
rPDU2Device = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4))
rPDU2DeviceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1))
if mibBuilder.loadTexts: rPDU2DeviceConfigTable.setDescription("A table of Rack PDU configuration data")
rPDU2DeviceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceConfigIndex"))
if mibBuilder.loadTexts: rPDU2DeviceConfigEntry.setDescription("Configuration data from Rack PDU being queried")
rPDU2DeviceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceConfigIndex.setDescription("The index to the Rack PDU table entry")
rPDU2DeviceConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2DeviceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigName.setDescription("A user-defined string identifying the Rack PDU")
rPDU2DeviceConfigLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigLocation.setDescription("A user-defined string identifying the location\nof the Rack PDU")
rPDU2DeviceConfigDisplayOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("displayNormal", 1), ("displayReverse", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDisplayOrientation.setDescription("Indicates the intended physical orientation \nof the seven segment display\n\ndisplayNormal(1) indicates normal orientation\ndisplayReverse(2) indicates upside down orientation")
rPDU2DeviceConfigColdstartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigColdstartDelay.setDescription("The amount of delay, measured in seconds, between\nwhen power is provided to the Rack PDU and when\nthe Rack PDU provides basic master power to the\noutlets.\nAllowed values are:\n-1       - never apply power automatically.\n0        - apply power immediately.\n1 to 300 - delay up to 300 seconds (5 minutes).")
rPDU2DeviceConfigLowLoadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigLowLoadPowerThreshold.setDescription("User-defined low power draw alarm threshold,\nmeasured in tenths of kilowatts")
rPDU2DeviceConfigNearOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigNearOverloadPowerThreshold.setDescription("User-defined near power overload threshold,\nmeasured in tenths of kilowatts")
rPDU2DeviceConfigOverloadPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOverloadPowerThreshold.setDescription("User-defined power overload threshold,\nmeasured in tenths of kilowatts")
rPDU2DeviceConfigDevicePeakPowerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDevicePeakPowerReset.setDescription("Setting this OID to reset (2) will cause the existing peak power value\nto be replaced by the current load power value.\n\nGetting this OID will do nothing and return the noOperation(1) value.")
rPDU2DeviceConfigDeviceEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigDeviceEnergyReset.setDescription("Setting this OID to reset (2) will cause the device energy meter value\nto be reset to zero.\n\nGetting this OID in models that support this feature will do nothing\nand return the noOperation(1) value.\n\nModels that do not support this feature will respond to this OID\nwith a value of notSupported (3). Attempts to set this OID\nin these models will fail.")
rPDU2DeviceConfigOutletsEnergyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOutletsEnergyReset.setDescription("Setting this OID to reset (2) will cause the all outlet energy meter values\nto be reset to zero.\n\nGetting this OID will do nothing and return the noOperation(1) value.\n\nModels that do not support this feature will respond to this OID\nwith a value of notSupported (3). Attempts to set this OID\nin these models will fail.")
rPDU2DeviceConfigOutletsPeakLoadReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigOutletsPeakLoadReset.setDescription("Setting this OID to reset (2) will cause the all outlet peak load values\nto be reset to zero.\n\nGetting this OID will do nothing and return the noOperation(1) value.\n\nModels that do not support this feature will respond to this OID\nwith a value of notSupported (3). Attempts to set this OID\nin these models will fail.")
rPDU2DeviceConfigContact = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceConfigContact.setDescription("A user-defined string identifying the \nperson to contact regarding the Rack PDU")
rPDU2DevicePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2))
if mibBuilder.loadTexts: rPDU2DevicePropertiesTable.setDescription("A table of Rack PDU properties")
rPDU2DevicePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2DevicePropertiesIndex"))
if mibBuilder.loadTexts: rPDU2DevicePropertiesEntry.setDescription("Properties of the Rack PDU being queried")
rPDU2DevicePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesIndex.setDescription("The index to the Rack PDU properties table entry")
rPDU2DevicePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2DevicePropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesName.setDescription("A user-defined string identifying the Rack PDU")
rPDU2DevicePropertiesNumOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumOutlets.setDescription("The number of outlets on the Rack PDU")
rPDU2DevicePropertiesNumSwitchedOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumSwitchedOutlets.setDescription("The number of switched outlets on the Rack PDU")
rPDU2DevicePropertiesNumMeteredOutlets = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumMeteredOutlets.setDescription("The number of metered outlets on the Rack PDU")
rPDU2DevicePropertiesNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumPhases.setDescription("The number of phases present in the Rack PDU")
rPDU2DevicePropertiesNumMeteredBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesNumMeteredBanks.setDescription("The number of metered banks present in the Rack PDU")
rPDU2DevicePropertiesMaxCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesMaxCurrentRating.setDescription("The maximum current rating, measured in Amps, for \nthe Rack PDU")
rPDU2DevicePropertiesOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("verticalISXv2", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesOrientation.setDescription("Rack PDU orientation")
rPDU2DevicePropertiesOutletLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(5,3,2,8,6,9,1,10,4,7,)).subtype(namedValues=NamedValues(("seqPhaseToNeutral", 1), ("seqPhToNPhToPhPhToN", 10), ("seqPhaseToPhase", 2), ("seqPhToNeu21PhToPh", 3), ("seqPhToPhGrouped", 4), ("seqPhToNGrouped", 5), ("seqPToN1516PToPGrouped", 6), ("seqPhToPh2xGrouped", 7), ("seqPhToN2xGrouped", 8), ("seqNotApplicable", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesOutletLayout.setDescription("Getting this OID will return outlet layout for the device.\n\nseqPhaseToNeutral(1) indicates outlet layout as follows:\n1:1-N,2:2-N,3:3-N,4:1-N,5:2-N,...\nor for single phase SKUs, all outlets 1-N \n\nseqPhaseToPhase(2) indicates outlet layout as follows:\n1:1-2,2:2-3,3:3-1,4:1-2,5:2-3,...\n\nseqPhToNeu21PhToPh(3) indicates outlet layout as follows:\n1:1-N,2:2-N...21:3-N,22:1-2,23:2-3,24:3-1,...\n\nseqPhToPhGrouped(4) indicates outlet layout as follows:       \nFor AP8xxx SKU's Group 1:1-2, Group 2:2-3, Group 3:3-1.\n\nseqPhToNGrouped(5) indicates outlet layout as follows:\nThis unit has 3 outlet groups.  Group 1:1-N, Group 2:2-N, Group 3:3-N.\n\nseqPToN1516PToPGrouped(6) indicates outlet layout as follows:\nThis unit has 4 outlet groups. Group 1 (Outlets 1-14):1-2, \nGroup 2 (Outlets 15-16):1-N, Group 3:2-3, Group 4:3-1.\n\nseqPhToPh2xGrouped(7) indicates outlet layout as follows:\nThis unit has 6 outlet groups.  Group 1:1-2, Group 2:1-2, Group 3:2-3,\nGroup 4:2-3, Group 5:3-1, Group 6:3-1.\n\nseqPhToN2xGrouped(8) indicates outlet layout as follows:\nThis unit has 6 outlet groups.  Group 1:1-N, Group 2:1-N, Group 3:2-N,\nGroup 4:2-N, Group 5:3-N, Group 6:3-N.\n\nseqNotApplicable(9):\nOutlet layout does not affect any of the user interfaces for \nAP88XX SKUs.  These SKUs may report seqNotApplicable(9) if there is \nnot an exact outlet layout match available.   \n         \nseqPhToNPhToPhPhToN(10) indicates outlet layout as follows:\nGroup 1:1-N, Group 2:1-2, Group 3:2-N.")
rPDU2DevicePropertiesMaxPhaseCurrentRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DevicePropertiesMaxPhaseCurrentRating.setDescription("The maximum current rating, measured in Amps, for \nthe Rack PDU")
rPDU2DeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3))
if mibBuilder.loadTexts: rPDU2DeviceStatusTable.setDescription("A table of Rack PDU status information")
rPDU2DeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceStatusIndex"))
if mibBuilder.loadTexts: rPDU2DeviceStatusEntry.setDescription("Status information from the Rack PDU being queried")
rPDU2DeviceStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusIndex.setDescription("The index to the Rack PDU status table entry")
rPDU2DeviceStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2DeviceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusName.setDescription("A user-defined string identifying the Rack PDU")
rPDU2DeviceStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusLoadState.setDescription("Indicates the present load status of the Rack PDU")
rPDU2DeviceStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPower.setDescription("The power consumption of the Rack PDU load in hundredths of kilowatts")
rPDU2DeviceStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPower.setDescription("The peak power consumption of the Rack PDU load in hundredths of kilowatts")
rPDU2DeviceStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPowerTimestamp.setDescription("Indicates the date and time that peak power consumption occurred")
rPDU2DeviceStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPeakPowerStartTime.setDescription("Indicates the date and time of the last device peak power reset")
rPDU2DeviceStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusEnergy.setDescription("A user resettable energy meter measuring Rack PDU load \nenergy consumption in tenths of kilowatt-hours")
rPDU2DeviceStatusEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusEnergyStartTime.setDescription("Indicates the date and time of the last device energy\nmeter reset")
rPDU2DeviceStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusCommandPending.setDescription("Indicates whether or not the device \nis processing a pending command.  If\nthe commandPendingUnknown (3) value is\nreturned, all devices powered by the \nRack PDU should be shut down.  The \nRack PDU's power should then be cycled\nto clear this condition.")
rPDU2DeviceStatusPowerSupplyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupplyAlarm.setDescription("Indicates a power supply alarm is active when value\nequals alarm (2)")
rPDU2DeviceStatusPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupply1Status.setDescription("Indicates whether or not an alarm is active in Power\nSupply 1")
rPDU2DeviceStatusPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 14), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ("notInstalled", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerSupply2Status.setDescription("Indicates whether or not an alarm is active in Power\nSupply 2")
rPDU2DeviceStatusOutletsEnergyStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusOutletsEnergyStartTime.setDescription("Indicates the date and time of the last outlets energy\nmeter reset")
rPDU2DeviceStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusApparentPower.setDescription("The apparent power consumption of the Rack PDU load in hundredths of kiloVoltAmps (kVA)")
rPDU2DeviceStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusPowerFactor.setDescription("The power factor of the Rack PDU load in hundredths")
rPDU2DeviceStatusNPSType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 18), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("notNPS", 1), ("host", 2), ("guest", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceStatusNPSType.setDescription("The device NPS status:\nnotNPS (1) indicates the Rack PDU is not in an NPS group.\nhost (2) indicates the Rack PDU has been designated as a host in an NPS group.  \n  Only one Rack PDU in an NPS group is allowed to be the host.\nguest (3) indicates the Rack PDU has been designated as a guest in an NPS group.")
rPDU2DeviceControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4))
if mibBuilder.loadTexts: rPDU2DeviceControlTable.setDescription("A table of Rack PDU control data")
rPDU2DeviceControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2DeviceControlIndex"))
if mibBuilder.loadTexts: rPDU2DeviceControlEntry.setDescription("Control data from Rack PDU being queried")
rPDU2DeviceControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlIndex.setDescription("The index to the Rack PDU control table entry")
rPDU2DeviceControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2DeviceControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2DeviceControlName.setDescription("A user-defined string identifying the Rack PDU")
rPDU2DeviceControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(5,1,2,4,6,7,3,8,)).subtype(namedValues=NamedValues(("immediateAllOn", 1), ("delayedAllOn", 2), ("immediateAllOff", 3), ("immediateAllReboot", 4), ("delayedAllReboot", 5), ("noCommandAll", 6), ("delayedAllOff", 7), ("cancelAllPendingCommands", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2DeviceControlCommand.setDescription("Setting this OID to immediateAllOn (1) will turn all outlets\non immediately.\n\nSetting this OID to delayedAllOn (2) will turn all outlets on as \ndefined by each outlet's rPDU2OutletSwitchedConfigPowerOnTime\nOID value.\n\nSetting this OID to immediateAllOff (3) will turn all outlets\noff immediately.\n\nSetting this OID to immediateAllReboot (4) will cause an immediateAllOff\ncommand to be performed. Once all outlets are off, the\nSwitched Rack PDU will then delay the\nrPDU2OutletSwitchedConfigRebootDuration OID time, and then perform an\nimmediateAllOn command.\n\nSetting this OID to delayedAllReboot (5) will cause a\ndelayedAllOff command to be performed. Once all outlets are off, \nthe Switched Rack PDU will then delay the largest\nrPDU2OutletSwitchedConfigRebootDuration OID time, and then perform a\ndelayedAllOn command.\n\nSetting this OID to noCommandAll (6) will have no effect.\n\nSetting this OID to delayedAllOff (7) will turn all outlets off\nas defined by each outlet's rPDU2OutletSwitchedConfigPowerOffTime\nOID value.\n\nSetting this OID to cancelAllPendingCommands (8) will cause all pending\ncommands on the Switched Rack PDU to be cancelled.\n\nGetting this OID will return the noCommandAll (6) \nvalue.")
rPDU2PhaseTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseTableSize.setDescription("The number of connected Rack PDU phases")
rPDU2Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6))
rPDU2PhaseConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1))
if mibBuilder.loadTexts: rPDU2PhaseConfigTable.setDescription("A table of Rack PDU phase configuration data")
rPDU2PhaseConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseConfigIndex"))
if mibBuilder.loadTexts: rPDU2PhaseConfigEntry.setDescription("Configuration data from currently queried Rack \nPDU phase")
rPDU2PhaseConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigIndex.setDescription("The index to the Rack PDU phase configuration\ntable entry")
rPDU2PhaseConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2PhaseConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseConfigNumber.setDescription("The numeric phase ID")
rPDU2PhaseConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigOverloadRestriction.setDescription("This OID controls the behavior of a Switched Rack PDU \nphase when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding phase to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding phase to turn on if the \nrPDULoadConfigNearOverloadThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding phase to turn on if the \nrPDULoadConfigOverloadThreshold OID is exceeded.\n\nModels that do not support this feature will respond to this OID\nwith a value of notSupported (4). Attempts to set this OID\nin these models will fail.")
rPDU2PhaseConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigLowLoadCurrentThreshold.setDescription("User-defined low load phase current \nthreshold in Amps")
rPDU2PhaseConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigNearOverloadCurrentThreshold.setDescription("User-defined near phase overload warning \nthreshold in Amps")
rPDU2PhaseConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigOverloadCurrentThreshold.setDescription("User-defined phase overload current\nthreshold in Amps")
rPDU2PhaseConfigPhasePeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2PhaseConfigPhasePeakCurrentReset.setDescription("Setting this OID to reset (2) will cause the existing peak current value\nto be replaced by the present load current value.\n\nGetting this OID will do nothing and return the noOperation(1) value.")
rPDU2PhasePropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2))
if mibBuilder.loadTexts: rPDU2PhasePropertiesTable.setDescription("A table of Rack PDU phase properties")
rPDU2PhasePropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2PhasePropertiesIndex"))
if mibBuilder.loadTexts: rPDU2PhasePropertiesEntry.setDescription("Properties of the currently queried Rack\nPDU phase")
rPDU2PhasePropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesIndex.setDescription("The index to the Rack PDU phase properties\ntable entry")
rPDU2PhasePropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2PhasePropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhasePropertiesNumber.setDescription("The numeric phase ID")
rPDU2PhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3))
if mibBuilder.loadTexts: rPDU2PhaseStatusTable.setDescription("A table of Rack PDU phase status data")
rPDU2PhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseStatusIndex"))
if mibBuilder.loadTexts: rPDU2PhaseStatusEntry.setDescription("Status data from currently queried Rack PDU \nphase")
rPDU2PhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusIndex.setDescription("The index to the Rack PDU phase status table\nentry")
rPDU2PhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2PhaseStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusNumber.setDescription("The numeric phase ID")
rPDU2PhaseStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusLoadState.setDescription("Indicates the present load status of the Rack PDU \nphase being queried")
rPDU2PhaseStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusCurrent.setDescription("Indicates the current draw, in tenths of Amps, of the load\non the Rack PDU phase being queried")
rPDU2PhaseStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusVoltage.setDescription("Indicates the Voltage, in Volts, of the Rack\nPDU phase being queried")
rPDU2PhaseStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPower.setDescription("Indicates the load power, in hundredths of kilowatts (kW),\nconsumed on the Rack PDU phase being queried")
rPDU2PhaseStatusApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusApparentPower.setDescription("Indicates the load apparent power, in hundredths of kiloVoltAmps (kVA),\nconsumed on the Rack PDU phase being queried")
rPDU2PhaseStatusPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPowerFactor.setDescription("Indicates the load power factor, in hundredths,\nof the Rack PDU phase being queried")
rPDU2PhaseStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrent.setDescription("The peak current of the Rack PDU phase load in tenths of Amps")
rPDU2PhaseStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrentTimestamp.setDescription("Indicates the date and time that the peak current occurred")
rPDU2PhaseStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseStatusPeakCurrentStartTime.setDescription("Indicates the date and time of the last phase peak current reset")
rPDU2BankTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankTableSize.setDescription("The number of connected Rack PDU banks")
rPDU2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8))
rPDU2BankConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1))
if mibBuilder.loadTexts: rPDU2BankConfigTable.setDescription("A table of Rack PDU bank configuration data")
rPDU2BankConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2BankConfigIndex"))
if mibBuilder.loadTexts: rPDU2BankConfigEntry.setDescription("Configuration data from currently queried \nRack PDU bank")
rPDU2BankConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigIndex.setDescription("The index to the Rack PDU bank configuration\ntable entry")
rPDU2BankConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2BankConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankConfigNumber.setDescription("The numeric bank ID")
rPDU2BankConfigOverloadRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,3,1,)).subtype(namedValues=NamedValues(("alwaysAllowTurnON", 1), ("restrictOnNearOverload", 2), ("restrictOnOverload", 3), ("notSupported", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigOverloadRestriction.setDescription("This OID controls the behavior of a Switched Rack PDU \nbank when an overload condition is possible and \nadditional outlets are requested to be turned on. \n\nSetting this OID to alwaysAllowTurnON (1) will always allow \nthe outlets on the corresponding bank to turn on.\n\nSetting this OID to restrictOnNearOverload (2) will not allow \noutlets on the corresponding bank to turn on if the \nrPDU2BankConfigNearOverloadCurrentThreshold OID is exceeded.\n       \nSetting this OID to restrictOnOverload (3) will not allow\noutlets on the corresponding bank to turn on if the \nrPDU2BankConfigOverloadCurrentThreshold OID is exceeded.\n\nModels that do not support this feature will respond to this OID\nwith a value of notSupported (4). Attempts to set this OID\nin these models will fail.")
rPDU2BankConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigLowLoadCurrentThreshold.setDescription("User-defined low load bank current \nthreshold in Amps")
rPDU2BankConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigNearOverloadCurrentThreshold.setDescription("User-defined near bank overload current warning\nthreshold in Amps")
rPDU2BankConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigOverloadCurrentThreshold.setDescription("User-defined bank overload current threshold\nin Amps")
rPDU2BankConfigBankPeakCurrentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2BankConfigBankPeakCurrentReset.setDescription("Setting this OID to reset (2) will cause the existing peak current value\nto be replaced by the present load current value.\n\nGetting this OID will do nothing and return the noOperation(1) value.")
rPDU2BankPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2))
if mibBuilder.loadTexts: rPDU2BankPropertiesTable.setDescription("A table of Rack PDU bank properties")
rPDU2BankPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2BankPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2BankPropertiesEntry.setDescription("Properties of the currently queried \nRack PDU bank")
rPDU2BankPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesIndex.setDescription("The index to the Rack PDU bank properties \ntable entry")
rPDU2BankPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2BankPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesNumber.setDescription("The numeric bank ID")
rPDU2BankPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 4), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankPropertiesPhaseLayout.setDescription("This OID describes the outlet phase connections on\nthe referenced bank as follows:\n\nseqPhase1ToNeutral(1) indicates that bank outlets are\nwired from Phase 1 to Neutral.\n\nseqPhase2ToNeutral(2) indicates that bank outlets are\nwired from Phase 2 to Neutral.\n\nseqPhase3ToNeutral(3) indicates that bank outlets are\nwired from Phase 3 to Neutral.\n\nseqPhase1ToPhase2(4) indicates that bank outlets are\nwired from Phase 1 to Phase 2.\n\nseqPhase2ToPhase3(5) indicates that bank outlets are\nwired from Phase 2 to Phase 3.\n\nseqPhase3ToPhase1(6) indicates that bank outlets are\nwired from Phase 3 to Phase 1.")
rPDU2BankStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3))
if mibBuilder.loadTexts: rPDU2BankStatusTable.setDescription("A table of Rack PDU bank status data")
rPDU2BankStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2BankStatusIndex"))
if mibBuilder.loadTexts: rPDU2BankStatusEntry.setDescription("Status data from currently queried Rack PDU\nbank")
rPDU2BankStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusIndex.setDescription("The index to the Rack PDU bank status\ntable entry")
rPDU2BankStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2BankStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusNumber.setDescription("The numeric bank ID")
rPDU2BankStatusLoadState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusLoadState.setDescription("Indicates the present load status of the Rack PDU\nbank being queried")
rPDU2BankStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusCurrent.setDescription("Indicates the current draw, in tenths of Amps, of the load\non the Rack PDU bank being queried")
rPDU2BankStatusPeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrent.setDescription("The peak current of the Rack PDU bank load in tenths of Amps")
rPDU2BankStatusPeakCurrentTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrentTimestamp.setDescription("Indicates the date and time the bank peak current occurred")
rPDU2BankStatusPeakCurrentStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2BankStatusPeakCurrentStartTime.setDescription("Indicates the date and time of the last bank peak current reset")
rPDU2Outlet = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9))
rPDU2OutletSwitchedTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedTableSize.setDescription("The number of switched outlets on connected Rack PDUs")
rPDU2OutletSwitched = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2))
rPDU2OutletSwitchedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1))
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigTable.setDescription("A table of Rack PDU switched outlet configuration data")
rPDU2OutletSwitchedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedConfigIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigEntry.setDescription("Configuration data from currently queried \nRack PDU switched outlet")
rPDU2OutletSwitchedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigIndex.setDescription("The index to the Rack PDU switched outlet\nconfiguration table entry")
rPDU2OutletSwitchedConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletSwitchedConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigName.setDescription("The user-defined switched outlet ID string")
rPDU2OutletSwitchedConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigNumber.setDescription("The numeric switched outlet ID")
rPDU2OutletSwitchedConfigPowerOnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigPowerOnTime.setDescription("The amount of delay, in seconds, between when\npower is provided to the Rack PDU and when \nthis switched outlet starts providing power.\nRange -1...300 where -1 = Never power on,\n0 = immediate power on, and 1-300 = seconds to \ndelay.")
rPDU2OutletSwitchedConfigPowerOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigPowerOffTime.setDescription("The amount of time, in seconds, this outlet will\ndelay powering off.\nRange -1...300 where -1 = Never power off,\n0 = immediate power off, and 1-300 = seconds to \ndelay.")
rPDU2OutletSwitchedConfigRebootDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedConfigRebootDuration.setDescription("After turning power off during a reboot sequence,\nthe amount of time to wait before turning power\nto this outlet back on. \nRange 5-60 seconds delay.")
rPDU2OutletSwitchedPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2))
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesTable.setDescription("A table of Rack PDU switched outlet properties")
rPDU2OutletSwitchedPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesEntry.setDescription("Properties of the currently queried Rack PDU\nswitched outlet")
rPDU2OutletSwitchedPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesIndex.setDescription("The index to the Rack PDU switched outlet \nproperties table entry")
rPDU2OutletSwitchedPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletSwitchedPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesName.setDescription("The user-defined switched outlet ID string")
rPDU2OutletSwitchedPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesNumber.setDescription("The numeric switched outlet ID")
rPDU2OutletSwitchedPropertiesPhaseLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesPhaseLayout.setDescription("This OID describes the phase connections of\nthe referenced outlet as follows:\n\nseqPhase1ToNeutral(1) indicates that the outlet is\nwired from Phase 1 to Neutral.\n\nseqPhase2ToNeutral(2) indicates that the outlet is\nwired from Phase 2 to Neutral.\n\nseqPhase3ToNeutral(3) indicates that the outlet is\nwired from Phase 3 to Neutral.\n\nseqPhase1ToPhase2(4) indicates that the outlet is\nwired from Phase 1 to Phase 2.\n\nseqPhase2ToPhase3(5) indicates that the outlet is\nwired from Phase 2 to Phase 3.\n\nseqPhase3ToPhase1(6) indicates that the outlet is\nwired from Phase 3 to Phase 1.")
rPDU2OutletSwitchedPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedPropertiesBank.setDescription("The numeric bank ID")
rPDU2OutletSwitchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3))
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusTable.setDescription("A table of Rack PDU switched outlet status\ninformation")
rPDU2OutletSwitchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedStatusIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusEntry.setDescription("Status information for currently queried\nRack PDU switched outlet")
rPDU2OutletSwitchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusIndex.setDescription("The index to the Rack PDU switched outlet\nstatus information table entry")
rPDU2OutletSwitchedStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletSwitchedStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusName.setDescription("The user-defined switched outlet ID string")
rPDU2OutletSwitchedStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusNumber.setDescription("The numeric switched outlet ID")
rPDU2OutletSwitchedStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("off", 1), ("on", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusState.setDescription("Indicates the present switch state of the Rack\nPDU switched outlet being queried")
rPDU2OutletSwitchedStatusCommandPending = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("commandPending", 1), ("noCommandPending", 2), ("commandPendingUnknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedStatusCommandPending.setDescription("Indicates whether or not the device is\nprocessing a command for this outlet.\n\nIf the commandPendingUnknown (3) value is\nreturned, all devices powered by the Rack PDU\nshould be shut down.  The Rack PDU's power\nshould then be cycled to clear this condition.")
rPDU2OutletSwitchedControlTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4))
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlTable.setDescription("A table of Rack PDU switched outlet control\ndata")
rPDU2OutletSwitchedControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletSwitchedControlIndex"))
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlEntry.setDescription("Control data for currently queried Rack\nPDU switched outlet")
rPDU2OutletSwitchedControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlIndex.setDescription("The index to the Rack PDU switched outlet\ncontrol data table entry")
rPDU2OutletSwitchedControlModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletSwitchedControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlName.setDescription("The user-defined switched outlet ID string")
rPDU2OutletSwitchedControlNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlNumber.setDescription("The numeric switched outlet ID")
rPDU2OutletSwitchedControlCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,6,5,7,4,1,8,)).subtype(namedValues=NamedValues(("immediateOn", 1), ("immediateOff", 2), ("immediateReboot", 3), ("outletUnknown", 4), ("delayedOn", 5), ("delayedOff", 6), ("delayedReboot", 7), ("cancelPendingCommand", 8), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletSwitchedControlCommand.setDescription("Getting this variable will return the outlet state. If\nthe outlet is on, the immediateOn (1) value will be returned.\nIf the outlet is off, the immediateOff (2) value will be\nreturned. If the state of the outlet cannot be\ndetermined, the outletUnknown (4) value will be returned.\nIf the outletUnknown condition should occur, all devices\npowered by the PDU should be shut down. The PDU's power\nshould then be cycled to clear this condition.\n\nSetting this variable to immediateOn (1) will immediately turn\nthe outlet on.\n\nSetting this variable to immediateOff (2) will immediately turn\nthe outlet off.\n\nSetting this variable to immediateReboot (3) will cause the\nSwitched Rack PDU to perform an immediateOff command, wait the\nrPDU2OutletSwitchedConfigRebootDuration OID time, and then perform an\nimmediateOn command.\n\nSetting this variable to delayedOn (5) will turn the outlet on\nafter the rPDU2OutletSwitchedConfigPowerOnTime OID time has elapsed.\n\nSetting this variable to delayedOff (6) will turn the outlet off\nafter the rPDU2OutletSwitchedConfigPowerOffTime OID time has elapsed.\n\nSetting this variable to delayedReboot  (7) will cause the\nSwitched Rack PDU to perform a delayedOff command, wait the\nrPDU2OutletSwitchedConfigRebootDuration OID time, and then perform a\ndelayedOn command.\n\nSetting this variable to cancelPendingCommand (8) will cause any\npending command to this outlet to be cancelled.")
rPDU2OutletMeteredTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredTableSize.setDescription("The number of metered outlets on connect Rack PDUs")
rPDU2OutletMetered = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4))
rPDU2OutletMeteredConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1))
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigTable.setDescription("A table of Rack PDU metered outlet configuration data")
rPDU2OutletMeteredConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredConfigIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigEntry.setDescription("Configuration data from currently queried\nRack PDU metered outlet")
rPDU2OutletMeteredConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigIndex.setDescription("The index to the Rack PDU metered outlet\nconfiguration table entry")
rPDU2OutletMeteredConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletMeteredConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigName.setDescription("The user-defined metered outlet ID string")
rPDU2OutletMeteredConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigNumber.setDescription("The numeric switched outlet ID")
rPDU2OutletMeteredConfigLowLoadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigLowLoadCurrentThreshold.setDescription("User-defined low load outlet current threshold in Watts")
rPDU2OutletMeteredConfigNearOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigNearOverloadCurrentThreshold.setDescription("User-defined near outlet overload warning threshold\nin Watts")
rPDU2OutletMeteredConfigOverloadCurrentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2OutletMeteredConfigOverloadCurrentThreshold.setDescription("User-defined outlet overload current threshold in Watts")
rPDU2OutletMeteredPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2))
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesTable.setDescription("A table of Rack PDU metered outlet properties")
rPDU2OutletMeteredPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredPropertiesIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesEntry.setDescription("Properties of currently queried Rack PDU\nmetered outlet")
rPDU2OutletMeteredPropertiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesIndex.setDescription("The index to the Rack PDU metered properties table\nentry")
rPDU2OutletMeteredPropertiesModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletMeteredPropertiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesName.setDescription("The user-defined metered outlet ID string")
rPDU2OutletMeteredPropertiesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesNumber.setDescription("The numeric metered outlet ID")
rPDU2OutletMeteredPropertiesLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 5), Rpdu2OutletPhaseLayoutType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesLayout.setDescription("This OID describes the phase connections of\nthe referenced outlet as follows:\n\nseqPhase1ToNeutral(1) indicates that the outlet is\nwired from Phase 1 to Neutral.\n\nseqPhase2ToNeutral(2) indicates that the outlet is\nwired from Phase 2 to Neutral.\n\nseqPhase3ToNeutral(3) indicates that the outlet is\nwired from Phase 3 to Neutral.\n\nseqPhase1ToPhase2(4) indicates that the outlet is\nwired from Phase 1 to Phase 2.\n\nseqPhase2ToPhase3(5) indicates that the outlet is\nwired from Phase 2 to Phase 3.\n\nseqPhase3ToPhase1(6) indicates that the outlet is\nwired from Phase 3 to Phase 1.")
rPDU2OutletMeteredPropertiesPowerRating = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesPowerRating.setDescription("Maximum power rating of Rack PDU metered outlet")
rPDU2OutletMeteredPropertiesBank = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredPropertiesBank.setDescription("This outlet's numeric bank ID")
rPDU2OutletMeteredStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3))
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusTable.setDescription("A table of Rack PDU metered outlet status data")
rPDU2OutletMeteredStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2OutletMeteredStatusIndex"))
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusEntry.setDescription("Status data from currently queried Rack PDU\nmetered outlet")
rPDU2OutletMeteredStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusIndex.setDescription("The index to the Rack PDU metered status table\nentry")
rPDU2OutletMeteredStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2OutletMeteredStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusName.setDescription("The user-defined metered outlet ID string")
rPDU2OutletMeteredStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusNumber.setDescription("The numeric metered outlet ID")
rPDU2OutletMeteredStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,4,)).subtype(namedValues=NamedValues(("lowLoad", 1), ("normal", 2), ("nearOverload", 3), ("overload", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusState.setDescription("Indicates the present load status of the Rack\nPDU metered outlet being queried")
rPDU2OutletMeteredStatusCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusCurrent.setDescription("Indicates the current draw, in tenths\nof Amps, of the load on the Rack PDU\noutlet being queried")
rPDU2OutletMeteredStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPower.setDescription("Indicates the power draw of the load \non the Rack PDU outlet being queried")
rPDU2OutletMeteredStatusPeakPower = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPower.setDescription("Indicates the peak power load draw\non the Rack PDU outlet being queried")
rPDU2OutletMeteredStatusPeakPowerTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPowerTimestamp.setDescription("Indicates the date and time that this metered\noutlet's peak power consumption occurred")
rPDU2OutletMeteredStatusPeakPowerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusPeakPowerStartTime.setDescription("Indicates the start date and time that this metered\noutlet began recording peak power observations")
rPDU2OutletMeteredStatusEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2OutletMeteredStatusEnergy.setDescription("A user resettable energy meter measuring Rack PDU load\nenergy consumption in tenths of kilowatt-hours")
rPDU2Sensor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10))
rPDU2SensorTempHumidityTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityTableSize.setDescription("The number of connected temperature-humidity sensors")
rPDU2SensorTempHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2))
rPDU2SensorTempHumidityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTable.setDescription("A table of temperature-humidity sensor\nconfiguration data")
rPDU2SensorTempHumidityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityConfigIndex"))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigEntry.setDescription("Configuration data from temperature-humidity sensor\nbeing queried")
rPDU2SensorTempHumidityConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigIndex.setDescription("The index to the temperature-humidity sensor \nconfiguration data table entry")
rPDU2SensorTempHumidityConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2SensorTempHumidityConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigName.setDescription("The user-defined temperature-humidity \nsensor ID string")
rPDU2SensorTempHumidityConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigNumber.setDescription("The temperature-humidity sensor numeric ID")
rPDU2SensorTempHumidityConfigTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTemperatureAlarmEnable.setDescription("Setting this OID enables or disables generation\nof sensor temperature alarm.\n\nGetting this OID returns the current value of\nthe temperature alarm enable.")
rPDU2SensorTempHumidityConfigHumidityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityAlarmEnable.setDescription("Setting this OID enables or disables generation\nof sensor humidity alarm.\n\nGetting this OID returns the current value of\nthe humidity alarm enable.")
rPDU2SensorTempHumidityConfigTempMaxThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempMaxThreshF.setDescription("Sensor maximum temperature alarm threshold in \nFahrenheit. Attempting to set this OID to a\nvalue less than or equal to that of\nrPDU2SensorTempHumidityConfigTempHighThreshF\nwill result in an error.")
rPDU2SensorTempHumidityConfigTempHighThreshF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHighThreshF.setDescription("Sensor high temperature warning alarm threshold\nin Fahrenheit. Attempting to set this OID to a\nvalue greater than or equal to that of\nrPDU2SensorTempHumidityConfigTempMaxThreshF\nwill result in an error.")
rPDU2SensorTempHumidityConfigTempHysteresisF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHysteresisF.setDescription("Sensor temperature hysteresis setting in Fahrenheit")
rPDU2SensorTempHumidityConfigTempMaxThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempMaxThreshC.setDescription("Sensor maximum temperature alarm threshold\nin Celsius. Attempting to set this OID to a\nvalue less than or equal to that of\nrPDU2SensorTempHumidityConfigTempHighThreshC\nwill result in an error.")
rPDU2SensorTempHumidityConfigTempHighThreshC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHighThreshC.setDescription("Sensor high temperature warning alarm threshold\nin Celsius. Attempting to set this OID to a\nvalue greater than or equal to that of\nrPDU2SensorTempHumidityConfigTempMaxThreshC\nwill result in an error.")
rPDU2SensorTempHumidityConfigTempHysteresisC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigTempHysteresisC.setDescription("Sensor temperature hysteresis setting in Celsius")
rPDU2SensorTempHumidityConfigHumidityLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityLowThresh.setDescription("Sensor low humidity warning alarm threshold in percent\nrelative humidity. Attempting to set this OID to a\nvalue less than or equal to that of \nrPDU2SensorTempHumidityConfigHumidityMinThresh\nwill result in an error. Must be between 15% and 90%")
rPDU2SensorTempHumidityConfigHumidityMinThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityMinThresh.setDescription("Sensor minimum humidity alarm threshold in percent\nrelative humidity. Attempting to set this OID to a\nvalue greater than or equal to that of\nrPDU2SensorTempHumidityConfigHumidityLowThresh\nwill result in an error. Must be between 15% and 90%")
rPDU2SensorTempHumidityConfigHumidityHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityConfigHumidityHysteresis.setDescription("Sensor humidity hysteresis setting in percent relative\nhumidity")
rPDU2SensorTempHumidityStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTable.setDescription("A table of temperature-humidity sensor status data")
rPDU2SensorTempHumidityStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorTempHumidityStatusIndex"))
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusEntry.setDescription("Status information from temperature-humidity sensor\nbeing queried")
rPDU2SensorTempHumidityStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusIndex.setDescription("The index to the temperature-humidity \nstatus data table entry")
rPDU2SensorTempHumidityStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2SensorTempHumidityStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusName.setDescription("The user-defined temperature-humidity\nsensor ID string")
rPDU2SensorTempHumidityStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusNumber.setDescription("The temperature-humidity sensor numeric ID")
rPDU2SensorTempHumidityStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("temperatureOnly", 1), ("temperatureHumidity", 2), ("commsLost", 3), ("notInstalled", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusType.setDescription("The type of the sensor")
rPDU2SensorTempHumidityStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusCommStatus.setDescription("The communications status of the sensor")
rPDU2SensorTempHumidityStatusTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempF.setDescription("Sensor temperature reading in tenths of degrees Fahrenheit")
rPDU2SensorTempHumidityStatusTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempC.setDescription("Sensor temperature reading in tenths of degrees Celsius")
rPDU2SensorTempHumidityStatusTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(3,6,4,2,5,1,)).subtype(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusTempStatus.setDescription("This OID reports the current state of the temperature probe.\n\nA notPresent (1) response indicates that no probe is attached.\nA belowMin (2) response indicates that the probe is present and\nits measured temperature lies below the minimum threshold.\nA belowLow (3) response indicates that the probe is present and\nits measured temperature lies below the low threshold.\nA normal (4) response indicates that the probe is present\nand its measured temperature lies within all temperature thresholds.\nAn aboveHigh (5) response indicates that the probe is present\nand is measuring a temperature above the high threshold.\nAn aboveMax (6) response indicates that the probe is present\nand is measuring a temperature above the max threshold.")
rPDU2SensorTempHumidityStatusRelativeHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusRelativeHumidity.setDescription("Sensor humidity reading in percent relative humidity")
rPDU2SensorTempHumidityStatusHumidityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 11), Integer().subtype(subtypeSpec=SingleValueConstraint(3,6,4,2,5,1,)).subtype(namedValues=NamedValues(("notPresent", 1), ("belowMin", 2), ("belowLow", 3), ("normal", 4), ("aboveHigh", 5), ("aboveMax", 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorTempHumidityStatusHumidityStatus.setDescription("This OID reports the current state of the humidity probe.\n\nA notPresent (1) response indicates that no probe is attached.\nA belowMin (2) response indicates that the probe is present and\nits measured humidity lies below the minimum threshold.\nA belowLow (3) response indicates that the probe is present and\nits measured humidity lies below the low threshold.\nA normal (4) response indicates that the probe is present\nand its measured humidity lies within all humidity thresholds.\nAn aboveHigh (5) response indicates that the probe is present\nand is measuring a humidity above the high threshold.\nAn aboveMax (6) response indicates that the probe is present\nand is measuring a humidity above the max threshold.")
rPDU2SensorDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteTableSize.setDescription("The number of connected discrete sensors")
rPDU2SensorDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4))
rPDU2SensorDiscreteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1))
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigTable.setDescription("A table of discrete sensor configuration\ndata")
rPDU2SensorDiscreteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteConfigIndex"))
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigEntry.setDescription("Configuration data from discreste sensor\nbeing queried")
rPDU2SensorDiscreteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigIndex.setDescription("The index to the discrete sensor configuration\ndata table entry")
rPDU2SensorDiscreteConfigModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2SensorDiscreteConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigName.setDescription("The user-defined discrete sensor ID string")
rPDU2SensorDiscreteConfigNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigNumber.setDescription("The discrete sensor numeric ID")
rPDU2SensorDiscreteConfigNormalState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigNormalState.setDescription("Indicates the normal state of the discrete input\ncontact")
rPDU2SensorDiscreteConfigAbnormalSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 1, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("informational", 1), ("warning", 2), ("critical", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2SensorDiscreteConfigAbnormalSeverity.setDescription("Indicates the severity of alarm triggered by \nabnormal discrete input contact state")
rPDU2SensorDiscreteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2))
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusTable.setDescription("A table of discrete sensor status data")
rPDU2SensorDiscreteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2SensorDiscreteStatusIndex"))
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusEntry.setDescription("Status information from discrete sensor\nbeing queried")
rPDU2SensorDiscreteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusIndex.setDescription("The index to the discrete sensor status data\ntable entry")
rPDU2SensorDiscreteStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2SensorDiscreteStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusName.setDescription("The user-defined discrete sensor ID string")
rPDU2SensorDiscreteStatusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusNumber.setDescription("The discrete sensor numeric ID")
rPDU2SensorDiscreteStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,5,7,3,1,6,2,)).subtype(namedValues=NamedValues(("notConnected", 1), ("doorContactSensor", 2), ("smokeSensor", 3), ("motionDetector", 4), ("vibrationSensor", 5), ("dryContactSensor", 6), ("spotLeakSensor", 7), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusType.setDescription("The type of discrete sensor currently being queried")
rPDU2SensorDiscreteStatusCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("notInstalled", 1), ("commsOK", 2), ("commsLost", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusCommStatus.setDescription("The communications status of the sensor")
rPDU2SensorDiscreteStatusCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,)).subtype(namedValues=NamedValues(("open", 1), ("closed", 2), ("unknown", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusCurrentState.setDescription("The current open/close state of the discrete\nsensor")
rPDU2SensorDiscreteStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 4, 2, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("normal", 1), ("alarm", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2SensorDiscreteStatusAlarmState.setDescription("Indicates alarm status of discrete sensor input")
rPDU2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11))
rPDU2GroupNumberOfDevices = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupNumberOfDevices.setDescription("Getting this OID will return the number of Rack PDU devices contributing \nto the Network Port Sharing (NPS) group power and energy values.  \nQueries to guest units in an NPS group are not applicable and will \nreturn 0.")
rPDU2GroupTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupTotalPower.setDescription("Getting this OID will return the total power consumption of the Rack PDU \nNetwork Port Sharing (NPS) group devices in hundredths of kilowatts.  \nQueries to guest units in an NPS group are not applicable and will \nreturn 0.")
rPDU2GroupTotalEnergy = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2GroupTotalEnergy.setDescription("Getting this OID will return the total energy consumption of the Rack PDU\nNetwork Port Sharing (NPS) group devices in tenths of kilowatt-hours.  \n\nTo reset the energy meters for each of the Rack PDU devices that contribute\nto this value, see the rPDU2GroupEnergyReset OID.\n\nTo view the start time for each of the Rack PDU device energy meters that\ncontribute to this value, see the rPDU2DeviceStatusEnergyStartTime OID.\n\nQueries to guest units in an NPS group are not applicable and will \nreturn 0.")
rPDU2GroupEnergyReset = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 11, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,3,)).subtype(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notSupported", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rPDU2GroupEnergyReset.setDescription("Setting this OID to reset (2) will cause the device energy meter value\non each device in the Rack PDU Network Port Sharing (NPS) group to be \nreset to zero. \n\nEach device in the Rack PDU group will also have its corresponding\nrPDU2DeviceStatusEnergyStartTime OID value updated.\n\nGetting this OID in models that support this feature will do nothing\nand return the noOperation(1) value.\n\nModels that do not support this feature, as well as guest units in an \nNPS group, will respond to this OID with a value of notSupported (3). \nAttempts to set this OID in these units will fail.")
rPDU2PhaseToPhaseStatusTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusTableSize.setDescription("The number of connected Rack PDU banks")
rPDU2PhaseToPhase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13))
rPDU2PhaseToPhaseStatusTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1))
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusTable.setDescription("A table of Rack PDU phase to phase status data.\nThis table is only applicable to SKUs that have\nphase to phase outputs.")
rPDU2PhaseToPhaseStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1)).setIndexNames((0, "PowerNet-MIB", "rPDU2PhaseToPhaseStatusIndex"))
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusEntry.setDescription("Status data from currently queried Rack PDU \nphase to phase outputs")
rPDU2PhaseToPhaseStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusIndex.setDescription("The index to the Rack PDU phase to phase status table\nentry")
rPDU2PhaseToPhaseStatusModule = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusModule.setDescription("The user-defined Rack PDU numeric ID")
rPDU2PhaseToPhaseStatusVoltage1to2 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage1to2.setDescription("Indicates the Voltage, in Volts, of the Rack\nPDU phase 1 to phase 2 output being queried")
rPDU2PhaseToPhaseStatusVoltage2to3 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage2to3.setDescription("Indicates the Voltage, in Volts, of the Rack\nPDU phase 2 to phase 3 output being queried")
rPDU2PhaseToPhaseStatusVoltage3to1 = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rPDU2PhaseToPhaseStatusVoltage3to1.setDescription("Indicates the Voltage, in Volts, of the Rack\nPDU phase 3 to phase 2 output being queried")
cooling = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27))
coolingUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1))
coolingUnitTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitTableSize.setDescription("The number of cooling units accessible via this agent.")
coolingUnitTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2))
if mibBuilder.loadTexts: coolingUnitTable.setDescription("A table of cooling unit level data.")
coolingUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"))
if mibBuilder.loadTexts: coolingUnitEntry.setDescription("An element of coolingUnitTable.")
coolingUnitTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitTableIndex.setDescription("The unit reference identifier for this table and all other table entries subordinate to coolingUnits.")
coolingUnitAbout = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3))
coolingUnitAboutTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutTableSize.setDescription("The potential number of entries available in coolingUnitAboutTable.")
coolingUnitAboutTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2))
if mibBuilder.loadTexts: coolingUnitAboutTable.setDescription("A table of unit reference information.")
coolingUnitAboutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitAboutTableIndex"))
if mibBuilder.loadTexts: coolingUnitAboutEntry.setDescription("An element of coolingUnitAboutTable.")
coolingUnitAboutTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitAboutTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitAboutDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutDescription.setDescription("A text description of the information presented in coolingUnitAboutValue.")
coolingUnitAboutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitAboutValue.setDescription("The actual value of the current table entry.")
coolingUnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4))
coolingUnitStatusAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1))
coolingUnitStatusAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogTableSize.setDescription("The potential number of entries available in coolingUnitStatusAnalogTable.")
coolingUnitStatusAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2))
if mibBuilder.loadTexts: coolingUnitStatusAnalogTable.setDescription("A table of analog unit status data.")
coolingUnitStatusAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitStatusAnalogEntry.setDescription("An element of coolingUnitStatusAnalogTable.")
coolingUnitStatusAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitStatusAnalogTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitStatusAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogDescription.setDescription("A text description of the information presented in coolingUnitStatusAnalogValue.")
coolingUnitStatusAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogValue.setDescription("The scaled value of the current table entry (multiplied by coolingUnitStatusAnalogScale for integer presentation).")
coolingUnitStatusAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogUnits.setDescription("The unit of measure by which coolingUnitStatusAnalogValue is expressed.")
coolingUnitStatusAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusAnalogScale.setDescription("The factor by which coolingUnitStatusAnalogValue is expressed.")
coolingUnitStatusDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2))
coolingUnitStatusDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTableSize.setDescription("The potential number of entries available in coolingUnitStatusDiscreteTable.")
coolingUnitStatusDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2))
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTable.setDescription("A table of discrete unit status data.")
coolingUnitStatusDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitStatusDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitStatusDiscreteEntry.setDescription("An element of coolingUnitStatusDiscreteTable.")
coolingUnitStatusDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitStatusDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteDescription.setDescription("A text description of the information presented in this table's 'value' OIDs.")
coolingUnitStatusDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteValueAsString.setDescription("The actual value of the current table entry expressed as a string.")
coolingUnitStatusDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteValueAsInteger.setDescription("The actual value of the current table entry expressed as an integer value.")
coolingUnitStatusDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitStatusDiscreteIntegerReferenceKey.setDescription("A complete listing of all possible coolingUnitStatusDiscreteValueAsInteger values paired with their identifying strings.")
coolingUnitConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5))
coolingUnitConfigurationAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1))
coolingUnitConfigurationAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTableSize.setDescription("The potential number of entries available in coolingUnitConfigurationAnalogTable.")
coolingUnitConfigurationAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2))
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTable.setDescription("A table of analog unit configuration data.")
coolingUnitConfigurationAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogEntry.setDescription("An element of coolingUnitConfigurationAnalogTable.")
coolingUnitConfigurationAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitConfigurationAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogDescription.setDescription("A text description of the information presented in coolingUnitConfigurationAnalogValue.")
coolingUnitConfigurationAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogValue.setDescription("The scaled value of the current table entry (multiplied by coolingUnitConfigurationAnalogScale for integer presentation).")
coolingUnitConfigurationAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogUnits.setDescription("The unit of measure by which coolingUnitConfigurationAnalogValue is expressed.")
coolingUnitConfigurationAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogScale.setDescription("The factor by which coolingUnitConfigurationAnalogValue is expressed.")
coolingUnitConfigurationAnalogAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogAccess.setDescription("A description of available access to coolingUnitConfigurationAnalogValue via SNMP client.")
coolingUnitConfigurationAnalogMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogMinimum.setDescription("The minimum possible value of coolingUnitConfigurationAnalogValue.")
coolingUnitConfigurationAnalogMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationAnalogMaximum.setDescription("The maximum possible value of coolingUnitConfigurationAnalogValue.")
coolingUnitConfigurationDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2))
coolingUnitConfigurationDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTableSize.setDescription("The potential number of entries available in coolingUnitConfigurationDiscreteTable.")
coolingUnitConfigurationDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2))
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTable.setDescription("A table of discrete unit configuration data.")
coolingUnitConfigurationDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteEntry.setDescription("An element of coolingUnitConfigurationDiscreteTable.")
coolingUnitConfigurationDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitConfigurationDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteDescription.setDescription("A text description of the information presented in this table's 'value' OIDs.")
coolingUnitConfigurationDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteValueAsString.setDescription("The actual value of the current table entry expressed as a string.")
coolingUnitConfigurationDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteValueAsInteger.setDescription("The actual value of the current table entry expressed as an integer value.")
coolingUnitConfigurationDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteIntegerReferenceKey.setDescription("A complete listing of all possible coolingUnitConfigurationDiscreteValueAsInteger values paired with their identifying strings.")
coolingUnitConfigurationDiscreteAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 2, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationDiscreteAccess.setDescription("A description of available access to coolingUnitConfigurationDiscreteValueAsInteger via SNMP client.")
coolingUnitConfigurationString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3))
coolingUnitConfigurationStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringTableSize.setDescription("The potential number of entries available in coolingUnitConfigurationStringTable.")
coolingUnitConfigurationStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2))
if mibBuilder.loadTexts: coolingUnitConfigurationStringTable.setDescription("A table of unit configuration strings.")
coolingUnitConfigurationStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitConfigurationStringTableIndex"))
if mibBuilder.loadTexts: coolingUnitConfigurationStringEntry.setDescription("An element of coolingUnitConfigurationStringTable.")
coolingUnitConfigurationStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitConfigurationStringTableIndex.setDescription("The static reference identifier for each table entry.")
coolingUnitConfigurationStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringDescription.setDescription("A text description of the information presented in coolingUnitConfigurationStringValue.")
coolingUnitConfigurationStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: coolingUnitConfigurationStringValue.setDescription("The actual value of the current table entry.")
coolingUnitConfigurationStringMaxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringMaxLength.setDescription("The maximum string length supported by coolingUnitConfigurationStringValue.")
coolingUnitConfigurationStringAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 5, 3, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,)).subtype(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitConfigurationStringAccess.setDescription("A description of available access to coolingUnitConfigurationStringValue via SNMP client.")
coolingUnitExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6))
coolingUnitExtendedAnalog = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1))
coolingUnitExtendedAnalogTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTableSize.setDescription("The potential number of entries available in coolingUnitExtendedAnalogTable.")
coolingUnitExtendedAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2))
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTable.setDescription("A table of secondary analog data for the cooling unit or one of its components.")
coolingUnitExtendedAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedAnalogTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedAnalogEntry.setDescription("An element of coolingUnitExtendedAnalogTable.")
coolingUnitExtendedAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogTableIndex.setDescription("The static reference identifier for each table entry.  This identifier may reference different table entries in different unit models.")
coolingUnitExtendedAnalogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogDescription.setDescription("A text description of the information presented in coolingUnitExtendedAnalogValue.")
coolingUnitExtendedAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogValue.setDescription("The scaled value of the current table entry (multiplied by coolingUnitExtendedAnalogScale for integer presentation).")
coolingUnitExtendedAnalogUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogUnits.setDescription("The unit of measure by which coolingUnitExtendedAnalogValue is expressed.")
coolingUnitExtendedAnalogScale = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedAnalogScale.setDescription("The factor by which coolingUnitExtendedAnalogValue is expressed.")
coolingUnitExtendedDiscrete = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2))
coolingUnitExtendedDiscreteTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTableSize.setDescription("The potential number of entries available in coolingUnitExtendedDiscreteTable.")
coolingUnitExtendedDiscreteTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2))
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTable.setDescription("A table of secondary discrete cooling unit data.")
coolingUnitExtendedDiscreteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedDiscreteTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteEntry.setDescription("An element of coolingUnitExtendedDiscreteTable.")
coolingUnitExtendedDiscreteTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteTableIndex.setDescription("The static reference identifier for each table entry.  This identifier may reference different table entries in different unit models.")
coolingUnitExtendedDiscreteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteDescription.setDescription("A text description of the information presented in this table's 'value' OIDs.")
coolingUnitExtendedDiscreteValueAsString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteValueAsString.setDescription("The actual value of the current table entry expressed as a string.")
coolingUnitExtendedDiscreteValueAsInteger = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteValueAsInteger.setDescription("The actual value of the current table entry expressed as an integer value.")
coolingUnitExtendedDiscreteIntegerReferenceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedDiscreteIntegerReferenceKey.setDescription("A complete listing of all possible coolingUnitExtendedDiscreteValueAsInteger values paired with their identifying strings.")
coolingUnitExtendedString = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3))
coolingUnitExtendedStringTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringTableSize.setDescription("The potential number of entries available in coolingUnitExtendedStringTable.")
coolingUnitExtendedStringTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2))
if mibBuilder.loadTexts: coolingUnitExtendedStringTable.setDescription("A table of secondary unit reference data.")
coolingUnitExtendedStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1)).setIndexNames((0, "PowerNet-MIB", "coolingUnitTableIndex"), (0, "PowerNet-MIB", "coolingUnitExtendedStringTableIndex"))
if mibBuilder.loadTexts: coolingUnitExtendedStringEntry.setDescription("An element of coolingUnitExtendedStringTable.")
coolingUnitExtendedStringTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: coolingUnitExtendedStringTableIndex.setDescription("The static reference identifier for each table entry.  This identifier may reference different table entries in different unit models.")
coolingUnitExtendedStringDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringDescription.setDescription("A text description of the information presented in coolingUnitExtendedStringValue.")
coolingUnitExtendedStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 1, 27, 1, 6, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingUnitExtendedStringValue.setDescription("The actual value of the current table entry.")
software = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2))
powerNetSubAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1))
powerNetSoftwareSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1))
powerNetSoftwareSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareSystemDescription.setDescription("A brief description of the PowerNet sub-agent.")
powerNetSoftwareOid = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareOid.setDescription("The object identifier of the PowerNet sub-agent.")
powerNetSoftwareSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareSystemUpTime.setDescription("The time that the sub-agent has been running.")
powerNetSoftwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2))
powerNetSoftwareTableSize = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerNetSoftwareTableSize.setDescription("The number of software modules supporting the UPS.")
powerNetSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2))
if mibBuilder.loadTexts: powerNetSoftwareTable.setDescription("A list of the software monitoring the UPS.")
powerNetSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1)).setIndexNames((0, "PowerNet-MIB", "moduleNumber"))
if mibBuilder.loadTexts: powerNetSoftwareEntry.setDescription("An entry containing information on a software module.")
moduleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumber.setDescription("The index into the Software Entry Table")
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleName.setDescription("The name of the software module.")
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setDescription("The version of the software module.")
moduleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleDate.setDescription("The date of the software module represented as mm-dd-yy.")
struxureWareOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2))
struxureWareOperationsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1))
serverStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,2,9,1,5,6,7,8,)).subtype(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4), ("initializing", 5), ("starting", 6), ("disaster-recovery", 7), ("postoffice-inconsistent", 8), ("missing-jgroups", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStatus.setDescription("The status of the StruxureWare Operations server:\n1: The status of the application server is unknown. Check Webmin and if \nthe problem persists, contact Technical Support.\n2: Restart the StruxureWare DC Operation server. If the server was part of \na cluster, see the StruxureWare DC Operation User Assistance about \nrejoining the cluster. If the problem persists, contact Technical Support.\n3: No problem.\n4: High availability is lost. The StruxureWare DC Operation Application \nserver is running but one or more nodes are not available. If the \nStruxureWare DC Operation server is part of a cluster, ensure all nodes \nare running and there is a network connection between the nodes. If the \nproblem persists, contact Technical Support.\n5: Wait for the StruxureWare DC Operation Application server to initialize.\nIf the problem persists, contact Technical Support.\n6: Wait for the StruxureWare DC Operation Application server to finish \nstarting. \nIf the problem persists, contact Technical Support.\n7: This node is running in Disaster Recovery mode.\n8: The JBoss postoffice is currently inconsistent. This may be a temporary \nissue. If the problem persists for more than 10 minutes, \ncontact Technical Support.\n9: The JBoss is missing jgroups. This may be a temporary issue. If the \nproblem persists for more than 10 minutes, contact Technical Support.")
databaseStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(3,10,9,1,7,8,6,2,5,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("running-alone", 10), ("stopped", 2), ("running", 3), ("detached", 4), ("catching-up", 5), ("attaching", 6), ("running-master", 7), ("running-primary-slave", 8), ("running-slave", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseStatus.setDescription("The status of the StruxureWare Operations database:\n1: The status of the database is unknown. Check Webmin and if the problem \npersists, contact Technical Support.\n2: Restart the StruxureWare DC Operation server. If the server was part of \na cluster, see the StruxureWare DC Operation User Assistance about \nrejoining the cluster. If the problem persists, contact Technical Support.\n3: No problem.\n4: High availability is lost. The database is detached from the cluster \nand does not receive updates. See the StruxureWare DC Operation User \nAssistance about reattaching the database node to the StruxureWare DC \nOperation cluster. \nIf the problem persists, contact Technical Support.\n5: The database is catching up with the cluster. Wait for the StruxureWare \nDC Operation database to retrieve all updates from the master node. \nIf the problem persists, contact Technical Support.\n6: The database is attaching to the cluster. Wait for the StruxureWare \nOperation database to attach to the cluster. If the problem persists, \ncontact Technical Support.\n7: The database is the master in a cluster.\n8: The database is the primary slave in the cluster. All changes on master \nare synchronously replicated to this node.\n9: The database is a secondary slave in the cluster. All changes on \nmaster are asynchronously replicated to this node.\n10: The database does not replicate its changes to other nodes.")
loadBalancerStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("running-missing", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadBalancerStatus.setDescription("The status of the StruxureWare Operations load balancer:\n1: Load Balancer status is unknown. Check Webmin and if the problem \npersists, contact Technical Support.\n2: Load Balancer stopped. Restart the StruxureWare DC Operation server. \nIf the problem persists, contact Technical Support.\n3: Normal status\n4: High availability is lost. The StruxureWare DC Operation Load Balancer \nis running but one or more nodes are not available. If the StruxureWare DC \nOperation server is part of a cluster, ensure all nodes are running and \nthere is a network connection between the nodes. If the problem persists, \ncontact Technical Support.")
essentialServicesStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(5,1,3,2,4,)).subtype(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("running", 3), ("time-sync-problems", 4), ("backup-problems", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: essentialServicesStatus.setDescription("The status of the StruxureWare Operations essential services:\n1: Unknown status. Check Webmin and if the problem persists, contact \nTechnical Support.\n2: Essential services are not running on the StruxureWare DC Operation \nserver. Reboot the node and monitor the status page in Webmin. If the\nproblem persists, contact Technical Support.\n3: Normal status\n4: The time difference between the StruxureWare DC Operation slave and the \nmaster node is too big. Correct the time on the slave to match the time on \nthe master. Consider using an NTP server. If the problem persists, \ncontact Technical Support.\n5: The last backup that was attempted on the StruxureWare DC Operation \nserver has failed. Make certain that the system can write to the location \nspecified as backup location. This is particularly relevant for network \nattached storage. If the problem persists, contact Technical Support.")
etlStatus = MibScalar((1, 3, 6, 1, 4, 1, 318, 1, 2, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,3,2,5,)).subtype(namedValues=NamedValues(("unknown", 1), ("running", 2), ("failed", 3), ("paused", 4), ("stopped", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etlStatus.setDescription("The status of the StruxureWare Operations ETL services:\n1: Unknown status. Check the network configuration and the server \nnetwork settings. If the problem persists, contact \nTechnical Support (http://www.apc.com/go/direct/index.cfm?tag=support).\n2: Normal status,\n3: ETL Transformations have failed and are subsequently stopped. \nInvestigate the cause of the failure. If the problem persists, contact \nTechnical Support (http://www.apc.com/go/direct/index.cfm?tag=support).\n4: ETL Transformations are currently paused.\n5: ETL Transformations are currently stopped.")
system = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3))
backUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 1))
smartUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2))
smartUPS250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 1))
smartUPS400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 2))
smartUPS600 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 3))
smartUPS900 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 4))
smartUPS1250 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 5))
smartUPS2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 6))
smartUPS450 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 7))
smartUPS700 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 8))
smartUPS1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 9))
smartUPS1400 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 10))
smartUPS2200 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 11))
smartUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 12))
smartUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 13))
smartUPS7500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 14))
smartUPS10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 15))
smartUPS1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 16))
smartUPS3000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 17))
smartUPS5000DSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 18))
smartUPS8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 19))
matrixUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3))
matrixUPS3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 1))
matrixUPS5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 2))
masterSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4))
masterSwitchV1 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 1))
masterSwitchV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 2))
masterSwitchVM = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 3))
masterSwitchMSP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 4))
masterSwitchrPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 5))
masterSwitchrPDU2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 6))
masterSwitchsPDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 7))
symmetraUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5))
symmetraUPS4kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 1))
symmetraUPS8kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 2))
symmetraUPS12kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 3))
symmetraUPS16kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 4))
dp100E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 6))
dp300E = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 7))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 1))
environmentalMgtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 2))
emu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 3))
mem = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 4))
redundantSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 9))
dcPower = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10))
dm3 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 1))
dcmim2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 2))
automaticXferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 11))
netLock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 12))
symmetra3PhaseUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13))
symmetra3PhaseUPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 1))
symmetra3PhaseUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 2))
symmetra3PhaseUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 3))
symmetra3PhaseUPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 4))
networkAir = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14))
airFMSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 1))
rackAirRemovalUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 2))
airPASeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 3))
airIRSC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 4))
airIRRC100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 5))
airIRRP100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 6))
airIRRP500Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 7))
airIRRD100Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 8))
airInRoomPerimeter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 9))
airACRC300Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 10))
airLESeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 11))
airIRRDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 12))
airEcoBreeze = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 13))
airLELSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 14))
airACRC600Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 15))
airACRD600Series = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 16))
infraStruXurePDU = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 15))
ais5000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16))
ais5000UPS10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 1))
ais5000UPS20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 2))
ais5000UPS30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 3))
ais5000UPS40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 4))
ais5000UPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 5))
ais5000UPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 6))
ais5000UPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 7))
smartUPS3Phase = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17))
smartUPS3Phase10kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 1))
smartUPS3Phase15kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 2))
smartUPS3Phase20kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 3))
smartUPS3Phase30kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 4))
smartUPS3Phase40kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 5))
battManager = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 18))
infraStruXureATS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 19))
conPortServ = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20))
conPortServAP930x = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 20, 1))
gutor = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21))
gutorPEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 1))
gutorPDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 2))
gutorWEW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 3))
gutorWDW = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 4))
gutorSDC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 5))
accControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22))
accPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 22, 1))
symmetraPX = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23))
symmetraPx48kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 1))
symmetraPx160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 2))
symmetraPx250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 3))
symmetraPx500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 4))
symmetraPx100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 5))
symmetraPxDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 6))
isxModDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24))
isx24ModuleHalfRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 1))
isx6ModuleRackPdu = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 2))
isxServers = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25))
isxcBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 1))
isxcStandard = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 2))
isxcEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 3))
isxcVirtual = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 4))
smartUPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 27))
galaxy = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28))
galaxy7000UPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 1))
galaxy7000UPS250kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 2))
galaxy7000UPS300kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 3))
galaxy7000UPS400kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 4))
galaxy7000UPS500kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 5))
galaxy7000SSC800kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 6))
galaxy7000SSC1200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 7))
galaxy7000SSC2000kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 8))
galaxy300UPS10kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 9))
galaxy300UPS15kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 10))
galaxy300UPS20kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 11))
galaxy300UPS30kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 12))
galaxy300UPS40kVA33 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 13))
galaxy300UPS10kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 14))
galaxy300UPS15kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 15))
galaxy300UPS20kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 16))
galaxy300UPS30kVA31 = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 17))
galaxy5000UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 18))
galaxy5000UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 19))
galaxy5000UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 20))
galaxy5000UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 21))
galaxy5000UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 22))
galaxy5000UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 23))
galaxy5000UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 24))
galaxy5000UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 25))
galaxy5000UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 26))
galaxy5500UPS20KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 27))
galaxy5500UPS30KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 28))
galaxy5500UPS40KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 29))
galaxy5500UPS50KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 30))
galaxy5500UPS60KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 31))
galaxy5500UPS80KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 32))
galaxy5500UPS100KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 33))
galaxy5500UPS120KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 34))
galaxy5500UPS130KVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 35))
galaxyVMUPS50kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 36))
galaxyVMUPS60kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 37))
galaxyVMUPS80kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 38))
galaxyVMUPS90kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 39))
galaxyVMUPS100kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 40))
galaxyVMUPS110kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 41))
galaxyVMUPS120kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 42))
galaxyVMUPS130kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 43))
galaxyVMUPS160kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 44))
galaxyVMUPS180kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 45))
galaxyVMUPS200kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 46))
galaxyVMUPS225kVA = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 47))
galaxy9000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 48))
galaxy9000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 49))
galaxy9000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 50))
galaxy9000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 51))
eps = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30))
eps6000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 1))
eps6000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 2))
eps6000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 3))
eps6000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 4))
eps7000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 5))
eps7000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 6))
eps7000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 7))
eps7000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 8))
eps8000UPS = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 9))
eps8000SSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 10))
eps8000UPSWithSSC = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 11))
eps8000FreqConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 3, 30, 12))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 1, 4))
apcmgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2))
mconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1))
mconfigNumTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigNumTrapReceivers.setDescription("The number of managers to send traps to.")
mconfigTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 318, 2, 1, 2))
if mibBuilder.loadTexts: mconfigTrapReceiverTable.setDescription("A list of managers to send traps to.  The number of\nentries is given by the value of mconfigNumTrapReceivers.")
mconfigTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1)).setIndexNames((0, "PowerNet-MIB", "trapIndex"))
if mibBuilder.loadTexts: mconfigTrapReceiverEntry.setDescription("The managers to send traps to.")
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setDescription("The index to a trap receiver entry.")
receiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverAddr.setDescription("The IP address of the manager to send a trap to.")
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setDescription("The community name to use in the trap when\nsent to the manager.")
severity = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("information", 1), ("warning", 2), ("severe", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severity.setDescription("The severity threshold of traps to send to the manager.\ntraps are labeled in severity as informational(1), warning(2),\nsevere(3).  Only traps of equal or greater severity than\nthis value are sent to the manager.")
acceptThisReceiver = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acceptThisReceiver.setDescription("The value of yes(1) indicates that trap generation for this manager is enabled.\nThe value of no(2) indicates that trap generation for this manager is disabled")
receiveTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,3,1,)).subtype(namedValues=NamedValues(("powernet", 1), ("ietf", 2), ("both", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveTrapType.setDescription("Type of trap.")
mconfigBOOTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("yes", 1), ("no", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mconfigBOOTPEnabled.setDescription("The value of yes(1) indicates the PowerNet Adapter is configured to\nobtain its IP configuration parameters from a BOOTP server.\n\nThe value of no(2) indicates adapter will assume IP configuration parameters \nvalues saved in adapter's eeprom, which was originally configured at local\nconsole.")
mconfigTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigTFTPServerIP.setDescription("The IP address of TFTP server. If mconfigBOOTPEnabled is yes(1), then this IP address\nis provided by BOOTP server and not allowed to be modified; otherwise, this IP address\ncan be modified.\n\nBefore using TFTP to load new code image, the image file should be placed in proper\ndirectory of the specified TFTP server. This OID is only supported by APC Network\nManagement Cards.")
newCodeAuthentViaTFTP = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,4,2,)).subtype(namedValues=NamedValues(("unknown", 1), ("validNewAgentCodeImage", 2), ("sameAgentCodeImage", 3), ("invalidAgentCodeImage", 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCodeAuthentViaTFTP.setDescription("Once mcontrolRestartAgent is set to loadAndExecuteNewAgent (3), PowerNet adapter will\nstart to load the remote image file, for authentication only, instead of saving the code \ninto flash memory. Only if a validNewAgentCodeImage (1) is found will the agent reboot\nthe PowerNet adapter and invoke the loader to load and save new code into the flash memory. \nOtherwise, the current agent code will continue to run.\n\nThis OID shows the result of the above authentication process.  \n         validNewAgentCodeImage (1) means the code image on TFTP server \n         is a valid APC agent code and is different version from the current agent.\n         Once agent identifies this, loader will start to update flash memory with\n         the new agent code.\n\n         sameAgentCodeImage  (2)  means the code image on TFTP server is exactly the\n         same as the currently running agent. Currently running agent will not invoke\n         loader to load the same again.\n         \n         invalidAgentCodeImage  (3) means the code image on TFTP server is NOT a valid\n         APC agent code. Thus, current agent will not load it into the flash memory.\n         \nThe value of this OID will be associated with TRAP codeImageAuthentDone.\nThis OID is only supported by APC Network Management Cards.")
mconfigClock = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 1, 6))
mconfigClockDate = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockDate.setDescription("The current date in the mm/dd/yyyy format. Example: 01/01/2000.")
mconfigClockTime = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mconfigClockTime.setDescription("The current time in the hh:mm:ss am/pm format. Example: 12:00:00 am.")
mcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 2))
mcontrolRestartAgent = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(6,1,2,5,4,3,)).subtype(namedValues=NamedValues(("restartCurrentAgent", 1), ("continueCurrentAgent", 2), ("loadAndExecuteNewAgent", 3), ("restartWithoutAgent", 4), ("resetNetworkAndRestart", 5), ("resetNetworkLeaveModeAndRestart", 6), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcontrolRestartAgent.setDescription("Setting this OID to restartCurrentAgent (1) will restart the same SNMP\nagent code currently saved in flash memory. Setting this OID to\nloadAndExecuteNewAgent (3) will enable adapter to load a new agent code\ninto the flash memory and start to execute this new agent code.\nBootp/tftp is the default protocol. loadAndExecuteNewAgent is only\nsupported by APC Network Management Cards. Setting\nthis OID to restartWithoutAgent (4) will restart the system and not\nstart the agent. The subsequent time the system restarts the agent will\nalso automatically restart. Setting this OID to\nresetNetworkAndRestart (5) will set the Boot Mode, IP Address, Subnet\nMask, and Default Gateway to defaults, expire any existing DHCP lease\nand then restart the system. Setting this OID to\nresetNetworkLeaveModeAndRestart (6) will leave the Boot Mode at the\ncurrent setting, set the IP Address, Subnet Mask, and Default Gateway to\ndefaults, expire any existing DHCP lease and then restart the system.")
mtrapargs = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 3))
mtrapargsInteger = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger.setDescription("This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress.setDescription("This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.")
mtrapargsString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsGauge = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 4), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge.setDescription("This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks.setDescription("This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsInteger02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger02.setDescription("This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsInteger03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger03.setDescription("This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsIpAddress02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress02.setDescription("This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.")
mtrapargsIpAddress03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsIpAddress03.setDescription("This OID allows APC traps to be sent with an IP address argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.0.0.0.")
mtrapargsString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString02.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString03.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsGauge02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 12), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge02.setDescription("This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsGauge03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 13), Gauge()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsGauge03.setDescription("This OID allows APC traps to be sent with a Gauge argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsTimeTicks02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks02.setDescription("This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsTimeTicks03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsTimeTicks03.setDescription("This OID allows APC traps to be sent with a TimeTicks argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString04.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString05.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsInteger04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger04.setDescription("This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsInteger05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsInteger05.setDescription("This OID allows APC traps to be sent with an integer argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return 0.")
mtrapargsString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString06.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString07.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsString08.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString02 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString02.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString03 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString03.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString04 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString04.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString05 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 27), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString05.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString06 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString06.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString07 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString07.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mtrapargsOctetString08 = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 3, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtrapargsOctetString08.setDescription("This OID allows APC traps to be sent with an octet string argument\nthat my not be defined in the APC MIB.\n\nA get of this OID will return a NULL string.")
mfiletransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4))
mfiletransferStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 1))
mfiletransferStatusLastTransferResult = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,6,2,4,8,5,7,1,)).subtype(namedValues=NamedValues(("lastFileTransferResultSuccessful", 1), ("lastFileTransferResultNotAvailable", 2), ("lastFileTransferResultFailureUnknown", 3), ("lastFileTransferResultFailureServerInaccessible", 4), ("lastFileTransferResultFailureServerAccessDenied", 5), ("lastFileTransferResultFailureFileNotFound", 6), ("lastFileTransferResultFailureFileTypeUnknown", 7), ("lastFileTransferResultFailureFileCorrupted", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfiletransferStatusLastTransferResult.setDescription("This OID has been deprecated.\n\nOnce mfiletransferControlInitiateFileTransfer is set to a value other than doNotInitiateFileTransfer\na file transfer of mfiletransferConfigSettingsFilename will be attempted from either a TFTP or FTP\nserver.\n \nThis OID shows the last attempted file transfer result.\n  lastFileTransferResultSuccessful (1) means the file transfer was successful.\n  lastFileTransferResultNotAvailable (2) means that there have been no previous file transfers.\n  lastFileTransferResultFailureUnknown (3) means that the last file transfer failed for an unknown reason.\n  lastFileTransferResultFailureServerInaccessible (4) means that the TFTP or FTP server could not be found on the network.\n  lastFileTransferResultFailureServerAccessDenied (5) means that the TFTP or FTP server denied access.\n  lastFileTransferResultFailureFileNotFound (6) means that the file could not be located.\n  lastFileTransferResultFailureFileTypeUnknown (7) means the file was examined, but the contents were unknown.\n  lastFileTransferResultFailureFileCorrupt (8) means the transferred file was corrupt.")
mfiletransferConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2))
mfiletransferConfigSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1))
mfiletransferConfigSettingsFilename = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigSettingsFilename.setDescription("This OID has been deprecated.\n\nThe path and name of the file to transfer using the mfiletransferControlInitiateFileTransfer OID.\nIf the file to transfer exists in the default server directory then the path may be omitted.")
mfiletransferConfigTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2))
mfiletransferConfigTFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigTFTPServerAddress.setDescription("This OID has been deprecated.\n\nThe IP Address in dotted decimal notation of the TFTP server involved in the file transfer.")
mfiletransferConfigFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3))
mfiletransferConfigFTPServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerAddress.setDescription("This OID has been deprecated.\n\nThe IP Address in dotted decimal notation of the FTP server involved in the file transfer.")
mfiletransferConfigFTPServerUser = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerUser.setDescription("This OID has been deprecated.\n\nThe user identification for logging into the FTP server specified with mfiletransferConfigFTPServerAddress.")
mfiletransferConfigFTPServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferConfigFTPServerPassword.setDescription("This OID has been deprecated.\n\nThe password for logging into the FTP server specified with mfiletransferConfigFTPServerAddress.")
mfiletransferControl = MibIdentifier((1, 3, 6, 1, 4, 1, 318, 2, 4, 3))
mfiletransferControlInitiateFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 318, 2, 4, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("doNotInitiateFileTransfer", 1), ("initiateFileTransferDownloadViaTFTP", 2), ("initiateFileTransferDownloadViaFTP", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mfiletransferControlInitiateFileTransfer.setDescription("This OID has been deprecated.\n\nSetting this OID to doNotInitiateFileTransfer (1) will do nothing.\n \nSetting this OID to initiateFileTransferDownloadViaTFTP (2) will attempt to transfer the file named in \nmfiletransferConfigSettingsFilename from the TFTP Server identified in mfiletransferConfigTFTPAddress.\n \nSetting this OID to initiateFileTransferDownloadViaFTP (3) will attempt to transfer the file named in \nmfiletransferConfigSettingsFilename from the FTP Server identified in mfiletransferConfigFTPAddress \nusing mfiletransferConfigFTPUser and mfiletransferConfigFTPPassword for the FTP Server login process.")

# Augmentions

# Notifications

communicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 1)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: communicationLost.setDescription("SEVERE: Communication to the UPS has been lost.  Steps\nto reestablish communication are in progress.")
upsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 2)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOverload.setDescription("SEVERE: The UPS has sensed a load greater than 100 percent\nof its rated capacity.")
upsDiagnosticsFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 3)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsDiagnosticsFailed.setDescription("SEVERE: The UPS failed its internal diagnostic self-test.")
upsDischarged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 4)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsDischarged.setDescription("SEVERE: The UPS batteries are discharged; if utility power fails\nan immediate low battery condition will exist.  Sufficient runtime \nfor necessary action cannot be guaranteed.")
upsOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 5)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOnBattery.setDescription("WARNING: The UPS has switched to battery backup power.")
smartBoostOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 6)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartBoostOn.setDescription("WARNING: The UPS has enabled SmartBoost(TM).")
lowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 7)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: lowBattery.setDescription("SEVERE: The UPS batteries are low and will soon be exhausted.\nIf utility power is not restored the UPS will put itself \nto 'sleep' and immediately cut power to the load.")
communicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 8)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: communicationEstablished.setDescription("INFORMATIONAL: Communication with the UPS has been established.")
powerRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 9)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: powerRestored.setDescription("INFORMATIONAL: Utility power has been restored.")
upsDiagnosticsPassed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 10)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsDiagnosticsPassed.setDescription("INFORMATIONAL: The UPS passed its internal self-test.")
returnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 11)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: returnFromLowBattery.setDescription("INFORMATIONAL: The UPS has returned from a low battery\ncondition.")
upsTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 12)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsTurnedOff.setDescription("WARNING: The UPS has been turned 'off' by the management station.")
upsSleeping = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 13)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsSleeping.setDescription("WARNING: The UPS is entering 'sleep' mode.  Power \nto the load will be cut off.")
upsWokeUp = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 14)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsWokeUp.setDescription("INFORMATION: The UPS has returned from 'sleep' mode.  Power \nto the load has been restored.")
upsRebootStarted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 15)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsRebootStarted.setDescription("WARNING: The UPS has started its reboot sequence.\nThe UPS will reboot itself at this time.")
upsDipSwitchChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 16)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsDipSwitchChanged.setDescription("WARNING: The dip switch settings on the UPS have been\nchanged, possibly altering UPS performance.")
upsBatteryNeedsReplacement = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 17)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryNeedsReplacement.setDescription("SEVERE: The batteries of the UPS need immediate replacement.")
contactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 18)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: contactFault.setDescription("SEVERE: One of the contacts on the Environmental Monitor has \nchanged from its default position. The first variable is\nthe contact number that is faulted.")
contactFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 19)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: contactFaultResolved.setDescription("INFORMATIONAL: A fault on one of the Environmental Monitor contacts\nhas been resolved. The first variable is\nthe contact number that has been resolved.")
hardwareFailureBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 20)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: hardwareFailureBypass.setDescription("SEVERE: UPS on bypass due to internal fault")
softwareBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 21)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: softwareBypass.setDescription("WARNING: UPS on bypass - user set via software or panel")
switchedBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 22)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: switchedBypass.setDescription("WARNING: UPS on bypass - initiated by user")
returnFromBypass = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 23)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: returnFromBypass.setDescription("INFORMATIONAL: UPS has returned from bypass")
bypassPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 24)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: bypassPowerSupplyFailure.setDescription("SEVERE: Base module bypass power supply needs repair")
baseFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 25)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: baseFanFailure.setDescription("SEVERE: Base module fan needs repair")
batteryPackCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 26)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryPackCommLost.setDescription("SEVERE: Check installation of external battery packs signal cable")
batteryPackCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 27)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryPackCommEstablished.setDescription("INFORMATIONAL: UPS is communicating with the external battery packs.")
calibrationStart = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 28)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: calibrationStart.setDescription("INFORMATIONAL: A battery calibration test has been initiated on the UPS.")
restartAgent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 29)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: restartAgent.setDescription("INFORMATIONAL: Agent restarting as commanded by manager.")
upsTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 30)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsTurnedOn.setDescription("INFORMATIONAL: A UPS is turned on.")
smartAvrReducing = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 31)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartAvrReducing.setDescription("WARNING: The UPS is reducing the line voltage via SmartTrim(TM).")
codeAuthenticationDone = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 32)).setObjects(*(("PowerNet-MIB", "mconfigTFTPServerIP"), ("PowerNet-MIB", "newCodeAuthentViaTFTP"), ) )
if mibBuilder.loadTexts: codeAuthenticationDone.setDescription("INFORMATIONAL: Authentication on agent code image is done.")
upsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 33)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOverloadCleared.setDescription("INFORMATIONAL: The overload condition has been cleared.")
smartBoostOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 34)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartBoostOff.setDescription("INFORMATIONAL: The UPS has returned from SmartBoost(TM).")
smartAvrReducingOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 35)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartAvrReducingOff.setDescription("INFORMATIONAL: The UPS has returned from SmartTrim(TM).")
upsBatteryReplaced = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 36)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryReplaced.setDescription("INFORMATIONAL: A bad battery fault has been cleared.")
calibrationEnd = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 37)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: calibrationEnd.setDescription("INFORMATIONAL: The UPS has finished calibrating.")
dischargeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 38)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dischargeCleared.setDescription("INFORMATIONAL: A UPS discharge condition has been cleared.")
gracefulShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 39)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: gracefulShutdown.setDescription("INFORMATIONAL: A graceful shutdown has been initiated.")
outletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 41)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"), ) )
if mibBuilder.loadTexts: outletOn.setDescription("WARNING: The specified PDU outlet has turned on.\nIf sPDUOutletControlIndex equals zero, then all outlets have \nturned on.")
outletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 42)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"), ) )
if mibBuilder.loadTexts: outletOff.setDescription("WARNING: The specified PDU outlet has turned off.\nIf sPDUOutletControlIndex equals zero, then all outlets \nhave turned off.")
outletReboot = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 43)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlIndex"), ) )
if mibBuilder.loadTexts: outletReboot.setDescription("WARNING: The specified PDU outlet has rebooted.\nIf sPDUOutletControlIndex equals zero, then all outlets \nhave rebooted.")
configChangeSNMP = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 44)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: configChangeSNMP.setDescription("WARNING: The SNMP configuration has been changed.")
configChangeOutlet = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 45)).setObjects(*(("PowerNet-MIB", "sPDUOutletConfigIndex"), ) )
if mibBuilder.loadTexts: configChangeOutlet.setDescription("WARNING: The specified PDU outlet has changed configuration.\nIf sPDUOutletConfigIndex equals zero, then the Master outlet \nhas changed configuration.")
accessViolationConsole = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 46)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: accessViolationConsole.setDescription("WARNING: Someone has attempted to login via the console with the incorrect password.")
accessViolationHTTP = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 47)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: accessViolationHTTP.setDescription("WARNING: Someone has attempted to login via HTTP with the incorrect password.")
passwordChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 48)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: passwordChange.setDescription("WARNING: The password for the device has been changed.")
badVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 49)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: badVoltage.setDescription("WARNING: The output voltage is not within acceptable range.")
badVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 50)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: badVoltageCleared.setDescription("INFORMATIONAL: The output voltage has returned to an acceptable level.")
chargerFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 51)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: chargerFailure.setDescription("WARNING: The battery charger has failed.")
chargerFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 52)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: chargerFailureCleared.setDescription("INFORMATIONAL: The battery charger failure condition has been cleared.")
batteryOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 53)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryOverTemperature.setDescription("WARNING: The battery temperature threshold has been violated.")
batteryOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 54)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryOverTemperatureCleared.setDescription("INFORMATIONAL: The battery over temperature has been cleared.")
smartRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 55)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartRelayFault.setDescription("WARNING: SmartBoost(TM) or SmartTrim(TM) relay fault.")
smartRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 56)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smartRelayFaultCleared.setDescription("INFORMATIONAL: SmartBoost(TM) or SmartTrim(TM) relay fault has been cleared.")
humidityThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 57)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: humidityThresholdViolation1.setDescription("SEVERE: Probe 1 humidity threshold violated. The\nfirst variable is the current humidity.")
humidityThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 58)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: humidityThresholdViolationCleared1.setDescription("INFORMATIONAL: An Environmental Monitor humidity threshold violation has been cleared on probe 1.")
temperatureThresholdViolation1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 59)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: temperatureThresholdViolation1.setDescription("SEVERE: An Environmental Monitor temperature threshold has been violated on probe 1.\nThe first variable is the current temperature.")
temperatureThresholdViolationCleared1 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 60)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: temperatureThresholdViolationCleared1.setDescription("INFORMATIONAL: An Environmental Monitor temperature threshold violation has been cleared on probe 1.")
humidityThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 61)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: humidityThresholdViolation2.setDescription("SEVERE: An Environmental Monitor humidity threshold has been violated on probe 2.\nThe first variable is the current humidity.")
humidityThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 62)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: humidityThresholdViolationCleared2.setDescription("INFORMATIONAL: An Environmental Monitor humidity threshold violation has been cleared on probe 2.")
temperatureThresholdViolation2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 63)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: temperatureThresholdViolation2.setDescription("SEVERE: An Environmental Monitor temperature threshold has been violated on probe 2.\nThe first variable is the current temperature.")
temperatureThresholdViolationCleared2 = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 64)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: temperatureThresholdViolationCleared2.setDescription("INFORMATIONAL: An Environmental Monitor temperature threshold violation has been cleared on probe 2.")
mupsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 65)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mupsCommunicationEstablished.setDescription("INFORMATIONAL: Communication with the Environmental Monitor has been established.")
mupsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 66)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mupsCommunicationLost.setDescription("SEVERE: Communication to the Environmental Monitor has been lost.  Steps\nto reestablish communication are in progress.")
batteryIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 67)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryIncrease.setDescription("INFORMATIONAL: The number of batteries has increased.")
batteryDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 68)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: batteryDecrease.setDescription("INFORMATIONAL: The number of batteries has decreased.")
powerModuleIncrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 69)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: powerModuleIncrease.setDescription("INFORMATIONAL: The number of power modules has increased.")
powerModuleDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 70)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: powerModuleDecrease.setDescription("INFORMATIONAL: The number of power modules has decreased.")
intelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 71)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: intelligenceModuleInserted.setDescription("INFORMATIONAL: An intelligence module has been inserted.")
intelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 72)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: intelligenceModuleRemoved.setDescription("INFORMATIONAL: An intelligence module has been removed.")
rintelligenceModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 73)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rintelligenceModuleInserted.setDescription("INFORMATIONAL: A redundant intelligence module has been inserted.")
rintelligenceModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 74)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rintelligenceModuleRemoved.setDescription("INFORMATIONAL: A redundant intelligence module has been removed.")
extBatteryFrameIncease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 75)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: extBatteryFrameIncease.setDescription("INFORMATIONAL: An external battery frame has been added.")
extBatteryFrameDecrease = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 76)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: extBatteryFrameDecrease.setDescription("INFORMATIONAL: An external battery frame has been removed.")
abnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 77)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: abnormalCondition.setDescription("SEVERE: An abnormal condition has been detected.\nThe first variable is the fault condition.")
abnormalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 78)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: abnormalConditionCleared.setDescription("INFORMATIONAL: An abnormal condition has been cleared.\nThe first variable is the fault condition.")
deviceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 79)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: deviceStatusChange.setDescription("INFORMATIONAL: The status of the device being monitored has changed.")
noBatteries = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 80)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: noBatteries.setDescription("WARNING: The UPS has no batteries attached.")
noBatteriesCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 81)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: noBatteriesCleared.setDescription("INFORMATIONAL: The UPS's batteries have been attached.")
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 82)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: userAdded.setDescription("INFORMATIONAL: A new user has been added.")
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 83)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: userDeleted.setDescription("INFORMATIONAL: A user has been deleted.")
userModified = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 84)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: userModified.setDescription("INFORMATIONAL: A user has been modified.")
msvmCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 85)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmCommunicationEstablished.setDescription("INFORMATIONAL: Communications with the MasterSwitch VM has been established.")
msvmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 86)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmCommunicationLost.setDescription("SEVERE: Communications with the MasterSwitch VM has been lost.")
msvmOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 87)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmOverload.setDescription("SEVERE: The MasterSwitch VM in an overload condition.")
msvmOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 88)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmOverloadCleared.setDescription("INFORMATIONAL: The overload condition on the MasterSwitch VM has been cleared.")
msvmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 89)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmOutletOn.setDescription("INFORMATIONAL: An outlet on the MasterSwitch VM has turned on.")
msvmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 90)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmOutletOff.setDescription("INFORMATIONAL: An outlet on the MasterSwitch VM has turned off.")
msvmDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 91)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmDeviceConfigChange.setDescription("INFORMATIONAL: A device configuration change has been made on a MasterSwitch VM.")
msvmOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 92)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUOutletControlVMOutletIndex"), ("PowerNet-MIB", "sPDUOutletControlVMOutletName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmOutletConfigChange.setDescription("INFORMATIONAL: An outlet configuration change has been made on a MasterSwitch VM.")
msvmLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 93)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmLowLoad.setDescription("INFORMATIONAL: The MasterSwitch VM has violated the low load threshold.")
msvmLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 94)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmLowLoadCleared.setDescription("INFORMATIONAL: The low load condition on the MasterSwitch VM has been cleared.")
msvmNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 95)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmNearOverload.setDescription("SEVERE: The MasterSwitch VM is approaching an overload condition.")
msvmNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 96)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: msvmNearOverloadCleared.setDescription("INFORMATIONAL: The near overload condition on the MasterSwitch VM has been cleared.")
msvmPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 97)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlVMName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "sPDUMasterControlVMIndex"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: msvmPowerSupplyStatusChange.setDescription("WARNING: The power supply status of the MasterSwitch VM has changed.")
mspCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 98)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspCommunicationEstablished.setDescription("INFORMATIONAL: Communications with the MasterSwitch plus has been established.")
mspCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 99)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspCommunicationLost.setDescription("SEVERE: Communications with the MasterSwitch plus has been lost.")
mspOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 100)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspOutletOn.setDescription("INFORMATIONAL: An outlet on the MasterSwitch plus has turned on.")
mspOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 101)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspOutletOff.setDescription("INFORMATIONAL: An outlet on the MasterSwitch plus has turned off.")
mspDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 102)).setObjects(*(("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspDeviceConfigChange.setDescription("INFORMATIONAL: A device configuration change has been made on a MasterSwitch plus.")
mspOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 103)).setObjects(*(("PowerNet-MIB", "sPDUOutletControlMSPOutletIndex"), ("PowerNet-MIB", "sPDUMasterControlMSPIndex"), ("PowerNet-MIB", "sPDUOutletControlMSPOutletName"), ("PowerNet-MIB", "sPDUMasterControlMSPName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: mspOutletConfigChange.setDescription("INFORMATIONAL: An outlet configuration change has been made on a MasterSwitch plus.")
rsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 104)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger02"), ) )
if mibBuilder.loadTexts: rsSourceSwitched.setDescription("INFORMATIONAL: The Redundant Switch has switched source.\nThe first variable is an integer representing the current source: 0=A, 1=B.\nThe second variable is the 32-character name of the current source.\nThe third variable is an integer representing the transfer cause:\n 0=No Transfers Recorded, 1=Due to user action or preferred switching,\n 3=Due to line notch or spike, 5=Due to low line voltage,\n 7=Transfer due to high line voltage,\n 9=Transfer due to frequency out of range.\nThe fourth variable is a character string listing the transfer cause.")
rsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 105)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: rsLostRedundancy.setDescription("SEVERE: The Redundant Switch has lost redundancy.\nThe first variable is an integer representing the source which is no longer available: 0=A, 1=B.\nThe second variable is the 32-character name of the source which is no longer available.")
rsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 106)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: rsRedundancyRestored.setDescription("INFORMATIONAL: Redundancy has been restored to the Redundant Switch .\nThe first variable is an integer representing the source which has been restored: 0=A, 1=B.\nThe second variable is the 32-character name of the source which has been restored.")
rsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 107)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rsConfigChange.setDescription("INFORMATIONAL: A configuration change has been made on a Redundant Switch.")
rsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 108)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rsCommunicationEstablished.setDescription("INFORMATIONAL: Communications with the Redundant Switch has been established.")
rsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 109)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rsCommunicationLost.setDescription("SEVERE: Communications with the Redundant Switch has been lost.")
dcCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 110)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcCommunicationEstablished.setDescription("INFORMATIONAL: Communications with the DC power plant has been established.")
dcCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 111)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcCommunicationLost.setDescription("SEVERE: Communications with the DC power plant has been lost.")
dcPINChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 112)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcPINChanged.setDescription("INFORMATIONAL: The active PIN on the DC controller has been changed.")
dcMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 113)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMajorAlarm.setDescription("SEVERE: A Major alarm is active in the DC power plant.")
dcMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 114)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMajorAlarmCleared.setDescription("INFORMATIONAL: A Major alarm is no longer active in the DC power plant.")
dcMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 115)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMinorAlarm.setDescription("WARNING: A Minor alarm is active in the DC power plant.")
dcMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 116)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMinorAlarmCleared.setDescription("INFORMATIONAL: A Minor alarm is no longer active in the DC power plant.")
dcOutputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 117)).setObjects(*(("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "dm3StatusOutRlyIndex"), ) )
if mibBuilder.loadTexts: dcOutputRelayOn.setDescription("WARNING: An output relay for the powerplant has been activated (state changed to on).\nThe first variable is an integer representing the output relay number that has gone on.\nThe second variable is the 16-character name of the output relay.")
dcOutputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 118)).setObjects(*(("PowerNet-MIB", "dm3StatusOutRlyName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "dm3StatusOutRlyIndex"), ) )
if mibBuilder.loadTexts: dcOutputRelayOff.setDescription("INFORMATIONAL: An output relay for the powerplant has been deactivated (state changed to off).\nThe first variable is an integer representing the output relay number that has gone off.\nThe second variable is the 16-character name of the output relay.")
dcInputRelayOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 119)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ) )
if mibBuilder.loadTexts: dcInputRelayOn.setDescription("WARNING: An input relay for the powerplant has been activated (state changed to on).\nThe first variable is an integer representing the input relay number that has gone on.\nThe second variable is the 16-character name of the input relay.")
dcInputRelayOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 120)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "dm3StatusInRlyIndex"), ("PowerNet-MIB", "dm3StatusInRlyName"), ) )
if mibBuilder.loadTexts: dcInputRelayOff.setDescription("INFORMATIONAL: An input relay for the powerplant has been deactivated (state changed to off).\nThe first variable is an integer representing the input relay number that has gone off.\nThe second variable is the 16-character name of the input relay.")
logicPowerSuppliesIncreased = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 121)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: logicPowerSuppliesIncreased.setDescription("INFORMATIONAL: The number of system power supplies has increased.")
logicPowerSuppliesDecreased = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 122)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: logicPowerSuppliesDecreased.setDescription("INFORMATIONAL: The number of system power supplies has decreased.")
externalSwitchGearClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 123)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: externalSwitchGearClosed.setDescription("INFORMATIONAL: External Switch Gear closed.")
externalSwitchGearOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 124)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: externalSwitchGearOpened.setDescription("INFORMATIONAL: External Switch Gear opened.")
generalDeviceEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 125)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: generalDeviceEvent.setDescription("INFORMATIONAL: APC Device event.")
atsSourceSwitched = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 126)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsSourceSwitched.setDescription("INFORMATIONAL: The Automatic Transfer Switch has switched source.\nThe first variable is an integer representing the current source: 0=A, 1=B.\nThe second variable is the 32-character name of the current source.")
atsLostRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 127)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsLostRedundancy.setDescription("SEVERE: The Automatic Transfer Switch has lost redundancy.\nThe first variable is an integer representing the source which is no longer available: 0=A, 1=B.\nThe second variable is the 32-character name of the source which is no longer available.")
atsRedundancyRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 128)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsRedundancyRestored.setDescription("INFORMATIONAL: Redundancy has been restored to the Automatic Transfer Switch .\nThe first variable is an integer representing the source which has been restored: 0=A, 1=B.\nThe second variable is the 32-character name of the source which has been restored.")
atsConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 129)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsConfigChange.setDescription("INFORMATIONAL: A configuration change has been made on the Automatic Transfer Switch.\nThe first variable is an integer representing the configuration setting which changed:\n    0=Transfer Voltage Range, 1=Sensitivity, 2=Preferred Source\n    3=Front Panel Lockout, 4=Current Limit, 5=Reset XA Processor, \n    6=Reset to defaults, 7=Product Name, 8=Nominal Voltage, 9=Nominal Line Frequency, \n    10=Narrow VRMS, 11=Medium VRMS, 12=Wide VRMS,13=Frequency Deviation,\n    14=ColdStart ATS, 15=Events Count Cleared, 16=Phase or Bank Threshold. ")
atsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 130)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: atsCommunicationEstablished.setDescription("INFORMATIONAL: Communications with the Automatic Transfer Switch has been established.")
atsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 131)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: atsCommunicationLost.setDescription("SEVERE: Communications with the Automatic Transfer Switch has been lost.")
atsOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 132)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: atsOverCurrent.setDescription("SEVERE: Output Current has exceeded threshold. This is same as atsOverload Trap \nfor phase or total in case banked units")
atsOverCurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 133)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: atsOverCurrentCleared.setDescription("INFORMATIONAL: Output Current has returned below threshold.This is same as atsOverloadCleared Trap \nfor phase or total in case banked units")
atsPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 134)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsPowerSupplyFailure.setDescription("SEVERE: The Automatic Transfer Switch Power Supply has failed.\nThe first variable is an integer representing the Power Supply which \nhas failed: 0 = Source A 24V,\n            1 = 12V,\n            2 = 5V,\n            3 = Source B 24V.")
atsPowerSupplyFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 135)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: atsPowerSupplyFailureCleared.setDescription("INFORMATIONAL: The Automatic Transfer Power Supply Failure Cleared.\nThe first variable is an integer representing the Power Supply which \nhas cleared: 0 = Source A 24V,\n             1 = 12V,\n             2 = 5V,\n             3 = Source B 24V.")
dcMainsFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 136)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMainsFailAlarm.setDescription("WARNING: A Mains Fail alarm is active in the DC power plant.")
dcMainsFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 137)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMainsFailAlarmCleared.setDescription("INFORMATIONAL: Mains Fail alarm is no longer active in the DC power plant.")
dcFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 138)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcFanFailAlarm.setDescription("WARNING: A Fan Fail alarm is active in the DC power plant.")
dcFanFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 139)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcFanFailAlarmCleared.setDescription("INFORMATIONAL: A Fan Fail alarm is no longer active in the DC power plant.")
dcRectifierOvertempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 140)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierOvertempAlarm.setDescription("WARNING: Rect. Overtemp alarm is active in the power plant.")
dcRectifierOvertempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 141)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierOvertempAlarmCleared.setDescription("INFORMATIONAL: Rect. Overtemp alarm is no longer active in the power plant.")
dcCurrentLimitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 142)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcCurrentLimitAlarm.setDescription("WARNING: A Current Limit alarm is active in the power plant.")
dcCurrentLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 143)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcCurrentLimitAlarmCleared.setDescription("INFORMATIONAL: Current Limit alarm is no longer active in the power plant.")
dcRectifierFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 144)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierFailAlarm.setDescription("WARNING: A Rect. Fail alarm is active in the power plant.")
dcRectifierFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 145)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierFailAlarmCleared.setDescription("INFORMATIONAL: Rect. Fail alarm is no longer active in the power plant.")
dcMultRectFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 146)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMultRectFailAlarm.setDescription("WARNING: Multiple Rect. Fail alarm is active in the powerplant.")
dcMultRectFailAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 147)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcMultRectFailAlarmCleared.setDescription("INFORMATIONAL: Multiple Rect Fail alarm is no longer active in the powerplant.")
dcBatteryBreakerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 148)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcBatteryBreakerAlarm.setDescription("WARNING: Batt. Breaker alarm is active in the power plant.")
dcBatteryBreakerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 149)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcBatteryBreakerAlarmCleared.setDescription("INFORMATIONAL: Batt. Breaker alarm is no longer active in the power plant.")
dcRectifierOVPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 150)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierOVPAlarm.setDescription("WARNING: A Rect. OVP alarm is active in the power plant.")
dcRectifierOVPAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 151)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcRectifierOVPAlarmCleared.setDescription("INFORMATIONAL: A Rect. OVP alarm is no longer active in the power plant.")
dcLVDImminentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 152)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcLVDImminentAlarm.setDescription("WARNING: A LVD Imminent alarm is active in the powerplant.")
dcLVDImminentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 153)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcLVDImminentAlarmCleared.setDescription("INFORMATIONAL: A LVD Imminent alarm is no longer active in the powerplant.")
dcFuseCBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 154)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcFuseCBAlarm.setDescription("WARNING: A Fuse/CB alarm is active in the DC power plant.")
dcFuseCBAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 155)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcFuseCBAlarmCleared.setDescription("INFORMATIONAL: A Fuse/CB alarm is no longer active in the DC power plant.")
dcBatteryTestFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 156)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcBatteryTestFail.setDescription("WARNING: A Battery Test failed in the DC power plant.")
dcTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 157)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcTemperatureAlarm.setDescription("WARNING: A Temperature is active in the power plant.")
dcTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 158)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcTemperatureAlarmCleared.setDescription("INFORMATIONAL: A Temperature alarm is no longer active in the power plant.")
dcHumidityAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 159)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcHumidityAlarm.setDescription("WARNING: A Humidity alarm is active in the DC power plant.")
dcHumidityAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 160)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcHumidityAlarmCleared.setDescription("INFORMATIONAL: A Humidity alarm is no longer active in the DC power plant.")
dcBBCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 161)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcBBCommunicationEstablished.setDescription("INFORMATIONAL: Power plant bridging board communications established.")
dcBBCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 162)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: dcBBCommunicationLost.setDescription("SEVERE: Power plant bridging board communications lost.")
iemHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 163)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ) )
if mibBuilder.loadTexts: iemHighTempThresholdViolation.setDescription("SEVERE: High temperature threshold violated on Integrated\nEnvironmental Monitor probe. The first variable is the\ncurrent temperature. The second variable is the temperature\nscale. The third variable is the probe number. The fourth\nvariable is the probe name.")
iemHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 164)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemHighTempThresholdViolationCleared.setDescription("INFORMATIONAL: High temperature threshold violated on Integrated\nEnvironmental Monitor probe has been cleared. The first variable\nis the probe number. The second variable is the probe name.")
iemLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 165)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeTempUnits"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusProbeCurrentTemp"), ) )
if mibBuilder.loadTexts: iemLowTempThresholdViolation.setDescription("SEVERE: Low temperature threshold violated on integrated\nprobe. The first variable is the current temperature. The\nsecond variable is the temperature scale. The third\nvariable is the probe number. The fourth variable is the\nprobe name.")
iemLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 166)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemLowTempThresholdViolationCleared.setDescription("INFORMATIONAL: Low temperature threshold violated on integrated\nprobe has been cleared. The first variable is the probe number.\nThe second variable is the probe name.")
iemHighHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 167)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ) )
if mibBuilder.loadTexts: iemHighHumidThresholdViolation.setDescription("SEVERE: High humidity threshold violated on integrated\nprobe. The first variable is the current humidity. The\nsecond variable is the probe number. The third variable\nis the probe name.")
iemHighHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 168)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemHighHumidThresholdViolationCleared.setDescription("INFORMATIONAL: High humidity threshold violated on integrated\nprobe cleared. The first variable is the probe number. The second\nvariable is the probe name.")
iemLowHumidThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 169)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "iemStatusProbeCurrentHumid"), ) )
if mibBuilder.loadTexts: iemLowHumidThresholdViolation.setDescription("SEVERE: Low humidity threshold violated on integrated\nprobe. The first variable is the current humidity. The\nsecond variable is the probe number. The third variable\nis the probe name.")
iemLowHumidThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 170)).setObjects(*(("PowerNet-MIB", "iemStatusProbeNumber"), ("PowerNet-MIB", "iemStatusProbeName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemLowHumidThresholdViolationCleared.setDescription("INFORMATIONAL: Low humidity threshold violated on integrated\nprobe cleared. The first variable is the probe number. The second\nvariable is the probe name.")
iemProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 171)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemProbeDisconnected.setDescription("WARNING: The temperature/humidity probe on the Integrated\nEnvironmental Monitor has been disconnected. This trap is\ngenerated when a probe that has been in communication with\nthe Environmental Monitor has been disconnected or can no\nlonger communicate.")
iemProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 172)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemProbeConnected.setDescription("INFORMATIONAL: The temperature/humidity probe on the Integrated\nEnvironmental Monitor has been connected. This trap is generated\nwhen the Environmental Monitor establishes communication with a\nprobe that had previously not been connected.")
iemContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 173)).setObjects(*(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemContactFault.setDescription("SEVERE: There is a contact fault on the Integrated\nEnvironmental Monitor. The first argument is the number\nof the contact. The second argument is the name of the\ncontact.")
iemContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 174)).setObjects(*(("PowerNet-MIB", "iemStatusContactNumber"), ("PowerNet-MIB", "iemStatusContactName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: iemContactFaultCleared.setDescription("INFORMATIONAL: The contact fault on the Integrated\nEnvironmental Monitor has been cleared. The first\nargument is the number of the contact. The second\nargument is the name of the contact.")
iemRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 175)).setObjects(*(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusRelayName"), ) )
if mibBuilder.loadTexts: iemRelayFault.setDescription("SEVERE: The output relay on the Integrated Environmental\nMonitor has switched to the fault state. The first\nargument is the number of the output relay. The second\nargument is the name of the output relay. The third\nargument is the event that caused the fault.")
iemRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 176)).setObjects(*(("PowerNet-MIB", "iemStatusRelayNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "iemStatusRelayName"), ) )
if mibBuilder.loadTexts: iemRelayFaultCleared.setDescription("INFORMATIONAL: The fault condition on the output relay on the\nIntegrated Environmental Monitor has cleared. The first\nargument is the number of the output relay. The second\nargument is the name of the output relay.")
bmBatManCommEstab = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 177)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManCommEstab.setDescription("INFORMATIONAL: Serial Communications Established with Battery Manager.")
bmBatManCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 178)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManCommLost.setDescription("SEVERE: Serial Communications Lost with Battery Manager.")
bmBatManKneeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 179)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManKneeAlarm.setDescription("SEVERE: Battery Voltage Knee Threshold Alarm Detected.")
bmBatManKneeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 180)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManKneeAlarmCleared.setDescription("INFORMATIONAL: Battery Voltage Knee Threshold Alarm Cleared.")
bmBatManChargerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 181)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManChargerAlarm.setDescription("WARNING: Charger Alarm Detected.")
bmBatManChargerAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 182)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManChargerAlarmCleared.setDescription("INFORMATIONAL: Charger Alarm Cleared.")
bmBatManBatteryAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 183)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManBatteryAlarm.setDescription("WARNING: Battery Alarm Detected.")
bmBatManBatteryAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 184)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManBatteryAlarmCleared.setDescription("INFORMATIONAL: Battery Alarm Cleared.")
bmBatManEnvironmentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 185)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManEnvironmentAlarm.setDescription("WARNING: Environment Alarm Detected.")
bmBatManEnvironmentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 186)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManEnvironmentAlarmCleared.setDescription("INFORMATIONAL: Environment Alarm Cleared.")
bmBatManMaintenanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 187)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManMaintenanceAlarm.setDescription("INFORMATIONAL: Maintenance Alarm Detected.")
bmBatManMaintenanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 188)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmBatManMaintenanceAlarmCleared.setDescription("INFORMATIONAL: Maintenance Alarm Cleared.")
pduCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 189)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCommunicationEstablished.setDescription("INFORMATIONAL: Communication Established.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 190)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCommunicationLost.setDescription("SEVERE: Communication Lost.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduUtilityLineUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 191)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUtilityLineUndervoltage.setDescription("SEVERE: Utility Line Undervoltage. \nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduUtilityLineUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 192)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUtilityLineUndervoltageCleared.setDescription("INFORMATIONAL: Utility Line Undervoltage Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduUtilityLineOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 193)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUtilityLineOvervoltage.setDescription("SEVERE: Utility Line Overvoltage.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduUtilityLineOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 194)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUtilityLineOvervoltageCleared.setDescription("INFORMATIONAL: Utility Line Overvoltage Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduGroundOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 195)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduGroundOvercurrent.setDescription("SEVERE: Ground Overcurrent.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduGroundOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 196)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduGroundOvercurrentCleared.setDescription("INFORMATIONAL: Ground Overcurrent Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduCircuitPanelInputUndervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 197)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputUndervoltage.setDescription("SEVERE: Circuit Panel Input Undervoltage.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputUndervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 198)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputUndervoltageCleared.setDescription("INFORMATIONAL: Circuit Panel Input Undervoltage Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputOvervoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 199)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputOvervoltage.setDescription("SEVERE: Circuit Panel Input Overvoltage.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputOvervoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 200)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputOvervoltageCleared.setDescription("INFORMATIONAL: Circuit Panel Input Overvoltage Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputUndercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 201)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputUndercurrent.setDescription("SEVERE: Circuit Panel Input Undercurrent.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputUndercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 202)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputUndercurrentCleared.setDescription("INFORMATIONAL: Circuit Panel Input Undercurrent Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 203)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputOvercurrent.setDescription("SEVERE: Circuit Panel Input Overcurrent.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelInputOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 204)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduCircuitPanelInputOvercurrentCleared.setDescription("INFORMATIONAL: Circuit Panel Input Overcurrent Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduCircuitPanelFrequencyOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 205)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCircuitPanelFrequencyOutOfRange.setDescription("SEVERE: Circuit Panel Input Frequency Out Of Range.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduCircuitPanelFrequencyOutofRangeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 206)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCircuitPanelFrequencyOutofRangeCleared.setDescription("INFORMATIONAL: Circuit Panel Input Frequency No Longer Out Of Range.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduCircuitPanelNeutralOvercurrent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 207)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCircuitPanelNeutralOvercurrent.setDescription("SEVERE: Circuit Panel Input Neutral Overcurrent.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduCircuitPanelNeutralOvercurrentCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 208)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduCircuitPanelNeutralOvercurrentCleared.setDescription("INFORMATIONAL: Circuit Panel Input Neutral Overcurrent Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduSystemOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 209)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduSystemOff.setDescription("SEVERE: PDU System Off.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduOnBatteryMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 210)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduOnBatteryMode.setDescription("SEVERE: PDU is in On Battery Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 211)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduMaintenanceBypassMode.setDescription("INFORMATIONAL: PDU is in Maintenance Bypass Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduAtypicalBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 212)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduAtypicalBypassMode.setDescription("WARNING: PDU is in Atypical Bypass Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduNoPanelFeedMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 213)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduNoPanelFeedMode.setDescription("SEVERE: PDU is in No Panel Feed Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduUpsOperationMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 214)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduUpsOperationMode.setDescription("INFORMATIONAL: PDU is in Ups Operation Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduForcedBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 215)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduForcedBypassMode.setDescription("WARNING: PDU is in Forced Bypass Mode.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduInputTransformerOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 216)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduInputTransformerOverTemperature.setDescription("SEVERE: Input Transformer Over Temperature.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduInputTransformerOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 217)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: pduInputTransformerOverTemperatureCleared.setDescription("INFORMATIONAL: Input Transformer Over Temperature Cleared.\nThe first argument is the serial number.\nThe second argument is the device name.")
pduUPSInputVoltageLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 218)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUPSInputVoltageLost.setDescription("SEVERE: UPS Input Voltage phase-N Lost.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduUPSInputVoltageRestored = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 219)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduUPSInputVoltageRestored.setDescription("INFORMATIONAL: UPS Input Voltage phase-N Restored.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
pduContactFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 220)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduContactFault.setDescription("SEVERE: A contact closure in the PDU is in an abnormal position. \nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the number of the contact.")
pduContactFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 221)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: pduContactFaultCleared.setDescription("INFORMATIONAL: A contact closure in the PDU is in a normal position. \nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the number of the contact.")
rPDUBankPhaseLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 222)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseLowLoad.setDescription("WARNING: A bank or phase on the Rack PDU has violated the low load threshold.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
rPDUBankPhaseLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 223)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseLowLoadCleared.setDescription("INFORMATIONAL: The bank or phase low load condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
rPDUBankPhaseNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 224)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseNearOverload.setDescription("WARNING: A bank or phase of the Rack PDU is near an overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
rPDUBankPhaseNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 225)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseNearOverloadCleared.setDescription("INFORMATIONAL: The bank or phase near overload condition on a Rack PDU has \nbeen cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
rPDUBankPhaseOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 226)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseOverload.setDescription("SEVERE: A bank or phase of the Rack PDU is in an overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
rPDUBankPhaseOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 227)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDULoadStatusBankNumber"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUBankPhaseOverloadCleared.setDescription("INFORMATIONAL: The bank or phase overload condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the bank number (0 if this is phase data).\nThe fourth argument is the phase number (0 if this is bank data).")
aruDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 228)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruDeviceConfigChange.setDescription("INFORMATIONAL: Remote ARU Device Configuration change.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
rmPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 229)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rmPDUCommunicationLost.setDescription("SEVERE: Communication Lost.\nThe first argument is the serial number.\nThe second argument is the device name.")
emsCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 230)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsCommunicationEstablished.setDescription("INFORMATIONAL: Communication Established.\nThe first argument is the serial number.\nThe second argument is the device name.")
emsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 231)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsCommunicationLost.setDescription("SEVERE: Communication Lost.\nThe first argument is the serial number.\nThe second argument is the device name.")
emsProbeConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 232)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsProbeConnected.setDescription("INFORMATIONAL: A probe has been connected to the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the probe number. \nThe fourth argument is the probe name.")
emsProbeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 233)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsProbeDisconnected.setDescription("SEVERE: A probe has been disconnected from the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the probe number. \nThe fourth argument is the probe name.")
emsSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 234)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsSensorConnected.setDescription("INFORMATIONAL: A sensor has been connected to the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the sensor number. \nThe fourth argument is the sensor name.")
emsSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 235)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsSensorDisconnected.setDescription("SEVERE: A sensor has been disconnected from the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the sensor number. \nThe fourth argument is the sensor name.")
emsSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 236)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsSensorFault.setDescription("SEVERE: A EMS sensor is in the fault condition.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the sensor number. \nThe fourth argument is the sensor name.")
emsSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 237)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsSensorStatusSensorIndex"), ("PowerNet-MIB", "emsSensorStatusSensorName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsSensorFaultCleared.setDescription("INFORMATIONAL: A EMS sensor fault condition has cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the sensor number. \nThe fourth argument is the sensor name.")
emsBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 238)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsBeaconConnected.setDescription("INFORMATIONAL: A beacon has been connected to the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 239)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsBeaconDisconnected.setDescription("SEVERE: A beacon has been disconnected from the EMS.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 240)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsBeaconOn.setDescription("INFORMATIONAL: A EMS beacon has gone on.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 241)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsBeaconOff.setDescription("INFORMATIONAL: A EMS beacon has gone off.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 242)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsMajorAlarm.setDescription("SEVERE: A Major Alarm is present in the EMS.\nThe first argument is the EMS serial number.\nThe second argument is the EMS name.")
emsMajorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 243)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsMajorAlarmCleared.setDescription("INFORMATIONAL: A Major Alarm condition has been cleared in the EMS.\nThe first argument is the EMS serial number.\nThe second argument is the EMS name.")
emsMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 244)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsMinorAlarm.setDescription("SEVERE: A Minor Alarm is present in the EMS.\nThe first argument is the EMS serial number.\nThe second argument is the EMS name.")
emsMinorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 245)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsMinorAlarmCleared.setDescription("INFORMATIONAL: A Minor Alarm condition has been cleared in the EMS.\nThe first argument is the EMS serial number.\nThe second argument is the EMS name.")
emsOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 246)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsOutletStateAbnormal.setDescription("WARNING: An outlet on the EMS has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the outlet number. \nThe fourth argument is the outlet name.\nThe fifth argument is the current outlet state (1=ON, 2=OFF).\nThe sixth argument is the configured normal outlet state (1=ON, 2=OFF).")
emsOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 247)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutletStatusOutletIndex"), ("PowerNet-MIB", "emsOutletStatusOutletState"), ("PowerNet-MIB", "emsOutletStatusOutletNormalState"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsOutletStatusOutletName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsOutletStateNormal.setDescription("INFORMATIONAL: An outlet on the EMS has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the outlet number. \nThe fourth argument is the outlet name.\nThe fifth argument is the current outlet state (1=ON, 2=OFF).\nThe sixth argument is the configured normal outlet state (1=ON, 2=OFF).")
emsInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 248)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsInputContactStateAbnormal.setDescription("WARNING: An input contact on the EMS has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe sixth argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
emsInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 249)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsInputContactStatusInputContactState"), ("PowerNet-MIB", "emsInputContactStatusInputContactIndex"), ("PowerNet-MIB", "emsInputContactStatusInputContactNormalState"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsInputContactStatusInputContactName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsInputContactStateNormal.setDescription("INFORMATIONAL: An input contact on the EMS has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe sixth argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
emsOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 250)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsOutputRelayStateAbnormal.setDescription("WARNING: An output relay on the EMS has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the output relay number. \nThe fourth argument is the output relay name.\nThe fifth argument is the current output relay state (1=CLOSED, 2=OPEN).\nThe sixth argument is the configured normal output relay state (1=CLOSED, 2=OPEN).")
emsOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 251)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayState"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayIndex"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsOutputRelayStatusOutputRelayNormalState"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsOutputRelayStateNormal.setDescription("INFORMATIONAL: An output relay on the EMS has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the output relay number. \nThe fourth argument is the output relay name.\nThe fifth argument is the current output relay state (1=CLOSED, 2=OPEN).\nThe sixth argument is the configured normal output relay state (1=CLOSED, 2=OPEN).")
emsDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 252)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsDeviceConfigChange.setDescription("INFORMATIONAL: A device configuration change has been made on the EMS.\nThe first argument is the EMS serial number.\nThe second argument is the EMS name.")
envHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 253)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envHighTempThresholdViolation.setDescription("SEVERE: High temperature threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 254)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envHighTempThresholdViolationCleared.setDescription("INFORMATIONAL: High temperature threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 255)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLowTempThresholdViolation.setDescription("SEVERE: Low temperature threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 256)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLowTempThresholdViolationCleared.setDescription("INFORMATIONAL: Low temperature threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 257)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envHighHumidityThresholdViolation.setDescription("SEVERE: High humidity threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity\nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 258)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envHighHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: High humidity threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity. \nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 259)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLowHumidityThresholdViolation.setDescription("SEVERE: Low humidity threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity\nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 260)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLowHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Low humidity threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity. \nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
rPDUCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 266)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUCommunicationEstablished.setDescription("INFORMATIONAL: Communication with a Rack PDU has been established.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 267)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUCommunicationLost.setDescription("SEVERE: Communication with a Rack PDU has been lost.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 268)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletOn.setDescription("INFORMATIONAL: An outlet on a Switched Rack PDU has turned on.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet index number.\nThe fourth argument is the outlet name.")
rPDUOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 269)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletOff.setDescription("INFORMATIONAL: An outlet on a Switched Rack PDU has turned off.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet index number.\nThe fourth argument is the outlet name.")
rPDUDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 270)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUDeviceConfigChange.setDescription("INFORMATIONAL: A device configuration change has been made on a \nRack PDU.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUOutletConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 271)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletConfigChange.setDescription("INFORMATIONAL: An outlet configuration change has been made on a \nSwitched Rack PDU.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet index number.\nThe fourth argument is the outlet name.")
rPDULowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 272)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDULowLoad.setDescription("WARNING: A Rack PDU has violated the low load threshold.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDULowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 273)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDULowLoadCleared.setDescription("INFORMATIONAL: The low load condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDUNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 274)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUNearOverload.setDescription("WARNING: A Rack PDU is near an overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDUNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 275)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUNearOverloadCleared.setDescription("INFORMATIONAL: The near overload condition on a Rack PDU has \nbeen cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDUOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 276)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOverload.setDescription("SEVERE: A Rack PDU is in an overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDUOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 277)).setObjects(*(("PowerNet-MIB", "rPDULoadStatusPhaseNumber"), ("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOverloadCleared.setDescription("INFORMATIONAL: The overload condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase number.")
rPDUPowerSupply1Fail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 278)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUPowerSupply1Fail.setDescription("SEVERE: Power Supply 1 on Rack PDU is in FAIL state.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUPowerSupply1Ok = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 279)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUPowerSupply1Ok.setDescription("INFORMATIONAL: Power Supply 1 on Rack PDU is operating normally.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUPowerSupply2Fail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 280)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUPowerSupply2Fail.setDescription("SEVERE: Power Supply 2 on Rack PDU is in FAIL state.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUPowerSupply2Ok = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 281)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUPowerSupply2Ok.setDescription("INFORMATIONAL: Power Supply 2 on Rack PDU is operating normally.\nThe first argument is the serial number.\nThe second argument is the device name.")
rPDUPhaseConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 282)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDULoadPhaseConfigIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUPhaseConfigChange.setDescription("INFORMATIONAL: A phase configuration change has been made on a \nRack PDU.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the phase index number.")
rPDUCancelPendingCommand = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 283)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletControlOutletName"), ("PowerNet-MIB", "rPDUOutletControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUCancelPendingCommand.setDescription("INFORMATIONAL: A cancel pending command has been made on a \nSwitched Rack PDU.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet index number (0 indicates all outlets).\nThe fourth argument is the outlet name (or device name if all outlets).")
aruAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 284)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruAlinkCommunicationEstablished.setDescription("INFORMATIONAL: Remote ARU Communication Established.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 285)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruAlinkCommunicationLost.setDescription("SEVERE: Remote ARU Communication Lost.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruFanFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 286)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanFail.setDescription("SEVERE: Remote ARU Fan Fail.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruFanFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 287)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanFailCleared.setDescription("INFORMATIONAL: Remote ARU Fan Fail Cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruSmokeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 288)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruSmokeAlarm.setDescription("SEVERE: Remote ARU Smoke Alarm.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruSmokeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 289)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruSmokeAlarmCleared.setDescription("INFORMATIONAL: Remote ARU Smoke Alarm Cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruHighTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 290)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruHighTemperatureAlarm.setDescription("WARNING: ARU Exhaust temperature has exceeded the override \nthreshold and the ARU has increased fan speed to\nmaintain a safe environment in the rack.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruHighTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 291)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruHighTemperatureAlarmCleared.setDescription("INFORMATIONAL: ARU temperature override state has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruExhaustTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 292)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruExhaustTemperatureAlarm.setDescription("SEVERE: ARU Extreme Exhaust Temperature Alarm.\nThe ARU is unable to control the temperature within the rack\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruExhaustTemperatureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 293)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruExhaustTemperatureAlarmCleared.setDescription("INFORMATIONAL: Remote ARU Exhaust Temperature Alarm Cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
envAlinkCommunicationEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 294)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envAlinkCommunicationEstablished.setDescription("INFORMATIONAL: Remote Probe Communication Established.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the probe number. \nThe fourth argument is the probe name.")
envAlinkCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 295)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envAlinkCommunicationLost.setDescription("SEVERE: Remote Probe Communication Lost.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the probe number. \nThe fourth argument is the probe name.")
emsAlinkPowerOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 296)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsAlinkPowerOverload.setDescription("SEVERE: Alink Power Overload.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsAlinkPowerOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 297)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsAlinkPowerOverloadCleared.setDescription("INFORMATIONAL: Alink Power Overload Cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
upsOutletGroupTurnedOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 298)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOutletGroupTurnedOn.setDescription("INFORMATIONAL: The specified Outlet Group turned on.")
upsOutletGroupTurnedOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 299)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOutletGroupTurnedOff.setDescription("WARNING: The specified Outlet Group turned off.")
smwCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 300)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwCriticalCondition.setDescription("SEVERE: A Symmetra MW UPS critical condition has been detected.\nThe first variable is the fault condition.")
smwCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 301)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwCriticalConditionCleared.setDescription("INFORMATIONAL: A Symmetra MW UPS critical condition has been cleared.\nThe first variable is the fault condition.")
smwWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 302)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwWarningCondition.setDescription("WARNING: A Symmetra MW UPS warning condition has been detected.\nThe first variable is the fault condition.")
smwWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 303)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwWarningConditionCleared.setDescription("WARNING: A Symmetra MW UPS warning condition has been cleared.\nThe first variable is the fault condition.")
smwInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 304)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwInformationalCondition.setDescription("INFORMATIONAL: A Symmetra MW UPS informational condition has been detected.\nThe first variable is the fault condition.")
smwInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 305)).setObjects(*(("PowerNet-MIB", "mtrapargsGauge"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: smwInformationalConditionCleared.setDescription("INFORMATIONAL: A Symmetra MW UPS informational condition has been cleared.\nThe first variable is the fault condition.")
airCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 306)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airCriticalCondition.setDescription("SEVERE: An Air critical condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
airCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 307)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airCriticalConditionCleared.setDescription("INFORMATIONAL: An Air critical condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
airWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 308)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airWarningCondition.setDescription("WARNING: An Air warning condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
airWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 309)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airWarningConditionCleared.setDescription("WARNING: An Air warning condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
airInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 310)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airInformationalCondition.setDescription("INFORMATIONAL: An Air informational condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
airInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 311)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: airInformationalConditionCleared.setDescription("INFORMATIONAL: An Air informational condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
xPDUInputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 312)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUInputVoltageLowAlarm.setDescription("SEVERE: Three-phase input voltage to the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
xPDUInputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 313)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUInputVoltageLowAlarmCleared.setDescription("INFORMATIONAL: Three-phase input voltage to the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUInputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 314)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUInputVoltageHighAlarm.setDescription("SEVERE: Three-phase input voltage to the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, above which the alarm was generated.")
xPDUInputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 315)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUInputVoltageHighAlarmCleared.setDescription("INFORMATIONAL: Three-phase input voltage to the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUBypassVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 316)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBypassVoltageLowAlarm.setDescription("SEVERE: Three-phase bypass input voltage to the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
xPDUBypassVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 317)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBypassVoltageLowAlarmCleared.setDescription("INFORMATIONAL: Three-phase bypass input voltage to the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUBypassVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 318)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBypassVoltageHighAlarm.setDescription("SEVERE: Three-phase bypass input voltage to the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, above which the alarm was generated.")
xPDUBypassVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 319)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBypassVoltageHighAlarmCleared.setDescription("INFORMATIONAL: Three-phase bypass input voltage to the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 320)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUOutputVoltageLowAlarm.setDescription("SEVERE: The three-phase output voltage of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
xPDUOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 321)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputVoltageLowAlarmCleared.setDescription("INFORMATIONAL: The three-phase output voltage of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 322)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUOutputVoltageHighAlarm.setDescription("SEVERE: The three-phase output voltage of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, above which the alarm was generated.")
xPDUOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 323)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputVoltageHighAlarmCleared.setDescription("INFORMATIONAL: The three-phase output voltage of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N).\nThe fourth argument is the measured voltage in tenths of Volts.")
xPDUOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 324)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUOutputCurrentLowAlarm.setDescription("SEVERE: The three-phase output load current of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
xPDUOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 325)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputCurrentLowAlarmCleared.setDescription("INFORMATIONAL: The three-phase output load current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in tenths of Amps.")
xPDUOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 326)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUOutputCurrentHighAlarm.setDescription("SEVERE: The three-phase load current of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, above which the alarm was generated.")
xPDUOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 327)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputCurrentHighAlarmCleared.setDescription("INFORMATIONAL: The three-phase output current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in tenths of Amps.")
xPDUOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 328)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputFrequencyAlarm.setDescription("SEVERE: The devices output frequency is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the frequency deviation from the nominal in tenths of Hertz.")
xPDUOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 329)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputFrequencyAlarmCleared.setDescription("INFORMATIONAL: The devices output frequency is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUSystemGroundCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 330)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemGroundCurrentAlarm.setDescription("SEVERE: The earth ground current of the device is over the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured current in tenths of Amps.\nThe fourth argument is the threshold, in tenths of Amps, above which the alarm was generated.")
xPDUSystemGroundCurrentAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 331)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemGroundCurrentAlarmCleared.setDescription("INFORMATIONAL: The earth ground current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured current in tenths of Amps.")
xPDUInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 332)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUInputContactStateAbnormal.setDescription("SEVERE: A user input contact on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=OPEN, 2=CLOSED).\nThe sixth argument is the configured normal input contact state (1=OPEN, 2=CLOSED).")
xPDUInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 333)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUInputContactStateNormal.setDescription("INFORMATIONAL: A user input contact on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe sixth argument is the configured normal input contact state (1=OPEN, 2=CLOSED).")
xPDUOutputNeutralCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 334)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputNeutralCurrentHighAlarm.setDescription("WARNING: The three-phase neutral current of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured current in tenths of Amps.\nThe fourth argument is the threshold, in tenths of Amps, above which the alarm was generated.")
xPDUOutputNeutralCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 335)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUOutputNeutralCurrentHighAlarmCleared.setDescription("INFORMATIONAL: The output neutral current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured current in tenths of Amps.")
xPDUCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 336)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUCoolingFanAlarm.setDescription("SEVERE: The device's internal cooling fans have failed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 337)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUCoolingFanAlarmCleared.setDescription("INFORMATIONAL: The device's cooling fans are now functioning properly.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUTransformerTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 338)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUTransformerTempAlarm.setDescription("SEVERE: The device's isolation transformer is over temperature.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUTransformerTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 339)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUTransformerTempAlarmCleared.setDescription("INFORMATIONAL: The device's isolation transformer is no longer over temperature.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUBranchCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 340)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentLowAlarm.setDescription("WARNING: The current in a branch circuit is outside the limits specified for that\nbranch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
xPDUBranchCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 341)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentLowAlarmCleared.setDescription("INFORMATIONAL: The current in a branch circuit is back within the limits \nspecified for that branch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.")
xPDUBranchCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 342)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentHighAlarm.setDescription("WARNING: The current in a branch circuit is outside the limits specified for that\nbranch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, above which the alarm was generated.")
xPDUBranchCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 343)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentHighAlarmCleared.setDescription("INFORMATIONAL: The current in a branch circuit is back within the limits \nspecified for that branch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.")
xPDUInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 344)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUInternalCommError.setDescription("SEVERE: There is an internal communication error in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
emsHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 345)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsHardwareStateAbnormal.setDescription("SEVERE: The device's hardware is improperly configured and operating outside\nnormal bounds for the hardware.  This can be caused by improper devices being\nconnected to the EMS ports or Alink Current limit detection.")
emsHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 346)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: emsHardwareStateNormal.setDescription("INFORMATIONAL: The device's hardware is in its normal operational state.\nThe first argument is the host device serial number.")
ceSevereCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 347)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceSevereCondition.setDescription("SEVERE: A Custom Event severe condition was detected.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
ceSevereConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 348)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceSevereConditionCleared.setDescription("INFORMATIONAL: A Custom Event severe condition was cleared.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
ceWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 349)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceWarningCondition.setDescription("WARNING: A Custom Event warning condition was detected.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
ceWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 350)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceWarningConditionCleared.setDescription("INFORMATIONAL: A Custom Event warning condition was cleared.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
ceInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 351)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceInformationalCondition.setDescription("INFORMATIONAL: A Custom Event informational condition was detected.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
ceInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 352)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: ceInformationalConditionCleared.setDescription("INFORMATIONAL: A Custom Event informational condition was cleared.\nThe first variable is the custom event text message.\nThe second variable is the custom event number.")
upsInternalOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 353)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInternalOverTemperature.setDescription("WARNING: The internal over temperature condition exists.")
upsInternalOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 354)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInternalOverTemperatureCleared.setDescription("INFORMATIONAL: The internal over temperature condition cleared.")
upsMpuReset = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 355)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsMpuReset.setDescription("INFORMATIONAL: The MPU has been reset.")
upsOutputSwitchClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 356)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOutputSwitchClosed.setDescription("INFORMATIONAL: The Output Switch is closed.")
upsOutputSwitchOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 357)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOutputSwitchOpened.setDescription("INFORMATIONAL: The Output Switch is open.")
upsCalibrationStackChanged = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 358)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsCalibrationStackChanged.setDescription("INFORMATIONAL: A calibration value in the stack was changed.")
envMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 359)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMaxTempThresholdViolation.setDescription("SEVERE: Max temperature threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 360)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMaxTempThresholdViolationCleared.setDescription("INFORMATIONAL: Max temperature threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 361)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMinTempThresholdViolation.setDescription("SEVERE: Min temperature threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 362)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMinTempThresholdViolationCleared.setDescription("INFORMATIONAL: Min temperature threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 363)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMaxHumidityThresholdViolation.setDescription("SEVERE: Max humidity threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity\nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 364)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMaxHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Max humidity threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity. \nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 365)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMinHumidityThresholdViolation.setDescription("SEVERE: Min humidity threshold violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity\nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 366)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeHumidity"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envMinHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Min humidity threshold violation cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current humidity. \nThe fourth argument is the probe number. \nThe fifth argument is the probe name.")
envSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 367)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envSTIncTempRateViolation.setDescription("SEVERE: Short-term increasing temperature rate violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 368)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envSTIncTempRateViolationCleared.setDescription("INFORMATIONAL: Short-term increasing temperature rate cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 369)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envSTDecTempRateViolation.setDescription("SEVERE: Short-term decreasing temperature rate violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 370)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envSTDecTempRateViolationCleared.setDescription("INFORMATIONAL: Short-term decreasing temperature rate cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 371)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLTIncTempRateViolation.setDescription("SEVERE: Long-term increasing temperature rate violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 372)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLTIncTempRateViolationCleared.setDescription("INFORMATIONAL: Long-term increasing temperature rate cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 373)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLTDecTempRateViolation.setDescription("SEVERE: Long-term decreasing temperature rate violated on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
envLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 374)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsStatusSysTempUnits"), ("PowerNet-MIB", "emsProbeStatusProbeName"), ("PowerNet-MIB", "emsProbeStatusProbeIndex"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "emsProbeStatusProbeTemperature"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: envLTDecTempRateViolationCleared.setDescription("INFORMATIONAL: Long-term decreasing temperature rate cleared on the probe. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the current temperature. \nThe fourth argument is the temperature scale. \nThe fifth argument is the probe number. \nThe sixth argument is the probe name.")
bmsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 375)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsCriticalCondition.setDescription("SEVERE: A Battery Management System critical condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
bmsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 376)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsCriticalConditionCleared.setDescription("INFORMATIONAL: A Battery Management System critical condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
bmsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 377)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsWarningCondition.setDescription("WARNING: A Battery Management System warning condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
bmsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 378)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsWarningConditionCleared.setDescription("WARNING: A Battery Management System warning condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
bmsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 379)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsInformationalCondition.setDescription("INFORMATIONAL: A Battery Management System informational condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
bmsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 380)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: bmsInformationalConditionCleared.setDescription("INFORMATIONAL: A Battery Management System informational condition was cleared.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
xATSOutputVoltageLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 381)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputVoltageLowAlarm.setDescription("SEVERE: The device three-phase output voltage of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
xATSOutputVoltageLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 382)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputVoltageLowAlarmCleared.setDescription("INFORMATIONAL: The devices three-phase output voltage is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.")
xATSOutputVoltageHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 383)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputVoltageHighAlarm.setDescription("SEVERE: The device three-phase output voltage of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.\nThe fifth argument is the threshold, in tenths of Volts, above which the alarm is generated.")
xATSOutputVoltageHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 384)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputVoltageHighAlarmCleared.setDescription("INFORMATIONAL: The devices three-phase output voltage is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1-N, 2=L2-N, 3=L3-N, 4=unused, 5=L1-L2, 6=L2-L3, 7=L3-L1).\nThe fourth argument is the measured voltage in tenths of Volts.")
xATSOutputCurrentLowAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 385)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputCurrentLowAlarm.setDescription("SEVERE: The three-phase load current of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in Amps.\nThe fifth argument is the threshold, in Amps, from which the alarm was generated.")
xATSOutputCurrentLowAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 386)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputCurrentLowAlarmCleared.setDescription("INFORMATIONAL: The three-phase load current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in Amps.")
xATSOutputCurrentHighAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 387)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputCurrentHighAlarm.setDescription("SEVERE: The three-phase output load current of the device is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in Amps.\nThe fifth argument is the threshold, in Amps, from which the alarm was generated.")
xATSOutputCurrentHighAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 388)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputCurrentHighAlarmCleared.setDescription("INFORMATIONAL: The three-phase output load current of the device is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).\nThe fourth argument is the measured current in Amps.")
xATSOutputFrequencyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 389)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputFrequencyAlarm.setDescription("SEVERE: The devices output frequency is outside the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the frequency deviation from the nominal in tenths of Hertz.\nThe fourth argument is the frequency deviation threshold in tenths of Hertz, \nfrom which the alarm was generated.")
xATSOutputFrequencyAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 390)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputFrequencyAlarmCleared.setDescription("INFORMATIONAL: The devices output frequency is back within the specified limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSInternalCommError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 391)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSInternalCommError.setDescription("SEVERE: There is an internal communication error in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 392)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSInternalCommErrorCleared.setDescription("INFORMATIONAL: Internal communication has been restored.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 393)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDataCommMismatchError.setDescription("SEVERE: A data incompatibility exists within the device.  This\nis typically the result of mismatches between firmware revisions\nof the transfer switch controller and the Network Management interface.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 394)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDataCommMismatchErrorCleared.setDescription("INFORMATIONAL: The internal data incompatibility has been resolved.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGenCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 395)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGenCommLost.setDescription("WARNING: The XATS cannot communicate with the generator.\nThis will make unavailable all the xATSGenerator OIDs.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGenCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 396)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGenCommEstablished.setDescription("INFORMATIONAL: The XATS has established communication with the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSNeutralPosition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 397)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSNeutralPosition.setDescription("WARNING: XATS has transferred to neutral position.\nIn this position neither Source 1 nor Source 2 is selected,\nand the XATS will have no output voltage.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the mode in which the switch is operating\n(1=Auto, 2=Not-in-Auto, Abnormal Condition  3=Not-in-Auto, manual).")
xATSSwitchTransferEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 398)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSSwitchTransferEvent.setDescription("INFORMATIONAL: XATS has transferred from one source to the other.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the mode in which the switch is operating.\n(1=Auto, 2=Not-in-Auto, Abnormal Condition  3=Not-in-Auto, manual).\nThe fourth argument is the input source selected (1=Source 1, 2=Source 2).\nThe fifth argument is type of transfer that took place. (1=Closed, 2=Open, 3=Unknown)")
xATSInternalATSFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 399)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSInternalATSFault.setDescription("SEVERE: An internal XATS fault has been detected.\nThe XATS may have forced itself to not-in-auto mode (abnormal condition),\nas indicated by the xATSSwitchStatusAutoSwitchOperationalMode OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument indicates the detected fault.\n\n   1=Cannot Close S1\n   2=Cannot Close S2\n   3=Cannot Open S1\n   4=Cannot Open S2\n   5=Cannot Trip Open S1 \n   6=Cannot Trip Open S2 \n   7=Start Contact Failure\n   8=Voltage Sensing Failure")
xATSInternalATSFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 400)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSInternalATSFaultCleared.setDescription("INFORMATIONAL: The detected internal XATS fault has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument indicates the detected fault.\n\n   1=Cannot Close S1\n   2=Cannot Close S2\n   3=Cannot Open S1\n   4=Cannot Open S2\n   5=Cannot Trip Open S1 \n   6=Cannot Trip Open S2 \n   7=Start Contact Failure\n   8=Voltage Sensing Failure")
xATSEngineStartAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 401)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSEngineStartAsserted.setDescription("INFORMATIONAL: The XATS has asserted the Engine Start contact.\nThis should result in the generator producing output voltage.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument indicates the reason that the start signal was asserted\n1=Unknown, 2=S1 Low Voltage, 3=S1 High Voltage, 4=S1 Line Imbalance,\n5=S1 Freq Range, 6=S1 Bad Rotation.")
xATSEngineStopAsserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 402)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSEngineStopAsserted.setDescription("INFORMATIONAL: The XATS has de-asserted the Engine Start contact.\nThis should result in the generator shutting down, and producing no output voltage.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSStartFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 403)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSStartFailure.setDescription("SEVERE: The generator failed to start. After assertion of the\nEngine Start signal, the quality of Source 2 was not seen as good.\nThis alarm can be cleared using the xATSSwitchStatusClearLatchedAlarms OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument indicates the line quality at S2\n 1=Unknown, 2=S2 Low Voltage, 3=S2 High Voltage, 4=S2 Line Imbalance,\n 4=S2 Freq Range, 5=S2 Bad Rotation.")
xATSStopFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 404)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSStopFailure.setDescription("WARNING: The generator failed to stop. After de-assertion of the\nEngine Start signal, the quality of Source 2 continued to be seen as good.\nThis alarm can be cleared using the xATSSwitchStatusClearLatchedAlarms OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSNotInAutomaticMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 405)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSNotInAutomaticMode.setDescription("SEVERE: Automatic Transfer Switch is not in automatic mode.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe xATSSwitchStatusAutoSwitchStatus OID and the\nxATSSwitchStatusAutoSwitchOperationalMode OID\ncan provide more information about the state of the XATS.")
xATSNotInAutomaticModeCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 406)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSNotInAutomaticModeCleared.setDescription("INFORMATIONAL: Automatic Transfer Switch is in automatic mode.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSEpoTripped = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 407)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSEpoTripped.setDescription("SEVERE: The device's Emergency Power Off (EPO) circuit is tripped.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSEpoReset = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 408)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSEpoReset.setDescription("INFORMATIONAL: The device's Emergency Power Off (EPO) circuit has been\nreset to the armed position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 409)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSEpoTestMode.setDescription("WARNING: The device's Emergency Power Off (EPO) circuit has been\nswitched back to the test position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 410)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSEpoArmed.setDescription("INFORMATIONAL: The device's Emergency Power Off (EPO) circuit has been\nswitched back to the armed position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSTestInitiated = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 411)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSTestInitiated.setDescription("INFORMATIONAL: A scheduled test has been initiated.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the type of test initiated (1=scheduled, 2=manual).")
xATSTestCanceled = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 412)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSTestCanceled.setDescription("INFORMATIONAL: The scheduled test has been canceled\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the type of test initiated (1=scheduled, 2=manual).")
xATSTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 413)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSTestFailed.setDescription("SEVERE: The initiated test has failed.\nThis alarm can be cleared using the xATSSwitchStatusClearLatchedAlarms OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSTestPassed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 414)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSTestPassed.setDescription("INFORMATIONAL: The initiated test has passed\nswitched back to the armed position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 415)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSInputContactStateAbnormal.setDescription("SEVERE: A user input contact on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=OPEN, 2=CLOSED).\nThe sixth argument is the configured normal input contact state (1=OPEN, 2=CLOSED).")
xATSInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 416)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSInputContactStateNormal.setDescription("INFORMATIONAL: A user input contact on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the input contact number. \nThe fourth argument is the input contact name.\nThe fifth argument is the input contact state (1=OPEN, 2=CLOSED).\nThe sixth argument is the configured normal input contact state (1=OPEN, 2=CLOSED).")
xATSRemoteStartContactMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 417)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSRemoteStartContactMismatch.setDescription("SEVERE: The state of the generator's Remote Start input\nand the ATS's Engine Start output do not match. \nThis indicates something wrong in the Engine Start wiring,\nwhich must be corrected. This condition will prevent the \ngenerator from being started when needed.\n\n  (See also: xATSGeneratorStatusRemoteStart \n   and xATSSwitchStatusEngineStartSignal OIDs)\n\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSRemoteStartContactMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 418)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSRemoteStartContactMismatchCleared.setDescription("INFORMATIONAL: Mismatch in the state of the generator's \nRemote Start input and the ATS's Engine Start output as been resolved. \nThis indicates something wrong in the Engine Start wiring,\nwhich must be corrected. This condition will prevent the \ngenerator from being started when needed.\n\n  (See also: xATSGeneratorStatusRemoteStart \n   and xATSSwitchStatusEngineStartSignal OIDs)\n\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDoorOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 419)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDoorOpenAlarm.setDescription("WARNING: The XATS exterior panel door is open.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDoorOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 420)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDoorOpenAlarmCleared.setDescription("INFORMATIONAL: The external door to the device is closed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDCBackupAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 421)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDCBackupAlarm.setDescription("WARNING: The XATS's DC backup has been lost. The XATS will lose power\non Source 1 failure, causing the Engine Start signal to be asserted.\nThe XATS will then restart from Source 2.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSDCBackupAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 422)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSDCBackupAlarmCleared.setDescription("INFORMATIONAL: DC backup alarm has been cleared in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 423)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowCoolantLevelAlarm.setDescription("SEVERE: Low coolant level has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 424)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowCoolantLevelAlarmCleared.setDescription("INFORMATIONAL: The detected low coolant level has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowCoolantLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 425)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowCoolantLevelAlarm.setDescription("SEVERE: Very low coolant level has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowCoolantLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 426)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowCoolantLevelAlarmCleared.setDescription("INFORMATIONAL: The detected Very low coolant level has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 427)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighCoolantTempAlarm.setDescription("SEVERE: High coolant temperature has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 428)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighCoolantTempAlarmCleared.setDescription("INFORMATIONAL: The detected high coolant temperature has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryHighCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 429)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryHighCoolantTempAlarm.setDescription("SEVERE: Very high coolant temperature has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryHighCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 430)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryHighCoolantTempAlarmCleared.setDescription("INFORMATIONAL: The Very high coolant temperature condition has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowCoolantTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 431)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowCoolantTempAlarm.setDescription("WARNING: Low coolant temperature has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowCoolantTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 432)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowCoolantTempAlarmCleared.setDescription("INFORMATIONAL: The low coolant temperature condition has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowOilLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 433)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowOilLevelAlarm.setDescription("SEVERE: Low oil level has been detected in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowOilLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 434)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowOilLevelAlarmCleared.setDescription("INFORMATIONAL: Low oil level alarm has been cleared in the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 435)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowBatteryVoltDuringCrankAlarm.setDescription("SEVERE: The generator's battery voltage has been detected \nas low while cranking the engine.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 436)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared.setDescription("INFORMATIONAL: The generator's low battery voltage while\ncranking condition has been cleared.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 437)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm.setDescription("SEVERE: The generator's battery voltage has been detected \nas very low while cranking the engine.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 438)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared.setDescription("INFORMATIONAL: The generator's high battery voltage while\ncranking condition has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorEStop = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 439)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorEStop.setDescription("SEVERE: The generator's emergency stop input has been activated.\nAfter the emergency stop signal has been removed, the E-Stop condition  \nmust be cleared before the generator can be started again.\nE-Stop conditions can only be cleared via the generator front panel.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.\nThe fourth argument is the type of E-Stop (1=LOCAL, 2=REMOTE).")
xATSGeneratorEStopCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 440)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorEStopCleared.setDescription("INFORMATIONAL: The generator's emergency stop condition has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.\nThe fourth argument is the type of E-Stop (1=LOCAL, 2=REMOTE).")
xATSGeneratorHighBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 441)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighBatteryVolt.setDescription("WARNING: The generator's battery voltage has been detected as high.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorHighBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 442)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighBatteryVoltCleared.setDescription("INFORMATIONAL: The detected high battery voltage has been cleared, on the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowBatteryVolt = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 443)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowBatteryVolt.setDescription("SEVERE: The generator's battery voltage has been detected as low.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowBatteryVoltCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 444)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowBatteryVoltCleared.setDescription("INFORMATIONAL: The detected low battery voltage has been cleared, on the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorControlSwitchNotAuto = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 445)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorControlSwitchNotAuto.setDescription("SEVERE: The control switch on the generator is not in auto position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorControlSwitchNotAutoCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 446)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorControlSwitchNotAutoCleared.setDescription("INFORMATIONAL: The control switch on the generator is in auto position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 447)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowOilPressure.setDescription("SEVERE: The generator's oil pressure has been detected as low.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 448)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowOilPressureCleared.setDescription("INFORMATIONAL: The detected low oil pressure has been cleared, on the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowOilPressure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 449)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowOilPressure.setDescription("SEVERE: The generator's oil pressure has been detected as very low.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorVeryLowOilPressureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 450)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowOilPressureCleared.setDescription("INFORMATIONAL: The detected v.low oil pressure has been cleared, on the generator.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 451)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOverload.setDescription("SEVERE: The generator is overloaded.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 452)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOverloadCleared.setDescription("INFORMATIONAL: The generator is running within loading limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 453)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowACVEvent.setDescription("SEVERE: The generator AC voltage is outside the acceptable bounds.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 454)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowACVEventCleared.setDescription("INFORMATIONAL: The generator AC voltage is within normal bounds.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorHighACVEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 455)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighACVEvent.setDescription("SEVERE: The generator AC voltage is outside the acceptable bounds.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorHighACVEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 456)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorHighACVEventCleared.setDescription("INFORMATIONAL: The generator AC voltage is within normal bounds.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOverspeed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 457)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOverspeed.setDescription("SEVERE: The generator is running over the acceptable RPM.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOverspeedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 458)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOverspeedCleared.setDescription("INFORMATIONAL: The generator overspeed shutdown has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorEngineCold = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 459)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorEngineCold.setDescription("SEVERE: The generator engine is cold, may not start.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorEngineColdCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 460)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorEngineColdCleared.setDescription("INFORMATIONAL: The engine is not cold to start.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOutputBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 461)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOutputBreakerOpen.setDescription("SEVERE: The generators output breaker has been detected as open.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorOutputBreakerOpenCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 462)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorOutputBreakerOpenCleared.setDescription("INFORMATIONAL: The engine is not cold to start.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 463)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowFuelLevelAlarm.setDescription("WARNING: The tank fuel level is below the limits specified\nin the xATSGeneratorFuelSystemLowFuelLevelThreshold OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured fuel level in percent of full.")
xATSGeneratorLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 464)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowFuelLevelAlarmCleared.setDescription("INFORMATIONAL: The tank fuel level is back above the specified limit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorVeryLowFuelLevelAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 465)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowFuelLevelAlarm.setDescription("SEVERE: The tank fuel level is below the low threshold limits.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the measured tank fuel level in percent of full.")
xATSGeneratorVeryLowFuelLevelAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 466)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowFuelLevelAlarmCleared.setDescription("INFORMATIONAL: The detected low tank level has been cleared in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 467)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowRunTimeAlarm.setDescription("WARNING: The estimated runtime is below the limits specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the estimated runtime in hours.")
xATSGeneratorLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 468)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorLowRunTimeAlarmCleared.setDescription("INFORMATIONAL: The detected low runtime has been cleared in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorVeryLowRunTimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 469)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowRunTimeAlarm.setDescription("SEVERE: The estimated runtime is below the limits specified\nin the xATSGeneratorFuelSystemVeryLowRunTimeThreshold OID.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the estimated runtime in hours.")
xATSGeneratorVeryLowRunTimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 470)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorVeryLowRunTimeAlarmCleared.setDescription("INFORMATIONAL: The detected low runtime has been cleared in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorServiceDueAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 471)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorServiceDueAlarm.setDescription("WARNING: The generator is due for scheduled service.\nGeneration of this alarm is based on calendar days since \nand/or actual generator run-hours since last service.\nThis alarm is cleared using the xATSGeneratorServiceResetRecord OID.\n\n  (See also: xATSGeneratorServiceCalendarIntervalThreshold\n   and xATSGeneratorServiceRunHoursThreshold OIDs)\n\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorServiceDueAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 472)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSGeneratorServiceDueAlarmCleared.setDescription("INFORMATIONAL: The generator's service registers have been reset.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorShutdown = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 473)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorShutdown.setDescription("SEVERE: The generator is shutdown.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorShutdownCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 474)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorShutdownCleared.setDescription("INFORMATIONAL: The generator shutdown alarm is cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorBatteryCharger = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 475)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorBatteryCharger.setDescription("SEVERE: The generator battery charger is nonfunctional.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorBatteryChargerCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 476)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorBatteryChargerCleared.setDescription("INFORMATIONAL: Fault in the generator battery charger is cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 477)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorGenericEvent.setDescription("WARNING: Any generic generator event.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorGenericEventCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 478)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorGenericEventCleared.setDescription("INFORMATIONAL: Generated generic generator event is cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xPDUInternalCommErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 479)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUInternalCommErrorCleared.setDescription("INFORMATIONAL: Internal communication has been restored.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUSystemStateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 480)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemStateAlarm.setDescription("SEVERE: The PDU's breakers (Q1, Q2 & Q3) are in a configuration that might lead\nto system unavailability.  it may signify a temporary condition, when the breakers\nare placed in an atypical manner as the user transitions to (UPS OPERATION or MAINTENANCE BYPASS)\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the type of state change (1=NO UPS INPUT, 2=NO PANEL FEED, 3=ATYPICAL BYPASS MODE).\n note: The NO_PANEL_FEED alarm is applicable only for PDUs with system bypass.")
xPDUSystemStateAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 481)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemStateAlarmCleared.setDescription("INFORMATIONAL: The PDU's breakers (Q1, Q2 & Q3) are set in a configuration\nthat is a non-alarm state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the type of state change (1=NO UPS INPUT, 2=NO PANEL FEED, 3=ATYPICAL BYPASS MODE).\n note: The NO_PANEL_FEED alarm is applicable only for PDUs with system bypass.")
xPDUEpoTestMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 482)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUEpoTestMode.setDescription("WARNING: The device's Emergency Power Off (EPO) circuit has been\nswitched back to the test position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUEpoArmed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 483)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUEpoArmed.setDescription("INFORMATIONAL: The device's Emergency Power Off (EPO) circuit has been\nswitched back to the armed position.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUFuseBlownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 484)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUFuseBlownAlarm.setDescription("SEVERE: One or more fuses in this PDU have been detected as open.\nThese fuses are in the feed to the UPS associated with this PDU.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).")
xPDUFuseBlownAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 485)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUFuseBlownAlarmCleared.setDescription("INFORMATIONAL: A previous check fuse alarm in this PDU has cleared.\nThese fuses are in the feed to the UPS associated with this PDU.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase (1=L1, 2=L2, 3=L3).")
xPDUBreakerPositionAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 486)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBreakerPositionAlarm.setDescription("SEVERE: A PDU breaker is in a state that compromises system availability.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the breaker (1=MAIN INPUT, 2=BYPASS INPUT, 3=CROSS TIE, 4=OUTPUT).\n note: The OUTPUT breaker position alarm is applicable only for PDUs with no system bypass.\nThe fourth argument is the breaker position (1=OPEN, 2=CLOSED).")
xPDUBreakerPositionAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 487)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBreakerPositionAlarmCleared.setDescription("INFORMATIONAL: A PDU breaker is no longer in a state that compromises system availability.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the breaker (1=MAIN INPUT, 2=BYPASS INPUT, 3=CROSS TIE, 4=OUTPUT).\n note: The OUTPUT breaker position alarm cleared is applicable only for PDUs with no system bypass.")
xPDUBreakerChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 488)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBreakerChangeEvent.setDescription("INFORMATIONAL: A system breaker or switch within the device has changed state.\nThey are generated when any of the Q1, Q2 or Q3 breakers have changed states.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the breaker that has changed\n(1=UPS FEED (Q1), 2=UPS OUTPUT(Q2), 3=MAINTENANCE BYPASS (Q3).\nThe fourth argument is the state of the breaker that has changed (1=OPEN, 2=CLOSED).\nThe fifth argument is a 8-bit field representing the state of all breakers in the system,\nwhen any of one of the Q1, Q2 or Q3 breakers have changed state.\n\nThe bit map is represented in the following manner (b7, b6 ... b0)\nb0 - UPS FEED (Q1)\nb1 - MAINTENANCE BYPASS (Q3)\nb2 - UPS OUTPUT (Q2)\nb3 - MAIN INPUT\nb4 - BYPASS INPUT\nb5 - CROSS-TIE OUTPUT\n\nExample:  value of 60 (0x3C) indicates that the CROSS_TIE, BYPASS and MAIN INPUT, and Q2 breakers \nare CLOSED and Q3, Q1 breakers are OPEN.")
xPDUDataCommMismatchError = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 489)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUDataCommMismatchError.setDescription("SEVERE: A data incompatibility exists within the device.  This\nis typically the result of mismatches between firmware revisions\nof the transfer switch controller and the Network Management interface.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUDataCommMismatchErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 490)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUDataCommMismatchErrorCleared.setDescription("INFORMATIONAL: The internal data incompatibility has been resolved.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUSystemInMaintenanceBypassMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 491)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemInMaintenanceBypassMode.setDescription("WARNING: The PDU state has changed to maintenance bypass mode.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xPDUSystemInUPSOperationalMode = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 492)).setObjects(*(("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUSystemInUPSOperationalMode.setDescription("INFORMATIONAL: The PDU state has changed to UPS operational mode.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSGeneratorFuelTankRuptureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 493)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorFuelTankRuptureAlarm.setDescription("WARNING: Detected a rupture in the inner wall of the generator fuel tank.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorFuelTankRuptureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 494)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorFuelTankRuptureAlarmCleared.setDescription("INFORMATIONAL: The rupture in the inner wall of the generator is not detected.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorGroundFaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 495)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorGroundFaultAlarm.setDescription("SEVERE: Generator ground fault alarm.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSGeneratorGroundFaultAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 496)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSGeneratorGroundFaultAlarmCleared.setDescription("INFORMATIONAL: Generator ground fault alarm cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the OEM's fault/event code.")
xATSOutputLoadPoweredByGeneratorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 497)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSOutputLoadPoweredByGeneratorAlarm.setDescription("WARNING: The system load on the output of the ATS is being powered by source 2 (generator).\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument indicates if the load is powered by the generator,\nwhen 'load testing' the generator (1 = LIVE, 2 = TEST).")
xATSOutputLoadPoweredByGeneratorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 498)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSOutputLoadPoweredByGeneratorAlarmCleared.setDescription("INFORMATIONAL: The system load on the output of the ATS is no longer being powered by source 2 (generator).\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xAPCControllerFirmwareUpdateTransferStart = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 499)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xAPCControllerFirmwareUpdateTransferStart.setDescription("INFORMATIONAL: Start controller firmware transfer in the device.\nThe first argument is the host device serial number.\nThe second argument is the host model name that initiated the transfer.\nThe third argument is the name of the file that is transferred. \nThe fourth argument is the updated revision of the file, if available\nThe fifth argument is the reason for the update, if available\n (1=User request, 2=Automatic upgrade by NMC, 3=Unknown).")
xAPCControllerFirmwareUpdateTransferComplete = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 500)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xAPCControllerFirmwareUpdateTransferComplete.setDescription("INFORMATIONAL: Transfer of controller firmware was completed in the device.\nThe first argument is the host device serial number.\nThe second argument is the host device model name that completed the transfer.\nThe third argument is the name of the file that was transferred. \nThe fourth argument is the revision of the file that was transferred, if available.")
xAPCControllerFirmwareUpdateTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 501)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xAPCControllerFirmwareUpdateTransferFailed.setDescription("SEVERE: Transfer of controller firmware failed.\nThe first argument is the host device serial number.\nThe second argument is the host device model name that failed to transfer.\nThe third argument is the name of the file that failed the transfer, if available.\nThe fourth argument is the reason for failure.")
upsPfcInputRelayFailure = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 502)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsPfcInputRelayFailure.setDescription("WARNING: The PFC (Power Factor Correction) input relay failure exists.")
upsPfcInputRelayFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 503)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsPfcInputRelayFailureCleared.setDescription("INFORMATIONAL: The PFC (Power Factor Correction) input relay failure cleared.")
upsInverterOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 504)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInverterOverTemperature.setDescription("WARNING: The inverter over temperature condition exists.")
upsInverterOverTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 505)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInverterOverTemperatureCleared.setDescription("INFORMATIONAL: The inverter over temperature condition cleared.")
upsBatteryOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 506)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryOverVoltage.setDescription("WARNING: The battery over voltage condition exists.")
upsBatteryOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 507)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryOverVoltageCleared.setDescription("INFORMATIONAL: The battery over voltage condition cleared.")
upsEepromFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 508)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsEepromFault.setDescription("WARNING: The EEPROM fault exists.")
upsEepromFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 509)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsEepromFaultCleared.setDescription("INFORMATIONAL: The EEPROM fault cleared.")
aruFanRuntimeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 510)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanRuntimeAlarm.setDescription("WARNING: The total running hours for a fan has exceeded\nthe run hour threshold.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.\nThe fifth argument indicates which fan in the ARU.")
aruFanRuntimeAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 511)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanRuntimeAlarmCleared.setDescription("INFORMATIONAL: The total running hours for a fan is no longer\nabove the fan runhour threshold.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.\nThe fifth argument indicates which fan in the ARU.")
aruFanPoorPerformanceAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 512)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanPoorPerformanceAlarm.setDescription("WARNING: Poor fan performance has been detected in the ARU,\nindicating that the fan may be close to failing.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.\nThe fifth argument indicates which fan in the ARU.")
aruFanPoorPerformanceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 513)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruFanPoorPerformanceAlarmCleared.setDescription("INFORMATIONAL: Fan performance is no longer degraded.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.\nThe fifth argument indicates which fan in the ARU.")
aruRedundantPowerLostAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 514)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruRedundantPowerLostAlarm.setDescription("WARNING: One of the redundant line cords on the ARU is no longer receiving AC power.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
aruRedundantPowerLostAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 515)).setObjects(*(("PowerNet-MIB", "emsIdentEMSName"), ("PowerNet-MIB", "emsIdentSerialNumber"), ("PowerNet-MIB", "rARUStatusAruName"), ("PowerNet-MIB", "rARUStatusAruIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: aruRedundantPowerLostAlarmCleared.setDescription("INFORMATIONAL: Line-cord redundancy has been restored to the ARU.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the ARU number. \nThe fourth argument is the ARU name.")
apcDeviceConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 516)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDeviceConfigChange.setDescription("INFORMATIONAL: A device configuration change has been made on the device.\nThe first argument is the device serial number.\nThe second argument is the device name.\nThe third argument is a secondary device id number.")
apcEnvSensorConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 517)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSensorConnected.setDescription("INFORMATIONAL: A sensor has been connected to the host device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvSensorDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 518)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSensorDisconnected.setDescription("SEVERE: A sensor has been disconnected from the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMaxTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 519)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMaxTempThresholdViolation.setDescription("SEVERE: Max temperature threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMaxTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 520)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMaxTempThresholdViolationCleared.setDescription("INFORMATIONAL: Max temperature threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvHighTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 521)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvHighTempThresholdViolation.setDescription("WARNING: High temperature threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvHighTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 522)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvHighTempThresholdViolationCleared.setDescription("INFORMATIONAL: High temperature threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLowTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 523)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLowTempThresholdViolation.setDescription("WARNING: Low temperature threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLowTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 524)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLowTempThresholdViolationCleared.setDescription("INFORMATIONAL: Low temperature threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMinTempThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 525)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMinTempThresholdViolation.setDescription("SEVERE: Min temperature threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMinTempThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 526)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMinTempThresholdViolationCleared.setDescription("INFORMATIONAL: Min temperature threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe sixth argument is the sensor number. \nThe seventh argument is the sensor name.")
apcEnvSTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 527)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSTIncTempRateViolation.setDescription("SEVERE: Short-term increasing temperature rate violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvSTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 528)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSTIncTempRateViolationCleared.setDescription("INFORMATIONAL: Short-term increasing temperature rate cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvSTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 529)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSTDecTempRateViolation.setDescription("SEVERE: Short-term decreasing temperature rate violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvSTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 530)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvSTDecTempRateViolationCleared.setDescription("INFORMATIONAL: Short-term decreasing temperature rate cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLTIncTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 531)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLTIncTempRateViolation.setDescription("SEVERE: Long-term increasing temperature rate violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLTIncTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 532)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLTIncTempRateViolationCleared.setDescription("INFORMATIONAL: Long-term increasing temperature rate cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLTDecTempRateViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 533)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLTDecTempRateViolation.setDescription("SEVERE: Long-term decreasing temperature rate violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLTDecTempRateViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 534)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLTDecTempRateViolationCleared.setDescription("INFORMATIONAL: Long-term decreasing temperature rate cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMaxHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 535)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMaxHumidityThresholdViolation.setDescription("SEVERE: Max humidity threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMaxHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 536)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMaxHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Max humidity threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvHighHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 537)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvHighHumidityThresholdViolation.setDescription("WARNING: High humidity threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvHighHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 538)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvHighHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: High humidity threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLowHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 539)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLowHumidityThresholdViolation.setDescription("WARNING: Low humidity threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvLowHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 540)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvLowHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Low humidity threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMinHumidityThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 541)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMinHumidityThresholdViolation.setDescription("SEVERE: Min humidity threshold violated on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcEnvMinHumidityThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 542)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcEnvMinHumidityThresholdViolationCleared.setDescription("INFORMATIONAL: Min humidity threshold violation cleared on the sensor. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the sensor number. \nThe fifth argument is the sensor name.")
apcBeaconConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 543)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcBeaconConnected.setDescription("INFORMATIONAL: A beacon has been connected to the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number.")
apcBeaconDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 544)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcBeaconDisconnected.setDescription("SEVERE: A beacon has been disconnected from the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. ")
apcBeaconOn = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 545)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcBeaconOn.setDescription("INFORMATIONAL: A beacon has gone on (activated).\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. ")
apcBeaconOff = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 546)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcBeaconOff.setDescription("INFORMATIONAL: A beacon has gone off (deactivated).\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. ")
apcOutletStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 547)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcOutletStateAbnormal.setDescription("WARNING: An outlet on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the outlet number. \nThe fifth argument is the outlet name.\nThe sixth argument is the current outlet state (1=ON, 2=OFF).\nThe seventh argument is the configured normal outlet state (1=ON, 2=OFF).")
apcOutletStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 548)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcOutletStateNormal.setDescription("INFORMATIONAL: An outlet on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the outlet number. \nThe fifth argument is the outlet name.\nThe sixth argument is the current outlet state (1=ON, 2=OFF).\nThe seventh argument is the configured normal outlet state (1=ON, 2=OFF).")
apcOutputRelayStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 549)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcOutputRelayStateAbnormal.setDescription("WARNING: An output relay on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the output relay number. \nThe fifth argument is the output relay name.\nThe sixth argument is the current output relay state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal output relay state (1=CLOSED, 2=OPEN).")
apcOutputRelayStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 550)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcOutputRelayStateNormal.setDescription("INFORMATIONAL: An output relay on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the output relay number. \nThe fifth argument is the output relay name.\nThe sixth argument is the current output relay state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal output relay state (1=CLOSED, 2=OPEN).")
apcHardwareStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 551)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcHardwareStateAbnormal.setDescription("SEVERE: The device's hardware is improperly configured and operating outside\nnormal bounds for the hardware.  This can be caused by improper devices being\nconnected to device ports or Alink Current limit detection.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is a hardware specific state code.")
apcHardwareStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 552)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcHardwareStateNormal.setDescription("INFORMATIONAL: The device's hardware is in its normal operational state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number.")
apcCriticalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 553)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcCriticalDiscreteInputContactStateAbnormal.setDescription("SEVERE: A discrete input contact on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcCriticalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 554)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcCriticalDiscreteInputContactStateNormal.setDescription("INFORMATIONAL: A discrete input contact on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcWarningDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 555)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcWarningDiscreteInputContactStateAbnormal.setDescription("WARNING: A discrete input contact on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcWarningDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 556)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcWarningDiscreteInputContactStateNormal.setDescription("INFORMATIONAL: A discrete input contact on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcInformationalDiscreteInputContactStateAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 557)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcInformationalDiscreteInputContactStateAbnormal.setDescription("INFORMATIONAL: A discrete input contact on the device has changed to its abnormal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcInformationalDiscreteInputContactStateNormal = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 558)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcInformationalDiscreteInputContactStateNormal.setDescription("INFORMATIONAL: A discrete input contact on the device has changed to its normal state.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input contact number. \nThe fifth argument is the input contact name.\nThe sixth argument is the input contact state (1=CLOSED, 2=OPEN).\nThe seventh argument is the configured normal input contact state (1=CLOSED, 2=OPEN).")
apcAnalogInputMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 559)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputMaxThresholdViolation.setDescription("SEVERE: Maximum threshold violated on an analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 560)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputMaxThresholdViolationCleared.setDescription("INFORMATIONAL: Maximum threshold violation cleared on the analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 561)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputHighThresholdViolation.setDescription("WARNING: High threshold violated on an analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 562)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputHighThresholdViolationCleared.setDescription("INFORMATIONAL: High threshold violation cleared on the analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 563)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputLowThresholdViolation.setDescription("WARNING: Low threshold violated on an analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 564)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputLowThresholdViolationCleared.setDescription("INFORMATIONAL: Low threshold violation cleared on the analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 565)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputMinThresholdViolation.setDescription("SEVERE: Minimum threshold violated on an analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcAnalogInputMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 566)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAnalogInputMinThresholdViolationCleared.setDescription("INFORMATIONAL: Minimum threshold violation cleared on the analog input. \nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is a secondary device id number. \nThe fourth argument is the input number. \nThe fifth argument is the input name.")
apcDeviceClearLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 567)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDeviceClearLostComms.setDescription("INFORMATIONAL: Lost communications reset command has been issued.\nThe first argument is the device serial number.\nThe second argument is the device name.\nThe third argument is a secondary device id number.")
apcDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 568)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDeviceConnected.setDescription("INFORMATIONAL: A device has been connected to the host.\nThe first argument is the host serial number.\nThe second argument is the host name.\nThe third argument is the device number.\nThe fourth argument is the device name.")
apcDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 569)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDeviceDisconnected.setDescription("SEVERE: A device has been disconnected from the host.\nThe first argument is the host serial number.\nThe second argument is the host name.\nThe third argument is the device number. \nThe fourth argument is the device name.")
apcUnregisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 570)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcUnregisteredUserAccessDenied.setDescription("INFORMATIONAL: An unregistered user has tried to access the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argumant is the door identifier.\nThe fifth argument is the unregistered user's RFID.")
apcRegisteredUserAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 571)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcRegisteredUserAccessDenied.setDescription("INFORMATIONAL: A registered user has been denied access to the device.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argumant is the door identifier.\nThe fifth argument is the user name.")
apcRegisteredUserConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 572)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcRegisteredUserConfigChange.setDescription("INFORMATIONAL: Registered user configuration change.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the user name.")
apcDoorUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 573)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDoorUnlocked.setDescription("INFORMATIONAL: A door has been unlocked.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier.\nThe fifth argument is the door access user.\nThe sixth argument is the door access type.")
apcDoorLocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 574)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDoorLocked.setDescription("INFORMATIONAL: A door has been locked.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier.\nThe fifth argument is the door access user.\nThe sixth argument is the door access type.")
apcHandleOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 575)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcHandleOpened.setDescription("INFORMATIONAL: A door handle has been opened.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcHandleClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 576)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcHandleClosed.setDescription("INFORMATIONAL: A door handle has been closed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 577)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorOpened.setDescription("INFORMATIONAL: A door has been opened.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 578)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorClosed.setDescription("INFORMATIONAL: A door has been closed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcKeyOverrideUnlocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 580)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcKeyOverrideUnlocked.setDescription("SEVERE: Key override unlock has occurred.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcKeyOverrideLocked = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 581)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcKeyOverrideLocked.setDescription("INFORMATIONAL: Key override lock has occurred.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcForcedEntry = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 582)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcForcedEntry.setDescription("SEVERE: A forced entry condition has occurred.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcForcedEntryCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 583)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcForcedEntryCleared.setDescription("INFORMATIONAL: A forced entry condition has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcRelockTimeout = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 584)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcRelockTimeout.setDescription("SEVERE: A relock timout has occurred.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcRelockTimeoutCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 585)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcRelockTimeoutCleared.setDescription("INFORMATIONAL: A relock timout has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorSenseDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 586)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorSenseDisconnected.setDescription("SEVERE: A door sensor was disconnected.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorSenseConnected = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 587)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorSenseConnected.setDescription("INFORMATIONAL: A forced entry condition has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorLostComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 588)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorLostComms.setDescription("SEVERE: Communications have been lost with the door.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorEstablishedComms = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 589)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorEstablishedComms.setDescription("INFORMATIONAL: Communications have been established with the door.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcRegisteredUserAccessChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 590)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcRegisteredUserAccessChange.setDescription("INFORMATIONAL: Registered user access changed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the user name.")
apcUnregisteredUserStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 591)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcUnregisteredUserStatusChange.setDescription("INFORMATIONAL: Unregistered user status changed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the user name.")
apcDeviceClearUserConfigs = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 592)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDeviceClearUserConfigs.setDescription("INFORMATIONAL: User configurations reset command has been issued.\nThe first argument is the device serial number.\nThe second argument is the device name.\nThe third argument is a secondary device id number.")
upsBatteryTempSensorFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 600)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryTempSensorFault.setDescription("WARNING: The battery temperature sensor fault exists.")
upsBatteryTempSensorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 601)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatteryTempSensorFaultCleared.setDescription("INFORMATIONAL: The battery temperature sensor fault cleared.")
upsBatterySoftBusStartFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 602)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatterySoftBusStartFault.setDescription("WARNING: A battery bus soft start fault exists.")
upsBatterySoftBusStartFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 603)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBatterySoftBusStartFaultCleared.setDescription("INFORMATIONAL: A battery bus soft start fault exists cleared.")
apcOutputShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 604)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcOutputShortCircuit.setDescription("WARNING: An output short circuit condition exists.")
apcOutputShortCircuitCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 605)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcOutputShortCircuitCleared.setDescription("INFORMATIONAL: An output short circuit condition cleared.")
apcOutputRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 606)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcOutputRelayFault.setDescription("WARNING: An output relay (or its driver) fault exists.")
apcOutputRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 607)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcOutputRelayFaultCleared.setDescription("INFORMATIONAL: An output relay (or its driver) fault cleared.")
upsPfcFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 608)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsPfcFault.setDescription("WARNING: A PFC fault exists.")
upsPfcFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 609)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsPfcFaultCleared.setDescription("INFORMATIONAL: The PFC fault cleared.")
apcDcBusOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 610)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDcBusOverVoltage.setDescription("WARNING: The DC bus voltage is too high.")
apcDcBusOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 611)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcDcBusOverVoltageCleared.setDescription("INFORMATIONAL: The DC bus voltage is too high cleared.")
upsInverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 612)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInverterFault.setDescription("WARNING: The inverter fault exists.")
upsInverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 613)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsInverterFaultCleared.setDescription("INFORMATIONAL: The inverter fault cleared.")
apcAdConverterFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 614)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAdConverterFault.setDescription("WARNING: The A/D converter fault exists.")
apcAdConverterFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 615)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcAdConverterFaultCleared.setDescription("INFORMATIONAL: The A/D converter fault cleared.")
apcLogicPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 616)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcLogicPowerSupplyFault.setDescription("WARNING: A logic power supply fault exists.")
apcLogicPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 617)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcLogicPowerSupplyFaultCleared.setDescription("INFORMATIONAL: A logic power supply fault cleared.")
apcTransformerDCImbalanceFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 618)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcTransformerDCImbalanceFault.setDescription("WARNING: The DC component of the transformer's current is too high.")
apcTransformerDCImbalanceFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 619)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcTransformerDCImbalanceFaultCleared.setDescription("WARNING: The DC component of the transformer's current is normal.")
upsBackfeedRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 620)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBackfeedRelayFault.setDescription("WARNING: The backfeed relay (or its driver) has a fault.")
upsBackfeedRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 621)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBackfeedRelayFaultCleared.setDescription("WARNING: The backfeed relay (or its driver) has a fault cleared.")
upsBypassRelayFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 622)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBypassRelayFault.setDescription("WARNING: A bypass relay (or its driver) has a fault.")
upsBypassRelayFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 623)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsBypassRelayFaultCleared.setDescription("WARNING: A bypass relay (or its driver) has a fault cleared.")
xPDUBranchCurrentMinAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 626)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentMinAlarm.setDescription("SEVERE: The current in a branch circuit is outside the limits specified for that\nbranch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
xPDUBranchCurrentMinAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 627)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentMinAlarmCleared.setDescription("INFORMATIONAL: The current in a branch circuit is back within the limits \nspecified for that branch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.")
xPDUBranchCurrentMaxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 628)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentMaxAlarm.setDescription("SEVERE: The current in a branch circuit is outside the limits specified for that\nbranch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.\nThe fifth argument is the threshold, in tenths of Amps, above which the alarm was generated.")
xPDUBranchCurrentMaxAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 629)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "xPDUIdentProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xPDUIdentSerialNumber"), ) )
if mibBuilder.loadTexts: xPDUBranchCurrentMaxAlarmCleared.setDescription("INFORMATIONAL: The current in a branch circuit is back within the limits \nspecified for that branch circuit.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the panel position of the branch circuit (1-based index).\nThe fourth argument is the measured current in tenths of Amps.")
rPDUOutletLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 630)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletLowLoad.setDescription("WARNING: A Rack PDU has violated the outlet low load threshold.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
rPDUOutletLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 631)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletLowLoadCleared.setDescription("INFORMATIONAL: The outlet low load condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
rPDUOutletNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 632)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletNearOverload.setDescription("WARNING: A Rack PDU is near an outlet overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
rPDUOutletNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 633)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletNearOverloadCleared.setDescription("INFORMATIONAL: The outlet near overload condition on a Rack PDU has \nbeen cleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
rPDUOutletOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 634)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletOverload.setDescription("SEVERE: A Rack PDU is in an overload condition.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
rPDUOutletOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 635)).setObjects(*(("PowerNet-MIB", "rPDUIdentSerialNumber"), ("PowerNet-MIB", "rPDUOutletStatusIndex"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "rPDUIdentName"), ) )
if mibBuilder.loadTexts: rPDUOutletOverloadCleared.setDescription("INFORMATIONAL: The outlet overload condition on a Rack PDU has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the device name.\nThe third argument is the outlet number.")
apcTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 636)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger02"), ) )
if mibBuilder.loadTexts: apcTestTrap.setDescription("INFORMATIONAL: Trap used to test SNMP trap functionality.\nThe first argument is a place holder for test variables.")
baseFanFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 637)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: baseFanFailureCleared.setDescription("INFORMATIONAL: Base module fan has been repaired")
atsLowLoad = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 638)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsLowLoad.setDescription("WARNING: ATS has violated the bank or phase low load threshold.\nThe first argument is the serial number.\nThe second argument is the product name.  \nThe third argument is the phase number\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsLowLoadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 639)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsLowLoadCleared.setDescription("INFORMATIONAL: The bank or phase low load condition on an ATS has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the product name.  \nThe third argument is the phase number\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsNearOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 640)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsNearOverload.setDescription("WARNING: ATS has violated the bank or phase near overload threshold.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is the phase number\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsNearOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 641)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsNearOverloadCleared.setDescription("INFORMATIONAL: The bank or phase near overload condition on an ATS has \nbeen cleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is the phase number\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsOverload = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 642)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsOverload.setDescription("SEVERE: ATS is in an overload condition.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is the phase number.\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsOverloadCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 643)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "atsOutputPhaseIndex"), ("PowerNet-MIB", "atsOutputBank"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsOverloadCleared.setDescription("INFORMATIONAL: The bank or phase overload condition on an ATS has been \ncleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is the phase number.\nThe fourth argument is the bank number. -1 is returned if bank does not exist.")
atsRMSOverVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 644)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSOverVoltage.setDescription("SEVERE: Overvoltage condition violated.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSOverVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 645)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSOverVoltageCleared.setDescription("INFORMATIONAL: Overvoltage condition cleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSUnderVoltage = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 646)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSUnderVoltage.setDescription("SEVERE: Undervoltage condition violated.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSUnderVoltageCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 647)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSUnderVoltageCleared.setDescription("INFORMATIONAL: Undervoltage condition cleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSOverFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 648)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSOverFrequency.setDescription("SEVERE: OverFrequency condition violated.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSOverFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 649)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSOverFrequencyCleared.setDescription("INFORMATIONAL: OverFrequency condition cleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSUnderFrequency = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 650)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSUnderFrequency.setDescription("SEVERE: UnderFrequency condition violated.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsRMSUnderFrequencyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 651)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsRMSUnderFrequencyCleared.setDescription("INFORMATIONAL: UnderFrequency condition cleared.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
isxModularDistributionCommLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 652)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularDistributionCommLost.setDescription("SEVERE: Communication with a metering segment of the modular \ndistribution system has been lost.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the segment number.\nThe fourth argument describes the modules served by this metering segment.")
isxModularDistributionCommEstablished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 653)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularDistributionCommEstablished.setDescription("INFORMATIONAL: Communication with a metering segment of the modular \ndistribution system has been restored.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the segment number.\nThe fourth argument describes the modules served by this metering segment.")
isxModularDistributionModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 654)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularDistributionModuleInserted.setDescription("INFORMATIONAL: A distribution module has been inserted into the system.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module location number.")
isxModularDistributionModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 655)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularDistributionModuleRemoved.setDescription("INFORMATIONAL: A distribution module has been removed from the system.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module location number.")
isxModularBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 656)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularBreakerOpenAlarm.setDescription("SEVERE: A distribution module breaker is open and in an alarm condition.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the module breaker(s) (1=L1, 2=L2, 3=L3, 4=L12, 5=L23, 6=L123).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 657)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularBreakerOpenAlarmCleared.setDescription("INFORMATIONAL: An alarm caused by a distribution breaker being open has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker(s) (1=L1, 2=L2, 3=L3, 4=L12, 5=L23, 6=L123).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 658)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularMinCurrentThresholdViolation.setDescription("SEVERE: The current in a distribution module is below the minimum/critical\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 659)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularMinCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution module is no longer below the minimum/critical\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 660)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularLowCurrentThresholdViolation.setDescription("WARNING: The current in a distribution module is below the low/warning\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 661)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularLowCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution module is no longer below the low/warning\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 662)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularHighCurrentThresholdViolation.setDescription("WARNING: The current in a distribution module is above the high/warning\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 663)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularHighCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution module is no longer above the high/warning\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 664)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularMaxCurrentThresholdViolation.setDescription("SEVERE: The current in a distribution module is above the maximum/critical\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 665)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularMaxCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution module is no longer above the maximum/critical\nlimit specified for the circuit/cable.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the module number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the circuit/cable fed by this breaker.")
isxModularSubfeedBreakerOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 666)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularSubfeedBreakerOpenAlarm.setDescription("SEVERE: A distribution subfeed breaker is open and in an alarm condition.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the load name associated with the subfeed.")
isxModularSubfeedBreakerOpenAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 667)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularSubfeedBreakerOpenAlarmCleared.setDescription("INFORMATIONAL: An alarm caused by a distribution subfeed breaker being open has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the load name associated with the subfeed.")
isxModularSubfeedMinCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 668)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedMinCurrentThresholdViolation.setDescription("SEVERE: The current in a distribution subfeed is below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the subfeed.")
isxModularSubfeedMinCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 669)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedMinCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution subfeed is no longer below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the subfeed.")
isxModularSubfeedLowCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 670)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedLowCurrentThresholdViolation.setDescription("WARNING: The current in a distribution subfeed is below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the subfeed.")
isxModularSubfeedLowCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 671)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedLowCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution subfeed is no longer below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the subfeed.")
isxModularSubfeedHighCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 672)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedHighCurrentThresholdViolation.setDescription("WARNING: The current in a distribution subfeed is above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the subfeed.")
isxModularSubfeedHighCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 673)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedHighCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution subfeed is no longer above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the subfeed.")
isxModularSubfeedMaxCurrentThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 674)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedMaxCurrentThresholdViolation.setDescription("SEVERE: The current in a distribution subfeed is above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the threshold, in tenths of Amps, from which the alarm was generated.\nThe sixth argument is the load name associated with the subfeed.")
isxModularSubfeedMaxCurrentThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 675)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularSubfeedMaxCurrentThresholdViolationCleared.setDescription("INFORMATIONAL: The current in a distribution subfeed is no longer above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the subfeed number.\nThe fourth argument is the breaker/phase index (1=L1, 2=L2, 3=L3).\nThe fifth argument is the load name associated with the subfeed.")
isxModularTotalOutputCurrentMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 676)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentMinThresholdViolation.setDescription("SEVERE: The total output current of the distribution is below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
isxModularTotalOutputCurrentMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 677)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentMinThresholdViolationCleared.setDescription("INFORMATIONAL: The total output current of the distribution is no longer below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularTotalOutputCurrentLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 678)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentLowThresholdViolation.setDescription("WARNING: The total output current of the distribution is below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
isxModularTotalOutputCurrentLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 679)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentLowThresholdViolationCleared.setDescription("INFORMATIONAL: The total output current of the distribution is no longer below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularTotalOutputCurrentHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 680)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentHighThresholdViolation.setDescription("WARNING: The total output current of the distribution is above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
isxModularTotalOutputCurrentHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 681)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentHighThresholdViolationCleared.setDescription("INFORMATIONAL: The total output current of the distribution is no longer above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularTotalOutputCurrentMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 682)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentMaxThresholdViolation.setDescription("SEVERE: The total output current of the distribution is above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Amps, from which the alarm was generated.")
isxModularTotalOutputCurrentMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 683)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularTotalOutputCurrentMaxThresholdViolationCleared.setDescription("INFORMATIONAL: The total output current of the distribution is no longer above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularOutputVoltageMinThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 684)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageMinThresholdViolation.setDescription("SEVERE: The distribution output voltage is below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
isxModularOutputVoltageMinThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 685)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageMinThresholdViolationCleared.setDescription("INFORMATIONAL: The distribution output voltage is no longer below the minimum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularOutputVoltageLowThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 686)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageLowThresholdViolation.setDescription("WARNING: The distribution output voltage is below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
isxModularOutputVoltageLowThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 687)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageLowThresholdViolationCleared.setDescription("INFORMATIONAL: The distribution output voltage is no longer below the low/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularOutputVoltageHighThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 688)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageHighThresholdViolation.setDescription("WARNING: The distribution output voltage is above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
isxModularOutputVoltageHighThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 689)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageHighThresholdViolationCleared.setDescription("INFORMATIONAL: The distribution output voltage is no longer above the high/warning limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
isxModularOutputVoltageMaxThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 690)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageMaxThresholdViolation.setDescription("SEVERE: The distribution output voltage is above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).\nThe fourth argument is the threshold, in tenths of Volts, from which the alarm was generated.")
isxModularOutputVoltageMaxThresholdViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 691)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputVoltageMaxThresholdViolationCleared.setDescription("INFORMATIONAL: The distribution output voltage is no longer above the maximum/critical limit specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the phase index (1=L1, 2=L2, 3=L3).")
apcDoorClosedImproperly = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 692)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorClosedImproperly.setDescription("SEVERE: A door has been closed improperly.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcDoorClosedImproperlyCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 693)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcDoorClosedImproperlyCleared.setDescription("INFORMATIONAL: A door is no longer closed improperly.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcUserScheduleViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 694)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcUserScheduleViolation.setDescription("SEVERE: A user has had a door opened past the scheduled access period.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
apcUserScheduleViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 695)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: apcUserScheduleViolationCleared.setDescription("INFORMATIONAL: User schedule violation has been cleared.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the host device location.\nThe fourth argument is the door identifier, (1=front, 2=rear).")
isxModularOutputFrequencyThresholdViolation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 696)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: isxModularOutputFrequencyThresholdViolation.setDescription("SEVERE: The distribution output frequency is outside of the operating range specified.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the threshold, in tenths of Hertz, from which the alarm was generated.")
isxModularOutputFrequencyViolationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 697)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularOutputFrequencyViolationCleared.setDescription("INFORMATIONAL: The distribution output frequency is no longer out of range.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
atsSourceStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 698)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsSourceStatusFail.setDescription("SEVERE: ATS Source failed.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsSourceStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 699)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsSourceStatusOk.setDescription("INFORMATIONAL: ATS Source OK.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the source: 0=A, 1=B.")
atsHardwareStatusFail = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 700)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsHardwareStatusFail.setDescription("SEVERE: ATS display board hardware failed.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the failed hardware: \n0= Phase LEDs/Push-button hardware failure \n1= Seven-segment display hardware failure.")
atsHardwareStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 701)).setObjects(*(("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "atsConfigProductName"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "atsIdentSerialNumber"), ) )
if mibBuilder.loadTexts: atsHardwareStatusOk.setDescription("INFORMATIONAL: ATS display board hardware ok.\nThe first argument is the serial number.\nThe second argument is the product name.\nThe third argument is an integer representing the hardware: \n0= Phase LEDs/Push-button hardware failure \n1= Seven-segment display hardware failure.")
atsControllerRestart = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 702)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: atsControllerRestart.setDescription("INFORMATIONAL: ATS Controller restarted.")
xATSS1BadPhaseRotation = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 724)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSS1BadPhaseRotation.setDescription("SEVERE: The device's source 1 phase rotation is bad.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSS1BadPhaseRotationCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 725)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSS1BadPhaseRotationCleared.setDescription("INFORMATIONAL: The device's source 1 phase rotation is back to normal.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
xATSS1BadPhaseBalance = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 726)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: xATSS1BadPhaseBalance.setDescription("SEVERE: The device's source 1 phase balance is out of bounds.\nThe first argument is the host device serial number.\nThe second argument is the host device name.\nThe third argument is the minimum phase balance as a percentage.")
xATSS1BadPhaseBalanceCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 727)).setObjects(*(("PowerNet-MIB", "xATSIdentProductName"), ("PowerNet-MIB", "xATSIdentSerialNumber"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: xATSS1BadPhaseBalanceCleared.setDescription("INFORMATIONAL: The device's source 1 phase balance is back to normal.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
isxModularTransformerOverheating = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 728)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularTransformerOverheating.setDescription("SEVERE: The distribution transformer temperature is too hot.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
isxModularTransformerOverheatingCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 729)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularTransformerOverheatingCleared.setDescription("INFORMATIONAL: The distribution transformer temperature has returned to normal.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
apcInternalCommunicationFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 730)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcInternalCommunicationFault.setDescription("SEVERE: An internal UPS communication fault exists.")
apcInternalCommunicationFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 731)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: apcInternalCommunicationFaultCleared.setDescription("INFORMATIONAL: An internal UPS communication fault no longer exists.")
upsOutletGroupCommand = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 732)).setObjects(*(("PowerNet-MIB", "upsOutletGroupControlIndex"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOutletGroupCommand.setDescription("WARNING: The specified Outlet Group command has been issued.")
onbatterycommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 733)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: onbatterycommunicationLost.setDescription("SEVERE: Communication to the UPS when the UPS is on Battery. Steps\nto reestablish communication are in progress.")
upsCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 734)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsCriticalCondition.setDescription("SEVERE: A UPS critical condition was detected.\nThe first variable is the error condition text message.\nThe second variable is the error number.")
upsCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 735)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsCriticalConditionCleared.setDescription("INFORMATIONAL: A UPS critical condition has been cleared.\nThe first variable is the fault condition.")
upsWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 736)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsWarningCondition.setDescription("WARNING: A UPS warning condition has been detected.\nThe first variable is the fault condition.")
upsWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 737)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsWarningConditionCleared.setDescription("WARNING: A UPS warning condition has been cleared.\nThe first variable is the fault condition.")
upsInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 738)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsInformationalCondition.setDescription("INFORMATIONAL: A UPS informational condition has been detected.\nThe first variable is the fault condition.")
upsInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 739)).setObjects(*(("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ("PowerNet-MIB", "mtrapargsInteger"), ) )
if mibBuilder.loadTexts: upsInformationalConditionCleared.setDescription("INFORMATIONAL: A UPS informational condition has been cleared.\nThe first variable is the fault condition.")
isxcInformationalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 740)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcInformationalAlarm.setDescription("INFORMATIONAL: An ISXC Alarm exists.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcInformationalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 741)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcInformationalAlarmCleared.setDescription("INFORMATIONAL: An ISXC Alarm has been cleared.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 742)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcWarningAlarm.setDescription("WARNING: An ISXC Alarm exists.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcWarningAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 743)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcWarningAlarmCleared.setDescription("WARNING: An ISXC Alarm has been cleared.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 744)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcErrorAlarm.setDescription("ERROR: An ISXC Alarm exists.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcErrorAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 745)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcErrorAlarmCleared.setDescription("ERROR: An ISXC Alarm has been cleared.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 746)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcCriticalAlarm.setDescription("CRITICAL: An ISXC Alarm exists.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcCriticalAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 747)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcCriticalAlarmCleared.setDescription("CRITICAL: An ISXC Alarm has been cleared.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcFailureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 748)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcFailureAlarm.setDescription("FAILURE: An ISXC Alarm exists.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
isxcFailureAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 749)).setObjects(*(("PowerNet-MIB", "mtrapargsOctetString05"), ("PowerNet-MIB", "mtrapargsOctetString04"), ("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString05"), ("PowerNet-MIB", "mtrapargsString04"), ("PowerNet-MIB", "mtrapargsOctetString03"), ("PowerNet-MIB", "mtrapargsOctetString02"), ("PowerNet-MIB", "mtrapargsString08"), ("PowerNet-MIB", "mtrapargsString06"), ("PowerNet-MIB", "mtrapargsOctetString07"), ("PowerNet-MIB", "mtrapargsString07"), ("PowerNet-MIB", "mtrapargsOctetString"), ("PowerNet-MIB", "mtrapargsOctetString06"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsOctetString08"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxcFailureAlarmCleared.setDescription("FAILURE: An ISXC Alarm has been cleared.\nThe first argument is the unique ISXC alarm ID.\nThe second argument is the ISXC alarm label as a UTF8 string.\nThe third argument is the ISXC alarm code.\nThe fourth argument is the unique ISXC device ID.\nThe fifth argument is the ISXC device label as a UTF8 string.\nThe sixth argument is the ISXC parent host.\nThe seventh argument is the ISXC device type as a UTF8 string.\nThe eighth argument is the device serial number.\nThe ninth argument is the device model number.\nThe tenth argument is the device host.\nThe eleventh argument is the device location as a UTF8 string.\nThe twelfth argument is the device contact as a UTF8 string.\nThe thirteenth argument is the unique ISXC sensor ID.\nThe fourteenth argument is the ISXC sensor label as a UTF8 string.\nThe fifteenth argument is the sensor value as a UTF8 string.\nThe sixteenth argument is the ISXC alarm start time.\nThe seventeenth argument is the ISXC alarm resolution time.\nThe eighteenth argument is the description as a UTF8 string.")
rpduCriticalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 750)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduCriticalCondition.setDescription("SEVERE: A RPDU critical condition has been detected.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
rpduCriticalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 751)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduCriticalConditionCleared.setDescription("INFORMATIONAL: A RPDU critical condition has been cleared.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
rpduWarningCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 752)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduWarningCondition.setDescription("WARNING: A RPDU warning condition has been detected.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
rpduWarningConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 753)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduWarningConditionCleared.setDescription("WARNING: A RPDU warning condition has been cleared.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
rpduInformationalCondition = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 754)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduInformationalCondition.setDescription("INFORMATIONAL: A RPDU informational condition has been detected.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
rpduInformationalConditionCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 755)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsInteger03"), ("PowerNet-MIB", "mtrapargsInteger02"), ("PowerNet-MIB", "mtrapargsInteger"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: rpduInformationalConditionCleared.setDescription("INFORMATIONAL: A RPDU informational condition has been cleared.\nThe first variable is the serial number.\nThe second variable is the device name.\nThe third variable is the error number.\nThe fourth variable is the device number.\nThe fifth variable is the instance number.\nThe sixth variable is the trap text message.")
isxModularCoolingFanAlarm = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 756)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularCoolingFanAlarm.setDescription("SEVERE: The device's internal cooling fans have failed.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
isxModularCoolingFanAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 757)).setObjects(*(("PowerNet-MIB", "mtrapargsString03"), ("PowerNet-MIB", "mtrapargsString02"), ("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: isxModularCoolingFanAlarmCleared.setDescription("INFORMATIONAL: The device's internal cooling fans are now functioning properly.\nThe first argument is the host device serial number.\nThe second argument is the host device name.")
upsFirmwareUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 758)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareUpdateStarted.setDescription("WARNING: Updating UPS firmware.")
upsFirmwareUpdateFinished = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 759)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareUpdateFinished.setDescription("INFORMATIONAL: Finished updating UPS firmware.")
upsFirmwareUpdateSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 760)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareUpdateSucceeded.setDescription("INFORMATIONAL: UPS firmware update succeeded.")
upsFirmwareUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 761)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareUpdateFailed.setDescription("WARNING: UPS firmware update failed.")
upsHasNoValidFirmware = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 762)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsHasNoValidFirmware.setDescription("SEVERE: UPS has no valid firmware.")
upsHasNoValidFirmwareCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 763)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsHasNoValidFirmwareCleared.setDescription("INFORMATIONAL: UPS now has a valid firmware.")
upsLocalDisplayButtonFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 767)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsLocalDisplayButtonFault.setDescription("WARNING: A local display button fault exists.")
upsLocalDisplayButtonFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 768)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsLocalDisplayButtonFaultCleared.setDescription("INFORMATIONAL: A local display button fault no longer exists.")
upsNeedsFactorySetupFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 769)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsNeedsFactorySetupFault.setDescription("SEVERE: UPS needs factory setup.")
upsNeedsFactorySetupFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 770)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsNeedsFactorySetupFaultCleared.setDescription("INFORMATIONAL: UPS no longer needs factory setup.")
upsEPOActive = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 771)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsEPOActive.setDescription("SEVERE: Emergency Power Off (EPO) active.")
upsEPOActiveCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 772)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsEPOActiveCleared.setDescription("INFORMATIONAL: Emergency Power Off (EPO) now inactive.")
upsFirmwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 773)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareMismatch.setDescription("SEVERE: A firmware mismatch error exists.")
upsFirmwareMismatchCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 774)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsFirmwareMismatchCleared.setDescription("INFORMATIONAL: A firmware mismatch error no longer exists.")
upsOscillatorFailed = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 775)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOscillatorFailed.setDescription("SEVERE: An oscillator error exists.")
upsOscillatorFailedCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 776)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOscillatorFailedCleared.setDescription("INFORMATIONAL: An oscillator error no longer exists.")
upsOnBatteryDueToFault = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 777)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOnBatteryDueToFault.setDescription("SEVERE: The UPS is on battery due to an error.\n\nSymmetra UPSes: Intelligence module has reported being in self-test for \ntoo long. When this happens, the UPS is not usually in self-test, but the \nbatteries are draining slowly. If left uncorrected, the batteries will \nbecome depleted and the UPS will not be able to turn on. If UPS has at \nleast N+1 redundancy, check power modules one by one to determine which \nkeeps the UPS in self-test. Once identified, replace the module.")
upsOnBatteryDueToFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 318, 0, 778)).setObjects(*(("PowerNet-MIB", "mtrapargsString"), ) )
if mibBuilder.loadTexts: upsOnBatteryDueToFaultCleared.setDescription("INFORMATIONAL: The UPS is no longer on battery due to an error.")

# Exports

# Types
mibBuilder.exportSymbols("PowerNet-MIB", AirIRG2RDType2IOState=AirIRG2RDType2IOState, AirIRSCCapacityControlType=AirIRSCCapacityControlType, AirIRSCConfigType=AirIRSCConfigType, AirIRSCFanSpeedControl=AirIRSCFanSpeedControl, AirIRSCFanSpeedPreference=AirIRSCFanSpeedPreference, AirIRmActivityState=AirIRmActivityState, AirIRmAlarmState=AirIRmAlarmState, AirIRmControlState=AirIRmControlState, AirIRmStopState=AirIRmStopState, Rpdu2OutletPhaseLayoutType=Rpdu2OutletPhaseLayoutType)

# Objects
mibBuilder.exportSymbols("PowerNet-MIB", apc=apc, products=products, hardware=hardware, ups=ups, upsIdent=upsIdent, upsBasicIdent=upsBasicIdent, upsBasicIdentModel=upsBasicIdentModel, upsBasicIdentName=upsBasicIdentName, upsAdvIdent=upsAdvIdent, upsAdvIdentFirmwareRevision=upsAdvIdentFirmwareRevision, upsAdvIdentDateOfManufacture=upsAdvIdentDateOfManufacture, upsAdvIdentSerialNumber=upsAdvIdentSerialNumber, upsAdvIdentFirmwareRevision2=upsAdvIdentFirmwareRevision2, upsAdvIdentSkuNumber=upsAdvIdentSkuNumber, upsBattery=upsBattery, upsBasicBattery=upsBasicBattery, upsBasicBatteryStatus=upsBasicBatteryStatus, upsBasicBatteryTimeOnBattery=upsBasicBatteryTimeOnBattery, upsBasicBatteryLastReplaceDate=upsBasicBatteryLastReplaceDate, upsAdvBattery=upsAdvBattery, upsAdvBatteryCapacity=upsAdvBatteryCapacity, upsAdvBatteryTemperature=upsAdvBatteryTemperature, upsAdvBatteryRunTimeRemaining=upsAdvBatteryRunTimeRemaining, upsAdvBatteryReplaceIndicator=upsAdvBatteryReplaceIndicator, upsAdvBatteryNumOfBattPacks=upsAdvBatteryNumOfBattPacks, upsAdvBatteryNumOfBadBattPacks=upsAdvBatteryNumOfBadBattPacks, upsAdvBatteryNominalVoltage=upsAdvBatteryNominalVoltage, upsAdvBatteryActualVoltage=upsAdvBatteryActualVoltage, upsAdvBatteryCurrent=upsAdvBatteryCurrent, upsAdvTotalDCCurrent=upsAdvTotalDCCurrent, upsAdvBatteryFullCapacity=upsAdvBatteryFullCapacity, upsAdvBatteryActualVoltageTable=upsAdvBatteryActualVoltageTable, upsAdvBatteryActualVoltageEntry=upsAdvBatteryActualVoltageEntry, upsAdvBatteryActualVoltageTableIndex=upsAdvBatteryActualVoltageTableIndex, upsAdvBatteryActualVoltagePolarity=upsAdvBatteryActualVoltagePolarity, upsAdvBatteryFrameActualVoltage=upsAdvBatteryFrameActualVoltage, upsAdvTotalDCCurrentTable=upsAdvTotalDCCurrentTable, upsAdvTotalDCCurrentEntry=upsAdvTotalDCCurrentEntry, upsAdvTotalDCCurrentTableIndex=upsAdvTotalDCCurrentTableIndex, upsAdvTotalDCCurrentPolarity=upsAdvTotalDCCurrentPolarity, upsAdvTotalFrameDCCurrent=upsAdvTotalFrameDCCurrent, upsAdvBatteryCurrentTable=upsAdvBatteryCurrentTable, upsAdvBatteryCurrentEntry=upsAdvBatteryCurrentEntry, upsAdvBatteryCurrentTableIndex=upsAdvBatteryCurrentTableIndex, upsAdvBatteryCurrentIndex=upsAdvBatteryCurrentIndex, upsAdvBatteryCurrentPolarity=upsAdvBatteryCurrentPolarity, upsAdvBatteryFrameCurrent=upsAdvBatteryFrameCurrent, upsAdvBatteryEstimatedChargeTime=upsAdvBatteryEstimatedChargeTime, upsAdvBatteryPower=upsAdvBatteryPower, upsAdvBatteryChargerStatus=upsAdvBatteryChargerStatus, upsAdvBatteryInternalSKU=upsAdvBatteryInternalSKU, upsAdvBatteryExternalSKU=upsAdvBatteryExternalSKU, upsAdvBatteryRecommendedReplaceDate=upsAdvBatteryRecommendedReplaceDate, upsHighPrecBattery=upsHighPrecBattery, upsHighPrecBatteryCapacity=upsHighPrecBatteryCapacity, upsHighPrecBatteryTemperature=upsHighPrecBatteryTemperature, upsHighPrecBatteryNominalVoltage=upsHighPrecBatteryNominalVoltage, upsHighPrecBatteryActualVoltage=upsHighPrecBatteryActualVoltage, upsHighPrecBatteryCurrent=upsHighPrecBatteryCurrent, upsHighPrecTotalDCCurrent=upsHighPrecTotalDCCurrent, upsHighPrecBatteryActualVoltageTable=upsHighPrecBatteryActualVoltageTable, upsHighPrecBatteryActualVoltageEntry=upsHighPrecBatteryActualVoltageEntry, upsHighPrecBatteryActualVoltageTableIndex=upsHighPrecBatteryActualVoltageTableIndex, upsHighPrecBatteryActualVoltagePolarity=upsHighPrecBatteryActualVoltagePolarity, upsHighPrecBatteryVoltage=upsHighPrecBatteryVoltage, upsHighPrecTotalDCCurrentTable=upsHighPrecTotalDCCurrentTable, upsHighPrecTotalDCCurrentEntry=upsHighPrecTotalDCCurrentEntry, upsHighPrecTotalDCCurrentTableIndex=upsHighPrecTotalDCCurrentTableIndex, upsHighPrecTotalDCCurrentPolarity=upsHighPrecTotalDCCurrentPolarity, upsHighPrecTotalDCFrameCurrent=upsHighPrecTotalDCFrameCurrent, upsHighPrecBatteryCurrentTable=upsHighPrecBatteryCurrentTable, upsHighPrecBatteryCurrentEntry=upsHighPrecBatteryCurrentEntry, upsHighPrecBatteryCurrentTableIndex=upsHighPrecBatteryCurrentTableIndex, upsHighPrecBatteryCurrentIndex=upsHighPrecBatteryCurrentIndex, upsHighPrecBatteryCurrentPolarity=upsHighPrecBatteryCurrentPolarity, upsHighPrecBatteryFrameCurrent=upsHighPrecBatteryFrameCurrent, upsHighPrecBatteryPacks=upsHighPrecBatteryPacks, upsHighPrecBatteryPackTableSize=upsHighPrecBatteryPackTableSize, upsHighPrecBatteryPackTable=upsHighPrecBatteryPackTable, upsHighPrecBatteryPackEntry=upsHighPrecBatteryPackEntry, upsHighPrecBatteryPackIndex=upsHighPrecBatteryPackIndex, upsHighPrecBatteryCartridgeIndex=upsHighPrecBatteryCartridgeIndex, upsHighPrecBatteryPackFirmwareRevision=upsHighPrecBatteryPackFirmwareRevision, upsHighPrecBatteryPackSerialNumber=upsHighPrecBatteryPackSerialNumber, upsHighPrecBatteryPackTemperature=upsHighPrecBatteryPackTemperature, upsHighPrecBatteryPackStatus=upsHighPrecBatteryPackStatus, upsHighPrecBatteryPackCartridgeHealth=upsHighPrecBatteryPackCartridgeHealth, upsHighPrecBatteryPackCartridgeReplaceDate=upsHighPrecBatteryPackCartridgeReplaceDate, upsHighPrecBatteryPackCartridgeInstallDate=upsHighPrecBatteryPackCartridgeInstallDate, upsHighPrecBatteryPackCartridgeStatus=upsHighPrecBatteryPackCartridgeStatus, upsInput=upsInput, upsBasicInput=upsBasicInput, upsBasicInputPhase=upsBasicInputPhase, upsAdvInput=upsAdvInput, upsAdvInputLineVoltage=upsAdvInputLineVoltage, upsAdvInputMaxLineVoltage=upsAdvInputMaxLineVoltage, upsAdvInputMinLineVoltage=upsAdvInputMinLineVoltage, upsAdvInputFrequency=upsAdvInputFrequency, upsAdvInputLineFailCause=upsAdvInputLineFailCause, upsAdvInputNominalFrequency=upsAdvInputNominalFrequency, upsAdvInputNominalVoltage=upsAdvInputNominalVoltage, upsAdvInputBypassNominalFrequency=upsAdvInputBypassNominalFrequency, upsAdvInputBypassNominalVoltage=upsAdvInputBypassNominalVoltage, upsAdvInputStatisticsTable=upsAdvInputStatisticsTable, upsAdvInputStatisticsEntry=upsAdvInputStatisticsEntry, upsAdvInputStatisticsIndex=upsAdvInputStatisticsIndex, upsAdvInputApparentPower=upsAdvInputApparentPower, upsAdvInputVoltageTHD=upsAdvInputVoltageTHD, upsAdvInputBypassVoltageTHD=upsAdvInputBypassVoltageTHD, upsAdvInputPeakCurrent=upsAdvInputPeakCurrent, upsAdvInputBypassPeakCurrent=upsAdvInputBypassPeakCurrent, upsAdvInputActivePower=upsAdvInputActivePower, upsAdvInputTotalApparentPower=upsAdvInputTotalApparentPower, upsAdvInputTotalActivePower=upsAdvInputTotalActivePower, upsAdvInputBypassTotalApparentPower=upsAdvInputBypassTotalApparentPower, upsAdvInputBypassTotalActivePower=upsAdvInputBypassTotalActivePower, upsHighPrecInput=upsHighPrecInput, upsHighPrecInputLineVoltage=upsHighPrecInputLineVoltage, upsHighPrecInputMaxLineVoltage=upsHighPrecInputMaxLineVoltage, upsHighPrecInputMinLineVoltage=upsHighPrecInputMinLineVoltage, upsHighPrecInputFrequency=upsHighPrecInputFrequency, upsHighPrecInputEnergyUsage=upsHighPrecInputEnergyUsage, upsHighPrecInputBypassVoltage=upsHighPrecInputBypassVoltage, upsHighPrecInputBypassFrequency=upsHighPrecInputBypassFrequency, upsOutput=upsOutput, upsBasicOutput=upsBasicOutput)
mibBuilder.exportSymbols("PowerNet-MIB", upsBasicOutputStatus=upsBasicOutputStatus, upsBasicOutputPhase=upsBasicOutputPhase, upsBasicSystemStatus=upsBasicSystemStatus, upsBasicSystemInternalTemperature=upsBasicSystemInternalTemperature, upsBasicSystemInverterStatus=upsBasicSystemInverterStatus, upsBasicSystemPFCStatus=upsBasicSystemPFCStatus, upsBasicOutputACwiringConfiguration=upsBasicOutputACwiringConfiguration, upsAdvOutput=upsAdvOutput, upsAdvOutputVoltage=upsAdvOutputVoltage, upsAdvOutputFrequency=upsAdvOutputFrequency, upsAdvOutputLoad=upsAdvOutputLoad, upsAdvOutputCurrent=upsAdvOutputCurrent, upsAdvOutputRedundancy=upsAdvOutputRedundancy, upsAdvOutputKVACapacity=upsAdvOutputKVACapacity, upsAdvOutputNominalFrequency=upsAdvOutputNominalFrequency, upsAdvOutputActivePower=upsAdvOutputActivePower, upsAdvOutputApparentPower=upsAdvOutputApparentPower, upsAdvOutputStatisticsTable=upsAdvOutputStatisticsTable, upsAdvOutputStatisticsEntry=upsAdvOutputStatisticsEntry, upsAdvOutputStatisticsIndex=upsAdvOutputStatisticsIndex, upsAdvOutputPeakCurrent=upsAdvOutputPeakCurrent, upsAdvOutputCurrentTHD=upsAdvOutputCurrentTHD, upsAdvOutputCrestFactor=upsAdvOutputCrestFactor, upsAdvOutputNeutralCurrent=upsAdvOutputNeutralCurrent, upsHighPrecOutput=upsHighPrecOutput, upsHighPrecOutputVoltage=upsHighPrecOutputVoltage, upsHighPrecOutputFrequency=upsHighPrecOutputFrequency, upsHighPrecOutputLoad=upsHighPrecOutputLoad, upsHighPrecOutputCurrent=upsHighPrecOutputCurrent, upsHighPrecOutputEfficiency=upsHighPrecOutputEfficiency, upsHighPrecOutputEnergyUsage=upsHighPrecOutputEnergyUsage, upsConfig=upsConfig, upsBasicConfig=upsBasicConfig, upsBasicConfigNumDevices=upsBasicConfigNumDevices, upsBasicConfigDeviceTable=upsBasicConfigDeviceTable, upsBasicConfigDeviceEntry=upsBasicConfigDeviceEntry, deviceIndex=deviceIndex, deviceName=deviceName, vaRating=vaRating, acceptThisDevice=acceptThisDevice, upsAdvConfig=upsAdvConfig, upsAdvConfigRatedOutputVoltage=upsAdvConfigRatedOutputVoltage, upsAdvConfigHighTransferVolt=upsAdvConfigHighTransferVolt, upsAdvConfigLowTransferVolt=upsAdvConfigLowTransferVolt, upsAdvConfigAlarm=upsAdvConfigAlarm, upsAdvConfigAlarmTimer=upsAdvConfigAlarmTimer, upsAdvConfigMinReturnCapacity=upsAdvConfigMinReturnCapacity, upsAdvConfigSensitivity=upsAdvConfigSensitivity, upsAdvConfigLowBatteryRunTime=upsAdvConfigLowBatteryRunTime, upsAdvConfigReturnDelay=upsAdvConfigReturnDelay, upsAdvConfigShutoffDelay=upsAdvConfigShutoffDelay, upsAdvConfigUpsSleepTime=upsAdvConfigUpsSleepTime, upsAdvConfigSetEEPROMDefaults=upsAdvConfigSetEEPROMDefaults, upsAdvConfigDipSwitchTable=upsAdvConfigDipSwitchTable, upsAdvConfigDipSwitchEntry=upsAdvConfigDipSwitchEntry, dipSwitchIndex=dipSwitchIndex, dipSwitchStatus=dipSwitchStatus, upsAdvConfigBattExhaustThresh=upsAdvConfigBattExhaustThresh, upsAdvConfigPassword=upsAdvConfigPassword, upsAdvConfigAllowedSetTable=upsAdvConfigAllowedSetTable, upsAdvConfigAllowedSetEntry=upsAdvConfigAllowedSetEntry, apcUpsConfigFieldIndex=apcUpsConfigFieldIndex, apcUpsConfigFieldOID=apcUpsConfigFieldOID, apcUpsConfigFieldValueRange=apcUpsConfigFieldValueRange, upsAdvConfigBattCabAmpHour=upsAdvConfigBattCabAmpHour, upsAdvConfigPositionSelector=upsAdvConfigPositionSelector, upsAdvConfigOutputFreqRange=upsAdvConfigOutputFreqRange, upsAdvConfigUPSFail=upsAdvConfigUPSFail, upsAdvConfigAlarmRedundancy=upsAdvConfigAlarmRedundancy, upsAdvConfigAlarmLoadOver=upsAdvConfigAlarmLoadOver, upsAdvConfigAlarmRuntimeUnder=upsAdvConfigAlarmRuntimeUnder, upsAdvConfigVoutReporting=upsAdvConfigVoutReporting, upsAdvConfigNumExternalBatteries=upsAdvConfigNumExternalBatteries, upsAdvConfigSimpleSignalShutdowns=upsAdvConfigSimpleSignalShutdowns, upsAdvConfigMaxShutdownTime=upsAdvConfigMaxShutdownTime, upsAsiUpsControlServerRequestShutdown=upsAsiUpsControlServerRequestShutdown, upsAdvConfigMinReturnRuntime=upsAdvConfigMinReturnRuntime, upsAdvConfigBasicSignalLowBatteryDuration=upsAdvConfigBasicSignalLowBatteryDuration, upsAdvConfigBypassPhaseLockRequired=upsAdvConfigBypassPhaseLockRequired, upsAdvConfigOutputFreqSlewRate=upsAdvConfigOutputFreqSlewRate, upsAdvConfigChargerLevel=upsAdvConfigChargerLevel, upsAdvConfigBypassToleranceSetting=upsAdvConfigBypassToleranceSetting, upsAdvConfigMainsSetting=upsAdvConfigMainsSetting, upsAdvConfigACWiringSetting=upsAdvConfigACWiringSetting, upsAdvConfigUpperOutputVoltTolerance=upsAdvConfigUpperOutputVoltTolerance, upsAdvConfigLowerOutputVoltTolerance=upsAdvConfigLowerOutputVoltTolerance, upsAdvConfigUpperBypassVoltTolerance=upsAdvConfigUpperBypassVoltTolerance, upsAdvConfigLowerBypassVoltTolerance=upsAdvConfigLowerBypassVoltTolerance, upsAdvConfigOutofSyncBypassTransferDelay=upsAdvConfigOutofSyncBypassTransferDelay, upsAdvConfigWarningAlarmDelay=upsAdvConfigWarningAlarmDelay, upsAdvConfigInformationalAlarmDelay=upsAdvConfigInformationalAlarmDelay, upsAdvConfigGreenMode=upsAdvConfigGreenMode, upsAdvConfigLCDLocalLanguage=upsAdvConfigLCDLocalLanguage, upsAdvConfigLCDLockOut=upsAdvConfigLCDLockOut, upsAdvConfigChargerRate=upsAdvConfigChargerRate, upsAdvConfigBatterySelection=upsAdvConfigBatterySelection, upsAdvConfigBatteryHealthAlarmWarningTime=upsAdvConfigBatteryHealthAlarmWarningTime, upsAdvConfigBatteryHealthAlarmSleepTime=upsAdvConfigBatteryHealthAlarmSleepTime, upsControl=upsControl, upsBasicControl=upsBasicControl, upsBasicControlConserveBattery=upsBasicControlConserveBattery, upsAdvControl=upsAdvControl, upsAdvControlUpsOff=upsAdvControlUpsOff, upsAdvControlRebootShutdownUps=upsAdvControlRebootShutdownUps, upsAdvControlUpsSleep=upsAdvControlUpsSleep, upsAdvControlSimulatePowerFail=upsAdvControlSimulatePowerFail, upsAdvControlFlashAndBeep=upsAdvControlFlashAndBeep, upsAdvControlTurnOnUPS=upsAdvControlTurnOnUPS, upsAdvControlBypassSwitch=upsAdvControlBypassSwitch, upsAdvControlRebootUpsWithOrWithoutAC=upsAdvControlRebootUpsWithOrWithoutAC, upsAdvControlFirmwareUpdate=upsAdvControlFirmwareUpdate, upsTest=upsTest, upsBasicTest=upsBasicTest, upsAdvTest=upsAdvTest, upsAdvTestDiagnosticSchedule=upsAdvTestDiagnosticSchedule, upsAdvTestDiagnostics=upsAdvTestDiagnostics, upsAdvTestDiagnosticsResults=upsAdvTestDiagnosticsResults, upsAdvTestLastDiagnosticsDate=upsAdvTestLastDiagnosticsDate, upsAdvTestRuntimeCalibration=upsAdvTestRuntimeCalibration, upsAdvTestCalibrationResults=upsAdvTestCalibrationResults, upsAdvTestCalibrationDate=upsAdvTestCalibrationDate, upsAdvTestDiagnosticTime=upsAdvTestDiagnosticTime, upsAdvTestDiagnosticDay=upsAdvTestDiagnosticDay, upsComm=upsComm, upsCommStatus=upsCommStatus, upsPhase=upsPhase, upsPhaseResetValues=upsPhaseResetValues)
mibBuilder.exportSymbols("PowerNet-MIB", upsPhaseResetMaxMinValues=upsPhaseResetMaxMinValues, upsPhaseInput=upsPhaseInput, upsPhaseNumInputs=upsPhaseNumInputs, upsPhaseInputTable=upsPhaseInputTable, upsPhaseInputEntry=upsPhaseInputEntry, upsPhaseInputTableIndex=upsPhaseInputTableIndex, upsPhaseNumInputPhases=upsPhaseNumInputPhases, upsPhaseInputVoltageOrientation=upsPhaseInputVoltageOrientation, upsPhaseInputFrequency=upsPhaseInputFrequency, upsPhaseInputType=upsPhaseInputType, upsPhaseInputName=upsPhaseInputName, upsPhaseInputPhaseTable=upsPhaseInputPhaseTable, upsPhaseInputPhaseEntry=upsPhaseInputPhaseEntry, upsPhaseInputPhaseTableIndex=upsPhaseInputPhaseTableIndex, upsPhaseInputPhaseIndex=upsPhaseInputPhaseIndex, upsPhaseInputVoltage=upsPhaseInputVoltage, upsPhaseInputMaxVoltage=upsPhaseInputMaxVoltage, upsPhaseInputMinVoltage=upsPhaseInputMinVoltage, upsPhaseInputCurrent=upsPhaseInputCurrent, upsPhaseInputMaxCurrent=upsPhaseInputMaxCurrent, upsPhaseInputMinCurrent=upsPhaseInputMinCurrent, upsPhaseInputPower=upsPhaseInputPower, upsPhaseInputMaxPower=upsPhaseInputMaxPower, upsPhaseInputMinPower=upsPhaseInputMinPower, upsPhaseInputApparentPower=upsPhaseInputApparentPower, upsPhaseInputPowerFactor=upsPhaseInputPowerFactor, upsPhaseOutput=upsPhaseOutput, upsPhaseNumOutputs=upsPhaseNumOutputs, upsPhaseOutputTable=upsPhaseOutputTable, upsPhaseOutputEntry=upsPhaseOutputEntry, upsPhaseOutputTableIndex=upsPhaseOutputTableIndex, upsPhaseNumOutputPhases=upsPhaseNumOutputPhases, upsPhaseOutputVoltageOrientation=upsPhaseOutputVoltageOrientation, upsPhaseOutputFrequency=upsPhaseOutputFrequency, upsPhaseOutputPhaseTable=upsPhaseOutputPhaseTable, upsPhaseOutputPhaseEntry=upsPhaseOutputPhaseEntry, upsPhaseOutputPhaseTableIndex=upsPhaseOutputPhaseTableIndex, upsPhaseOutputPhaseIndex=upsPhaseOutputPhaseIndex, upsPhaseOutputVoltage=upsPhaseOutputVoltage, upsPhaseOutputCurrent=upsPhaseOutputCurrent, upsPhaseOutputMaxCurrent=upsPhaseOutputMaxCurrent, upsPhaseOutputMinCurrent=upsPhaseOutputMinCurrent, upsPhaseOutputLoad=upsPhaseOutputLoad, upsPhaseOutputMaxLoad=upsPhaseOutputMaxLoad, upsPhaseOutputMinLoad=upsPhaseOutputMinLoad, upsPhaseOutputPercentLoad=upsPhaseOutputPercentLoad, upsPhaseOutputMaxPercentLoad=upsPhaseOutputMaxPercentLoad, upsPhaseOutputMinPercentLoad=upsPhaseOutputMinPercentLoad, upsPhaseOutputPower=upsPhaseOutputPower, upsPhaseOutputMaxPower=upsPhaseOutputMaxPower, upsPhaseOutputMinPower=upsPhaseOutputMinPower, upsPhaseOutputPercentPower=upsPhaseOutputPercentPower, upsPhaseOutputMaxPercentPower=upsPhaseOutputMaxPercentPower, upsPhaseOutputMinPercentPower=upsPhaseOutputMinPercentPower, upsPhaseOutputPowerFactor=upsPhaseOutputPowerFactor, upsSyncCtrlGroup=upsSyncCtrlGroup, upsSyncCtrlGroupConfig=upsSyncCtrlGroupConfig, upsSCGMembershipGroupNumber=upsSCGMembershipGroupNumber, upsSCGActiveMembershipStatus=upsSCGActiveMembershipStatus, upsSCGPowerSynchronizationDelayTime=upsSCGPowerSynchronizationDelayTime, upsSCGReturnBatteryCapacityOffset=upsSCGReturnBatteryCapacityOffset, upsSCGMultiCastIP=upsSCGMultiCastIP, upsSyncCtrlGroupStatus=upsSyncCtrlGroupStatus, upsSCGNumOfGroupMembers=upsSCGNumOfGroupMembers, upsSCGStatusTable=upsSCGStatusTable, upsSCGStatusEntry=upsSCGStatusEntry, upsSCGStatusTableIndex=upsSCGStatusTableIndex, upsSCGMemberIP=upsSCGMemberIP, upsSCGACInputStatus=upsSCGACInputStatus, upsSCGACOutputStatus=upsSCGACOutputStatus, upsState=upsState, upsBasicState=upsBasicState, upsBasicStateOutputState=upsBasicStateOutputState, upsAdvState=upsAdvState, upsAdvStateAbnormalConditions=upsAdvStateAbnormalConditions, upsAdvStateSymmetra3PhaseSpecificFaults=upsAdvStateSymmetra3PhaseSpecificFaults, upsAdvStateDP300ESpecificFaults=upsAdvStateDP300ESpecificFaults, upsAdvStateSymmetraSpecificFaults=upsAdvStateSymmetraSpecificFaults, upsAdvStateSmartUPSSpecificFaults=upsAdvStateSmartUPSSpecificFaults, upsAdvStateSystemMessages=upsAdvStateSystemMessages, upsAdvStateTotaltimeonbattery=upsAdvStateTotaltimeonbattery, upsAdvStateTotaltimeonbypass=upsAdvStateTotaltimeonbypass, upsAdvStateTotaltimeonNormal=upsAdvStateTotaltimeonNormal, upsAdvStateNumberoftimesonbattery=upsAdvStateNumberoftimesonbattery, upsAdvStateNumberoftimesbypass=upsAdvStateNumberoftimesbypass, upsAdvStateNumberoftimesNormal=upsAdvStateNumberoftimesNormal, upsAdvStateEcomode=upsAdvStateEcomode, upsOutletGroups=upsOutletGroups, upsOutletGroupStatus=upsOutletGroupStatus, upsOutletGroupStatusTableSize=upsOutletGroupStatusTableSize, upsOutletGroupStatusTable=upsOutletGroupStatusTable, upsOutletGroupStatusEntry=upsOutletGroupStatusEntry, upsOutletGroupStatusIndex=upsOutletGroupStatusIndex, upsOutletGroupStatusName=upsOutletGroupStatusName, upsOutletGroupStatusGroupState=upsOutletGroupStatusGroupState, upsOutletGroupStatusCommandPending=upsOutletGroupStatusCommandPending, upsOutletGroupStatusOutletType=upsOutletGroupStatusOutletType, upsOutletGroupConfig=upsOutletGroupConfig, upsOutletGroupConfigTableSize=upsOutletGroupConfigTableSize, upsOutletGroupConfigTable=upsOutletGroupConfigTable, upsOutletGroupConfigEntry=upsOutletGroupConfigEntry, upsOutletGroupConfigIndex=upsOutletGroupConfigIndex, upsOutletGroupConfigName=upsOutletGroupConfigName, upsOutletGroupConfigPowerOnDelay=upsOutletGroupConfigPowerOnDelay, upsOutletGroupConfigPowerOffDelay=upsOutletGroupConfigPowerOffDelay, upsOutletGroupConfigRebootDuration=upsOutletGroupConfigRebootDuration, upsOutletGroupConfigMinReturnRuntime=upsOutletGroupConfigMinReturnRuntime, upsOutletGroupConfigOutletType=upsOutletGroupConfigOutletType, upsOutletGroupConfigLoadShedControlSkipOffDelay=upsOutletGroupConfigLoadShedControlSkipOffDelay, upsOutletGroupConfigLoadShedControlAutoRestart=upsOutletGroupConfigLoadShedControlAutoRestart, upsOutletGroupConfigLoadShedControlTimeOnBattery=upsOutletGroupConfigLoadShedControlTimeOnBattery, upsOutletGroupConfigLoadShedControlRuntimeRemaining=upsOutletGroupConfigLoadShedControlRuntimeRemaining, upsOutletGroupConfigLoadShedControlInOverload=upsOutletGroupConfigLoadShedControlInOverload, upsOutletGroupConfigLoadShedTimeOnBattery=upsOutletGroupConfigLoadShedTimeOnBattery, upsOutletGroupConfigLoadShedRuntimeRemaining=upsOutletGroupConfigLoadShedRuntimeRemaining, upsOutletGroupControl=upsOutletGroupControl, upsOutletGroupControlTableSize=upsOutletGroupControlTableSize, upsOutletGroupControlTable=upsOutletGroupControlTable, upsOutletGroupControlEntry=upsOutletGroupControlEntry, upsOutletGroupControlIndex=upsOutletGroupControlIndex, upsOutletGroupControlName=upsOutletGroupControlName, upsOutletGroupControlCommand=upsOutletGroupControlCommand, upsOutletGroupControlOutletType=upsOutletGroupControlOutletType, upsDiagnostics=upsDiagnostics, upsDiagnosticIM=upsDiagnosticIM, upsDiagIMTableSize=upsDiagIMTableSize, upsDiagIMTable=upsDiagIMTable)
mibBuilder.exportSymbols("PowerNet-MIB", upsDiagIMEntry=upsDiagIMEntry, upsDiagIMIndex=upsDiagIMIndex, upsDiagIMType=upsDiagIMType, upsDiagIMStatus=upsDiagIMStatus, upsDiagIMFirmwareRev=upsDiagIMFirmwareRev, upsDiagIMSlaveFirmwareRev=upsDiagIMSlaveFirmwareRev, upsDiagIMHardwareRev=upsDiagIMHardwareRev, upsDiagIMSerialNum=upsDiagIMSerialNum, upsDiagIMManufactureDate=upsDiagIMManufactureDate, upsDiagnosticPowerModules=upsDiagnosticPowerModules, upsDiagPMTableSize=upsDiagPMTableSize, upsDiagPMTable=upsDiagPMTable, upsDiagPMEntry=upsDiagPMEntry, upsDiagPMIndex=upsDiagPMIndex, upsDiagPMStatus=upsDiagPMStatus, upsDiagPMFirmwareRev=upsDiagPMFirmwareRev, upsDiagPMHardwareRev=upsDiagPMHardwareRev, upsDiagPMSerialNum=upsDiagPMSerialNum, upsDiagPMManufactureDate=upsDiagPMManufactureDate, upsDiagPMLifetimeInfoTable=upsDiagPMLifetimeInfoTable, upsDiagPMLifetimeInfoEntry=upsDiagPMLifetimeInfoEntry, upsDiagPMLifetimeInfoIndex=upsDiagPMLifetimeInfoIndex, upsDiagPMLifetimeStatus=upsDiagPMLifetimeStatus, upsDiagPMEstmtdLifetimeRmng=upsDiagPMEstmtdLifetimeRmng, upsDiagPMEstmtdLifetimeRmngPct=upsDiagPMEstmtdLifetimeRmngPct, upsDiagPMFanLifetimeStatus=upsDiagPMFanLifetimeStatus, upsDiagPMFanEstmtdLifetimeRmng=upsDiagPMFanEstmtdLifetimeRmng, upsDiagPMFanEstmtdLifetimeRmngPct=upsDiagPMFanEstmtdLifetimeRmngPct, upsDiagPMEnclDoorFltrTableSize=upsDiagPMEnclDoorFltrTableSize, upsDiagPMEnclDoorFltrTable=upsDiagPMEnclDoorFltrTable, upsDiagPMEnclDoorFltrEntry=upsDiagPMEnclDoorFltrEntry, upsDiagPMEnclIndex=upsDiagPMEnclIndex, upsDiagPMEnclDoorFltrLifetime=upsDiagPMEnclDoorFltrLifetime, upsDiagPMEnclDoorFltrStatus=upsDiagPMEnclDoorFltrStatus, upsDiagPMEnclDoorFltrEstmtdLifetimeRmng=upsDiagPMEnclDoorFltrEstmtdLifetimeRmng, upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct=upsDiagPMEnclDoorFltrEstmtdLifetimeRmngPct, upsDiagnosticBatteries=upsDiagnosticBatteries, upsDiagBatteryTableSize=upsDiagBatteryTableSize, upsDiagBatteryTable=upsDiagBatteryTable, upsDiagBatteryEntry=upsDiagBatteryEntry, upsDiagBatteryFrameIndex=upsDiagBatteryFrameIndex, upsDiagBatteryIndex=upsDiagBatteryIndex, upsDiagBatteryStatus=upsDiagBatteryStatus, upsDiagBatterySerialNumber=upsDiagBatterySerialNumber, upsDiagBatteryFirmwareRev=upsDiagBatteryFirmwareRev, upsDiagBatteryManufactureDate=upsDiagBatteryManufactureDate, upsDiagBatteryType=upsDiagBatteryType, upsDiagBatteryFramePresent=upsDiagBatteryFramePresent, upsDiagBatteryFrameTemperature=upsDiagBatteryFrameTemperature, upsDiagnosticSubsystem=upsDiagnosticSubsystem, upsDiagSubSysFrameTableSize=upsDiagSubSysFrameTableSize, upsDiagSubSysFrameTable=upsDiagSubSysFrameTable, upsDiagSubSysFrameEntry=upsDiagSubSysFrameEntry, upsDiagSubSysFrameIndex=upsDiagSubSysFrameIndex, upsDiagSubSysFrameType=upsDiagSubSysFrameType, upsDiagSubSysFrameFirmwareRev=upsDiagSubSysFrameFirmwareRev, upsDiagSubSysFrameHardwareRev=upsDiagSubSysFrameHardwareRev, upsDiagSubSysFrameSerialNum=upsDiagSubSysFrameSerialNum, upsDiagSubSysFrameManufactureDate=upsDiagSubSysFrameManufactureDate, upsDiagSubSysIntBypSwitchTableSize=upsDiagSubSysIntBypSwitchTableSize, upsDiagSubSysIntBypSwitchTable=upsDiagSubSysIntBypSwitchTable, upsDiagSubSysIntBypSwitchEntry=upsDiagSubSysIntBypSwitchEntry, upsDiagSubSysIntBypSwitchFrameIndex=upsDiagSubSysIntBypSwitchFrameIndex, upsDiagSubSysIntBypSwitchIndex=upsDiagSubSysIntBypSwitchIndex, upsDiagSubSysIntBypSwitchStatus=upsDiagSubSysIntBypSwitchStatus, upsDiagSubSysIntBypSwitchFirmwareRev=upsDiagSubSysIntBypSwitchFirmwareRev, upsDiagSubSysIntBypSwitchHardwareRev=upsDiagSubSysIntBypSwitchHardwareRev, upsDiagSubSysIntBypSwitchSerialNum=upsDiagSubSysIntBypSwitchSerialNum, upsDiagSubSysIntBypSwitchManufactureDate=upsDiagSubSysIntBypSwitchManufactureDate, upsDiagSubSysBattMonitorTableSize=upsDiagSubSysBattMonitorTableSize, upsDiagSubSysBattMonitorTable=upsDiagSubSysBattMonitorTable, upsDiagSubSysBattMonitorEntry=upsDiagSubSysBattMonitorEntry, upsDiagSubSysBattMonitorFrameIndex=upsDiagSubSysBattMonitorFrameIndex, upsDiagSubSysBattMonitorIndex=upsDiagSubSysBattMonitorIndex, upsDiagSubSysBattMonitorStatus=upsDiagSubSysBattMonitorStatus, upsDiagSubSysBattMonitorFirmwareRev=upsDiagSubSysBattMonitorFirmwareRev, upsDiagSubSysBattMonitorHardwareRev=upsDiagSubSysBattMonitorHardwareRev, upsDiagSubSysBattMonitorSerialNum=upsDiagSubSysBattMonitorSerialNum, upsDiagSubSysBattMonitorManufactureDate=upsDiagSubSysBattMonitorManufactureDate, upsDiagSubSysExternalSwitchGearTableSize=upsDiagSubSysExternalSwitchGearTableSize, upsDiagSubSysExternalSwitchGearTable=upsDiagSubSysExternalSwitchGearTable, upsDiagSubSysExternalSwitchGearEntry=upsDiagSubSysExternalSwitchGearEntry, upsDiagSubSysExternalSwitchGearFrameIndex=upsDiagSubSysExternalSwitchGearFrameIndex, upsDiagSubSysExternalSwitchGearIndex=upsDiagSubSysExternalSwitchGearIndex, upsDiagSubSysExternalSwitchGearStatus=upsDiagSubSysExternalSwitchGearStatus, upsDiagSubSysExternalSwitchGearFirmwareRev=upsDiagSubSysExternalSwitchGearFirmwareRev, upsDiagSubSysExternalSwitchGearHardwareRev=upsDiagSubSysExternalSwitchGearHardwareRev, upsDiagSubSysExternalSwitchGearSerialNum=upsDiagSubSysExternalSwitchGearSerialNum, upsDiagSubSysExternalSwitchGearManufactureDate=upsDiagSubSysExternalSwitchGearManufactureDate, upsDiagSubSysDisplayInterfaceCardTableSize=upsDiagSubSysDisplayInterfaceCardTableSize, upsDiagSubSysDisplayInterfaceCardTable=upsDiagSubSysDisplayInterfaceCardTable, upsDiagSubSysDisplayInterfaceCardEntry=upsDiagSubSysDisplayInterfaceCardEntry, upsDiagSubSysDisplayInterfaceCardFrameIndex=upsDiagSubSysDisplayInterfaceCardFrameIndex, upsDiagSubSysDisplayInterfaceCardIndex=upsDiagSubSysDisplayInterfaceCardIndex, upsDiagSubSysDisplayInterfaceCardStatus=upsDiagSubSysDisplayInterfaceCardStatus, upsDiagSubSysDCCircuitBreakerTableSize=upsDiagSubSysDCCircuitBreakerTableSize, upsDiagSubSysDCCircuitBreakerTable=upsDiagSubSysDCCircuitBreakerTable, upsDiagSubSysDCCircuitBreakerEntry=upsDiagSubSysDCCircuitBreakerEntry, upsDiagSubSysDCCircuitBreakerFrameIndex=upsDiagSubSysDCCircuitBreakerFrameIndex, upsDiagSubSysDCCircuitBreakerIndex=upsDiagSubSysDCCircuitBreakerIndex, upsDiagSubSysDCCircuitBreakerStatus=upsDiagSubSysDCCircuitBreakerStatus, upsDiagSubSysSystemPowerSupplyTableSize=upsDiagSubSysSystemPowerSupplyTableSize, upsDiagSubSysSystemPowerSupplyTable=upsDiagSubSysSystemPowerSupplyTable, upsDiagSubSysSystemPowerSupplyEntry=upsDiagSubSysSystemPowerSupplyEntry, upsDiagSubSysSystemPowerSupplyFrameIndex=upsDiagSubSysSystemPowerSupplyFrameIndex, upsDiagSubSysSystemPowerSupplyIndex=upsDiagSubSysSystemPowerSupplyIndex, upsDiagSubSysSystemPowerSupplyStatus=upsDiagSubSysSystemPowerSupplyStatus, upsDiagSubSysSystemPowerSupplyFirmwareRev=upsDiagSubSysSystemPowerSupplyFirmwareRev, upsDiagSubSysSystemPowerSupplyHardwareRev=upsDiagSubSysSystemPowerSupplyHardwareRev, upsDiagSubSysSystemPowerSupplySerialNum=upsDiagSubSysSystemPowerSupplySerialNum, upsDiagSubSysSystemPowerSupplyManufactureDate=upsDiagSubSysSystemPowerSupplyManufactureDate, upsDiagSubSysXRCommunicationCardTableSize=upsDiagSubSysXRCommunicationCardTableSize, upsDiagSubSysXRCommunicationCardTable=upsDiagSubSysXRCommunicationCardTable, upsDiagSubSysXRCommunicationCardEntry=upsDiagSubSysXRCommunicationCardEntry, upsDiagSubSysXRCommunicationCardFrameIndex=upsDiagSubSysXRCommunicationCardFrameIndex, upsDiagSubSysXRCommunicationCardIndex=upsDiagSubSysXRCommunicationCardIndex, upsDiagSubSysXRCommunicationCardStatus=upsDiagSubSysXRCommunicationCardStatus, upsDiagSubSysXRCommunicationCardFirmwareRev=upsDiagSubSysXRCommunicationCardFirmwareRev, upsDiagSubSysXRCommunicationCardSerialNum=upsDiagSubSysXRCommunicationCardSerialNum, upsDiagSubSysExternalPowerFrameBoardTableSize=upsDiagSubSysExternalPowerFrameBoardTableSize, upsDiagSubSysExternalPowerFrameBoardTable=upsDiagSubSysExternalPowerFrameBoardTable, upsDiagSubSysExternalPowerFrameBoardEntry=upsDiagSubSysExternalPowerFrameBoardEntry, upsDiagSubSysExternalPowerFrameBoardFrameIndex=upsDiagSubSysExternalPowerFrameBoardFrameIndex, upsDiagSubSysExternalPowerFrameBoardIndex=upsDiagSubSysExternalPowerFrameBoardIndex, upsDiagSubSysExternalPowerFrameBoardStatus=upsDiagSubSysExternalPowerFrameBoardStatus, upsDiagSubSysChargerTableSize=upsDiagSubSysChargerTableSize, upsDiagSubSysChargerTable=upsDiagSubSysChargerTable)
mibBuilder.exportSymbols("PowerNet-MIB", upsDiagSubSysChargerEntry=upsDiagSubSysChargerEntry, upsDiagSubSysChargerFrameIndex=upsDiagSubSysChargerFrameIndex, upsDiagSubSysChargerIndex=upsDiagSubSysChargerIndex, upsDiagSubSysChargerStatus=upsDiagSubSysChargerStatus, upsDiagSubSysInverterTableSize=upsDiagSubSysInverterTableSize, upsDiagSubSysInverterTable=upsDiagSubSysInverterTable, upsDiagSubSysInverterEntry=upsDiagSubSysInverterEntry, upsDiagSubSysInverterFrameIndex=upsDiagSubSysInverterFrameIndex, upsDiagSubSysInverterIndex=upsDiagSubSysInverterIndex, upsDiagSubSysInverterStatus=upsDiagSubSysInverterStatus, upsDiagSubSysInverterFirmwareRev=upsDiagSubSysInverterFirmwareRev, upsDiagSubSysInverterHardwareRev=upsDiagSubSysInverterHardwareRev, upsDiagSubSysInverterSerialNum=upsDiagSubSysInverterSerialNum, upsDiagSubSysInverterManufactureDate=upsDiagSubSysInverterManufactureDate, upsDiagSubSysPowerFactorCorrectionTableSize=upsDiagSubSysPowerFactorCorrectionTableSize, upsDiagSubSysPowerFactorCorrectionTable=upsDiagSubSysPowerFactorCorrectionTable, upsDiagSubSysPowerFactorCorrectionEntry=upsDiagSubSysPowerFactorCorrectionEntry, upsDiagSubSysPowerFactorCorrectionFrameIndex=upsDiagSubSysPowerFactorCorrectionFrameIndex, upsDiagSubSysPowerFactorCorrectionIndex=upsDiagSubSysPowerFactorCorrectionIndex, upsDiagSubSysPowerFactorCorrectionStatus=upsDiagSubSysPowerFactorCorrectionStatus, upsDiagSubSysPowerFactorCorrectionFirmwareRev=upsDiagSubSysPowerFactorCorrectionFirmwareRev, upsDiagSubSysPowerFactorCorrectionHardwareRev=upsDiagSubSysPowerFactorCorrectionHardwareRev, upsDiagSubSysPowerFactorCorrectionSerialNum=upsDiagSubSysPowerFactorCorrectionSerialNum, upsDiagSubSysPowerFactorCorrectionManufactureDate=upsDiagSubSysPowerFactorCorrectionManufactureDate, upsDiagSubSysNetworkComCardTableSize=upsDiagSubSysNetworkComCardTableSize, upsDiagSubSysNetworkComCardTable=upsDiagSubSysNetworkComCardTable, upsDiagSubSysNetworkComCardEntry=upsDiagSubSysNetworkComCardEntry, upsDiagSubSysNetworkComCardIndex=upsDiagSubSysNetworkComCardIndex, upsDiagSubSysNetworkComCardModelNumber=upsDiagSubSysNetworkComCardModelNumber, upsDiagSubSysNetworkComCardSerialNumber=upsDiagSubSysNetworkComCardSerialNumber, upsDiagSubSysNetworkComCardDateOfManufacture=upsDiagSubSysNetworkComCardDateOfManufacture, upsDiagSubSysNetworkComCardHardwareRev=upsDiagSubSysNetworkComCardHardwareRev, upsDiagSubSysNetworkComCardFirmwareAppRev=upsDiagSubSysNetworkComCardFirmwareAppRev, upsDiagSubSysNetworkComCardFirmwareAppOSRev=upsDiagSubSysNetworkComCardFirmwareAppOSRev, upsDiagnosticExternalDevices=upsDiagnosticExternalDevices, upsDiagSwitchGear=upsDiagSwitchGear, upsDiagSwitchGearStatus=upsDiagSwitchGearStatus, upsDiagSwitchGearInputSwitchStatus=upsDiagSwitchGearInputSwitchStatus, upsDiagSwitchGearOutputSwitchStatus=upsDiagSwitchGearOutputSwitchStatus, upsDiagSwitchGearBypassSwitchStatus=upsDiagSwitchGearBypassSwitchStatus, upsDiagSwitchGearBypassInputSwitchStatus=upsDiagSwitchGearBypassInputSwitchStatus, upsDiagSwitchGearBreakerTableSize=upsDiagSwitchGearBreakerTableSize, upsDiagSwitchGearBreakerTable=upsDiagSwitchGearBreakerTable, upsDiagSwitchGearBreakerEntry=upsDiagSwitchGearBreakerEntry, switchgearBreakerIndex=switchgearBreakerIndex, switchgearBreakerPresent=switchgearBreakerPresent, switchgearBreakerName=switchgearBreakerName, switchgearBreakerType=switchgearBreakerType, switchgearBreakerStatus=switchgearBreakerStatus, upsDiagSubFeedBreakerTableSize=upsDiagSubFeedBreakerTableSize, upsDiagSubFeedBreakerTable=upsDiagSubFeedBreakerTable, upsDiagSubFeedBreakerEntry=upsDiagSubFeedBreakerEntry, subfeedBreakerIndex=subfeedBreakerIndex, subfeedBreakerPresent=subfeedBreakerPresent, subfeedBreakerRating=subfeedBreakerRating, subfeedBreakerUpperAcceptPowerWarning=subfeedBreakerUpperAcceptPowerWarning, subfeedBreakerUpperAcceptPowerCritical=subfeedBreakerUpperAcceptPowerCritical, subfeedBreakerStatus=subfeedBreakerStatus, subfeedBreakerName=subfeedBreakerName, upsDiagSwitchGearInstallationLoadPct=upsDiagSwitchGearInstallationLoadPct, upsDiagSubFeedPhaseTable=upsDiagSubFeedPhaseTable, upsDiagSubFeedPhaseEntry=upsDiagSubFeedPhaseEntry, upsDiagSubFeedBreakerIndex=upsDiagSubFeedBreakerIndex, upsDiagSubFeedPhaseIndex=upsDiagSubFeedPhaseIndex, upsDiagSubFeedPhaseCurrent=upsDiagSubFeedPhaseCurrent, upsDiagSubFeedPhaseCurrentAlternate=upsDiagSubFeedPhaseCurrentAlternate, upsDiagSwitchgearSerialNumber=upsDiagSwitchgearSerialNumber, upsDiagMCCBBox=upsDiagMCCBBox, upsDiagMCCBBoxStatus=upsDiagMCCBBoxStatus, upsDiagTransformer=upsDiagTransformer, upsDiagTransformerStatus=upsDiagTransformerStatus, upsDiagFlyWheel=upsDiagFlyWheel, upsDiagFlyWheelStatus=upsDiagFlyWheelStatus, upsDiagnosticComBus=upsDiagnosticComBus, upsDiagComBusInternalMIMStatus=upsDiagComBusInternalMIMStatus, upsDiagComBusInternalRIMStatus=upsDiagComBusInternalRIMStatus, upsDiagComBusMIMtoRIMStatus=upsDiagComBusMIMtoRIMStatus, upsDiagComBusExternalMIMStatus=upsDiagComBusExternalMIMStatus, upsDiagComBusExternalRIMStatus=upsDiagComBusExternalRIMStatus, upsParallelSystem=upsParallelSystem, upsParallelSysLocalAddress=upsParallelSysLocalAddress, upsParallelSysRemoteAddress=upsParallelSysRemoteAddress, upsParallelSysRedundancy=upsParallelSysRedundancy, upsParallelInputMaximumCurrent=upsParallelInputMaximumCurrent, upsParallelTotalOutputPower=upsParallelTotalOutputPower, upsParallelTotalOutputApparentPower=upsParallelTotalOutputApparentPower, upsParallelInputPhaseTable=upsParallelInputPhaseTable, upsParallelInputPhaseEntry=upsParallelInputPhaseEntry, upsParallelInputPhaseTableIndex=upsParallelInputPhaseTableIndex, upsParallelInputPhaseIndex=upsParallelInputPhaseIndex, upsParallelInputCurrent=upsParallelInputCurrent, upsParallelInputActivePower=upsParallelInputActivePower, upsParallelInputApparentPower=upsParallelInputApparentPower, upsParallelInputVoltage=upsParallelInputVoltage, upsParallelInputMaxVoltage=upsParallelInputMaxVoltage, upsParallelInputMaxCurrent=upsParallelInputMaxCurrent, upsParallelInputTotalActivePower=upsParallelInputTotalActivePower, upsParallelInputTotalApparentPower=upsParallelInputTotalApparentPower, upsParallelOutputPhaseTable=upsParallelOutputPhaseTable, upsParallelOutputPhaseEntry=upsParallelOutputPhaseEntry, upsParallelOutputPhaseTableIndex=upsParallelOutputPhaseTableIndex, upsParallelOutputPhaseIndex=upsParallelOutputPhaseIndex, upsParallelOutputCurrent=upsParallelOutputCurrent, upsParallelOutputLoad=upsParallelOutputLoad, upsParallelOutputPercentLoad=upsParallelOutputPercentLoad, upsParallelOutputPower=upsParallelOutputPower, upsParallelOutputApparentPowerTable=upsParallelOutputApparentPowerTable, upsParallelOutputApparentPowerEntry=upsParallelOutputApparentPowerEntry, upsParallelOutputApparentPowerTableIndex=upsParallelOutputApparentPowerTableIndex, upsParallelOutputApparentPower=upsParallelOutputApparentPower, upsParallelDiagSubSysBreakerTable=upsParallelDiagSubSysBreakerTable, upsParallelDiagSubSysBreakerEntry=upsParallelDiagSubSysBreakerEntry, upsParallelDiagSubSysBreakerFrameIndex=upsParallelDiagSubSysBreakerFrameIndex, upsParallelDiagSubSysBreakerIndex=upsParallelDiagSubSysBreakerIndex, upsParallelDiagSubSysBreakerStatus=upsParallelDiagSubSysBreakerStatus, upsParallelDiagSubSysBreakerName=upsParallelDiagSubSysBreakerName, upsParallelOutputTotalPercentLoad=upsParallelOutputTotalPercentLoad, upsParallelOutputActivePowerTable=upsParallelOutputActivePowerTable, upsParallelOutputActivePowerEntry=upsParallelOutputActivePowerEntry, upsParallelOutputActivePowerTableIndex=upsParallelOutputActivePowerTableIndex, upsParallelOutputActivePower=upsParallelOutputActivePower, upsParallelSysSwitchGearInstallationLoadPct=upsParallelSysSwitchGearInstallationLoadPct, upsParallelSysRedundancyStatus=upsParallelSysRedundancyStatus, upsParallelSysName=upsParallelSysName, upsPhysicalLayout=upsPhysicalLayout, upsIOFrameLayoutPositionID=upsIOFrameLayoutPositionID, upsBottomFeedFrameLayoutPositionID=upsBottomFeedFrameLayoutPositionID)
mibBuilder.exportSymbols("PowerNet-MIB", upsSwitchGearLayoutPositionID=upsSwitchGearLayoutPositionID, upsBatteryFrameLayoutTableSize=upsBatteryFrameLayoutTableSize, upsBatteryFrameLayoutTable=upsBatteryFrameLayoutTable, upsBatteryFrameLayoutEntry=upsBatteryFrameLayoutEntry, batteryFrameIndex=batteryFrameIndex, batteryFramePositionID=batteryFramePositionID, upsSideCarFrameLayoutTableSize=upsSideCarFrameLayoutTableSize, upsSideCarFrameLayoutTable=upsSideCarFrameLayoutTable, upsSideCarFrameLayoutEntry=upsSideCarFrameLayoutEntry, sideCarFrameIndex=sideCarFrameIndex, sideCarFramePositionID=sideCarFramePositionID, upsPowerFrameLayoutTableSize=upsPowerFrameLayoutTableSize, upsPowerFrameLayoutTable=upsPowerFrameLayoutTable, upsPowerFrameLayoutEntry=upsPowerFrameLayoutEntry, powerFrameIndex=powerFrameIndex, powerFramePositionID=powerFramePositionID, upsIntegratedATS=upsIntegratedATS, upsIntegratedATSSelectedSource=upsIntegratedATSSelectedSource, upsIntegratedATSPreferredSource=upsIntegratedATSPreferredSource, upsIntegratedATSUpsReturnStaggering=upsIntegratedATSUpsReturnStaggering, upsIntegratedATSSourceTableSize=upsIntegratedATSSourceTableSize, upsIntegratedATSSourceTable=upsIntegratedATSSourceTable, upsIntegratedATSSourceEntry=upsIntegratedATSSourceEntry, upsIntegratedATSSourceIndex=upsIntegratedATSSourceIndex, upsIntegratedATSSourceName=upsIntegratedATSSourceName, upsIntegratedATSSourceStatus=upsIntegratedATSSourceStatus, upsIntegratedATSLineFailDelay=upsIntegratedATSLineFailDelay, upsIntegratedATSLineStabilityDelay=upsIntegratedATSLineStabilityDelay, upsDCOutput=upsDCOutput, upsDCOutputStatus=upsDCOutputStatus, upsDCOutputStatusTableSize=upsDCOutputStatusTableSize, upsDCOutputStatusTable=upsDCOutputStatusTable, upsDCOutputStatusEntry=upsDCOutputStatusEntry, upsDCOutputStatusTableIndex=upsDCOutputStatusTableIndex, upsDCOutputStatusVoltageNominal=upsDCOutputStatusVoltageNominal, upsDCOutputStatusCurrentRating=upsDCOutputStatusCurrentRating, upsDCOutputStatusVoltage=upsDCOutputStatusVoltage, upsDCOutputStatusCurrent=upsDCOutputStatusCurrent, upsDCOutputStatusAbnormalConditions=upsDCOutputStatusAbnormalConditions, measureUps=measureUps, mUpsEnviron=mUpsEnviron, mUpsEnvironAmbientTemperature=mUpsEnvironAmbientTemperature, mUpsEnvironRelativeHumidity=mUpsEnvironRelativeHumidity, mUpsEnvironAmbientTemperature2=mUpsEnvironAmbientTemperature2, mUpsEnvironRelativeHumidity2=mUpsEnvironRelativeHumidity2, mUpsContact=mUpsContact, mUpsContactNumContacts=mUpsContactNumContacts, mUpsContactTable=mUpsContactTable, mUpsContactEntry=mUpsContactEntry, contactNumber=contactNumber, normalState=normalState, description=description, monitoringStatus=monitoringStatus, currentStatus=currentStatus, miniSNMPadapter=miniSNMPadapter, serialPort=serialPort, serialPort1=serialPort1, serialPort2=serialPort2, serialPort2Config=serialPort2Config, serialPort2Mode=serialPort2Mode, serialPort2Control=serialPort2Control, setPulseOnTXD=setPulseOnTXD, masterswitch=masterswitch, sPDUIdent=sPDUIdent, sPDUIdentHardwareRev=sPDUIdentHardwareRev, sPDUIdentFirmwareRev=sPDUIdentFirmwareRev, sPDUIdentDateOfManufacture=sPDUIdentDateOfManufacture, sPDUIdentModelNumber=sPDUIdentModelNumber, sPDUIdentSerialNumber=sPDUIdentSerialNumber, sPDUMasterControl=sPDUMasterControl, sPDUMasterControlSwitch=sPDUMasterControlSwitch, sPDUMasterState=sPDUMasterState, sPDUMasterPending=sPDUMasterPending, sPDUMasterConfig=sPDUMasterConfig, sPDUMasterConfigPowerOn=sPDUMasterConfigPowerOn, sPDUMasterConfigReboot=sPDUMasterConfigReboot, sPDUMasterConfigPDUName=sPDUMasterConfigPDUName, sPDUOutletControl=sPDUOutletControl, sPDUOutletControlTableSize=sPDUOutletControlTableSize, sPDUOutletControlTable=sPDUOutletControlTable, sPDUOutletControlEntry=sPDUOutletControlEntry, sPDUOutletControlIndex=sPDUOutletControlIndex, sPDUOutletPending=sPDUOutletPending, sPDUOutletCtl=sPDUOutletCtl, sPDUOutletCtlName=sPDUOutletCtlName, sPDUOutletConfig=sPDUOutletConfig, sPDUOutletConfigTableSize=sPDUOutletConfigTableSize, sPDUOutletConfigTable=sPDUOutletConfigTable, sPDUOutletConfigEntry=sPDUOutletConfigEntry, sPDUOutletConfigIndex=sPDUOutletConfigIndex, sPDUOutletPowerOnTime=sPDUOutletPowerOnTime, sPDUOutletName=sPDUOutletName, sPDUOutletPowerOffTime=sPDUOutletPowerOffTime, sPDUOutletRebootDuration=sPDUOutletRebootDuration, masterswitchVM=masterswitchVM, sPDUIdentVM=sPDUIdentVM, sPDUIdentVMTableSize=sPDUIdentVMTableSize, sPDUIdentVMTable=sPDUIdentVMTable, sPDUIdentVMEntry=sPDUIdentVMEntry, sPDUIdentVMIndex=sPDUIdentVMIndex, sPDUIdentNameVM=sPDUIdentNameVM, sPDUIdentHardwareRevVM=sPDUIdentHardwareRevVM, sPDUIdentFirmwareRevVM=sPDUIdentFirmwareRevVM, sPDUIdentDateOfManufactureVM=sPDUIdentDateOfManufactureVM, sPDUIdentModelNumberVM=sPDUIdentModelNumberVM, sPDUIdentSerialNumberVM=sPDUIdentSerialNumberVM, sPDUMasterControlVM=sPDUMasterControlVM, sPDUMasterControlVMTableSize=sPDUMasterControlVMTableSize, sPDUMasterControlVMTable=sPDUMasterControlVMTable, sPDUMasterControlVMEntry=sPDUMasterControlVMEntry, sPDUMasterControlVMIndex=sPDUMasterControlVMIndex, sPDUMasterControlVMName=sPDUMasterControlVMName, sPDUMasterControlVMCommand=sPDUMasterControlVMCommand, sPDUMasterConfigVM=sPDUMasterConfigVM, sPDUMasterConfigVMTableSize=sPDUMasterConfigVMTableSize, sPDUMasterConfigVMTable=sPDUMasterConfigVMTable, sPDUMasterConfigVMEntry=sPDUMasterConfigVMEntry, sPDUMasterConfigVMIndex=sPDUMasterConfigVMIndex, sPDUMasterConfigVMName=sPDUMasterConfigVMName, sPDUMasterConfigVMColdstartDelay=sPDUMasterConfigVMColdstartDelay, sPDUMasterConfigVMAudioAlarmActivated=sPDUMasterConfigVMAudioAlarmActivated, sPDUMasterConfigVMHighLoadWarningThreshold=sPDUMasterConfigVMHighLoadWarningThreshold, sPDUMasterConfigVMLowLoadWarningThreshold=sPDUMasterConfigVMLowLoadWarningThreshold, sPDUMasterConfigVMOverloadRestriction=sPDUMasterConfigVMOverloadRestriction, sPDUMasterStatusVM=sPDUMasterStatusVM, sPDUMasterStatusVMTableSize=sPDUMasterStatusVMTableSize, sPDUMasterStatusVMTable=sPDUMasterStatusVMTable)
mibBuilder.exportSymbols("PowerNet-MIB", sPDUMasterStatusVMEntry=sPDUMasterStatusVMEntry, sPDUMasterStatusVMIndex=sPDUMasterStatusVMIndex, sPDUMasterStatusVMName=sPDUMasterStatusVMName, sPDUMasterStatusVMCommandPending=sPDUMasterStatusVMCommandPending, sPDUMasterStatusVMOverloadCondition=sPDUMasterStatusVMOverloadCondition, sPDUMasterStatusVMLowLoadCondition=sPDUMasterStatusVMLowLoadCondition, sPDUMasterStatusVMCurrentLoad=sPDUMasterStatusVMCurrentLoad, sPDUMasterStatusVMMaxLoad=sPDUMasterStatusVMMaxLoad, sPDUMasterStatusVMOutletCount=sPDUMasterStatusVMOutletCount, sPDUMasterStatusVMRebootDuration=sPDUMasterStatusVMRebootDuration, sPDUOutletControlVM=sPDUOutletControlVM, sPDUOutletControlVMTable=sPDUOutletControlVMTable, sPDUOutletControlVMEntry=sPDUOutletControlVMEntry, sPDUOutletControlVMIndex=sPDUOutletControlVMIndex, sPDUOutletControlVMName=sPDUOutletControlVMName, sPDUOutletControlVMOutletIndex=sPDUOutletControlVMOutletIndex, sPDUOutletControlVMOutletName=sPDUOutletControlVMOutletName, sPDUOutletControlVMOutletCommand=sPDUOutletControlVMOutletCommand, sPDUOutletConfigVM=sPDUOutletConfigVM, sPDUOutletConfigVMTable=sPDUOutletConfigVMTable, sPDUOutletConfigVMEntry=sPDUOutletConfigVMEntry, sPDUOutletConfigVMIndex=sPDUOutletConfigVMIndex, sPDUOutletConfigVMName=sPDUOutletConfigVMName, sPDUOutletConfigVMOutletIndex=sPDUOutletConfigVMOutletIndex, sPDUOutletConfigVMOutletName=sPDUOutletConfigVMOutletName, sPDUOutletConfigVMPowerOnTime=sPDUOutletConfigVMPowerOnTime, sPDUOutletConfigVMPowerOffTime=sPDUOutletConfigVMPowerOffTime, sPDUOutletConfigVMRebootDuration=sPDUOutletConfigVMRebootDuration, sPDUOutletStatusVM=sPDUOutletStatusVM, sPDUOutletStatusVMTable=sPDUOutletStatusVMTable, sPDUOutletStatusVMEntry=sPDUOutletStatusVMEntry, sPDUOutletStatusVMIndex=sPDUOutletStatusVMIndex, sPDUOutletStatusVMName=sPDUOutletStatusVMName, sPDUOutletStatusVMOutletIndex=sPDUOutletStatusVMOutletIndex, sPDUOutletStatusVMOutletName=sPDUOutletStatusVMOutletName, sPDUOutletStatusVMOutletState=sPDUOutletStatusVMOutletState, sPDUOutletStatusVMCommandPending=sPDUOutletStatusVMCommandPending, masterswitchMSP=masterswitchMSP, sPDUIdentMSP=sPDUIdentMSP, sPDUIdentMSPTableSize=sPDUIdentMSPTableSize, sPDUIdentMSPTable=sPDUIdentMSPTable, sPDUIdentMSPEntry=sPDUIdentMSPEntry, sPDUIdentMSPIndex=sPDUIdentMSPIndex, sPDUIdentNameMSP=sPDUIdentNameMSP, sPDUIdentHardwareRevMSP=sPDUIdentHardwareRevMSP, sPDUIdentFirmwareRevMSP=sPDUIdentFirmwareRevMSP, sPDUIdentDateOfManufactureMSP=sPDUIdentDateOfManufactureMSP, sPDUIdentModelNumberMSP=sPDUIdentModelNumberMSP, sPDUIdentSerialNumberMSP=sPDUIdentSerialNumberMSP, sPDUMasterControlMSP=sPDUMasterControlMSP, sPDUMasterControlMSPTableSize=sPDUMasterControlMSPTableSize, sPDUMasterControlMSPTable=sPDUMasterControlMSPTable, sPDUMasterControlMSPEntry=sPDUMasterControlMSPEntry, sPDUMasterControlMSPIndex=sPDUMasterControlMSPIndex, sPDUMasterControlMSPName=sPDUMasterControlMSPName, sPDUMasterControlMSPCommand=sPDUMasterControlMSPCommand, sPDUMasterConfigMSP=sPDUMasterConfigMSP, sPDUMasterConfigMSPTableSize=sPDUMasterConfigMSPTableSize, sPDUMasterConfigMSPTable=sPDUMasterConfigMSPTable, sPDUMasterConfigMSPEntry=sPDUMasterConfigMSPEntry, sPDUMasterConfigMSPIndex=sPDUMasterConfigMSPIndex, sPDUMasterConfigMSPName=sPDUMasterConfigMSPName, sPDUMasterConfigMSPPowerOnTimeDelay=sPDUMasterConfigMSPPowerOnTimeDelay, sPDUMasterConfigMSPManualButton=sPDUMasterConfigMSPManualButton, sPDUMasterStatusMSP=sPDUMasterStatusMSP, sPDUMasterStatusMSPTableSize=sPDUMasterStatusMSPTableSize, sPDUMasterStatusMSPTable=sPDUMasterStatusMSPTable, sPDUMasterStatusMSPEntry=sPDUMasterStatusMSPEntry, sPDUMasterStatusMSPIndex=sPDUMasterStatusMSPIndex, sPDUMasterStatusMSPName=sPDUMasterStatusMSPName, sPDUMasterStatusMSPOutletCount=sPDUMasterStatusMSPOutletCount, sPDUOutletControlMSP=sPDUOutletControlMSP, sPDUOutletControlMSPTable=sPDUOutletControlMSPTable, sPDUOutletControlMSPEntry=sPDUOutletControlMSPEntry, sPDUOutletControlMSPIndex=sPDUOutletControlMSPIndex, sPDUOutletControlMSPName=sPDUOutletControlMSPName, sPDUOutletControlMSPOutletIndex=sPDUOutletControlMSPOutletIndex, sPDUOutletControlMSPOutletName=sPDUOutletControlMSPOutletName, sPDUOutletControlMSPOutletCommand=sPDUOutletControlMSPOutletCommand, sPDUOutletConfigMSP=sPDUOutletConfigMSP, sPDUOutletConfigMSPall=sPDUOutletConfigMSPall, sPDUOutletConfigMSPallTable=sPDUOutletConfigMSPallTable, sPDUOutletConfigMSPallEntry=sPDUOutletConfigMSPallEntry, sPDUOutletConfigMSPallIndex=sPDUOutletConfigMSPallIndex, sPDUOutletConfigMSPallName=sPDUOutletConfigMSPallName, sPDUOutletConfigMSPallOutletIndex=sPDUOutletConfigMSPallOutletIndex, sPDUOutletConfigMSPallOutletName=sPDUOutletConfigMSPallOutletName, sPDUOutletConfigMSPallOutletCtrlMode=sPDUOutletConfigMSPallOutletCtrlMode, sPDUOutletConfigMSPgs=sPDUOutletConfigMSPgs, sPDUOutletConfigMSPgsTable=sPDUOutletConfigMSPgsTable, sPDUOutletConfigMSPgsEntry=sPDUOutletConfigMSPgsEntry, sPDUOutletConfigMSPgsIndex=sPDUOutletConfigMSPgsIndex, sPDUOutletConfigMSPgsName=sPDUOutletConfigMSPgsName, sPDUOutletConfigMSPgsOutletIndex=sPDUOutletConfigMSPgsOutletIndex, sPDUOutletConfigMSPgsOutletName=sPDUOutletConfigMSPgsOutletName, sPDUOutletConfigMSPgsOutletCtrlMode=sPDUOutletConfigMSPgsOutletCtrlMode, sPDUOutletConfigMSPgsDeviceConfirm=sPDUOutletConfigMSPgsDeviceConfirm, sPDUOutletConfigMSPgsLowBattWarning=sPDUOutletConfigMSPgsLowBattWarning, sPDUOutletConfigMSPgsLowBattMult=sPDUOutletConfigMSPgsLowBattMult, sPDUOutletConfigMSPgsRestartDelay=sPDUOutletConfigMSPgsRestartDelay, sPDUOutletConfigMSPgsPowerOnDelay=sPDUOutletConfigMSPgsPowerOnDelay, sPDUOutletConfigMSPgsPowerOffDelay=sPDUOutletConfigMSPgsPowerOffDelay, sPDUOutletConfigMSPgsBattCapThresh=sPDUOutletConfigMSPgsBattCapThresh, sPDUOutletConfigMSPgsRebootDuration=sPDUOutletConfigMSPgsRebootDuration, sPDUOutletConfigMSPannun=sPDUOutletConfigMSPannun, sPDUOutletConfigMSPannunTable=sPDUOutletConfigMSPannunTable, sPDUOutletConfigMSPannunEntry=sPDUOutletConfigMSPannunEntry, sPDUOutletConfigMSPannunIndex=sPDUOutletConfigMSPannunIndex, sPDUOutletConfigMSPannunName=sPDUOutletConfigMSPannunName, sPDUOutletConfigMSPannunOutletIndex=sPDUOutletConfigMSPannunOutletIndex, sPDUOutletConfigMSPannunOutletName=sPDUOutletConfigMSPannunOutletName, sPDUOutletConfigMSPannunOutletCtrlMode=sPDUOutletConfigMSPannunOutletCtrlMode, sPDUOutletConfigMSPannunInitialState=sPDUOutletConfigMSPannunInitialState, sPDUOutletConfigMSPannunAlarmActionDly=sPDUOutletConfigMSPannunAlarmActionDly, sPDUOutletConfigMSPmups=sPDUOutletConfigMSPmups, sPDUOutletConfigMSPmupsTable=sPDUOutletConfigMSPmupsTable, sPDUOutletConfigMSPmupsEntry=sPDUOutletConfigMSPmupsEntry, sPDUOutletConfigMSPmupsIndex=sPDUOutletConfigMSPmupsIndex, sPDUOutletConfigMSPmupsName=sPDUOutletConfigMSPmupsName, sPDUOutletConfigMSPmupsOutletIndex=sPDUOutletConfigMSPmupsOutletIndex, sPDUOutletConfigMSPmupsOutletName=sPDUOutletConfigMSPmupsOutletName, sPDUOutletConfigMSPmupsZone1=sPDUOutletConfigMSPmupsZone1, sPDUOutletConfigMSPmupsZone2=sPDUOutletConfigMSPmupsZone2, sPDUOutletConfigMSPmupsZone3=sPDUOutletConfigMSPmupsZone3, sPDUOutletConfigMSPmupsZone4=sPDUOutletConfigMSPmupsZone4, sPDUOutletConfigMSPmupsP1LowHum=sPDUOutletConfigMSPmupsP1LowHum, sPDUOutletConfigMSPmupsP1HiHum=sPDUOutletConfigMSPmupsP1HiHum)
mibBuilder.exportSymbols("PowerNet-MIB", sPDUOutletConfigMSPmupsP1LowTemp=sPDUOutletConfigMSPmupsP1LowTemp, sPDUOutletConfigMSPmupsP1HiTemp=sPDUOutletConfigMSPmupsP1HiTemp, sPDUOutletConfigMSPmupsP2LowHum=sPDUOutletConfigMSPmupsP2LowHum, sPDUOutletConfigMSPmupsP2HiHum=sPDUOutletConfigMSPmupsP2HiHum, sPDUOutletConfigMSPmupsP2LowTemp=sPDUOutletConfigMSPmupsP2LowTemp, sPDUOutletConfigMSPmupsP2HiTemp=sPDUOutletConfigMSPmupsP2HiTemp, sPDUOutletStatusMSP=sPDUOutletStatusMSP, sPDUOutletStatusMSPTable=sPDUOutletStatusMSPTable, sPDUOutletStatusMSPEntry=sPDUOutletStatusMSPEntry, sPDUOutletStatusMSPIndex=sPDUOutletStatusMSPIndex, sPDUOutletStatusMSPName=sPDUOutletStatusMSPName, sPDUOutletStatusMSPOutletIndex=sPDUOutletStatusMSPOutletIndex, sPDUOutletStatusMSPOutletName=sPDUOutletStatusMSPOutletName, sPDUOutletStatusMSPOutletState=sPDUOutletStatusMSPOutletState, sPDUOutletStatusMSPCommandPending=sPDUOutletStatusMSPCommandPending, sPDUOutletStatusMSPOutletCtrlMode=sPDUOutletStatusMSPOutletCtrlMode, dcDM3=dcDM3, dm3Ident=dm3Ident, dm3IdentSystem=dm3IdentSystem, dm3IdentSysDescriptionTableSize=dm3IdentSysDescriptionTableSize, dm3IdentSysDescriptionTable=dm3IdentSysDescriptionTable, dm3IdentSysDescriptionEntry=dm3IdentSysDescriptionEntry, dm3IdentSysDescriptionIndex=dm3IdentSysDescriptionIndex, dm3IdentSysDescriptionText=dm3IdentSysDescriptionText, dm3IdentSysModel=dm3IdentSysModel, dm3IdentSysCntrlRev=dm3IdentSysCntrlRev, dm3IdentSysFWVersion=dm3IdentSysFWVersion, dm3Config=dm3Config, dm3ConfigSystem=dm3ConfigSystem, dm3ConfigSysDescriptionTableSize=dm3ConfigSysDescriptionTableSize, dm3ConfigSysDescriptionTable=dm3ConfigSysDescriptionTable, dm3ConfigSysDescriptionEntry=dm3ConfigSysDescriptionEntry, dm3ConfigSysDescriptionIndex=dm3ConfigSysDescriptionIndex, dm3ConfigSysDescriptionText=dm3ConfigSysDescriptionText, dm3ConfigSysHighTempThresh=dm3ConfigSysHighTempThresh, dm3ConfigSysHighTempAlarm=dm3ConfigSysHighTempAlarm, dm3ConfigSysLowTempThresh=dm3ConfigSysLowTempThresh, dm3ConfigSysLowTempAlarm=dm3ConfigSysLowTempAlarm, dm3ConfigSysHardwareTempAlarm=dm3ConfigSysHardwareTempAlarm, dm3ConfigSysRemoteAccess=dm3ConfigSysRemoteAccess, dm3ConfigLVD=dm3ConfigLVD, dm3ConfigLVDTableSize=dm3ConfigLVDTableSize, dm3ConfigLVDTable=dm3ConfigLVDTable, dm3ConfigLVDEntry=dm3ConfigLVDEntry, dm3ConfigLVDIndex=dm3ConfigLVDIndex, dm3ConfigLVDName=dm3ConfigLVDName, dm3ConfigLVDEnable=dm3ConfigLVDEnable, dm3ConfigLVDTripThresh=dm3ConfigLVDTripThresh, dm3ConfigLVDResetThresh=dm3ConfigLVDResetThresh, dm3ConfigLVDOpenAlarm=dm3ConfigLVDOpenAlarm, dm3ConfigLVDHWAlarm=dm3ConfigLVDHWAlarm, dm3ConfigBattery=dm3ConfigBattery, dm3ConfigBattFloatVolt=dm3ConfigBattFloatVolt, dm3ConfigBattMaxRecharge=dm3ConfigBattMaxRecharge, dm3ConfigBattDischargeThresh=dm3ConfigBattDischargeThresh, dm3ConfigBattDischargeAlarm=dm3ConfigBattDischargeAlarm, dm3ConfigBattHighVoltThresh=dm3ConfigBattHighVoltThresh, dm3ConfigBattHighVoltAlarm=dm3ConfigBattHighVoltAlarm, dm3ConfigBattLowVoltThresh=dm3ConfigBattLowVoltThresh, dm3ConfigBattLowVoltAlarm=dm3ConfigBattLowVoltAlarm, dm3ConfigBattHighTempThresh=dm3ConfigBattHighTempThresh, dm3ConfigBattHighTempAlarm=dm3ConfigBattHighTempAlarm, dm3ConfigBattLowTempThresh=dm3ConfigBattLowTempThresh, dm3ConfigBattLowTempAlarm=dm3ConfigBattLowTempAlarm, dm3ConfigBattAmpHour=dm3ConfigBattAmpHour, dm3ConfigCompMethod=dm3ConfigCompMethod, dm3ConfigCompTempCoeff=dm3ConfigCompTempCoeff, dm3ConfigHighKneeTemp=dm3ConfigHighKneeTemp, dm3ConfigLowKneeTemp=dm3ConfigLowKneeTemp, dm3ConfigBattHwCurrentAlarm=dm3ConfigBattHwCurrentAlarm, dm3ConfigBattHwTempAlarm=dm3ConfigBattHwTempAlarm, dm3ConfigPowerModules=dm3ConfigPowerModules, dm3ConfigRectifier=dm3ConfigRectifier, dm3ConfigRectThresh=dm3ConfigRectThresh, dm3ConfigRectHighVoltThresh=dm3ConfigRectHighVoltThresh, dm3ConfigRectLowVoltThresh=dm3ConfigRectLowVoltThresh, dm3ConfigRectFailSafe=dm3ConfigRectFailSafe, dm3ConfigRectFailComm=dm3ConfigRectFailComm, dm3ConfigRectAlarms=dm3ConfigRectAlarms, dm3ConfigRectHighVoltAlarm=dm3ConfigRectHighVoltAlarm, dm3ConfigRectLowVoltAlarm=dm3ConfigRectLowVoltAlarm, dm3ConfigRectConfigAlarm=dm3ConfigRectConfigAlarm, dm3ConfigRect1ofNAlarm=dm3ConfigRect1ofNAlarm, dm3ConfigRect2ofNAlarm=dm3ConfigRect2ofNAlarm, dm3ConfigRectDiagAlarm=dm3ConfigRectDiagAlarm, dm3ConfigRectImbalanceAlarm=dm3ConfigRectImbalanceAlarm, dm3ConfigRectCurrLimitAlarm=dm3ConfigRectCurrLimitAlarm, dm3ConfigRectStandbyAlarm=dm3ConfigRectStandbyAlarm, dm3ConfigRectFanFailAlarm=dm3ConfigRectFanFailAlarm, dm3ConfigRectFailAlarm=dm3ConfigRectFailAlarm, dm3ConfigRectHwVoltAlarm=dm3ConfigRectHwVoltAlarm, dm3ConfigConverter=dm3ConfigConverter, dm3ConfigConvThresh=dm3ConfigConvThresh, dm3ConfigConvHighVoltThresh=dm3ConfigConvHighVoltThresh, dm3ConfigConvLowVoltThresh=dm3ConfigConvLowVoltThresh, dm3ConfigConvFailSafe=dm3ConfigConvFailSafe, dm3ConfigConvSetPoint=dm3ConfigConvSetPoint, dm3ConfigConvFailMax=dm3ConfigConvFailMax, dm3ConfigConvFailMin=dm3ConfigConvFailMin, dm3ConfigConvFailComm=dm3ConfigConvFailComm, dm3ConfigConvAlarms=dm3ConfigConvAlarms, dm3ConfigConvHighVoltAlarm=dm3ConfigConvHighVoltAlarm, dm3ConfigConvLowVoltAlarm=dm3ConfigConvLowVoltAlarm, dm3ConfigConvConfigAlarm=dm3ConfigConvConfigAlarm, dm3ConfigConv1ofNAlarm=dm3ConfigConv1ofNAlarm, dm3ConfigConv2ofNAlarm=dm3ConfigConv2ofNAlarm, dm3ConfigConvDiagAlarm=dm3ConfigConvDiagAlarm, dm3ConfigConvImbalanceAlarm=dm3ConfigConvImbalanceAlarm, dm3ConfigConvCurrLimitAlarm=dm3ConfigConvCurrLimitAlarm, dm3ConfigConvStandbyAlarm=dm3ConfigConvStandbyAlarm, dm3ConfigConvFanFailAlarm=dm3ConfigConvFanFailAlarm, dm3ConfigConvFailAlarm=dm3ConfigConvFailAlarm, dm3ConfigConvHwVoltAlarm=dm3ConfigConvHwVoltAlarm, dm3ConfigRelays=dm3ConfigRelays, dm3ConfigOutputRelays=dm3ConfigOutputRelays, dm3ConfigOutRlyTableSize=dm3ConfigOutRlyTableSize, dm3ConfigOutRlyTable=dm3ConfigOutRlyTable, dm3ConfigOutRlyEntry=dm3ConfigOutRlyEntry, dm3ConfigOutRlyIndex=dm3ConfigOutRlyIndex, dm3ConfigOutRlyName=dm3ConfigOutRlyName, dm3ConfigOutRlyDelay=dm3ConfigOutRlyDelay, dm3ConfigOutRlyAlarm=dm3ConfigOutRlyAlarm, dm3ConfigInputRelays=dm3ConfigInputRelays, dm3ConfigInRlyTableSize=dm3ConfigInRlyTableSize, dm3ConfigInRlyTable=dm3ConfigInRlyTable, dm3ConfigInRlyEntry=dm3ConfigInRlyEntry, dm3ConfigInRlyIndex=dm3ConfigInRlyIndex)
mibBuilder.exportSymbols("PowerNet-MIB", dm3ConfigInRlyName=dm3ConfigInRlyName, dm3ConfigInRlyDelay=dm3ConfigInRlyDelay, dm3ConfigInRlyAlarm=dm3ConfigInRlyAlarm, dm3ConfigDistribution=dm3ConfigDistribution, dm3ConfigBreakers=dm3ConfigBreakers, dm3ConfigBreakersTableSize=dm3ConfigBreakersTableSize, dm3ConfigBreakersTable=dm3ConfigBreakersTable, dm3ConfigBreakersEntry=dm3ConfigBreakersEntry, dm3ConfigBreakersIndex=dm3ConfigBreakersIndex, dm3ConfigBreakersName=dm3ConfigBreakersName, dm3ConfigBreakersAlarm=dm3ConfigBreakersAlarm, dm3ConfigFuses=dm3ConfigFuses, dm3ConfigFusesTableSize=dm3ConfigFusesTableSize, dm3ConfigFusesTable=dm3ConfigFusesTable, dm3ConfigFusesEntry=dm3ConfigFusesEntry, dm3ConfigFusesIndex=dm3ConfigFusesIndex, dm3ConfigFusesName=dm3ConfigFusesName, dm3ConfigFusesAlarm=dm3ConfigFusesAlarm, dm3Status=dm3Status, dm3StatusSystem=dm3StatusSystem, dm3StatusSystemTemp=dm3StatusSystemTemp, dm3StatusSystemStart=dm3StatusSystemStart, dm3StatusSysRemoteAccess=dm3StatusSysRemoteAccess, dm3StatusSysSecurityLevel=dm3StatusSysSecurityLevel, dm3StatusSysTempSanity=dm3StatusSysTempSanity, dm3StatusSysAlarmState=dm3StatusSysAlarmState, dm3StatusSysTempUnits=dm3StatusSysTempUnits, dm3StatusAlarms=dm3StatusAlarms, dm3StatusAlarmsTableSize=dm3StatusAlarmsTableSize, dm3StatusAlarmsTable=dm3StatusAlarmsTable, dm3StatusAlarmsEntry=dm3StatusAlarmsEntry, dm3StatusAlarmsIndex=dm3StatusAlarmsIndex, dm3StatusAlarmsText=dm3StatusAlarmsText, dm3StatusBattery=dm3StatusBattery, dm3StatusBattCurrent=dm3StatusBattCurrent, dm3StatusBattTemp=dm3StatusBattTemp, dm3StatusBattCurrentSanity=dm3StatusBattCurrentSanity, dm3StatusBattTempSanity=dm3StatusBattTempSanity, dm3StatusOEM=dm3StatusOEM, dm3StatusOEMrectOffset=dm3StatusOEMrectOffset, dm3StatusOEMrectGain=dm3StatusOEMrectGain, dm3StatusOEMconvOffset=dm3StatusOEMconvOffset, dm3StatusOEMconvGain=dm3StatusOEMconvGain, dm3StatusOEMshuntOffset=dm3StatusOEMshuntOffset, dm3StatusOEMshuntGain=dm3StatusOEMshuntGain, dm3StatusLVD=dm3StatusLVD, dm3StatusLVDTableSize=dm3StatusLVDTableSize, dm3StatusLVDTable=dm3StatusLVDTable, dm3StatusLVDEntry=dm3StatusLVDEntry, dm3StatusLVDIndex=dm3StatusLVDIndex, dm3StatusLVDName=dm3StatusLVDName, dm3StatusLVDState=dm3StatusLVDState, dm3StatusLVDHwFault=dm3StatusLVDHwFault, dm3StatusPowerModules=dm3StatusPowerModules, dm3StatusRectifier=dm3StatusRectifier, dm3StatusRectTableSize=dm3StatusRectTableSize, dm3StatusRectTable=dm3StatusRectTable, dm3StatusRectEntry=dm3StatusRectEntry, dm3StatusRectIndex=dm3StatusRectIndex, dm3StatusRectID=dm3StatusRectID, dm3StatusRectDesc=dm3StatusRectDesc, dm3StatusRectCurrent=dm3StatusRectCurrent, dm3StatusRectCurrentLimit=dm3StatusRectCurrentLimit, dm3StatusRectStandby=dm3StatusRectStandby, dm3StatusRectFanFail=dm3StatusRectFanFail, dm3StatusRectFail=dm3StatusRectFail, dm3StatusRectDevType=dm3StatusRectDevType, dm3StatusRectPhyAddr=dm3StatusRectPhyAddr, dm3StatusRectCfg=dm3StatusRectCfg, dm3StatusRectPcbRev=dm3StatusRectPcbRev, dm3StatusRectFwVer=dm3StatusRectFwVer, dm3StatusRectPresent=dm3StatusRectPresent, dm3StatusRectDiagPass=dm3StatusRectDiagPass, dm3StatusRectState=dm3StatusRectState, dm3StatusSysRectVoltSanity=dm3StatusSysRectVoltSanity, dm3StatusSysRectAvailable=dm3StatusSysRectAvailable, dm3StatusSysRectType=dm3StatusSysRectType, dm3StatusSysRectVoltage=dm3StatusSysRectVoltage, dm3StatusSysRectCurrent=dm3StatusSysRectCurrent, dm3StatusConverter=dm3StatusConverter, dm3StatusConvTableSize=dm3StatusConvTableSize, dm3StatusConvTable=dm3StatusConvTable, dm3StatusConvEntry=dm3StatusConvEntry, dm3StatusConvIndex=dm3StatusConvIndex, dm3StatusConvID=dm3StatusConvID, dm3StatusConvDesc=dm3StatusConvDesc, dm3StatusConvCurrent=dm3StatusConvCurrent, dm3StatusConvCurrentLimit=dm3StatusConvCurrentLimit, dm3StatusConvStandby=dm3StatusConvStandby, dm3StatusConvFanFail=dm3StatusConvFanFail, dm3StatusConvFail=dm3StatusConvFail, dm3StatusConvDevType=dm3StatusConvDevType, dm3StatusConvPhyAddr=dm3StatusConvPhyAddr, dm3StatusConvCfg=dm3StatusConvCfg, dm3StatusConvPcbRev=dm3StatusConvPcbRev, dm3StatusConvFwVer=dm3StatusConvFwVer, dm3StatusConvPresent=dm3StatusConvPresent, dm3StatusConvDiagPass=dm3StatusConvDiagPass, dm3StatusConvState=dm3StatusConvState, dm3StatusSysConvVoltSanity=dm3StatusSysConvVoltSanity, dm3StatusSysConvAvailable=dm3StatusSysConvAvailable, dm3StatusSysConvType=dm3StatusSysConvType, dm3StatusSysConvVoltage=dm3StatusSysConvVoltage, dm3StatusSysConvCurrent=dm3StatusSysConvCurrent, dm3StatusRelays=dm3StatusRelays, dm3StatusOutputRelays=dm3StatusOutputRelays, dm3StatusOutRlyTableSize=dm3StatusOutRlyTableSize, dm3StatusOutRlyTable=dm3StatusOutRlyTable, dm3StatusOutRlyEntry=dm3StatusOutRlyEntry, dm3StatusOutRlyIndex=dm3StatusOutRlyIndex, dm3StatusOutRlyName=dm3StatusOutRlyName, dm3StatusOutRlyStatus=dm3StatusOutRlyStatus, dm3StatusInputRelays=dm3StatusInputRelays, dm3StatusInRlyTableSize=dm3StatusInRlyTableSize, dm3StatusInRlyTable=dm3StatusInRlyTable, dm3StatusInRlyEntry=dm3StatusInRlyEntry, dm3StatusInRlyIndex=dm3StatusInRlyIndex, dm3StatusInRlyName=dm3StatusInRlyName, dm3StatusInRlyStatus=dm3StatusInRlyStatus, dm3StatusDistribution=dm3StatusDistribution, dm3StatusBreakers=dm3StatusBreakers, dm3StatusBreakersTableSize=dm3StatusBreakersTableSize, dm3StatusBreakersTable=dm3StatusBreakersTable, dm3StatusBreakersEntry=dm3StatusBreakersEntry, dm3StatusBreakersIndex=dm3StatusBreakersIndex, dm3StatusBreakersName=dm3StatusBreakersName, dm3StatusBreakersStatus=dm3StatusBreakersStatus)
mibBuilder.exportSymbols("PowerNet-MIB", dm3StatusFuses=dm3StatusFuses, dm3StatusFusesTableSize=dm3StatusFusesTableSize, dm3StatusFusesTable=dm3StatusFusesTable, dm3StatusFusesEntry=dm3StatusFusesEntry, dm3StatusFusesIndex=dm3StatusFusesIndex, dm3StatusFusesName=dm3StatusFusesName, dm3StatusFusesStatus=dm3StatusFusesStatus, automaticTransferSwitch=automaticTransferSwitch, atsIdent=atsIdent, atsIdentHardwareRev=atsIdentHardwareRev, atsIdentFirmwareRev=atsIdentFirmwareRev, atsIdentFirmwareDate=atsIdentFirmwareDate, atsIdentDateOfManufacture=atsIdentDateOfManufacture, atsIdentModelNumber=atsIdentModelNumber, atsIdentSerialNumber=atsIdentSerialNumber, atsIdentNominalLineVoltage=atsIdentNominalLineVoltage, atsIdentNominalLineFrequency=atsIdentNominalLineFrequency, atsIdentDeviceRating=atsIdentDeviceRating, atsCalibration=atsCalibration, atsCalibrationInput=atsCalibrationInput, atsCalibrationNumInputs=atsCalibrationNumInputs, atsCalibrationNumInputPhases=atsCalibrationNumInputPhases, atsCalibrationInputPhaseTable=atsCalibrationInputPhaseTable, atsCalibrationInputPhaseEntry=atsCalibrationInputPhaseEntry, atsCalibrationInputTableIndex=atsCalibrationInputTableIndex, atsCalibrationInputPhaseTableIndex=atsCalibrationInputPhaseTableIndex, atsLineVoltageCalibrationFactor=atsLineVoltageCalibrationFactor, atsCalibrationPowerSupply=atsCalibrationPowerSupply, atsCalibrationPowerSupplyVoltages=atsCalibrationPowerSupplyVoltages, atsCalibrationPowerSupplyVoltageTable=atsCalibrationPowerSupplyVoltageTable, atsCalibrationPowerSupplyVoltageEntry=atsCalibrationPowerSupplyVoltageEntry, atsCalibrationPowerSupplyVoltageTableIndex=atsCalibrationPowerSupplyVoltageTableIndex, atsCalibrationPowerSupplyVoltage=atsCalibrationPowerSupplyVoltage, atsPowerSupplyVoltageCalibrationFactor=atsPowerSupplyVoltageCalibrationFactor, atsCalibrationOutput=atsCalibrationOutput, atsCalibrationNumOutputs=atsCalibrationNumOutputs, atsCalibrationNumOutputPhases=atsCalibrationNumOutputPhases, atsCalibrationOutputTable=atsCalibrationOutputTable, atsCalibrationOutputEntry=atsCalibrationOutputEntry, atsCalibrationOutputTableIndex=atsCalibrationOutputTableIndex, atsCalibrationOutputPhasesTableIndex=atsCalibrationOutputPhasesTableIndex, atsOutputCurrentCalibrationFactor=atsOutputCurrentCalibrationFactor, atsControl=atsControl, atsControlResetATS=atsControlResetATS, atsControlClearAllAlarms=atsControlClearAllAlarms, atsConfig=atsConfig, atsConfigProductName=atsConfigProductName, atsConfigPreferredSource=atsConfigPreferredSource, atsConfigFrontPanelLockout=atsConfigFrontPanelLockout, atsConfigVoltageSensitivity=atsConfigVoltageSensitivity, atsConfigTransferVoltageRange=atsConfigTransferVoltageRange, atsConfigCurrentLimit=atsConfigCurrentLimit, atsConfigResetValues=atsConfigResetValues, atsConfigLineVRMS=atsConfigLineVRMS, atsConfigLineVRMSNarrowLimit=atsConfigLineVRMSNarrowLimit, atsConfigLineVRMSMediumLimit=atsConfigLineVRMSMediumLimit, atsConfigLineVRMSWideLimit=atsConfigLineVRMSWideLimit, atsConfigFrequencyDeviation=atsConfigFrequencyDeviation, atsConfigBankTableSize=atsConfigBankTableSize, atsConfigBankTable=atsConfigBankTable, atsConfigBankEntry=atsConfigBankEntry, atsConfigBankTableIndex=atsConfigBankTableIndex, atsConfigBank=atsConfigBank, atsConfigBankLowLoadThreshold=atsConfigBankLowLoadThreshold, atsConfigBankNearOverLoadThreshold=atsConfigBankNearOverLoadThreshold, atsConfigBankOverLoadThreshold=atsConfigBankOverLoadThreshold, atsConfigPhaseTableSize=atsConfigPhaseTableSize, atsConfigPhaseTable=atsConfigPhaseTable, atsConfigPhaseEntry=atsConfigPhaseEntry, atsConfigPhaseTableIndex=atsConfigPhaseTableIndex, atsConfigPhase=atsConfigPhase, atsConfigPhaseLowLoadThreshold=atsConfigPhaseLowLoadThreshold, atsConfigPhaseNearOverLoadThreshold=atsConfigPhaseNearOverLoadThreshold, atsConfigPhaseOverLoadThreshold=atsConfigPhaseOverLoadThreshold, atsStatus=atsStatus, atsStatusDeviceStatus=atsStatusDeviceStatus, atsStatusCommStatus=atsStatusCommStatus, atsStatusSelectedSource=atsStatusSelectedSource, atsStatusRedundancyState=atsStatusRedundancyState, atsStatusOverCurrentState=atsStatusOverCurrentState, atsStatus5VPowerSupply=atsStatus5VPowerSupply, atsStatus24VPowerSupply=atsStatus24VPowerSupply, atsStatus24VSourceBPowerSupply=atsStatus24VSourceBPowerSupply, atsStatusPlus12VPowerSupply=atsStatusPlus12VPowerSupply, atsStatusMinus12VPowerSupply=atsStatusMinus12VPowerSupply, atsStatusSwitchStatus=atsStatusSwitchStatus, atsStatusFrontPanel=atsStatusFrontPanel, atsStatusSourceAStatus=atsStatusSourceAStatus, atsStatusSourceBStatus=atsStatusSourceBStatus, atsStatusPhaseSyncStatus=atsStatusPhaseSyncStatus, atsStatusVoltageOutStatus=atsStatusVoltageOutStatus, atsStatusHardwareStatus=atsStatusHardwareStatus, atsStatusResetValues=atsStatusResetValues, atsStatusResetMaxMinValues=atsStatusResetMaxMinValues, atsStatusInput=atsStatusInput, atsNumInputs=atsNumInputs, atsInputTable=atsInputTable, atsInputEntry=atsInputEntry, atsInputTableIndex=atsInputTableIndex, atsNumInputPhases=atsNumInputPhases, atsInputVoltageOrientation=atsInputVoltageOrientation, atsInputFrequency=atsInputFrequency, atsInputType=atsInputType, atsInputName=atsInputName, atsInputPhaseTable=atsInputPhaseTable, atsInputPhaseEntry=atsInputPhaseEntry, atsInputPhaseTableIndex=atsInputPhaseTableIndex, atsInputPhaseIndex=atsInputPhaseIndex, atsInputVoltage=atsInputVoltage, atsInputMaxVoltage=atsInputMaxVoltage, atsInputMinVoltage=atsInputMinVoltage, atsInputCurrent=atsInputCurrent, atsInputMaxCurrent=atsInputMaxCurrent, atsInputMinCurrent=atsInputMinCurrent, atsInputPower=atsInputPower, atsInputMaxPower=atsInputMaxPower, atsInputMinPower=atsInputMinPower, atsStatusOutput=atsStatusOutput, atsNumOutputs=atsNumOutputs, atsOutputTable=atsOutputTable, atsOutputEntry=atsOutputEntry, atsOutputTableIndex=atsOutputTableIndex, atsNumOutputPhases=atsNumOutputPhases, atsOutputVoltageOrientation=atsOutputVoltageOrientation, atsOutputFrequency=atsOutputFrequency, atsOutputPhaseTable=atsOutputPhaseTable, atsOutputPhaseEntry=atsOutputPhaseEntry)
mibBuilder.exportSymbols("PowerNet-MIB", atsOutputPhaseTableIndex=atsOutputPhaseTableIndex, atsOutputPhaseIndex=atsOutputPhaseIndex, atsOutputVoltage=atsOutputVoltage, atsOutputCurrent=atsOutputCurrent, atsOutputMaxCurrent=atsOutputMaxCurrent, atsOutputMinCurrent=atsOutputMinCurrent, atsOutputLoad=atsOutputLoad, atsOutputMaxLoad=atsOutputMaxLoad, atsOutputMinLoad=atsOutputMinLoad, atsOutputPercentLoad=atsOutputPercentLoad, atsOutputMaxPercentLoad=atsOutputMaxPercentLoad, atsOutputMinPercentLoad=atsOutputMinPercentLoad, atsOutputPower=atsOutputPower, atsOutputMaxPower=atsOutputMaxPower, atsOutputMinPower=atsOutputMinPower, atsOutputPercentPower=atsOutputPercentPower, atsOutputMaxPercentPower=atsOutputMaxPercentPower, atsOutputMinPercentPower=atsOutputMinPercentPower, atsOutputPhaseState=atsOutputPhaseState, atsOutputBankTableSize=atsOutputBankTableSize, atsOutputBankTable=atsOutputBankTable, atsOutputBankEntry=atsOutputBankEntry, atsOutputBankTableIndex=atsOutputBankTableIndex, atsOutputPhase=atsOutputPhase, atsOutputBank=atsOutputBank, atsOutputBankCurrent=atsOutputBankCurrent, atsOutputBankState=atsOutputBankState, atsOutputBankOutputVoltage=atsOutputBankOutputVoltage, atsOutputBankMaxCurrent=atsOutputBankMaxCurrent, atsOutputBankMinCurrent=atsOutputBankMinCurrent, atsOutputBankLoad=atsOutputBankLoad, atsOutputBankMaxLoad=atsOutputBankMaxLoad, atsOutputBankMinLoad=atsOutputBankMinLoad, atsOutputBankPercentLoad=atsOutputBankPercentLoad, atsOutputBankMaxPercentLoad=atsOutputBankMaxPercentLoad, atsOutputBankMinPercentLoad=atsOutputBankMinPercentLoad, atsOutputBankPower=atsOutputBankPower, atsOutputBankMaxPower=atsOutputBankMaxPower, atsOutputBankMinPower=atsOutputBankMinPower, atsOutputBankPercentPower=atsOutputBankPercentPower, atsOutputBankMaxPercentPower=atsOutputBankMaxPercentPower, atsOutputBankMinPercentPower=atsOutputBankMinPercentPower, dc2=dc2, dcmim2Ident=dcmim2Ident, dcmim2IdentSystem=dcmim2IdentSystem, dcmim2IdentSysFWVersion=dcmim2IdentSysFWVersion, dcmim2Control=dcmim2Control, dcmim2ControlSystem=dcmim2ControlSystem, dcmim2ControlRunFunctBatteryTest=dcmim2ControlRunFunctBatteryTest, dcmim2ControlRunCapacityBatteryTest=dcmim2ControlRunCapacityBatteryTest, dcmim2Config=dcmim2Config, dcmim2ConfigSystem=dcmim2ConfigSystem, dcmim2ConfigSysHighTempTrip=dcmim2ConfigSysHighTempTrip, dcmim2ConfigSysHighTempReset=dcmim2ConfigSysHighTempReset, dcmim2ConfigSysLowTempTrip=dcmim2ConfigSysLowTempTrip, dcmim2ConfigSysLowTempReset=dcmim2ConfigSysLowTempReset, dcmim2ConfigBattery=dcmim2ConfigBattery, dcmim2ConfigBattFloatVolt=dcmim2ConfigBattFloatVolt, dcmim2ConfigBattMaxRecharge=dcmim2ConfigBattMaxRecharge, dcmim2ConfigBattMfgCapacity=dcmim2ConfigBattMfgCapacity, dcmim2ConfigBattType=dcmim2ConfigBattType, dcmim2ConfigBattFunctTestDuration=dcmim2ConfigBattFunctTestDuration, dcmim2ConfigBattFunctTestThresh=dcmim2ConfigBattFunctTestThresh, dcmim2ConfigBattCapacityTestPercent=dcmim2ConfigBattCapacityTestPercent, dcmim2ConfigBattCapacityTestEndThresh=dcmim2ConfigBattCapacityTestEndThresh, dcmim2ConfigBattCapacityTestCurrent=dcmim2ConfigBattCapacityTestCurrent, dcmim2ConfigLVD=dcmim2ConfigLVD, dcmim2ConfigLVDTableSize=dcmim2ConfigLVDTableSize, dcmim2ConfigLVDTable=dcmim2ConfigLVDTable, dcmim2ConfigLVDEntry=dcmim2ConfigLVDEntry, dcmim2ConfigLVDIndex=dcmim2ConfigLVDIndex, dcmim2ConfigLVDTrip=dcmim2ConfigLVDTrip, dcmim2ConfigLVDReset=dcmim2ConfigLVDReset, dcmim2ConfigLVDState=dcmim2ConfigLVDState, dcmim2Status=dcmim2Status, dcmim2StatusSystem=dcmim2StatusSystem, dcmim2StatusSysRectCurrent=dcmim2StatusSysRectCurrent, dcmim2StatusSysLoadCurrent=dcmim2StatusSysLoadCurrent, dcmim2StatusSysBusVoltage=dcmim2StatusSysBusVoltage, dcmim2StatusSysAmbientTemp=dcmim2StatusSysAmbientTemp, dcmim2StatusSysUpTime=dcmim2StatusSysUpTime, dcmim2StatusSysTempUnits=dcmim2StatusSysTempUnits, dcmim2StatusRectifier=dcmim2StatusRectifier, dcmim2StatusRectTableSize=dcmim2StatusRectTableSize, dcmim2StatusRectTable=dcmim2StatusRectTable, dcmim2StatusRectEntry=dcmim2StatusRectEntry, dcmim2StatusRectIndex=dcmim2StatusRectIndex, dcmim2StatusRectDevType=dcmim2StatusRectDevType, dcmim2StatusRectID=dcmim2StatusRectID, dcmim2StatusRectPhyAddr=dcmim2StatusRectPhyAddr, dcmim2StatusRectFail=dcmim2StatusRectFail, dcmim2StatusRectCurrent=dcmim2StatusRectCurrent, dcmim2StatusBattery=dcmim2StatusBattery, dcmim2StatusBattFloatVolt=dcmim2StatusBattFloatVolt, dcmim2StatusBattCurrent=dcmim2StatusBattCurrent, dcmim2StatusBattTemp=dcmim2StatusBattTemp, dcmim2StatusBattMfgCapacity=dcmim2StatusBattMfgCapacity, dcmim2StatusBattTestCapacity=dcmim2StatusBattTestCapacity, dcmim2StatusBattFunctTestResult=dcmim2StatusBattFunctTestResult, dcmim2StatusBattCapacityTestResult=dcmim2StatusBattCapacityTestResult, dcmim2StatusLVD=dcmim2StatusLVD, dcmim2StatusLVDTableSize=dcmim2StatusLVDTableSize, dcmim2StatusLVDTable=dcmim2StatusLVDTable, dcmim2StatusLVDEntry=dcmim2StatusLVDEntry, dcmim2StatusLVDIndex=dcmim2StatusLVDIndex, dcmim2StatusLVDState=dcmim2StatusLVDState, dcmim2StatusAlarms=dcmim2StatusAlarms, dcmim2StatusAlarmsTableSize=dcmim2StatusAlarmsTableSize, dcmim2StatusAlarmsTable=dcmim2StatusAlarmsTable, dcmim2StatusAlarmsEntry=dcmim2StatusAlarmsEntry, dcmim2StatusAlarmsIndex=dcmim2StatusAlarmsIndex, dcmim2StatusAlarmsText=dcmim2StatusAlarmsText, environmentalMonitor=environmentalMonitor, external=external, emIdent=emIdent, emIdentFirmwareRevision=emIdentFirmwareRevision, emConfig=emConfig, emConfigProbesNumProbes=emConfigProbesNumProbes, emConfigProbesTable=emConfigProbesTable, emConfigProbesEntry=emConfigProbesEntry, emConfigProbeNumber=emConfigProbeNumber, emConfigProbeName=emConfigProbeName, emConfigProbeHighTempThreshold=emConfigProbeHighTempThreshold, emConfigProbeLowTempThreshold=emConfigProbeLowTempThreshold, emConfigProbeTempUnits=emConfigProbeTempUnits, emConfigProbeHighHumidThreshold=emConfigProbeHighHumidThreshold, emConfigProbeLowHumidThreshold=emConfigProbeLowHumidThreshold)
mibBuilder.exportSymbols("PowerNet-MIB", emConfigProbeHighTempEnable=emConfigProbeHighTempEnable, emConfigProbeLowTempEnable=emConfigProbeLowTempEnable, emConfigProbeHighHumidEnable=emConfigProbeHighHumidEnable, emConfigProbeLowHumidEnable=emConfigProbeLowHumidEnable, emConfigProbeMaxTempThreshold=emConfigProbeMaxTempThreshold, emConfigProbeMinTempThreshold=emConfigProbeMinTempThreshold, emConfigProbeMaxHumidThreshold=emConfigProbeMaxHumidThreshold, emConfigProbeMinHumidThreshold=emConfigProbeMinHumidThreshold, emConfigProbeMaxTempEnable=emConfigProbeMaxTempEnable, emConfigProbeMinTempEnable=emConfigProbeMinTempEnable, emConfigProbeMaxHumidEnable=emConfigProbeMaxHumidEnable, emConfigProbeMinHumidEnable=emConfigProbeMinHumidEnable, emConfigProbeTempHysteresis=emConfigProbeTempHysteresis, emConfigProbeHumidHysteresis=emConfigProbeHumidHysteresis, emConfigProbeLocation=emConfigProbeLocation, emConfigContactsNumContacts=emConfigContactsNumContacts, emConfigContactsTable=emConfigContactsTable, emConfigContactsEntry=emConfigContactsEntry, emConfigContactNumber=emConfigContactNumber, emConfigContactName=emConfigContactName, emConfigContactEnable=emConfigContactEnable, emConfigContactSeverity=emConfigContactSeverity, emConfigContactNormalState=emConfigContactNormalState, emConfigContactLocation=emConfigContactLocation, emStatus=emStatus, emStatusCommStatus=emStatusCommStatus, emStatusProbesNumProbes=emStatusProbesNumProbes, emStatusProbesTable=emStatusProbesTable, emStatusProbesEntry=emStatusProbesEntry, emStatusProbeNumber=emStatusProbeNumber, emStatusProbeName=emStatusProbeName, emStatusProbeStatus=emStatusProbeStatus, emStatusProbeCurrentTemp=emStatusProbeCurrentTemp, emStatusProbeTempUnits=emStatusProbeTempUnits, emStatusProbeCurrentHumid=emStatusProbeCurrentHumid, emStatusProbeHighTempViolation=emStatusProbeHighTempViolation, emStatusProbeLowTempViolation=emStatusProbeLowTempViolation, emStatusProbeHighHumidViolation=emStatusProbeHighHumidViolation, emStatusProbeLowHumidViolation=emStatusProbeLowHumidViolation, emStatusProbeMaxTempViolation=emStatusProbeMaxTempViolation, emStatusProbeMinTempViolation=emStatusProbeMinTempViolation, emStatusProbeMaxHumidViolation=emStatusProbeMaxHumidViolation, emStatusProbeMinHumidViolation=emStatusProbeMinHumidViolation, emStatusContactsNumContacts=emStatusContactsNumContacts, emStatusContactsTable=emStatusContactsTable, emStatusContactsEntry=emStatusContactsEntry, emStatusContactNumber=emStatusContactNumber, emStatusContactName=emStatusContactName, emStatusContactStatus=emStatusContactStatus, integrated=integrated, iemIdent=iemIdent, iemIdentHardwareRevision=iemIdentHardwareRevision, iemConfig=iemConfig, iemConfigProbesNumProbes=iemConfigProbesNumProbes, iemConfigProbesTable=iemConfigProbesTable, iemConfigProbesEntry=iemConfigProbesEntry, iemConfigProbeNumber=iemConfigProbeNumber, iemConfigProbeName=iemConfigProbeName, iemConfigProbeHighTempThreshold=iemConfigProbeHighTempThreshold, iemConfigProbeLowTempThreshold=iemConfigProbeLowTempThreshold, iemConfigProbeTempUnits=iemConfigProbeTempUnits, iemConfigProbeHighHumidThreshold=iemConfigProbeHighHumidThreshold, iemConfigProbeLowHumidThreshold=iemConfigProbeLowHumidThreshold, iemConfigProbeHighTempEnable=iemConfigProbeHighTempEnable, iemConfigProbeLowTempEnable=iemConfigProbeLowTempEnable, iemConfigProbeHighHumidEnable=iemConfigProbeHighHumidEnable, iemConfigProbeLowHumidEnable=iemConfigProbeLowHumidEnable, iemConfigProbeMaxTempThreshold=iemConfigProbeMaxTempThreshold, iemConfigProbeMinTempThreshold=iemConfigProbeMinTempThreshold, iemConfigProbeMaxHumidThreshold=iemConfigProbeMaxHumidThreshold, iemConfigProbeMinHumidThreshold=iemConfigProbeMinHumidThreshold, iemConfigProbeMaxTempEnable=iemConfigProbeMaxTempEnable, iemConfigProbeMinTempEnable=iemConfigProbeMinTempEnable, iemConfigProbeMaxHumidEnable=iemConfigProbeMaxHumidEnable, iemConfigProbeMinHumidEnable=iemConfigProbeMinHumidEnable, iemConfigProbeTempHysteresis=iemConfigProbeTempHysteresis, iemConfigProbeHumidHysteresis=iemConfigProbeHumidHysteresis, iemConfigProbeLocation=iemConfigProbeLocation, iemConfigContactsNumContacts=iemConfigContactsNumContacts, iemConfigContactsTable=iemConfigContactsTable, iemConfigContactsEntry=iemConfigContactsEntry, iemConfigContactNumber=iemConfigContactNumber, iemConfigContactName=iemConfigContactName, iemConfigContactEnable=iemConfigContactEnable, iemConfigContactSeverity=iemConfigContactSeverity, iemConfigContactNormalState=iemConfigContactNormalState, iemConfigContactLocation=iemConfigContactLocation, iemConfigConfigRelaysNumRelays=iemConfigConfigRelaysNumRelays, iemConfigRelaysTable=iemConfigRelaysTable, iemConfigRelaysEntry=iemConfigRelaysEntry, iemConfigRelayNumber=iemConfigRelayNumber, iemConfigRelayName=iemConfigRelayName, iemConfigRelayNormalState=iemConfigRelayNormalState, iemConfigRelayFaultCondition=iemConfigRelayFaultCondition, iemStatus=iemStatus, iemStatusProbesNumProbes=iemStatusProbesNumProbes, iemStatusProbesTable=iemStatusProbesTable, iemStatusProbesEntry=iemStatusProbesEntry, iemStatusProbeNumber=iemStatusProbeNumber, iemStatusProbeName=iemStatusProbeName, iemStatusProbeStatus=iemStatusProbeStatus, iemStatusProbeCurrentTemp=iemStatusProbeCurrentTemp, iemStatusProbeTempUnits=iemStatusProbeTempUnits, iemStatusProbeCurrentHumid=iemStatusProbeCurrentHumid, iemStatusProbeHighTempViolation=iemStatusProbeHighTempViolation, iemStatusProbeLowTempViolation=iemStatusProbeLowTempViolation, iemStatusProbeHighHumidViolation=iemStatusProbeHighHumidViolation, iemStatusProbeLowHumidViolation=iemStatusProbeLowHumidViolation, iemStatusProbeMaxTempViolation=iemStatusProbeMaxTempViolation, iemStatusProbeMinTempViolation=iemStatusProbeMinTempViolation, iemStatusProbeMaxHumidViolation=iemStatusProbeMaxHumidViolation, iemStatusProbeMinHumidViolation=iemStatusProbeMinHumidViolation, iemStatusProbeLocation=iemStatusProbeLocation, iemStatusContactsNumContacts=iemStatusContactsNumContacts, iemStatusContactsTable=iemStatusContactsTable, iemStatusContactsEntry=iemStatusContactsEntry, iemStatusContactNumber=iemStatusContactNumber, iemStatusContactName=iemStatusContactName, iemStatusContactStatus=iemStatusContactStatus, iemStatusRelaysNumRelays=iemStatusRelaysNumRelays, iemStatusRelaysTable=iemStatusRelaysTable, iemStatusRelaysEntry=iemStatusRelaysEntry, iemStatusRelayNumber=iemStatusRelayNumber, iemStatusRelayName=iemStatusRelayName, iemStatusRelayStatus=iemStatusRelayStatus, envMgtSystem=envMgtSystem, emsIdent=emsIdent)
mibBuilder.exportSymbols("PowerNet-MIB", emsIdentEMSName=emsIdentEMSName, emsIdentProductNumber=emsIdentProductNumber, emsIdentFirmwareRev=emsIdentFirmwareRev, emsIdentHardwareRev=emsIdentHardwareRev, emsIdentDateOfManufacture=emsIdentDateOfManufacture, emsIdentSerialNumber=emsIdentSerialNumber, emsOutputRelayControl=emsOutputRelayControl, emsOutputRelayControlTable=emsOutputRelayControlTable, emsOutputRelayControlEntry=emsOutputRelayControlEntry, emsOutputRelayControlOutputRelayIndex=emsOutputRelayControlOutputRelayIndex, emsOutputRelayControlOutputRelayName=emsOutputRelayControlOutputRelayName, emsOutputRelayControlOutputRelayCommand=emsOutputRelayControlOutputRelayCommand, emsOutletControl=emsOutletControl, emsOutletControlTable=emsOutletControlTable, emsOutletControlEntry=emsOutletControlEntry, emsOutletControlOutletIndex=emsOutletControlOutletIndex, emsOutletControlOutletName=emsOutletControlOutletName, emsOutletControlOutletCommand=emsOutletControlOutletCommand, emsSensorControl=emsSensorControl, emsSensorControlTable=emsSensorControlTable, emsSensorControlEntry=emsSensorControlEntry, emsSensorControlSensorIndex=emsSensorControlSensorIndex, emsSensorControlSensorSystemName=emsSensorControlSensorSystemName, emsSensorControlSensorUserName=emsSensorControlSensorUserName, emsSensorControlSensorCommand=emsSensorControlSensorCommand, emsAlarmDeviceControl=emsAlarmDeviceControl, emsAlarmDeviceControlTable=emsAlarmDeviceControlTable, emsAlarmDeviceControlEntry=emsAlarmDeviceControlEntry, emsAlarmDeviceControlDeviceIndex=emsAlarmDeviceControlDeviceIndex, emsAlarmDeviceControlDeviceName=emsAlarmDeviceControlDeviceName, emsAlarmDeviceControlDeviceCommand=emsAlarmDeviceControlDeviceCommand, emsConfig=emsConfig, emsConfigName=emsConfigName, emsConfigCheckLogLight=emsConfigCheckLogLight, emsProbeConfig=emsProbeConfig, emsProbeConfigTable=emsProbeConfigTable, emsProbeConfigEntry=emsProbeConfigEntry, emsProbeConfigProbeIndex=emsProbeConfigProbeIndex, emsProbeConfigProbeName=emsProbeConfigProbeName, emsProbeConfigProbeHighTempThresh=emsProbeConfigProbeHighTempThresh, emsProbeConfigProbeLowTempThresh=emsProbeConfigProbeLowTempThresh, emsProbeConfigProbeHighHumidityThresh=emsProbeConfigProbeHighHumidityThresh, emsProbeConfigProbeLowHumidityThresh=emsProbeConfigProbeLowHumidityThresh, emsProbeConfigProbeMaxTempThresh=emsProbeConfigProbeMaxTempThresh, emsProbeConfigProbeMinTempThresh=emsProbeConfigProbeMinTempThresh, emsProbeConfigProbeDeltaTemp=emsProbeConfigProbeDeltaTemp, emsProbeConfigProbeMaxHumidityThresh=emsProbeConfigProbeMaxHumidityThresh, emsProbeConfigProbeMinHumidityThresh=emsProbeConfigProbeMinHumidityThresh, emsProbeConfigProbeDeltaHumidity=emsProbeConfigProbeDeltaHumidity, emsProbeConfigProbeSTIncTempVariance=emsProbeConfigProbeSTIncTempVariance, emsProbeConfigProbeSTIncTempTime=emsProbeConfigProbeSTIncTempTime, emsProbeConfigProbeSTDecTempVariance=emsProbeConfigProbeSTDecTempVariance, emsProbeConfigProbeSTDecTempTime=emsProbeConfigProbeSTDecTempTime, emsProbeConfigProbeLTIncTempVariance=emsProbeConfigProbeLTIncTempVariance, emsProbeConfigProbeLTIncTempTime=emsProbeConfigProbeLTIncTempTime, emsProbeConfigProbeLTDecTempVariance=emsProbeConfigProbeLTDecTempVariance, emsProbeConfigProbeLTDecTempTime=emsProbeConfigProbeLTDecTempTime, emsInputContactConfig=emsInputContactConfig, emsInputContactConfigTable=emsInputContactConfigTable, emsInputContactConfigEntry=emsInputContactConfigEntry, emsInputContactConfigInputContactIndex=emsInputContactConfigInputContactIndex, emsInputContactConfigInputContactName=emsInputContactConfigInputContactName, emsInputContactConfigInputContactNormalState=emsInputContactConfigInputContactNormalState, emsOutputRelayConfig=emsOutputRelayConfig, emsOutputRelayConfigTable=emsOutputRelayConfigTable, emsOutputRelayConfigEntry=emsOutputRelayConfigEntry, emsOutputRelayConfigOutputRelayIndex=emsOutputRelayConfigOutputRelayIndex, emsOutputRelayConfigOutputRelayName=emsOutputRelayConfigOutputRelayName, emsOutputRelayConfigOutputRelayNormalState=emsOutputRelayConfigOutputRelayNormalState, emsOutletConfig=emsOutletConfig, emsOutletConfigTable=emsOutletConfigTable, emsOutletConfigEntry=emsOutletConfigEntry, emsOutletConfigOutletIndex=emsOutletConfigOutletIndex, emsOutletConfigOutletName=emsOutletConfigOutletName, emsOutletConfigOutletNormalState=emsOutletConfigOutletNormalState, emsSensorConfig=emsSensorConfig, emsSensorConfigTable=emsSensorConfigTable, emsSensorConfigEntry=emsSensorConfigEntry, emsSensorConfigSensorIndex=emsSensorConfigSensorIndex, emsSensorConfigSensorSystemName=emsSensorConfigSensorSystemName, emsSensorConfigSensorUserName=emsSensorConfigSensorUserName, emsSensorConfigSensorNormalState=emsSensorConfigSensorNormalState, emsSensorConfigSensorAlarmDelay=emsSensorConfigSensorAlarmDelay, emsStatus=emsStatus, emsStatusEMSName=emsStatusEMSName, emsStatusCommStatus=emsStatusCommStatus, emsStatusProbeCount=emsStatusProbeCount, emsStatusInputContactCount=emsStatusInputContactCount, emsStatusOutputRelayCount=emsStatusOutputRelayCount, emsStatusOutletCount=emsStatusOutletCount, emsStatusSensorCount=emsStatusSensorCount, emsStatusAlinkAruDeviceCount=emsStatusAlinkAruDeviceCount, emsStatusAlinkProbeDeviceCount=emsStatusAlinkProbeDeviceCount, emsStatusAlarmDeviceCount=emsStatusAlarmDeviceCount, emsStatusSysTempUnits=emsStatusSysTempUnits, emsStatusCheckLogLight=emsStatusCheckLogLight, emsStatusHardwareStatus=emsStatusHardwareStatus, emsProbeStatus=emsProbeStatus, emsProbeStatusTable=emsProbeStatusTable, emsProbeStatusEntry=emsProbeStatusEntry, emsProbeStatusProbeIndex=emsProbeStatusProbeIndex, emsProbeStatusProbeName=emsProbeStatusProbeName, emsProbeStatusProbeTemperature=emsProbeStatusProbeTemperature, emsProbeStatusProbeHighTempThresh=emsProbeStatusProbeHighTempThresh, emsProbeStatusProbeLowTempThresh=emsProbeStatusProbeLowTempThresh, emsProbeStatusProbeHumidity=emsProbeStatusProbeHumidity, emsProbeStatusProbeHighHumidityThresh=emsProbeStatusProbeHighHumidityThresh, emsProbeStatusProbeLowHumidityThresh=emsProbeStatusProbeLowHumidityThresh, emsProbeStatusProbeSerialNumber=emsProbeStatusProbeSerialNumber, emsProbeStatusProbeCommStatus=emsProbeStatusProbeCommStatus, emsProbeStatusProbeAlarmStatus=emsProbeStatusProbeAlarmStatus, emsProbeStatusProbeMaxTempThresh=emsProbeStatusProbeMaxTempThresh, emsProbeStatusProbeMinTempThresh=emsProbeStatusProbeMinTempThresh, emsProbeStatusProbeMaxHumidityThresh=emsProbeStatusProbeMaxHumidityThresh, emsProbeStatusProbeMinHumidityThresh=emsProbeStatusProbeMinHumidityThresh, emsInputContactStatus=emsInputContactStatus, emsInputContactStatusTable=emsInputContactStatusTable, emsInputContactStatusEntry=emsInputContactStatusEntry, emsInputContactStatusInputContactIndex=emsInputContactStatusInputContactIndex, emsInputContactStatusInputContactName=emsInputContactStatusInputContactName, emsInputContactStatusInputContactState=emsInputContactStatusInputContactState, emsInputContactStatusInputContactNormalState=emsInputContactStatusInputContactNormalState, emsOutputRelayStatus=emsOutputRelayStatus, emsOutputRelayStatusTable=emsOutputRelayStatusTable, emsOutputRelayStatusEntry=emsOutputRelayStatusEntry, emsOutputRelayStatusOutputRelayIndex=emsOutputRelayStatusOutputRelayIndex, emsOutputRelayStatusOutputRelayName=emsOutputRelayStatusOutputRelayName)
mibBuilder.exportSymbols("PowerNet-MIB", emsOutputRelayStatusOutputRelayState=emsOutputRelayStatusOutputRelayState, emsOutputRelayStatusOutputRelayNormalState=emsOutputRelayStatusOutputRelayNormalState, emsOutletStatus=emsOutletStatus, emsOutletStatusTable=emsOutletStatusTable, emsOutletStatusEntry=emsOutletStatusEntry, emsOutletStatusOutletIndex=emsOutletStatusOutletIndex, emsOutletStatusOutletName=emsOutletStatusOutletName, emsOutletStatusOutletState=emsOutletStatusOutletState, emsOutletStatusOutletNormalState=emsOutletStatusOutletNormalState, emsAlarmDeviceStatus=emsAlarmDeviceStatus, emsAlarmDeviceStatusTable=emsAlarmDeviceStatusTable, emsAlarmDeviceStatusEntry=emsAlarmDeviceStatusEntry, emsAlarmDeviceStatusDeviceIndex=emsAlarmDeviceStatusDeviceIndex, emsAlarmDeviceStatusDeviceName=emsAlarmDeviceStatusDeviceName, emsAlarmDeviceStatusDeviceState=emsAlarmDeviceStatusDeviceState, emsSensorStatus=emsSensorStatus, emsSensorStatusTable=emsSensorStatusTable, emsSensorStatusEntry=emsSensorStatusEntry, emsSensorStatusSensorIndex=emsSensorStatusSensorIndex, emsSensorStatusSensorSystemName=emsSensorStatusSensorSystemName, emsSensorStatusSensorName=emsSensorStatusSensorName, emsSensorStatusSensorState=emsSensorStatusSensorState, emsSensorStatusSensorNormalState=emsSensorStatusSensorNormalState, emsSensorStatusSensorAlarmDelay=emsSensorStatusSensorAlarmDelay, modEnvMgr=modEnvMgr, memModules=memModules, memModulesStatusTableSize=memModulesStatusTableSize, memModulesStatusTable=memModulesStatusTable, memModulesStatusEntry=memModulesStatusEntry, memModulesStatusModuleNumber=memModulesStatusModuleNumber, memModulesStatusModuleName=memModulesStatusModuleName, memModulesStatusModuleLocation=memModulesStatusModuleLocation, memModulesStatusModelNumber=memModulesStatusModelNumber, memModulesStatusSerialNumber=memModulesStatusSerialNumber, memModulesStatusFirmwareRev=memModulesStatusFirmwareRev, memModulesStatusHardwareRev=memModulesStatusHardwareRev, memModulesConfigTableSize=memModulesConfigTableSize, memModulesConfigTable=memModulesConfigTable, memModulesConfigEntry=memModulesConfigEntry, memModulesConfigModuleNumber=memModulesConfigModuleNumber, memModulesConfigModuleName=memModulesConfigModuleName, memModulesConfigModuleLocation=memModulesConfigModuleLocation, memSensors=memSensors, memSensorsStatusSysTempUnits=memSensorsStatusSysTempUnits, memSensorsStatusTableSize=memSensorsStatusTableSize, memSensorsStatusTable=memSensorsStatusTable, memSensorsStatusEntry=memSensorsStatusEntry, memSensorsStatusModuleNumber=memSensorsStatusModuleNumber, memSensorsStatusSensorNumber=memSensorsStatusSensorNumber, memSensorsStatusSensorName=memSensorsStatusSensorName, memSensorsStatusSensorLocation=memSensorsStatusSensorLocation, memSensorsTemperature=memSensorsTemperature, memSensorsHumidity=memSensorsHumidity, memSensorsCommStatus=memSensorsCommStatus, memSensorsAlarmStatus=memSensorsAlarmStatus, memSensorsConfigTableSize=memSensorsConfigTableSize, memSensorsConfigTable=memSensorsConfigTable, memSensorsConfigEntry=memSensorsConfigEntry, memSensorsConfigModuleNumber=memSensorsConfigModuleNumber, memSensorsConfigSensorNumber=memSensorsConfigSensorNumber, memSensorsName=memSensorsName, memSensorsLocation=memSensorsLocation, memSensorsAlarmGeneration=memSensorsAlarmGeneration, memSensorsTempMaxThresh=memSensorsTempMaxThresh, memSensorsTempHighThresh=memSensorsTempHighThresh, memSensorsTempLowThresh=memSensorsTempLowThresh, memSensorsTempMinThresh=memSensorsTempMinThresh, memSensorsTempThreshHysteresis=memSensorsTempThreshHysteresis, memSensorsTempShortDecRateThreshValue=memSensorsTempShortDecRateThreshValue, memSensorsTempShortDecRateThreshTime=memSensorsTempShortDecRateThreshTime, memSensorsTempShortIncRateThreshValue=memSensorsTempShortIncRateThreshValue, memSensorsTempShortIncRateThreshTime=memSensorsTempShortIncRateThreshTime, memSensorsTempLongDecRateThreshValue=memSensorsTempLongDecRateThreshValue, memSensorsTempLongDecRateThreshTime=memSensorsTempLongDecRateThreshTime, memSensorsTempLongIncRateThreshValue=memSensorsTempLongIncRateThreshValue, memSensorsTempLongIncRateThreshTime=memSensorsTempLongIncRateThreshTime, memSensorsHumidityMaxThresh=memSensorsHumidityMaxThresh, memSensorsHumidityHighThresh=memSensorsHumidityHighThresh, memSensorsHumidityLowThresh=memSensorsHumidityLowThresh, memSensorsHumidityMinThresh=memSensorsHumidityMinThresh, memSensorsHumidityThreshHysteresis=memSensorsHumidityThreshHysteresis, memInputs=memInputs, memInputsStatusTableSize=memInputsStatusTableSize, memInputsStatusTable=memInputsStatusTable, memInputsStatusEntry=memInputsStatusEntry, memInputsStatusModuleNumber=memInputsStatusModuleNumber, memInputsStatusInputNumber=memInputsStatusInputNumber, memInputsStatusInputName=memInputsStatusInputName, memInputsStatusInputLocation=memInputsStatusInputLocation, memInputsStatusCurrentState=memInputsStatusCurrentState, memInputsStatusCurrentAnalogValue=memInputsStatusCurrentAnalogValue, memInputsStatusAlarmStatus=memInputsStatusAlarmStatus, memInputsCommStatus=memInputsCommStatus, memInputsConfigTableSize=memInputsConfigTableSize, memInputsConfigTable=memInputsConfigTable, memInputsConfigEntry=memInputsConfigEntry, memInputsConfigModuleNumber=memInputsConfigModuleNumber, memInputsConfigInputNumber=memInputsConfigInputNumber, memInputName=memInputName, memInputLocation=memInputLocation, memInputType=memInputType, memInputAlarmGeneration=memInputAlarmGeneration, memInputNormalState=memInputNormalState, memInputAbnormalSeverity=memInputAbnormalSeverity, memInputNumberCalibrationPoints=memInputNumberCalibrationPoints, memInputAnalogCalibrationPoint1=memInputAnalogCalibrationPoint1, memInputAnalogCalibrationPoint2=memInputAnalogCalibrationPoint2, memInputAnalogCalibrationPoint3=memInputAnalogCalibrationPoint3, memInputAnalogCalibrationPoint4=memInputAnalogCalibrationPoint4, memInputAnalogCalibrationPoint5=memInputAnalogCalibrationPoint5, memInputAnalogCalibrationPoint1Value=memInputAnalogCalibrationPoint1Value, memInputAnalogCalibrationPoint2Value=memInputAnalogCalibrationPoint2Value, memInputAnalogCalibrationPoint3Value=memInputAnalogCalibrationPoint3Value, memInputAnalogCalibrationPoint4Value=memInputAnalogCalibrationPoint4Value, memInputAnalogCalibrationPoint5Value=memInputAnalogCalibrationPoint5Value, memInputAnalogMeasurementUnits=memInputAnalogMeasurementUnits, memInputAnalogMaxThresh=memInputAnalogMaxThresh, memInputAnalogHighThresh=memInputAnalogHighThresh, memInputAnalogLowThresh=memInputAnalogLowThresh, memInputAnalogMinThresh=memInputAnalogMinThresh, memInputAnalogThreshHysteresis=memInputAnalogThreshHysteresis, memOutputs=memOutputs, memOutputStatusTableSize=memOutputStatusTableSize, memOutputStatusTable=memOutputStatusTable, memOutputStatusEntry=memOutputStatusEntry, memOutputStatusModuleNumber=memOutputStatusModuleNumber, memOutputStatusOutputNumber=memOutputStatusOutputNumber)
mibBuilder.exportSymbols("PowerNet-MIB", memOutputStatusOutputName=memOutputStatusOutputName, memOutputStatusOutputLocation=memOutputStatusOutputLocation, memOutputStatusCurrentState=memOutputStatusCurrentState, memOutputConfigTableSize=memOutputConfigTableSize, memOutputConfigTable=memOutputConfigTable, memOutputConfigEntry=memOutputConfigEntry, memOutputConfigModuleNumber=memOutputConfigModuleNumber, memOutputConfigOutputNumber=memOutputConfigOutputNumber, memOutputName=memOutputName, memOutputLocation=memOutputLocation, memOutputNormalState=memOutputNormalState, memOutputAction=memOutputAction, memOutlets=memOutlets, memOutletStatusTableSize=memOutletStatusTableSize, memOutletStatusTable=memOutletStatusTable, memOutletStatusEntry=memOutletStatusEntry, memOutletStatusModuleNumber=memOutletStatusModuleNumber, memOutletStatusOutletNumber=memOutletStatusOutletNumber, memOutletStatusOutletName=memOutletStatusOutletName, memOutletStatusOutletLocation=memOutletStatusOutletLocation, memOutletStatusCurrentState=memOutletStatusCurrentState, memOutletConfigTableSize=memOutletConfigTableSize, memOutletConfigTable=memOutletConfigTable, memOutletConfigEntry=memOutletConfigEntry, memOutletConfigModuleNumber=memOutletConfigModuleNumber, memOutletConfigOutletNumber=memOutletConfigOutletNumber, memOutletName=memOutletName, memOutletLocation=memOutletLocation, memOutletNormalState=memOutletNormalState, memOutletAction=memOutletAction, memBeacons=memBeacons, memBeaconStatusTableSize=memBeaconStatusTableSize, memBeaconStatusTable=memBeaconStatusTable, memBeaconStatusEntry=memBeaconStatusEntry, memBeaconStatusModuleNumber=memBeaconStatusModuleNumber, memBeaconStatusBeaconNumber=memBeaconStatusBeaconNumber, memBeaconStatusBeaconName=memBeaconStatusBeaconName, memBeaconStatusBeaconLocation=memBeaconStatusBeaconLocation, memBeaconStatusCurrentState=memBeaconStatusCurrentState, memBeaconConfigTableSize=memBeaconConfigTableSize, memBeaconConfigTable=memBeaconConfigTable, memBeaconConfigEntry=memBeaconConfigEntry, memBeaconConfigModuleNumber=memBeaconConfigModuleNumber, memBeaconConfigBeaconNumber=memBeaconConfigBeaconNumber, memBeaconConfigName=memBeaconConfigName, memBeaconConfigLocation=memBeaconConfigLocation, memBeaconAction=memBeaconAction, netlock=netlock, nlIdent=nlIdent, nlStatus=nlStatus, rPDU=rPDU, rPDUIdent=rPDUIdent, rPDUIdentName=rPDUIdentName, rPDUIdentHardwareRev=rPDUIdentHardwareRev, rPDUIdentFirmwareRev=rPDUIdentFirmwareRev, rPDUIdentDateOfManufacture=rPDUIdentDateOfManufacture, rPDUIdentModelNumber=rPDUIdentModelNumber, rPDUIdentSerialNumber=rPDUIdentSerialNumber, rPDUIdentDeviceRating=rPDUIdentDeviceRating, rPDUIdentDeviceNumOutlets=rPDUIdentDeviceNumOutlets, rPDUIdentDeviceNumPhases=rPDUIdentDeviceNumPhases, rPDUIdentDeviceNumBreakers=rPDUIdentDeviceNumBreakers, rPDUIdentDeviceBreakerRating=rPDUIdentDeviceBreakerRating, rPDUIdentDeviceOrientation=rPDUIdentDeviceOrientation, rPDUIdentDeviceOutletLayout=rPDUIdentDeviceOutletLayout, rPDUIdentDeviceDisplayOrientation=rPDUIdentDeviceDisplayOrientation, rPDUIdentDeviceLinetoLineVoltage=rPDUIdentDeviceLinetoLineVoltage, rPDUIdentDevicePowerWatts=rPDUIdentDevicePowerWatts, rPDUIdentDevicePowerFactor=rPDUIdentDevicePowerFactor, rPDUIdentDevicePowerVA=rPDUIdentDevicePowerVA, rPDUIdentDeviceLinetoNeutralVoltage=rPDUIdentDeviceLinetoNeutralVoltage, rPDULoad=rPDULoad, rPDULoadDevice=rPDULoadDevice, rPDULoadDevMaxPhaseLoad=rPDULoadDevMaxPhaseLoad, rPDULoadDevNumPhases=rPDULoadDevNumPhases, rPDULoadDevMaxBankLoad=rPDULoadDevMaxBankLoad, rPDULoadDevNumBanks=rPDULoadDevNumBanks, rPDULoadDevBankTableSize=rPDULoadDevBankTableSize, rPDULoadDevBankTable=rPDULoadDevBankTable, rPDULoadDevBankEntry=rPDULoadDevBankEntry, rPDULoadDevBankIndex=rPDULoadDevBankIndex, rPDULoadDevBankNumber=rPDULoadDevBankNumber, rPDULoadDevBankMaxLoad=rPDULoadDevBankMaxLoad, rPDULoadDevMaxOutletTableSize=rPDULoadDevMaxOutletTableSize, rPDULoadDevMaxOutletTable=rPDULoadDevMaxOutletTable, rPDULoadDevMaxOutletEntry=rPDULoadDevMaxOutletEntry, rPDULoadDevOutletIndex=rPDULoadDevOutletIndex, rPDULoadDevOutletNumber=rPDULoadDevOutletNumber, rPDULoadDevMaxOutletLoad=rPDULoadDevMaxOutletLoad, rPDULoadPhaseConfig=rPDULoadPhaseConfig, rPDULoadPhaseConfigTable=rPDULoadPhaseConfigTable, rPDULoadPhaseConfigEntry=rPDULoadPhaseConfigEntry, rPDULoadPhaseConfigIndex=rPDULoadPhaseConfigIndex, rPDULoadPhaseConfigLowLoadThreshold=rPDULoadPhaseConfigLowLoadThreshold, rPDULoadPhaseConfigNearOverloadThreshold=rPDULoadPhaseConfigNearOverloadThreshold, rPDULoadPhaseConfigOverloadThreshold=rPDULoadPhaseConfigOverloadThreshold, rPDULoadPhaseConfigAlarm=rPDULoadPhaseConfigAlarm, rPDULoadStatus=rPDULoadStatus, rPDULoadStatusTable=rPDULoadStatusTable, rPDULoadStatusEntry=rPDULoadStatusEntry, rPDULoadStatusIndex=rPDULoadStatusIndex, rPDULoadStatusLoad=rPDULoadStatusLoad, rPDULoadStatusLoadState=rPDULoadStatusLoadState, rPDULoadStatusPhaseNumber=rPDULoadStatusPhaseNumber, rPDULoadStatusBankNumber=rPDULoadStatusBankNumber, rPDULoadBankConfig=rPDULoadBankConfig, rPDULoadBankConfigTable=rPDULoadBankConfigTable, rPDULoadBankConfigEntry=rPDULoadBankConfigEntry, rPDULoadBankConfigIndex=rPDULoadBankConfigIndex, rPDULoadBankConfigLowLoadThreshold=rPDULoadBankConfigLowLoadThreshold, rPDULoadBankConfigNearOverloadThreshold=rPDULoadBankConfigNearOverloadThreshold, rPDULoadBankConfigOverloadThreshold=rPDULoadBankConfigOverloadThreshold, rPDULoadBankConfigAlarm=rPDULoadBankConfigAlarm, rPDUOutlet=rPDUOutlet, rPDUOutletDevice=rPDUOutletDevice, rPDUOutletDevCommand=rPDUOutletDevCommand, rPDUOutletDevColdstartDelay=rPDUOutletDevColdstartDelay, rPDUOutletDevNumCntrlOutlets=rPDUOutletDevNumCntrlOutlets, rPDUOutletDevNumTotalOutlets=rPDUOutletDevNumTotalOutlets, rPDUOutletDevMonitoredOutlets=rPDUOutletDevMonitoredOutlets, rPDUOutletPhase=rPDUOutletPhase, rPDUOutletPhaseTable=rPDUOutletPhaseTable, rPDUOutletPhaseEntry=rPDUOutletPhaseEntry, rPDUOutletPhaseIndex=rPDUOutletPhaseIndex, rPDUOutletPhaseOverloadRestriction=rPDUOutletPhaseOverloadRestriction, rPDUOutletControl=rPDUOutletControl, rPDUOutletControlTable=rPDUOutletControlTable)
mibBuilder.exportSymbols("PowerNet-MIB", rPDUOutletControlEntry=rPDUOutletControlEntry, rPDUOutletControlIndex=rPDUOutletControlIndex, rPDUOutletControlOutletName=rPDUOutletControlOutletName, rPDUOutletControlOutletPhase=rPDUOutletControlOutletPhase, rPDUOutletControlOutletCommand=rPDUOutletControlOutletCommand, rPDUOutletControlOutletBank=rPDUOutletControlOutletBank, rPDUOutletConfig=rPDUOutletConfig, rPDUOutletConfigTable=rPDUOutletConfigTable, rPDUOutletConfigEntry=rPDUOutletConfigEntry, rPDUOutletConfigIndex=rPDUOutletConfigIndex, rPDUOutletConfigOutletName=rPDUOutletConfigOutletName, rPDUOutletConfigOutletPhase=rPDUOutletConfigOutletPhase, rPDUOutletConfigPowerOnTime=rPDUOutletConfigPowerOnTime, rPDUOutletConfigPowerOffTime=rPDUOutletConfigPowerOffTime, rPDUOutletConfigRebootDuration=rPDUOutletConfigRebootDuration, rPDUOutletConfigOutletBank=rPDUOutletConfigOutletBank, rPDUOutletConfigMonitoredTableSize=rPDUOutletConfigMonitoredTableSize, rPDUOutletConfigMonitoredTable=rPDUOutletConfigMonitoredTable, rPDUOutletConfigMonitoredEntry=rPDUOutletConfigMonitoredEntry, rPDUOutletConfigMonitoredIndex=rPDUOutletConfigMonitoredIndex, rPDUOutletConfigMonitoredName=rPDUOutletConfigMonitoredName, rPDUOutletConfigMonitoredNumber=rPDUOutletConfigMonitoredNumber, rPDUOutletConfigMonitoredLowLoadThreshold=rPDUOutletConfigMonitoredLowLoadThreshold, rPDUOutletConfigMonitoredNearOverloadThreshold=rPDUOutletConfigMonitoredNearOverloadThreshold, rPDUOutletConfigMonitoredOverloadThreshold=rPDUOutletConfigMonitoredOverloadThreshold, rPDUOutletStatus=rPDUOutletStatus, rPDUOutletStatusTable=rPDUOutletStatusTable, rPDUOutletStatusEntry=rPDUOutletStatusEntry, rPDUOutletStatusIndex=rPDUOutletStatusIndex, rPDUOutletStatusOutletName=rPDUOutletStatusOutletName, rPDUOutletStatusOutletPhase=rPDUOutletStatusOutletPhase, rPDUOutletStatusOutletState=rPDUOutletStatusOutletState, rPDUOutletStatusCommandPending=rPDUOutletStatusCommandPending, rPDUOutletStatusOutletBank=rPDUOutletStatusOutletBank, rPDUOutletStatusLoad=rPDUOutletStatusLoad, rPDUOutletBank=rPDUOutletBank, rPDUOutletBankTable=rPDUOutletBankTable, rPDUOutletBankEntry=rPDUOutletBankEntry, rPDUOutletBankIndex=rPDUOutletBankIndex, rPDUOutletBankOverloadRestriction=rPDUOutletBankOverloadRestriction, rPDUPowerSupply=rPDUPowerSupply, rPDUPowerSupplyDevice=rPDUPowerSupplyDevice, rPDUPowerSupply1Status=rPDUPowerSupply1Status, rPDUPowerSupply2Status=rPDUPowerSupply2Status, rPDUPowerSupplyAlarm=rPDUPowerSupplyAlarm, rPDUStatus=rPDUStatus, rPDUStatusBankTableSize=rPDUStatusBankTableSize, rPDUStatusBankTable=rPDUStatusBankTable, rPDUStatusBankEntry=rPDUStatusBankEntry, rPDUStatusBankIndex=rPDUStatusBankIndex, rPDUStatusBankNumber=rPDUStatusBankNumber, rPDUStatusBankState=rPDUStatusBankState, rPDUStatusPhaseTableSize=rPDUStatusPhaseTableSize, rPDUStatusPhaseTable=rPDUStatusPhaseTable, rPDUStatusPhaseEntry=rPDUStatusPhaseEntry, rPDUStatusPhaseIndex=rPDUStatusPhaseIndex, rPDUStatusPhaseNumber=rPDUStatusPhaseNumber, rPDUStatusPhaseState=rPDUStatusPhaseState, rPDUStatusOutletTableSize=rPDUStatusOutletTableSize, rPDUStatusOutletTable=rPDUStatusOutletTable, rPDUStatusOutletEntry=rPDUStatusOutletEntry, rPDUStatusOutletIndex=rPDUStatusOutletIndex, rPDUStatusOutletNumber=rPDUStatusOutletNumber, rPDUStatusOutletState=rPDUStatusOutletState, airConditioners=airConditioners, airFM=airFM, airFMIdent=airFMIdent, airFMIdentName=airFMIdentName, airFMIdentTableSize=airFMIdentTableSize, airFMIdentTable=airFMIdentTable, airFMIdentEntry=airFMIdentEntry, airFMIdentModuleIndex=airFMIdentModuleIndex, airFMIdentModuleModelNumber=airFMIdentModuleModelNumber, airFMIdentModuleDateOfMfg=airFMIdentModuleDateOfMfg, airFMIdentModuleSerialNumber=airFMIdentModuleSerialNumber, airFMIdentModuleFirmwareRev=airFMIdentModuleFirmwareRev, airFMIdentModuleHardwareRev=airFMIdentModuleHardwareRev, airFMIdentLocation=airFMIdentLocation, airFMIdentContact=airFMIdentContact, airFMStatus=airFMStatus, airFMStatusSystemOn=airFMStatusSystemOn, airFMStatusSystemAverageRetTempC=airFMStatusSystemAverageRetTempC, airFMStatusSystemAverageRetTempF=airFMStatusSystemAverageRetTempF, airFMStatusSystemAverageRetHum=airFMStatusSystemAverageRetHum, airFMStatusSystemActionTempC=airFMStatusSystemActionTempC, airFMStatusSystemActionTempF=airFMStatusSystemActionTempF, airFMStatusSystemActionHum=airFMStatusSystemActionHum, airFMStatusSystemRemoteHighTempC=airFMStatusSystemRemoteHighTempC, airFMStatusSystemRemoteHighTempF=airFMStatusSystemRemoteHighTempF, airFMStatusSystemRemoteAvgTempC=airFMStatusSystemRemoteAvgTempC, airFMStatusSystemRemoteAvgTempF=airFMStatusSystemRemoteAvgTempF, airFMStatusSystemRemoteAvgHum=airFMStatusSystemRemoteAvgHum, airFMStatusSystemRemoteLowTempC=airFMStatusSystemRemoteLowTempC, airFMStatusSystemRemoteLowTempF=airFMStatusSystemRemoteLowTempF, airFMStatusSystemCoolingEnabled=airFMStatusSystemCoolingEnabled, airFMStatusSystemReheatingEnabled=airFMStatusSystemReheatingEnabled, airFMStatusSystemHumidifyEnabled=airFMStatusSystemHumidifyEnabled, airFMStatusSystemDehumidifyEnabled=airFMStatusSystemDehumidifyEnabled, airFMStatusModuleTableSize=airFMStatusModuleTableSize, airFMStatusModuleTable=airFMStatusModuleTable, airFMStatusModuleEntry=airFMStatusModuleEntry, airFMStatusModuleIndex=airFMStatusModuleIndex, airFMStatusModuleOutputCapacity=airFMStatusModuleOutputCapacity, airFMStatusModuleSupplyTempC=airFMStatusModuleSupplyTempC, airFMStatusModuleSupplyTempF=airFMStatusModuleSupplyTempF, airFMStatusModuleSupplyHum=airFMStatusModuleSupplyHum, airFMStatusModuleReturnTempC=airFMStatusModuleReturnTempC, airFMStatusModuleReturnTempF=airFMStatusModuleReturnTempF, airFMStatusModuleReturnHum=airFMStatusModuleReturnHum, airFMGroup=airFMGroup, airFMGroupSysStatus=airFMGroupSysStatus, airFMGroupSysRuntime=airFMGroupSysRuntime, airFMGroupSysRole=airFMGroupSysRole, airFMGroupSysRoles=airFMGroupSysRoles, airFMGroupSysRolesTableSize=airFMGroupSysRolesTableSize, airFMGroupSysRolesTable=airFMGroupSysRolesTable, airFMGroupSysRolesEntry=airFMGroupSysRolesEntry, airFMGroupSysIndex=airFMGroupSysIndex, airFMGroupSysRoleStatus=airFMGroupSysRoleStatus, airFMGroupSysPresentRole=airFMGroupSysPresentRole, airFMGroupSysManualRoleSetting=airFMGroupSysManualRoleSetting, airFMGroupSysRunHours=airFMGroupSysRunHours, airFMGroupSysComm=airFMGroupSysComm, airFMGroupSysIPAddress=airFMGroupSysIPAddress, airFMGroupSysRoleAssignment=airFMGroupSysRoleAssignment, airFMGroupAutoRoleNumPrimary=airFMGroupAutoRoleNumPrimary, airFMGroupCfg=airFMGroupCfg)
mibBuilder.exportSymbols("PowerNet-MIB", airFMGroupCfgName=airFMGroupCfgName, airFMGroupCfgNumSystems=airFMGroupCfgNumSystems, airFMGroupCfgIdleBlower=airFMGroupCfgIdleBlower, airFMGroupCfgShutdownSmoke=airFMGroupCfgShutdownSmoke, airFMGroupCfgShutdownFire=airFMGroupCfgShutdownFire, airFMGroupCfgFailoverCommLoss=airFMGroupCfgFailoverCommLoss, airFMGroupCfgDmdFightStatus=airFMGroupCfgDmdFightStatus, airFMGroupCfgDmdFightSetting=airFMGroupCfgDmdFightSetting, airFMGroupCfgSetpointShareStatus=airFMGroupCfgSetpointShareStatus, airFMGroupCfgSetpointShareSetting=airFMGroupCfgSetpointShareSetting, airFMGroupCfgResetFieldServiceDefaults=airFMGroupCfgResetFieldServiceDefaults, airFMGroupLoadShare=airFMGroupLoadShare, airFMGroupLoadShareCoolRequests=airFMGroupLoadShareCoolRequests, airFMGroupLoadShareCoolThreshC=airFMGroupLoadShareCoolThreshC, airFMGroupLoadShareCoolThreshF=airFMGroupLoadShareCoolThreshF, airFMGroupLoadShareReheatRequests=airFMGroupLoadShareReheatRequests, airFMGroupLoadShareReheatThreshC=airFMGroupLoadShareReheatThreshC, airFMGroupLoadShareReheatThreshF=airFMGroupLoadShareReheatThreshF, airFMGroupLoadShareHumRequests=airFMGroupLoadShareHumRequests, airFMGroupLoadShareHumThresh=airFMGroupLoadShareHumThresh, airFMGroupLoadShareDehumRequests=airFMGroupLoadShareDehumRequests, airFMGroupLoadShareDehumThresh=airFMGroupLoadShareDehumThresh, airFMGroupFailover=airFMGroupFailover, airFMGroupFailoverSys=airFMGroupFailoverSys, airFMGroupFailoverSysAnyMinorAlarm=airFMGroupFailoverSysAnyMinorAlarm, airFMGroupFailoverSysAnyMajorAlarm=airFMGroupFailoverSysAnyMajorAlarm, airFMGroupFailoverSysHighEnvTemp=airFMGroupFailoverSysHighEnvTemp, airFMGroupFailoverSysLowEnvTemp=airFMGroupFailoverSysLowEnvTemp, airFMGroupFailoverSysHighEnvHum=airFMGroupFailoverSysHighEnvHum, airFMGroupFailoverSysLowEnvHum=airFMGroupFailoverSysLowEnvHum, airFMGroupFailoverSysFireAlarm=airFMGroupFailoverSysFireAlarm, airFMGroupFailoverSysSmokeAlarm=airFMGroupFailoverSysSmokeAlarm, airFMGroupFailoverSysCommLost=airFMGroupFailoverSysCommLost, airFMGroupFailoverSysSupplySensorFail=airFMGroupFailoverSysSupplySensorFail, airFMGroupFailoverSysReturnSensorFail=airFMGroupFailoverSysReturnSensorFail, airFMGroupFailoverSysPrimarySensorFail=airFMGroupFailoverSysPrimarySensorFail, airFMGroupFailoverSysSecondarySensorFail=airFMGroupFailoverSysSecondarySensorFail, airFMGroupFailoverSysNoSensorsAvailable=airFMGroupFailoverSysNoSensorsAvailable, airFMGroupFailoverMod=airFMGroupFailoverMod, airFMGroupFailoverModMaintRequired=airFMGroupFailoverModMaintRequired, airFMGroupFailoverModCoolFail=airFMGroupFailoverModCoolFail, airFMGroupFailoverModHumFail=airFMGroupFailoverModHumFail, airFMGroupFailoverModBlwrCntrl1Fail=airFMGroupFailoverModBlwrCntrl1Fail, airFMGroupFailoverModBlwrCntrl2Fail=airFMGroupFailoverModBlwrCntrl2Fail, airFMGroupFailoverModHighFilterDP=airFMGroupFailoverModHighFilterDP, airFMGroupFailoverModHighSupplyTemp=airFMGroupFailoverModHighSupplyTemp, airFMGroupFailoverModLowSupplyTemp=airFMGroupFailoverModLowSupplyTemp, airFMGroupFailoverModLossOrLowAirFlow=airFMGroupFailoverModLossOrLowAirFlow, airFMGroupFailoverModHumReplaceCylinder=airFMGroupFailoverModHumReplaceCylinder, airFMGroupFailoverModAirBlockInterlockOpen=airFMGroupFailoverModAirBlockInterlockOpen, airFMGroupFailoverModWaterDetected=airFMGroupFailoverModWaterDetected, airFMGroupFailoverModCondensatePumpFail=airFMGroupFailoverModCondensatePumpFail, airFMSystem=airFMSystem, airFMSysStatus=airFMSysStatus, airFMSysNumber=airFMSysNumber, airFMSysPresentStatus=airFMSysPresentStatus, airFMSysPresentRole=airFMSysPresentRole, airFMSysRunHours=airFMSysRunHours, airFMSysCoilFluidTempC=airFMSysCoilFluidTempC, airFMSysCoilFluidTempF=airFMSysCoilFluidTempF, airFMSysHotWaterTempC=airFMSysHotWaterTempC, airFMSysHotWaterTempF=airFMSysHotWaterTempF, airFMSysAvgReturnTempC=airFMSysAvgReturnTempC, airFMSysAvgReturnTempF=airFMSysAvgReturnTempF, airFMSysAvgReturnHum=airFMSysAvgReturnHum, airFMSysAvgRemoteTempC=airFMSysAvgRemoteTempC, airFMSysAvgRemoteTempF=airFMSysAvgRemoteTempF, airFMSysAvgRemoteHum=airFMSysAvgRemoteHum, airFMSysMaxRemoteTempC=airFMSysMaxRemoteTempC, airFMSysMaxRemoteTempF=airFMSysMaxRemoteTempF, airFMSysMinRemoteTempC=airFMSysMinRemoteTempC, airFMSysMinRemoteTempF=airFMSysMinRemoteTempF, airFMSysTempCtrlMethod=airFMSysTempCtrlMethod, airFMSysActualTempCtrlMethod=airFMSysActualTempCtrlMethod, airFMSysHumCtrlMethod=airFMSysHumCtrlMethod, airFMSysActualHumCtrlMethod=airFMSysActualHumCtrlMethod, airFMSysCtrlTempC=airFMSysCtrlTempC, airFMSysCtrlTempF=airFMSysCtrlTempF, airFMSysCtrlHum=airFMSysCtrlHum, airFMSysDemands=airFMSysDemands, airFMSysDXCoolingDmd=airFMSysDXCoolingDmd, airFMSysDXDehumDmd=airFMSysDXDehumDmd, airFMSysDXActualCoolDehum=airFMSysDXActualCoolDehum, airFMSysCoilFluidCoolDmd=airFMSysCoilFluidCoolDmd, airFMSysCoilFluidDehumDmd=airFMSysCoilFluidDehumDmd, airFMSysCoilFluidActualCoolDehum=airFMSysCoilFluidActualCoolDehum, airFMSysElectricReheatDmd=airFMSysElectricReheatDmd, airFMSysActualElectricReheat=airFMSysActualElectricReheat, airFMSysSteamHotGasReheatDmd=airFMSysSteamHotGasReheatDmd, airFMSysActualSteamHotGasReheat=airFMSysActualSteamHotGasReheat, airFMSysSteamElectrodeHumDmd=airFMSysSteamElectrodeHumDmd, airFMSysActualSteamElectrodeHum=airFMSysActualSteamElectrodeHum, airFMSysSteamHumDmd=airFMSysSteamHumDmd, airFMSysActualSteamHum=airFMSysActualSteamHum, airFMSysSetup=airFMSysSetup, airFMSysNumModules=airFMSysNumModules, airFMSysNumPCIOMs=airFMSysNumPCIOMs, airFMSysMainsVlt=airFMSysMainsVlt, airFMSysUPSVlt=airFMSysUPSVlt, airFMSysCoilCfg=airFMSysCoilCfg, airFMSysRefrigType=airFMSysRefrigType, airFMSysHeatRejection=airFMSysHeatRejection, airFMSysDischAirPtrn=airFMSysDischAirPtrn, airFMSysAirFltr=airFMSysAirFltr, airFMSysFlowSwitch=airFMSysFlowSwitch, airFMSysCoilFluidVlvAct=airFMSysCoilFluidVlvAct, airFMSysCoilFluidVlvType=airFMSysCoilFluidVlvType, airFMSysCndsrFluidVlvAct=airFMSysCndsrFluidVlvAct, airFMSysCndsrFluidVlvType=airFMSysCndsrFluidVlvType, airFMSysHotWaterVlvAct=airFMSysHotWaterVlvAct, airFMSysNumRemoteSensors=airFMSysNumRemoteSensors, airFMSysConfig=airFMSysConfig, airFMSysPrimaryControlSensor=airFMSysPrimaryControlSensor, airFMSysRemoteSensorData=airFMSysRemoteSensorData, airFMSysFastStartup=airFMSysFastStartup, airFMSysStartupDelay=airFMSysStartupDelay, airFMSysModeDelay=airFMSysModeDelay, airFMSysCommLossShutdownDelay=airFMSysCommLossShutdownDelay, airFMSysResetSysFailure=airFMSysResetSysFailure, airFMSysResetUserDflts=airFMSysResetUserDflts, airFMSysResetFldSrvcDflts=airFMSysResetFldSrvcDflts, airFMSysResetRunHours=airFMSysResetRunHours, airFMSysCooling=airFMSysCooling, airFMSysCompMinOnTime=airFMSysCompMinOnTime, airFMSysCompMinOffTime=airFMSysCompMinOffTime, airFMSysCompRotPeriod=airFMSysCompRotPeriod, airFMSysEconIsolVlvOpenDelay=airFMSysEconIsolVlvOpenDelay)
mibBuilder.exportSymbols("PowerNet-MIB", airFMSysEconIsolVlvCloseDelay=airFMSysEconIsolVlvCloseDelay, airFMSysCndsrFluidVlvCloseDelay=airFMSysCndsrFluidVlvCloseDelay, airFMSysInterstageDelay=airFMSysInterstageDelay, airFMSysCoolState=airFMSysCoolState, airFMSysCoolEssFunction=airFMSysCoolEssFunction, airFMSysCoolSetpointC=airFMSysCoolSetpointC, airFMSysCoolSetpointF=airFMSysCoolSetpointF, airFMSysCoolDeadbandC=airFMSysCoolDeadbandC, airFMSysCoolDeadbandF=airFMSysCoolDeadbandF, airFMSysCoolEconIsolFunction=airFMSysCoolEconIsolFunction, airFMSysSuctPresCompensation=airFMSysSuctPresCompensation, airFMSysCoilFluidActivThreshC=airFMSysCoilFluidActivThreshC, airFMSysCoilFluidActivThreshF=airFMSysCoilFluidActivThreshF, airFMSysCoilFluidActivDeadbandC=airFMSysCoilFluidActivDeadbandC, airFMSysCoilFluidActivDeadbandF=airFMSysCoilFluidActivDeadbandF, airFMSysCoolPIDMethod=airFMSysCoolPIDMethod, airFMSysCoolPIDGainP=airFMSysCoolPIDGainP, airFMSysCoolPIDResetRateI=airFMSysCoolPIDResetRateI, airFMSysCoolPIDDerivativeD=airFMSysCoolPIDDerivativeD, airFMSysHumidify=airFMSysHumidify, airFMSysHumState=airFMSysHumState, airFMSysHumEssFunction=airFMSysHumEssFunction, airFMSysHumSetpoint=airFMSysHumSetpoint, airFMSysHumDeadband=airFMSysHumDeadband, airFMSysHumCtrlSetting=airFMSysHumCtrlSetting, airFMSysActualHumCtrl=airFMSysActualHumCtrl, airFMSysHumSensBand=airFMSysHumSensBand, airFMSysDehumidify=airFMSysDehumidify, airFMSysDehumState=airFMSysDehumState, airFMSysDehumEssFunction=airFMSysDehumEssFunction, airFMSysDehumSetpoint=airFMSysDehumSetpoint, airFMSysDehumDeadband=airFMSysDehumDeadband, airFMSysDehumCapacity=airFMSysDehumCapacity, airFMSysDehumPIDMethod=airFMSysDehumPIDMethod, airFMSysDehumPIDGainP=airFMSysDehumPIDGainP, airFMSysDehumPIDResetRateI=airFMSysDehumPIDResetRateI, airFMSysDehumPIDDerivativeD=airFMSysDehumPIDDerivativeD, airFMSysReheat=airFMSysReheat, airFMSysReheatState=airFMSysReheatState, airFMSysReheatEssFunction=airFMSysReheatEssFunction, airFMSysReheatSetpointC=airFMSysReheatSetpointC, airFMSysReheatSetpointF=airFMSysReheatSetpointF, airFMSysReheatDeadbandC=airFMSysReheatDeadbandC, airFMSysReheatDeadbandF=airFMSysReheatDeadbandF, airFMSysReheatPIDMethod=airFMSysReheatPIDMethod, airFMSysReheatPIDGainP=airFMSysReheatPIDGainP, airFMSysReheatPIDResetRateI=airFMSysReheatPIDResetRateI, airFMSysReheatPIDDerivativeD=airFMSysReheatPIDDerivativeD, airFMSysThresholds=airFMSysThresholds, airFMSysHighSplyTempC=airFMSysHighSplyTempC, airFMSysHighSplyTempF=airFMSysHighSplyTempF, airFMSysLowSplyTempC=airFMSysLowSplyTempC, airFMSysLowSplyTempF=airFMSysLowSplyTempF, airFMSysHighCoilFluidTempC=airFMSysHighCoilFluidTempC, airFMSysHighCoilFluidTempF=airFMSysHighCoilFluidTempF, airFMSysLowCoilFluidTempC=airFMSysLowCoilFluidTempC, airFMSysLowCoilFluidTempF=airFMSysLowCoilFluidTempF, airFMSysHighCtrlTempC=airFMSysHighCtrlTempC, airFMSysHighCtrlTempF=airFMSysHighCtrlTempF, airFMSysLowCtrlTempC=airFMSysLowCtrlTempC, airFMSysLowCtrlTempF=airFMSysLowCtrlTempF, airFMSysHighCtrlHum=airFMSysHighCtrlHum, airFMSysLowCtrlHum=airFMSysLowCtrlHum, airFMSysTempAlarmDelay=airFMSysTempAlarmDelay, airFMSysHumAlarmDelay=airFMSysHumAlarmDelay, airFMSysInputs=airFMSysInputs, airFMSysInputTableSize=airFMSysInputTableSize, airFMSysInputTable=airFMSysInputTable, airFMSysInputEntry=airFMSysInputEntry, airFMSysInputIndex=airFMSysInputIndex, airFMSysInputName=airFMSysInputName, airFMSysInputStatus=airFMSysInputStatus, airFMSysInputNormalState=airFMSysInputNormalState, airFMSysInputDelay=airFMSysInputDelay, airFMSysInputAlarmAction=airFMSysInputAlarmAction, airFMSysOutputs=airFMSysOutputs, airFMSysOutputTableSize=airFMSysOutputTableSize, airFMSysOutputTable=airFMSysOutputTable, airFMSysOutputEntry=airFMSysOutputEntry, airFMSysOutputIndex=airFMSysOutputIndex, airFMSysOutputStatus=airFMSysOutputStatus, airFMSysOutputNormalState=airFMSysOutputNormalState, airFMSysAlarmMap=airFMSysAlarmMap, airFMSysAlarmMapSys=airFMSysAlarmMapSys, airFMSysAlarmMapSysTableSize=airFMSysAlarmMapSysTableSize, airFMSysAlarmMapSysTable=airFMSysAlarmMapSysTable, airFMSysAlarmMapSysEntry=airFMSysAlarmMapSysEntry, airFMSysAlarmMapSysOutputIndex=airFMSysAlarmMapSysOutputIndex, airFMSysAlarmMapSysAnyAlarm=airFMSysAlarmMapSysAnyAlarm, airFMSysAlarmMapSystemOn=airFMSysAlarmMapSystemOn, airFMSysAlarmMapSystemOffline=airFMSysAlarmMapSystemOffline, airFMSysAlarmMapSysHighEnvTemp=airFMSysAlarmMapSysHighEnvTemp, airFMSysAlarmMapSysLowEnvTemp=airFMSysAlarmMapSysLowEnvTemp, airFMSysAlarmMapSysHighEnvHum=airFMSysAlarmMapSysHighEnvHum, airFMSysAlarmMapSysLowEnvHum=airFMSysAlarmMapSysLowEnvHum, airFMSysAlarmMapSysFireDet=airFMSysAlarmMapSysFireDet, airFMSysAlarmMapSysSmokeDet=airFMSysAlarmMapSysSmokeDet, airFMSysAlarmMapSysEconIsol=airFMSysAlarmMapSysEconIsol, airFMSysAlarmMapSysSupplySensFail=airFMSysAlarmMapSysSupplySensFail, airFMSysAlarmMapSysReturnSensFail=airFMSysAlarmMapSysReturnSensFail, airFMSysAlarmMapSysRemSensRemoved=airFMSysAlarmMapSysRemSensRemoved, airFMSysAlarmMapSysPrimSensFail=airFMSysAlarmMapSysPrimSensFail, airFMSysAlarmMapSysSecSensFail=airFMSysAlarmMapSysSecSensFail, airFMSysAlarmMapSysSecSensActive=airFMSysAlarmMapSysSecSensActive, airFMSysAlarmMapMainMod=airFMSysAlarmMapMainMod, airFMSysAlarmMapMainModTableSize=airFMSysAlarmMapMainModTableSize, airFMSysAlarmMapMainModTable=airFMSysAlarmMapMainModTable, airFMSysAlarmMapMainModEntry=airFMSysAlarmMapMainModEntry, airFMSysAlarmMapMainModOutputIndex=airFMSysAlarmMapMainModOutputIndex, airFMSysAlarmMapMainModAnyAlarm=airFMSysAlarmMapMainModAnyAlarm, airFMSysAlarmMapMainModMaintReq=airFMSysAlarmMapMainModMaintReq, airFMSysAlarmMapMainModCoolFail=airFMSysAlarmMapMainModCoolFail, airFMSysAlarmMapMainModHighSupplyTemp=airFMSysAlarmMapMainModHighSupplyTemp, airFMSysAlarmMapMainModLowSupplyTemp=airFMSysAlarmMapMainModLowSupplyTemp, airFMSysAlarmMapMainModHumFail=airFMSysAlarmMapMainModHumFail, airFMSysAlarmMapMainModHumReplCyl=airFMSysAlarmMapMainModHumReplCyl, airFMSysAlarmMapMainModCondPumpFail=airFMSysAlarmMapMainModCondPumpFail, airFMSysAlarmMapMainModBlwrCntl1Fail=airFMSysAlarmMapMainModBlwrCntl1Fail, airFMSysAlarmMapMainModBlwrCntl2Fail=airFMSysAlarmMapMainModBlwrCntl2Fail, airFMSysAlarmMapMainModHighFltrDP=airFMSysAlarmMapMainModHighFltrDP, airFMSysAlarmMapMainModLowAirFlow=airFMSysAlarmMapMainModLowAirFlow, airFMSysAlarmMapMainModAirBlckIntOpen=airFMSysAlarmMapMainModAirBlckIntOpen, airFMSysAlarmMapMainModWaterDetected=airFMSysAlarmMapMainModWaterDetected, airFMSysAlarmMapExpMod1=airFMSysAlarmMapExpMod1, airFMSysAlarmMapExpMod1TableSize=airFMSysAlarmMapExpMod1TableSize, airFMSysAlarmMapExpMod1Table=airFMSysAlarmMapExpMod1Table, airFMSysAlarmMapExpMod1Entry=airFMSysAlarmMapExpMod1Entry)
mibBuilder.exportSymbols("PowerNet-MIB", airFMSysAlarmMapExpMod1OutputIndex=airFMSysAlarmMapExpMod1OutputIndex, airFMSysAlarmMapExpMod1AnyAlarm=airFMSysAlarmMapExpMod1AnyAlarm, airFMSysAlarmMapExpMod1MaintReq=airFMSysAlarmMapExpMod1MaintReq, airFMSysAlarmMapExpMod1CoolFail=airFMSysAlarmMapExpMod1CoolFail, airFMSysAlarmMapExpMod1HighSupplyTemp=airFMSysAlarmMapExpMod1HighSupplyTemp, airFMSysAlarmMapExpMod1LowSupplyTemp=airFMSysAlarmMapExpMod1LowSupplyTemp, airFMSysAlarmMapExpMod1HumFail=airFMSysAlarmMapExpMod1HumFail, airFMSysAlarmMapExpMod1HumReplCyl=airFMSysAlarmMapExpMod1HumReplCyl, airFMSysAlarmMapExpMod1CondPumpFail=airFMSysAlarmMapExpMod1CondPumpFail, airFMSysAlarmMapExpMod1BlwrCntl1Fail=airFMSysAlarmMapExpMod1BlwrCntl1Fail, airFMSysAlarmMapExpMod1BlwrCntl2Fail=airFMSysAlarmMapExpMod1BlwrCntl2Fail, airFMSysAlarmMapExpMod1HighFltrDP=airFMSysAlarmMapExpMod1HighFltrDP, airFMSysAlarmMapExpMod1LowAirFlow=airFMSysAlarmMapExpMod1LowAirFlow, airFMSysAlarmMapExpMod1AirBlckIntOpen=airFMSysAlarmMapExpMod1AirBlckIntOpen, airFMSysAlarmMapExpMod1WaterDetected=airFMSysAlarmMapExpMod1WaterDetected, airFMSysAlarmMapExpMod2=airFMSysAlarmMapExpMod2, airFMSysAlarmMapExpMod2TableSize=airFMSysAlarmMapExpMod2TableSize, airFMSysAlarmMapExpMod2Table=airFMSysAlarmMapExpMod2Table, airFMSysAlarmMapExpMod2Entry=airFMSysAlarmMapExpMod2Entry, airFMSysAlarmMapExpMod2OutputIndex=airFMSysAlarmMapExpMod2OutputIndex, airFMSysAlarmMapExpMod2AnyAlarm=airFMSysAlarmMapExpMod2AnyAlarm, airFMSysAlarmMapExpMod2MaintReq=airFMSysAlarmMapExpMod2MaintReq, airFMSysAlarmMapExpMod2CoolFail=airFMSysAlarmMapExpMod2CoolFail, airFMSysAlarmMapExpMod2HighSupplyTemp=airFMSysAlarmMapExpMod2HighSupplyTemp, airFMSysAlarmMapExpMod2LowSupplyTemp=airFMSysAlarmMapExpMod2LowSupplyTemp, airFMSysAlarmMapExpMod2HumFail=airFMSysAlarmMapExpMod2HumFail, airFMSysAlarmMapExpMod2HumReplCyl=airFMSysAlarmMapExpMod2HumReplCyl, airFMSysAlarmMapExpMod2CondPumpFail=airFMSysAlarmMapExpMod2CondPumpFail, airFMSysAlarmMapExpMod2BlwrCntl1Fail=airFMSysAlarmMapExpMod2BlwrCntl1Fail, airFMSysAlarmMapExpMod2BlwrCntl2Fail=airFMSysAlarmMapExpMod2BlwrCntl2Fail, airFMSysAlarmMapExpMod2HighFltrDP=airFMSysAlarmMapExpMod2HighFltrDP, airFMSysAlarmMapExpMod2LowAirFlow=airFMSysAlarmMapExpMod2LowAirFlow, airFMSysAlarmMapExpMod2AirBlckIntOpen=airFMSysAlarmMapExpMod2AirBlckIntOpen, airFMSysAlarmMapExpMod2WaterDetected=airFMSysAlarmMapExpMod2WaterDetected, airFMSysAlarmMapInput=airFMSysAlarmMapInput, airFMSysAlarmMapInputTableSize=airFMSysAlarmMapInputTableSize, airFMSysAlarmMapInputTable=airFMSysAlarmMapInputTable, airFMSysAlarmMapInputEntry=airFMSysAlarmMapInputEntry, airFMSysAlarmMapInputOutputIndex=airFMSysAlarmMapInputOutputIndex, airFMSysAlarmMapInput1=airFMSysAlarmMapInput1, airFMSysAlarmMapInput2=airFMSysAlarmMapInput2, airFMSysAlarmMapInput3=airFMSysAlarmMapInput3, airFMSysAlarmMapInput4=airFMSysAlarmMapInput4, airFMSysAlarmMapInput5=airFMSysAlarmMapInput5, airFMSysAlarmMapInput6=airFMSysAlarmMapInput6, airFMSysAlarmMapInput7=airFMSysAlarmMapInput7, airFMSysAlarmMapInput8=airFMSysAlarmMapInput8, airFMSysAlarmMapInput9=airFMSysAlarmMapInput9, airFMSysAlarmMapInput10=airFMSysAlarmMapInput10, airFMSysAlarmMapInput11=airFMSysAlarmMapInput11, airFMSysAlarmMapInput12=airFMSysAlarmMapInput12, airFMSysAlarmMapInput13=airFMSysAlarmMapInput13, airFMSysAlarmMapInput14=airFMSysAlarmMapInput14, airFMSysAlarmMapInput15=airFMSysAlarmMapInput15, airFMSysAlarmMapInput16=airFMSysAlarmMapInput16, airFMSysAlarmMapOutput=airFMSysAlarmMapOutput, airFMSysAlarmMapOutputTableSize=airFMSysAlarmMapOutputTableSize, airFMSysAlarmMapOutputTable=airFMSysAlarmMapOutputTable, airFMSysAlarmMapOutputEntry=airFMSysAlarmMapOutputEntry, airFMSysAlarmMapOutputIndex=airFMSysAlarmMapOutputIndex, airFMSysAlarmMapOutput1=airFMSysAlarmMapOutput1, airFMSysAlarmMapOutput2=airFMSysAlarmMapOutput2, airFMSysAlarmMapOutput3=airFMSysAlarmMapOutput3, airFMSysAlarmMapOutput4=airFMSysAlarmMapOutput4, airFMSysAlarmMapOutput5=airFMSysAlarmMapOutput5, airFMSysAlarmMapOutput6=airFMSysAlarmMapOutput6, airFMSysAlarmMapOutput7=airFMSysAlarmMapOutput7, airFMSysAlarmMapOutput8=airFMSysAlarmMapOutput8, airFMSysAlarmMapOutput9=airFMSysAlarmMapOutput9, airFMSysAlarmMapOutput10=airFMSysAlarmMapOutput10, airFMSysAlarmMapOutput11=airFMSysAlarmMapOutput11, airFMSysAlarmMapOutput12=airFMSysAlarmMapOutput12, airFMSysAlarmMapOutput13=airFMSysAlarmMapOutput13, airFMSysAlarmMapOutput14=airFMSysAlarmMapOutput14, airFMSysAlarmMapOutput15=airFMSysAlarmMapOutput15, airFMSysAlarmMapOutput16=airFMSysAlarmMapOutput16, airFMModule=airFMModule, airFMModIdent=airFMModIdent, airFMModIdentTableSize=airFMModIdentTableSize, airFMModIdentTable=airFMModIdentTable, airFMModIdentEntry=airFMModIdentEntry, airFMModIdentModuleIndex=airFMModIdentModuleIndex, airFMModModelNumber=airFMModModelNumber, airFMModSerialNumber=airFMModSerialNumber, airFMModManufactureDate=airFMModManufactureDate, airFMModFirmwareRev=airFMModFirmwareRev, airFMModHardwareRev=airFMModHardwareRev, airFMModStatus=airFMModStatus, airFMModStatusTableSize=airFMModStatusTableSize, airFMModStatusTable=airFMModStatusTable, airFMModStatusEntry=airFMModStatusEntry, airFMModStatusModuleIndex=airFMModStatusModuleIndex, airFMModSupplyTempC=airFMModSupplyTempC, airFMModSupplyTempF=airFMModSupplyTempF, airFMModSupplyHum=airFMModSupplyHum, airFMModReturnTempC=airFMModReturnTempC, airFMModReturnTempF=airFMModReturnTempF, airFMModReturnHum=airFMModReturnHum, airFMModFilterDiffPresPa=airFMModFilterDiffPresPa, airFMModFilterDiffPresInWC=airFMModFilterDiffPresInWC, airFMModCoilDiffPresPa=airFMModCoilDiffPresPa, airFMModCoilDiffPresInWC=airFMModCoilDiffPresInWC, airFMModProperties=airFMModProperties, airFMModPropTableSize=airFMModPropTableSize, airFMModPropTable=airFMModPropTable, airFMModPropEntry=airFMModPropEntry, airFMModPropModuleIndex=airFMModPropModuleIndex, airFMModOutputCapacity=airFMModOutputCapacity, airFMModCapacityCtrl=airFMModCapacityCtrl, airFMModHeaterType=airFMModHeaterType, airFMModElectricHeaterType=airFMModElectricHeaterType, airFMModHumidifierType=airFMModHumidifierType, airFMModBlwrFreqSetting=airFMModBlwrFreqSetting, airFMModNomCoilDiffPresPa=airFMModNomCoilDiffPresPa, airFMModNomCoilDiffPresInWC=airFMModNomCoilDiffPresInWC, airFMModCondPump=airFMModCondPump, airFMModFireDetector=airFMModFireDetector, airFMModSmokeDetector=airFMModSmokeDetector, airFMModWaterDetector=airFMModWaterDetector, airFMModCooling=airFMModCooling, airFMModCoolTableSize=airFMModCoolTableSize, airFMModCoolTable=airFMModCoolTable, airFMModCoolEntry=airFMModCoolEntry, airFMModCoolModuleIndex=airFMModCoolModuleIndex, airFMModComp1=airFMModComp1, airFMModComp2=airFMModComp2, airFMModSuctPresKPa=airFMModSuctPresKPa)
mibBuilder.exportSymbols("PowerNet-MIB", airFMModSuctPresPSI=airFMModSuctPresPSI, airFMModDischPresKPa=airFMModDischPresKPa, airFMModDischPresPSI=airFMModDischPresPSI, airFMModCondFluidVlvPos=airFMModCondFluidVlvPos, airFMModCoilFluidVlvPos=airFMModCoilFluidVlvPos, airFMModHumidity=airFMModHumidity, airFMModHumTableSize=airFMModHumTableSize, airFMModHumTable=airFMModHumTable, airFMModHumEntry=airFMModHumEntry, airFMModHumModuleIndex=airFMModHumModuleIndex, airFMModHumidifier=airFMModHumidifier, airFMModElectrodeCurrent=airFMModElectrodeCurrent, airFMModHumActualOutput=airFMModHumActualOutput, airFMModWaterConductivity=airFMModWaterConductivity, airFMModHotWaterVlvPos=airFMModHotWaterVlvPos, airFMModStmElectHumMode=airFMModStmElectHumMode, airFMModBlower1=airFMModBlower1, airFMModBlwr1TableSize=airFMModBlwr1TableSize, airFMModBlwr1Table=airFMModBlwr1Table, airFMModBlwr1Entry=airFMModBlwr1Entry, airFMModBlwr1ModuleIndex=airFMModBlwr1ModuleIndex, airFMModBlwr1CtrlType=airFMModBlwr1CtrlType, airFMModBlwr1CmdFreq=airFMModBlwr1CmdFreq, airFMModBlwr1ActFreq=airFMModBlwr1ActFreq, airFMModBlwr1Poles=airFMModBlwr1Poles, airFMModBlwr1RatedHorsePower=airFMModBlwr1RatedHorsePower, airFMModBlwr1RatedCurrent=airFMModBlwr1RatedCurrent, airFMModBlwr1ActTorq=airFMModBlwr1ActTorq, airFMModBlwr1Current=airFMModBlwr1Current, airFMModBlwr1Vlt=airFMModBlwr1Vlt, airFMModBlwr1DCLinkVlt=airFMModBlwr1DCLinkVlt, airFMModBlwr1AccTime=airFMModBlwr1AccTime, airFMModBlwr1DecTime=airFMModBlwr1DecTime, airFMModBlwr1CapLife=airFMModBlwr1CapLife, airFMModBlwr1CtrlCoolFanLife=airFMModBlwr1CtrlCoolFanLife, airFMModBlwr1ElOvMode=airFMModBlwr1ElOvMode, airFMModBlwr1ElOvSetting=airFMModBlwr1ElOvSetting, airFMModBlwr1ElOvTimeConst=airFMModBlwr1ElOvTimeConst, airFMModBlwr1FanPower=airFMModBlwr1FanPower, airFMModBlwr1HeatsinkTempC=airFMModBlwr1HeatsinkTempC, airFMModBlwr1HeatsinkTempF=airFMModBlwr1HeatsinkTempF, airFMModBlwr1ChokeTempC=airFMModBlwr1ChokeTempC, airFMModBlwr1ChokeTempF=airFMModBlwr1ChokeTempF, airFMModBlwr1InverterTempC=airFMModBlwr1InverterTempC, airFMModBlwr1InverterTempF=airFMModBlwr1InverterTempF, airFMModBlower2=airFMModBlower2, airFMModBlwr2TableSize=airFMModBlwr2TableSize, airFMModBlwr2Table=airFMModBlwr2Table, airFMModBlwr2Entry=airFMModBlwr2Entry, airFMModBlwr2ModuleIndex=airFMModBlwr2ModuleIndex, airFMModBlwr2CtrlType=airFMModBlwr2CtrlType, airFMModBlwr2CmdFreq=airFMModBlwr2CmdFreq, airFMModBlwr2ActFreq=airFMModBlwr2ActFreq, airFMModBlwr2Poles=airFMModBlwr2Poles, airFMModBlwr2RatedHorsePower=airFMModBlwr2RatedHorsePower, airFMModBlwr2RatedCurrent=airFMModBlwr2RatedCurrent, airFMModBlwr2ActTorq=airFMModBlwr2ActTorq, airFMModBlwr2Current=airFMModBlwr2Current, airFMModBlwr2Vlt=airFMModBlwr2Vlt, airFMModBlwr2DCLinkVlt=airFMModBlwr2DCLinkVlt, airFMModBlwr2AccTime=airFMModBlwr2AccTime, airFMModBlwr2DecTime=airFMModBlwr2DecTime, airFMModBlwr2CapLife=airFMModBlwr2CapLife, airFMModBlwr2CtrlCoolFanLife=airFMModBlwr2CtrlCoolFanLife, airFMModBlwr2ElOvMode=airFMModBlwr2ElOvMode, airFMModBlwr2ElOvSetting=airFMModBlwr2ElOvSetting, airFMModBlwr2ElOvTimeConst=airFMModBlwr2ElOvTimeConst, airFMModBlwr2FanPower=airFMModBlwr2FanPower, airFMModBlwr2HeatsinkTempC=airFMModBlwr2HeatsinkTempC, airFMModBlwr2HeatsinkTempF=airFMModBlwr2HeatsinkTempF, airFMModBlwr2ChokeTempC=airFMModBlwr2ChokeTempC, airFMModBlwr2ChokeTempF=airFMModBlwr2ChokeTempF, airFMModBlwr2InverterTempC=airFMModBlwr2InverterTempC, airFMModBlwr2InverterTempF=airFMModBlwr2InverterTempF, airFMModRunHours=airFMModRunHours, airFMModRHTableSize=airFMModRHTableSize, airFMModRHTable=airFMModRHTable, airFMModRHEntry=airFMModRHEntry, airFMModRHModuleIndex=airFMModRHModuleIndex, airFMModRHComp1=airFMModRHComp1, airFMModRHComp2=airFMModRHComp2, airFMModRHHeater=airFMModRHHeater, airFMModRHHum=airFMModRHHum, airFMModRHBlwr1=airFMModRHBlwr1, airFMModRHBlwr2=airFMModRHBlwr2, airFMModRHBlwrCtrl1=airFMModRHBlwrCtrl1, airFMModRHBlwrCtrl2=airFMModRHBlwrCtrl2, airFMModRHComp1Reset=airFMModRHComp1Reset, airFMModRHComp2Reset=airFMModRHComp2Reset, airFMModRHHeaterReset=airFMModRHHeaterReset, airFMModRHHumReset=airFMModRHHumReset, airFMModRHBlwr1Reset=airFMModRHBlwr1Reset, airFMModRHBlwr2Reset=airFMModRHBlwr2Reset, airFMModServIntervals=airFMModServIntervals, airFMModServIntComp1=airFMModServIntComp1, airFMModServIntComp2=airFMModServIntComp2, airFMModServIntHeater=airFMModServIntHeater, airFMModServIntHum=airFMModServIntHum, airFMModServIntBlwr1=airFMModServIntBlwr1, airFMModServIntBlwr2=airFMModServIntBlwr2, airFMModServIntBlwrCtrl1=airFMModServIntBlwrCtrl1, airFMModServIntBlwrCtrl2=airFMModServIntBlwrCtrl2, airFMModServIntResets=airFMModServIntResets, airFMModServIntResetTableSize=airFMModServIntResetTableSize, airFMModServIntResetTable=airFMModServIntResetTable, airFMModServIntResetEntry=airFMModServIntResetEntry, airFMModServIntResetModuleIndex=airFMModServIntResetModuleIndex, airFMModServIntComp1Reset=airFMModServIntComp1Reset, airFMModServIntComp2Reset=airFMModServIntComp2Reset, airFMModServIntHeaterReset=airFMModServIntHeaterReset, airFMModServIntHumReset=airFMModServIntHumReset, airFMModServIntBlwr1Reset=airFMModServIntBlwr1Reset, airFMModServIntBlwr2Reset=airFMModServIntBlwr2Reset, airFMModServIntBlwrCtrl1Reset=airFMModServIntBlwrCtrl1Reset, airFMModServIntBlwrCtrl2Reset=airFMModServIntBlwrCtrl2Reset, airFMAlarms=airFMAlarms, airFMAlarmClearActiveGroupAlarms=airFMAlarmClearActiveGroupAlarms, airFMAlarmClearActiveSysModAlarms=airFMAlarmClearActiveSysModAlarms, airFMAlarmConditionsTableSize=airFMAlarmConditionsTableSize, airFMAlarmConditionsTable=airFMAlarmConditionsTable, airFMAlarmConditionsEntry=airFMAlarmConditionsEntry, airFMAlarmConditionsIndex=airFMAlarmConditionsIndex, airFMAlarmSeverity=airFMAlarmSeverity, airFMAlarmType=airFMAlarmType, airFMEventCode=airFMEventCode, airFMAlarmDate=airFMAlarmDate, airFMAlarmTime=airFMAlarmTime)
mibBuilder.exportSymbols("PowerNet-MIB", airFMAlarmDescription=airFMAlarmDescription, airPA=airPA, airPAIdent=airPAIdent, airPAIdentName=airPAIdentName, airPAModelNumber=airPAModelNumber, airPADateOfManufacture=airPADateOfManufacture, airPASerialNumber=airPASerialNumber, airPAFirmwareRevision=airPAFirmwareRevision, airPAHardwareRevision=airPAHardwareRevision, airPAStatus=airPAStatus, airPASystemPower=airPASystemPower, airPAOperatingMode=airPAOperatingMode, airPASetpointTempF=airPASetpointTempF, airPASetpointTempC=airPASetpointTempC, airPABlowerSpeed=airPABlowerSpeed, airPACompressor=airPACompressor, airPACondenserFan=airPACondenserFan, airPACondensatePump=airPACondensatePump, airPASupplyTempF=airPASupplyTempF, airPASupplyTempC=airPASupplyTempC, airPAReturnTempF=airPAReturnTempF, airPAReturnTempC=airPAReturnTempC, airPARemoteTempF=airPARemoteTempF, airPARemoteTempC=airPARemoteTempC, airPARemoteHumidity=airPARemoteHumidity, airIR=airIR, airIRAlarms=airIRAlarms, airIRAlarmConditionsTableSize=airIRAlarmConditionsTableSize, airIRAlarmConditionsTable=airIRAlarmConditionsTable, airIRAlarmConditionsEntry=airIRAlarmConditionsEntry, airIRAlarmConditionsIndex=airIRAlarmConditionsIndex, airIREventCode=airIREventCode, airIRAlarmDescription=airIRAlarmDescription, airIRRC=airIRRC, airIRRCGroup=airIRRCGroup, airIRRCGroupStatus=airIRRCGroupStatus, airIRRCGroupStatusCoolOutput=airIRRCGroupStatusCoolOutput, airIRRCGroupStatusCoolDemand=airIRRCGroupStatusCoolDemand, airIRRCGroupStatusAirFlowUS=airIRRCGroupStatusAirFlowUS, airIRRCGroupStatusAirFlowMetric=airIRRCGroupStatusAirFlowMetric, airIRRCGroupStatusMaxRackInletTempUS=airIRRCGroupStatusMaxRackInletTempUS, airIRRCGroupStatusMaxRackInletTempMetric=airIRRCGroupStatusMaxRackInletTempMetric, airIRRCGroupStatusMinRackInletTempUS=airIRRCGroupStatusMinRackInletTempUS, airIRRCGroupStatusMinRackInletTempMetric=airIRRCGroupStatusMinRackInletTempMetric, airIRRCGroupStatusActiveFlowControlStatus=airIRRCGroupStatusActiveFlowControlStatus, airIRRCGroupSetpoints=airIRRCGroupSetpoints, airIRRCGroupSetpointsCoolUS=airIRRCGroupSetpointsCoolUS, airIRRCGroupSetpointsCoolMetric=airIRRCGroupSetpointsCoolMetric, airIRRCGroupSetpointsSupplyAirUS=airIRRCGroupSetpointsSupplyAirUS, airIRRCGroupSetpointsSupplyAirMetric=airIRRCGroupSetpointsSupplyAirMetric, airIRRCGroupSetpointsFanSpeedPreference=airIRRCGroupSetpointsFanSpeedPreference, airIRRCGroupSetpointsFanSpeedControl=airIRRCGroupSetpointsFanSpeedControl, airIRRCGroupSetpointsActiveFlowControlBias=airIRRCGroupSetpointsActiveFlowControlBias, airIRRCGroupConfig=airIRRCGroupConfig, airIRRCGroupConfigNumberofCoolingUnits=airIRRCGroupConfigNumberofCoolingUnits, airIRRCGroupConfigConfigurationType=airIRRCGroupConfigConfigurationType, airIRRCGroupConfigPctGlycol=airIRRCGroupConfigPctGlycol, airIRRCGroupConfigCoolGainP=airIRRCGroupConfigCoolGainP, airIRRCGroupConfigCoolResetRateI=airIRRCGroupConfigCoolResetRateI, airIRRCGroupConfigCoolDerivativeD=airIRRCGroupConfigCoolDerivativeD, airIRRCGroupConfigMaxFanSpeed=airIRRCGroupConfigMaxFanSpeed, airIRRCGroupConfigNumberOfActiveFlowControllers=airIRRCGroupConfigNumberOfActiveFlowControllers, airIRRCGroupConfigActiveFlowControllerLampTest=airIRRCGroupConfigActiveFlowControllerLampTest, airIRRCGroupConfigAltitudeUS=airIRRCGroupConfigAltitudeUS, airIRRCGroupConfigAltitudeMetric=airIRRCGroupConfigAltitudeMetric, airIRRCUnit=airIRRCUnit, airIRRCUnitIdent=airIRRCUnitIdent, airIRRCUnitIdentID=airIRRCUnitIdentID, airIRRCUnitIdentName=airIRRCUnitIdentName, airIRRCUnitIdentLocation=airIRRCUnitIdentLocation, airIRRCUnitIdentModelNumber=airIRRCUnitIdentModelNumber, airIRRCUnitIdentSerialNumber=airIRRCUnitIdentSerialNumber, airIRRCUnitIdentFirmwareRevision=airIRRCUnitIdentFirmwareRevision, airIRRCUnitIdentHardwareRevision=airIRRCUnitIdentHardwareRevision, airIRRCUnitIdentManufactureDate=airIRRCUnitIdentManufactureDate, airIRRCUnitStatus=airIRRCUnitStatus, airIRRCUnitStatusOperateMode=airIRRCUnitStatusOperateMode, airIRRCUnitStatusCoolOutput=airIRRCUnitStatusCoolOutput, airIRRCUnitStatusCoolDemand=airIRRCUnitStatusCoolDemand, airIRRCUnitStatusAirFlowUS=airIRRCUnitStatusAirFlowUS, airIRRCUnitStatusAirFlowMetric=airIRRCUnitStatusAirFlowMetric, airIRRCUnitStatusRackInletTempUS=airIRRCUnitStatusRackInletTempUS, airIRRCUnitStatusRackInletTempMetric=airIRRCUnitStatusRackInletTempMetric, airIRRCUnitStatusSupplyAirTempUS=airIRRCUnitStatusSupplyAirTempUS, airIRRCUnitStatusSupplyAirTempMetric=airIRRCUnitStatusSupplyAirTempMetric, airIRRCUnitStatusReturnAirTempUS=airIRRCUnitStatusReturnAirTempUS, airIRRCUnitStatusReturnAirTempMetric=airIRRCUnitStatusReturnAirTempMetric, airIRRCUnitStatusContainmtDPUS=airIRRCUnitStatusContainmtDPUS, airIRRCUnitStatusContainmtDPMetric=airIRRCUnitStatusContainmtDPMetric, airIRRCUnitStatusFilterDPUS=airIRRCUnitStatusFilterDPUS, airIRRCUnitStatusFilterDPMetric=airIRRCUnitStatusFilterDPMetric, airIRRCUnitStatusFanSpeed=airIRRCUnitStatusFanSpeed, airIRRCUnitStatusInputState=airIRRCUnitStatusInputState, airIRRCUnitStatusOutputState=airIRRCUnitStatusOutputState, airIRRCUnitStatusActivePowerSource=airIRRCUnitStatusActivePowerSource, airIRRCUnitStatusFluidValvePosition=airIRRCUnitStatusFluidValvePosition, airIRRCUnitStatusFluidFlowUS=airIRRCUnitStatusFluidFlowUS, airIRRCUnitStatusFluidFlowMetric=airIRRCUnitStatusFluidFlowMetric, airIRRCUnitStatusEnteringFluidTemperatureUS=airIRRCUnitStatusEnteringFluidTemperatureUS, airIRRCUnitStatusEnteringFluidTemperatureMetric=airIRRCUnitStatusEnteringFluidTemperatureMetric, airIRRCUnitStatusLeavingFluidTemperatureUS=airIRRCUnitStatusLeavingFluidTemperatureUS, airIRRCUnitStatusLeavingFluidTemperatureMetric=airIRRCUnitStatusLeavingFluidTemperatureMetric, airIRRCUnitRunHours=airIRRCUnitRunHours, airIRRCUnitRunHoursAirFilter=airIRRCUnitRunHoursAirFilter, airIRRCUnitRunHoursFan1=airIRRCUnitRunHoursFan1, airIRRCUnitRunHoursFan2=airIRRCUnitRunHoursFan2, airIRRCUnitRunHoursFan3=airIRRCUnitRunHoursFan3, airIRRCUnitRunHoursFan4=airIRRCUnitRunHoursFan4, airIRRCUnitRunHoursFan5=airIRRCUnitRunHoursFan5, airIRRCUnitRunHoursFan6=airIRRCUnitRunHoursFan6, airIRRCUnitRunHoursFan7=airIRRCUnitRunHoursFan7, airIRRCUnitRunHoursFan8=airIRRCUnitRunHoursFan8, airIRRCUnitRunHoursFanPowerSupplyLeft=airIRRCUnitRunHoursFanPowerSupplyLeft, airIRRCUnitRunHoursFanPowerSupplyRight=airIRRCUnitRunHoursFanPowerSupplyRight, airIRRCUnitRunHoursCondensatePump=airIRRCUnitRunHoursCondensatePump, airIRRCUnitRunHoursFanPowerSupplyFeedALeft=airIRRCUnitRunHoursFanPowerSupplyFeedALeft, airIRRCUnitRunHoursFanPowerSupplyFeedARight=airIRRCUnitRunHoursFanPowerSupplyFeedARight, airIRRCUnitRunHoursFanPowerSupplyFeedBLeft=airIRRCUnitRunHoursFanPowerSupplyFeedBLeft, airIRRCUnitRunHoursFanPowerSupplyFeedBRight=airIRRCUnitRunHoursFanPowerSupplyFeedBRight, airIRRCUnitServiceIntervals=airIRRCUnitServiceIntervals, airIRRCUnitServiceIntervalsAirFilter=airIRRCUnitServiceIntervalsAirFilter, airIRRCUnitServiceIntervalsAirFilterAlarm=airIRRCUnitServiceIntervalsAirFilterAlarm, airIRRCUnitThresholds=airIRRCUnitThresholds, airIRRCUnitThresholdsRackInletHighTempUS=airIRRCUnitThresholdsRackInletHighTempUS, airIRRCUnitThresholdsRackInletHighTempMetric=airIRRCUnitThresholdsRackInletHighTempMetric, airIRRCUnitThresholdsSupplyAirHighTempUS=airIRRCUnitThresholdsSupplyAirHighTempUS, airIRRCUnitThresholdsSupplyAirHighTempMetric=airIRRCUnitThresholdsSupplyAirHighTempMetric)
mibBuilder.exportSymbols("PowerNet-MIB", airIRRCUnitThresholdsReturnAirHighTempUS=airIRRCUnitThresholdsReturnAirHighTempUS, airIRRCUnitThresholdsReturnAirHighTempMetric=airIRRCUnitThresholdsReturnAirHighTempMetric, airIRRCUnitThresholdsEnteringFluidHighTempUS=airIRRCUnitThresholdsEnteringFluidHighTempUS, airIRRCUnitThresholdsEnteringFluidHighTempMetric=airIRRCUnitThresholdsEnteringFluidHighTempMetric, airIRRCUnitConfig=airIRRCUnitConfig, airIRRCUnitConfigCoolCapacity=airIRRCUnitConfigCoolCapacity, airIRRCUnitConfigStartupDelay=airIRRCUnitConfigStartupDelay, airIRRCUnitConfigIdleOnLeakDetect=airIRRCUnitConfigIdleOnLeakDetect, airIRRCUnitConfigPowerSource=airIRRCUnitConfigPowerSource, airIRRCUnitConfigInputNormalState=airIRRCUnitConfigInputNormalState, airIRRCUnitConfigOutputNormalState=airIRRCUnitConfigOutputNormalState, airIRRCUnitConfigOutputSource=airIRRCUnitConfigOutputSource, airIRRCUnitConfigIdleOnCoolFail=airIRRCUnitConfigIdleOnCoolFail, airIRRP=airIRRP, airIRRP100=airIRRP100, airIRRP100Group=airIRRP100Group, airIRRP100GroupStatus=airIRRP100GroupStatus, airIRRP100GroupStatusAirFlowUS=airIRRP100GroupStatusAirFlowUS, airIRRP100GroupStatusAirFlowMetric=airIRRP100GroupStatusAirFlowMetric, airIRRP100GroupStatusMaxRackInletTempUS=airIRRP100GroupStatusMaxRackInletTempUS, airIRRP100GroupStatusMaxRackInletTempMetric=airIRRP100GroupStatusMaxRackInletTempMetric, airIRRP100GroupStatusMinRackInletTempUS=airIRRP100GroupStatusMinRackInletTempUS, airIRRP100GroupStatusMinRackInletTempMetric=airIRRP100GroupStatusMinRackInletTempMetric, airIRRP100GroupStatusCoolDemand=airIRRP100GroupStatusCoolDemand, airIRRP100GroupStatusCoolOutput=airIRRP100GroupStatusCoolOutput, airIRRP100GroupStatusHumidifyDemand=airIRRP100GroupStatusHumidifyDemand, airIRRP100GroupStatusHumidifyOutput=airIRRP100GroupStatusHumidifyOutput, airIRRP100GroupStatusDehumidifyDemand=airIRRP100GroupStatusDehumidifyDemand, airIRRP100GroupStatusDehumidifyOutput=airIRRP100GroupStatusDehumidifyOutput, airIRRP100GroupStatusReheatDemand=airIRRP100GroupStatusReheatDemand, airIRRP100GroupStatusReheatOutput=airIRRP100GroupStatusReheatOutput, airIRRP100GroupStatusActiveFlowControlStatus=airIRRP100GroupStatusActiveFlowControlStatus, airIRRP100GroupStatusDewPointTempUS=airIRRP100GroupStatusDewPointTempUS, airIRRP100GroupStatusDewPointTempMetric=airIRRP100GroupStatusDewPointTempMetric, airIRRP100GroupSetpoints=airIRRP100GroupSetpoints, airIRRP100GroupSetpointsCoolUS=airIRRP100GroupSetpointsCoolUS, airIRRP100GroupSetpointsCoolMetric=airIRRP100GroupSetpointsCoolMetric, airIRRP100GroupSetpointsSupplyAirUS=airIRRP100GroupSetpointsSupplyAirUS, airIRRP100GroupSetpointsSupplyAirMetric=airIRRP100GroupSetpointsSupplyAirMetric, airIRRP100GroupSetpointsHumidify=airIRRP100GroupSetpointsHumidify, airIRRP100GroupSetpointsDehumidify=airIRRP100GroupSetpointsDehumidify, airIRRP100GroupSetpointsDehumidifyDeadband=airIRRP100GroupSetpointsDehumidifyDeadband, airIRRP100GroupSetpointsReheatUS=airIRRP100GroupSetpointsReheatUS, airIRRP100GroupSetpointsReheatMetric=airIRRP100GroupSetpointsReheatMetric, airIRRP100GroupSetpointsFanSpeedPreference=airIRRP100GroupSetpointsFanSpeedPreference, airIRRP100GroupSetpointsFanSpeedControl=airIRRP100GroupSetpointsFanSpeedControl, airIRRP100GroupSetpointsActiveFlowControlBias=airIRRP100GroupSetpointsActiveFlowControlBias, airIRRP100GroupConfig=airIRRP100GroupConfig, airIRRP100GroupConfigNumberofCoolingUnits=airIRRP100GroupConfigNumberofCoolingUnits, airIRRP100GroupConfigConfigurationType=airIRRP100GroupConfigConfigurationType, airIRRP100GroupConfigCoolGainP=airIRRP100GroupConfigCoolGainP, airIRRP100GroupConfigCoolResetRateI=airIRRP100GroupConfigCoolResetRateI, airIRRP100GroupConfigCoolDerivativeD=airIRRP100GroupConfigCoolDerivativeD, airIRRP100GroupConfigHumidifySensitivityBand=airIRRP100GroupConfigHumidifySensitivityBand, airIRRP100GroupConfigReheatGainP=airIRRP100GroupConfigReheatGainP, airIRRP100GroupConfigReheatResetRateI=airIRRP100GroupConfigReheatResetRateI, airIRRP100GroupConfigReheatDerivativeD=airIRRP100GroupConfigReheatDerivativeD, airIRRP100GroupConfigNumberofBackupUnits=airIRRP100GroupConfigNumberofBackupUnits, airIRRP100GroupConfigRuntimeBalancingEnable=airIRRP100GroupConfigRuntimeBalancingEnable, airIRRP100GroupConfigLoadAssistEnable=airIRRP100GroupConfigLoadAssistEnable, airIRRP100GroupConfigFullRPBackups=airIRRP100GroupConfigFullRPBackups, airIRRP100GroupConfigMaxFanSpeed=airIRRP100GroupConfigMaxFanSpeed, airIRRP100GroupConfigNumberOfActiveFlowControllers=airIRRP100GroupConfigNumberOfActiveFlowControllers, airIRRP100GroupConfigActiveFlowControllerLampTest=airIRRP100GroupConfigActiveFlowControllerLampTest, airIRRP100GroupConfigAltitudeUS=airIRRP100GroupConfigAltitudeUS, airIRRP100GroupConfigAltitudeMetric=airIRRP100GroupConfigAltitudeMetric, airIRRP100Unit=airIRRP100Unit, airIRRP100UnitIdent=airIRRP100UnitIdent, airIRRP100UnitIdentID=airIRRP100UnitIdentID, airIRRP100UnitIdentName=airIRRP100UnitIdentName, airIRRP100UnitIdentLocation=airIRRP100UnitIdentLocation, airIRRP100UnitIdentModelNumber=airIRRP100UnitIdentModelNumber, airIRRP100UnitIdentSerialNumber=airIRRP100UnitIdentSerialNumber, airIRRP100UnitIdentFirmwareRevision=airIRRP100UnitIdentFirmwareRevision, airIRRP100UnitIdentHardwareRevision=airIRRP100UnitIdentHardwareRevision, airIRRP100UnitIdentManufactureDate=airIRRP100UnitIdentManufactureDate, airIRRP100UnitStatus=airIRRP100UnitStatus, airIRRP100UnitStatusOperateMode=airIRRP100UnitStatusOperateMode, airIRRP100UnitStatusRackInletTempUS=airIRRP100UnitStatusRackInletTempUS, airIRRP100UnitStatusRackInletTempMetric=airIRRP100UnitStatusRackInletTempMetric, airIRRP100UnitStatusSupplyAirTempUS=airIRRP100UnitStatusSupplyAirTempUS, airIRRP100UnitStatusSupplyAirTempMetric=airIRRP100UnitStatusSupplyAirTempMetric, airIRRP100UnitStatusReturnAirTempUS=airIRRP100UnitStatusReturnAirTempUS, airIRRP100UnitStatusReturnAirTempMetric=airIRRP100UnitStatusReturnAirTempMetric, airIRRP100UnitStatusSupplyHumidity=airIRRP100UnitStatusSupplyHumidity, airIRRP100UnitStatusReturnHumidity=airIRRP100UnitStatusReturnHumidity, airIRRP100UnitStatusAirFlowUS=airIRRP100UnitStatusAirFlowUS, airIRRP100UnitStatusAirFlowMetric=airIRRP100UnitStatusAirFlowMetric, airIRRP100UnitStatusFanSpeed=airIRRP100UnitStatusFanSpeed, airIRRP100UnitStatusCoolDemand=airIRRP100UnitStatusCoolDemand, airIRRP100UnitStatusCoolOutput=airIRRP100UnitStatusCoolOutput, airIRRP100UnitStatusHumidifyDemand=airIRRP100UnitStatusHumidifyDemand, airIRRP100UnitStatusHumidifyOutput=airIRRP100UnitStatusHumidifyOutput, airIRRP100UnitStatusDehumidifyDemand=airIRRP100UnitStatusDehumidifyDemand, airIRRP100UnitStatusDehumidifyOutput=airIRRP100UnitStatusDehumidifyOutput, airIRRP100UnitStatusReheatDemand=airIRRP100UnitStatusReheatDemand, airIRRP100UnitStatusReheatOutput=airIRRP100UnitStatusReheatOutput, airIRRP100UnitStatusInputState=airIRRP100UnitStatusInputState, airIRRP100UnitStatusOutputState=airIRRP100UnitStatusOutputState, airIRRP100UnitStatusRackInletTemperature1US=airIRRP100UnitStatusRackInletTemperature1US, airIRRP100UnitStatusRackInletTemperature1Metric=airIRRP100UnitStatusRackInletTemperature1Metric, airIRRP100UnitStatusRackInletTemperature2US=airIRRP100UnitStatusRackInletTemperature2US, airIRRP100UnitStatusRackInletTemperature2Metric=airIRRP100UnitStatusRackInletTemperature2Metric, airIRRP100UnitStatusRackInletTemperature3US=airIRRP100UnitStatusRackInletTemperature3US, airIRRP100UnitStatusRackInletTemperature3Metric=airIRRP100UnitStatusRackInletTemperature3Metric, airIRRP100UnitStatusFilterDPUS=airIRRP100UnitStatusFilterDPUS, airIRRP100UnitStatusFilterDPMetric=airIRRP100UnitStatusFilterDPMetric, airIRRP100UnitStatusContainmtDPUS=airIRRP100UnitStatusContainmtDPUS, airIRRP100UnitStatusContainmtDPMetric=airIRRP100UnitStatusContainmtDPMetric, airIRRP100UnitStatusHumidifierCurrent=airIRRP100UnitStatusHumidifierCurrent, airIRRP100UnitStatusHumidifierWaterConductivity=airIRRP100UnitStatusHumidifierWaterConductivity, airIRRP100UnitStatusCompressorDriveSpeed=airIRRP100UnitStatusCompressorDriveSpeed, airIRRP100UnitStatusCompressorDrivePower=airIRRP100UnitStatusCompressorDrivePower, airIRRP100UnitStatusCompressorDriveVoltage=airIRRP100UnitStatusCompressorDriveVoltage, airIRRP100UnitStatusCompressorDriveCurrent=airIRRP100UnitStatusCompressorDriveCurrent, airIRRP100UnitStatusCompressorDriveDCLinkVoltage=airIRRP100UnitStatusCompressorDriveDCLinkVoltage, airIRRP100UnitStatusCompressorDriveHeatSinkTempUS=airIRRP100UnitStatusCompressorDriveHeatSinkTempUS, airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric=airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric, airIRRP100UnitStatusCompressorDriveControlCardTempUS=airIRRP100UnitStatusCompressorDriveControlCardTempUS, airIRRP100UnitStatusCompressorDriveControlCardTempMetric=airIRRP100UnitStatusCompressorDriveControlCardTempMetric, airIRRP100UnitStatusCompressorDriveWarningStatus=airIRRP100UnitStatusCompressorDriveWarningStatus, airIRRP100UnitStatusCompressorDriveAlarmStatus=airIRRP100UnitStatusCompressorDriveAlarmStatus, airIRRP100UnitStatusSuctionPressureUS=airIRRP100UnitStatusSuctionPressureUS, airIRRP100UnitStatusSuctionPressureMetric=airIRRP100UnitStatusSuctionPressureMetric, airIRRP100UnitStatusDischargePressureUS=airIRRP100UnitStatusDischargePressureUS, airIRRP100UnitStatusDischargePressureMetric=airIRRP100UnitStatusDischargePressureMetric, airIRRP100UnitStatusLeakSensor=airIRRP100UnitStatusLeakSensor)
mibBuilder.exportSymbols("PowerNet-MIB", airIRRP100UnitRunHours=airIRRP100UnitRunHours, airIRRP100UnitRunHoursAirFilter=airIRRP100UnitRunHoursAirFilter, airIRRP100UnitRunHoursCondensatePump=airIRRP100UnitRunHoursCondensatePump, airIRRP100UnitRunHoursHumidifier=airIRRP100UnitRunHoursHumidifier, airIRRP100UnitRunHoursFan1=airIRRP100UnitRunHoursFan1, airIRRP100UnitRunHoursHeater1=airIRRP100UnitRunHoursHeater1, airIRRP100UnitRunHoursFan2=airIRRP100UnitRunHoursFan2, airIRRP100UnitRunHoursHeater2=airIRRP100UnitRunHoursHeater2, airIRRP100UnitRunHoursCompressor=airIRRP100UnitRunHoursCompressor, airIRRP100UnitRunHoursSystem=airIRRP100UnitRunHoursSystem, airIRRP100UnitServiceIntervals=airIRRP100UnitServiceIntervals, airIRRP100UnitServiceIntervalAirFilter=airIRRP100UnitServiceIntervalAirFilter, airIRRP100UnitServiceIntervalAirFilterAlarm=airIRRP100UnitServiceIntervalAirFilterAlarm, airIRRP100UnitServiceIntervalHumidifier=airIRRP100UnitServiceIntervalHumidifier, airIRRP100UnitServiceIntervalHumidifierAlarm=airIRRP100UnitServiceIntervalHumidifierAlarm, airIRRP100UnitServiceIntervalHeater=airIRRP100UnitServiceIntervalHeater, airIRRP100UnitServiceIntervalHeaterAlarm=airIRRP100UnitServiceIntervalHeaterAlarm, airIRRP100UnitServiceIntervalCompressor=airIRRP100UnitServiceIntervalCompressor, airIRRP100UnitServiceIntervalCompressorAlarm=airIRRP100UnitServiceIntervalCompressorAlarm, airIRRP100UnitServiceIntervalCondensatePump=airIRRP100UnitServiceIntervalCondensatePump, airIRRP100UnitServiceIntervalCondensatePumpAlarm=airIRRP100UnitServiceIntervalCondensatePumpAlarm, airIRRP100UnitServiceIntervalFans=airIRRP100UnitServiceIntervalFans, airIRRP100UnitServiceIntervalFansAlarm=airIRRP100UnitServiceIntervalFansAlarm, airIRRP100UnitThresholds=airIRRP100UnitThresholds, airIRRP100UnitThresholdsRackInletHighTempUS=airIRRP100UnitThresholdsRackInletHighTempUS, airIRRP100UnitThresholdsRackInletHighTempMetric=airIRRP100UnitThresholdsRackInletHighTempMetric, airIRRP100UnitThresholdsSupplyAirHighTempUS=airIRRP100UnitThresholdsSupplyAirHighTempUS, airIRRP100UnitThresholdsSupplyAirHighTempMetric=airIRRP100UnitThresholdsSupplyAirHighTempMetric, airIRRP100UnitThresholdsReturnAirHighTempUS=airIRRP100UnitThresholdsReturnAirHighTempUS, airIRRP100UnitThresholdsReturnAirHighTempMetric=airIRRP100UnitThresholdsReturnAirHighTempMetric, airIRRP100UnitThresholdsSupplyHumidityHigh=airIRRP100UnitThresholdsSupplyHumidityHigh, airIRRP100UnitThresholdsSupplyHumidityLow=airIRRP100UnitThresholdsSupplyHumidityLow, airIRRP100UnitConfig=airIRRP100UnitConfig, airIRRP100UnitConfigStartupDelay=airIRRP100UnitConfigStartupDelay, airIRRP100UnitConfigCoolCapacity=airIRRP100UnitConfigCoolCapacity, airIRRP100UnitConfigIdleOnLeakDetect=airIRRP100UnitConfigIdleOnLeakDetect, airIRRP100UnitConfigInputNormalState=airIRRP100UnitConfigInputNormalState, airIRRP100UnitConfigOutputNormalState=airIRRP100UnitConfigOutputNormalState, airIRRP100UnitConfigOutputSource=airIRRP100UnitConfigOutputSource, airIRRP100UnitConfigHumidifyEnable=airIRRP100UnitConfigHumidifyEnable, airIRRP100UnitConfigHumidifierControl=airIRRP100UnitConfigHumidifierControl, airIRRP100UnitConfigDehumidifyEnable=airIRRP100UnitConfigDehumidifyEnable, airIRRP100UnitConfigReheatEnable=airIRRP100UnitConfigReheatEnable, airIRRP100UnitConfigHeatAssistEnable=airIRRP100UnitConfigHeatAssistEnable, airIRRP100UnitConfigPowerSourceConfig=airIRRP100UnitConfigPowerSourceConfig, airIRRP100UnitConfigUnitRoleOverride=airIRRP100UnitConfigUnitRoleOverride, airIRRP100UnitConfigSecondaryPowerFeedCapability=airIRRP100UnitConfigSecondaryPowerFeedCapability, airIRRP100UnitConfigIdleOnCoolFail=airIRRP100UnitConfigIdleOnCoolFail, airIRRP500=airIRRP500, airIRRP500Group=airIRRP500Group, airIRRP500GroupStatus=airIRRP500GroupStatus, airIRRP500GroupStatusAirFlowUS=airIRRP500GroupStatusAirFlowUS, airIRRP500GroupStatusAirFlowMetric=airIRRP500GroupStatusAirFlowMetric, airIRRP500GroupStatusMaxRackInletTempUS=airIRRP500GroupStatusMaxRackInletTempUS, airIRRP500GroupStatusMaxRackInletTempMetric=airIRRP500GroupStatusMaxRackInletTempMetric, airIRRP500GroupStatusMinRackInletTempUS=airIRRP500GroupStatusMinRackInletTempUS, airIRRP500GroupStatusMinRackInletTempMetric=airIRRP500GroupStatusMinRackInletTempMetric, airIRRP500GroupStatusCoolDemand=airIRRP500GroupStatusCoolDemand, airIRRP500GroupStatusCoolOutput=airIRRP500GroupStatusCoolOutput, airIRRP500GroupStatusHumidifyDemand=airIRRP500GroupStatusHumidifyDemand, airIRRP500GroupStatusHumidifyOutput=airIRRP500GroupStatusHumidifyOutput, airIRRP500GroupStatusDehumidifyDemand=airIRRP500GroupStatusDehumidifyDemand, airIRRP500GroupStatusDehumidifyOutput=airIRRP500GroupStatusDehumidifyOutput, airIRRP500GroupStatusReheatDemand=airIRRP500GroupStatusReheatDemand, airIRRP500GroupStatusReheatOutput=airIRRP500GroupStatusReheatOutput, airIRRP500GroupStatusActiveFlowControlStatus=airIRRP500GroupStatusActiveFlowControlStatus, airIRRP500GroupStatusDewPointTempUS=airIRRP500GroupStatusDewPointTempUS, airIRRP500GroupStatusDewPointTempMetric=airIRRP500GroupStatusDewPointTempMetric, airIRRP500GroupSetpoints=airIRRP500GroupSetpoints, airIRRP500GroupSetpointsCoolUS=airIRRP500GroupSetpointsCoolUS, airIRRP500GroupSetpointsCoolMetric=airIRRP500GroupSetpointsCoolMetric, airIRRP500GroupSetpointsSupplyAirUS=airIRRP500GroupSetpointsSupplyAirUS, airIRRP500GroupSetpointsSupplyAirMetric=airIRRP500GroupSetpointsSupplyAirMetric, airIRRP500GroupSetpointsHumidify=airIRRP500GroupSetpointsHumidify, airIRRP500GroupSetpointsDehumidify=airIRRP500GroupSetpointsDehumidify, airIRRP500GroupSetpointsDehumidifyDeadband=airIRRP500GroupSetpointsDehumidifyDeadband, airIRRP500GroupSetpointsReheatUS=airIRRP500GroupSetpointsReheatUS, airIRRP500GroupSetpointsReheatMetric=airIRRP500GroupSetpointsReheatMetric, airIRRP500GroupSetpointsFanSpeedPreference=airIRRP500GroupSetpointsFanSpeedPreference, airIRRP500GroupSetpointsFanSpeedControl=airIRRP500GroupSetpointsFanSpeedControl, airIRRP500GroupSetpointsActiveFlowControlBias=airIRRP500GroupSetpointsActiveFlowControlBias, airIRRP500GroupConfig=airIRRP500GroupConfig, airIRRP500GroupConfigNumberofCoolingUnits=airIRRP500GroupConfigNumberofCoolingUnits, airIRRP500GroupConfigConfigurationType=airIRRP500GroupConfigConfigurationType, airIRRP500GroupConfigPercentGlycol=airIRRP500GroupConfigPercentGlycol, airIRRP500GroupConfigCoolGainP=airIRRP500GroupConfigCoolGainP, airIRRP500GroupConfigCoolResetRateI=airIRRP500GroupConfigCoolResetRateI, airIRRP500GroupConfigCoolDerivativeD=airIRRP500GroupConfigCoolDerivativeD, airIRRP500GroupConfigHumidifySensitivityBand=airIRRP500GroupConfigHumidifySensitivityBand, airIRRP500GroupConfigReheatGainP=airIRRP500GroupConfigReheatGainP, airIRRP500GroupConfigReheatResetRateI=airIRRP500GroupConfigReheatResetRateI, airIRRP500GroupConfigReheatDerivativeD=airIRRP500GroupConfigReheatDerivativeD, airIRRP500GroupConfigMaxFanSpeed=airIRRP500GroupConfigMaxFanSpeed, airIRRP500GroupConfigNumberofBackupUnits=airIRRP500GroupConfigNumberofBackupUnits, airIRRP500GroupConfigRuntimeBalancingEnable=airIRRP500GroupConfigRuntimeBalancingEnable, airIRRP500GroupConfigLoadAssistEnable=airIRRP500GroupConfigLoadAssistEnable, airIRRP500GroupConfigFullRPBackups=airIRRP500GroupConfigFullRPBackups, airIRRP500GroupConfigNumberOfActiveFlowControllers=airIRRP500GroupConfigNumberOfActiveFlowControllers, airIRRP500GroupConfigActiveFlowControllerLampTest=airIRRP500GroupConfigActiveFlowControllerLampTest, airIRRP500GroupConfigAltitudeUS=airIRRP500GroupConfigAltitudeUS, airIRRP500GroupConfigAltitudeMetric=airIRRP500GroupConfigAltitudeMetric, airIRRP500Unit=airIRRP500Unit, airIRRP500UnitIdent=airIRRP500UnitIdent, airIRRP500UnitIdentID=airIRRP500UnitIdentID, airIRRP500UnitIdentName=airIRRP500UnitIdentName, airIRRP500UnitIdentLocation=airIRRP500UnitIdentLocation, airIRRP500UnitIdentModelNumber=airIRRP500UnitIdentModelNumber, airIRRP500UnitIdentSerialNumber=airIRRP500UnitIdentSerialNumber, airIRRP500UnitIdentFirmwareRevision=airIRRP500UnitIdentFirmwareRevision, airIRRP500UnitIdentHardwareRevision=airIRRP500UnitIdentHardwareRevision, airIRRP500UnitIdentManufactureDate=airIRRP500UnitIdentManufactureDate, airIRRP500UnitStatus=airIRRP500UnitStatus, airIRRP500UnitStatusOperateMode=airIRRP500UnitStatusOperateMode, airIRRP500UnitStatusMaximumRackInletTempUS=airIRRP500UnitStatusMaximumRackInletTempUS, airIRRP500UnitStatusMaximumRackInletTempMetric=airIRRP500UnitStatusMaximumRackInletTempMetric, airIRRP500UnitStatusSupplyAirTempUS=airIRRP500UnitStatusSupplyAirTempUS, airIRRP500UnitStatusSupplyAirTempMetric=airIRRP500UnitStatusSupplyAirTempMetric, airIRRP500UnitStatusReturnAirTempUS=airIRRP500UnitStatusReturnAirTempUS, airIRRP500UnitStatusReturnAirTempMetric=airIRRP500UnitStatusReturnAirTempMetric, airIRRP500UnitStatusSupplyHumidity=airIRRP500UnitStatusSupplyHumidity, airIRRP500UnitStatusReturnHumidity=airIRRP500UnitStatusReturnHumidity, airIRRP500UnitStatusAirFlowUS=airIRRP500UnitStatusAirFlowUS, airIRRP500UnitStatusAirFlowMetric=airIRRP500UnitStatusAirFlowMetric, airIRRP500UnitStatusFanSpeed=airIRRP500UnitStatusFanSpeed, airIRRP500UnitStatusCoolDemand=airIRRP500UnitStatusCoolDemand, airIRRP500UnitStatusCoolOutput=airIRRP500UnitStatusCoolOutput, airIRRP500UnitStatusHumidifyDemand=airIRRP500UnitStatusHumidifyDemand)
mibBuilder.exportSymbols("PowerNet-MIB", airIRRP500UnitStatusHumidifyOutput=airIRRP500UnitStatusHumidifyOutput, airIRRP500UnitStatusDehumidifyDemand=airIRRP500UnitStatusDehumidifyDemand, airIRRP500UnitStatusDehumidifyOutput=airIRRP500UnitStatusDehumidifyOutput, airIRRP500UnitStatusReheatDemand=airIRRP500UnitStatusReheatDemand, airIRRP500UnitStatusReheatOutput=airIRRP500UnitStatusReheatOutput, airIRRP500UnitStatusInputState=airIRRP500UnitStatusInputState, airIRRP500UnitStatusOutputState=airIRRP500UnitStatusOutputState, airIRRP500UnitStatusRackInletTemperature1US=airIRRP500UnitStatusRackInletTemperature1US, airIRRP500UnitStatusRackInletTemperature1Metric=airIRRP500UnitStatusRackInletTemperature1Metric, airIRRP500UnitStatusRackInletTemperature2US=airIRRP500UnitStatusRackInletTemperature2US, airIRRP500UnitStatusRackInletTemperature2Metric=airIRRP500UnitStatusRackInletTemperature2Metric, airIRRP500UnitStatusRackInletTemperature3US=airIRRP500UnitStatusRackInletTemperature3US, airIRRP500UnitStatusRackInletTemperature3Metric=airIRRP500UnitStatusRackInletTemperature3Metric, airIRRP500UnitStatusContainmtDPUS=airIRRP500UnitStatusContainmtDPUS, airIRRP500UnitStatusContainmtDPMetric=airIRRP500UnitStatusContainmtDPMetric, airIRRP500UnitStatusFilterDPUS=airIRRP500UnitStatusFilterDPUS, airIRRP500UnitStatusFilterDPMetric=airIRRP500UnitStatusFilterDPMetric, airIRRP500UnitStatusHumidifierCurrent=airIRRP500UnitStatusHumidifierCurrent, airIRRP500UnitStatusHumidifierWaterConductivity=airIRRP500UnitStatusHumidifierWaterConductivity, airIRRP500UnitStatusActivePowerSource=airIRRP500UnitStatusActivePowerSource, airIRRP500UnitStatusFluidValvePosition=airIRRP500UnitStatusFluidValvePosition, airIRRP500UnitStatusFluidFlowUS=airIRRP500UnitStatusFluidFlowUS, airIRRP500UnitStatusFluidFlowMetric=airIRRP500UnitStatusFluidFlowMetric, airIRRP500UnitStatusEnteringFluidTemperatureUS=airIRRP500UnitStatusEnteringFluidTemperatureUS, airIRRP500UnitStatusEnteringFluidTemperatureMetric=airIRRP500UnitStatusEnteringFluidTemperatureMetric, airIRRP500UnitStatusLeavingFluidTemperatureUS=airIRRP500UnitStatusLeavingFluidTemperatureUS, airIRRP500UnitStatusLeavingFluidTemperatureMetric=airIRRP500UnitStatusLeavingFluidTemperatureMetric, airIRRP500UnitStatusLeakSensor=airIRRP500UnitStatusLeakSensor, airIRRP500UnitRunHours=airIRRP500UnitRunHours, airIRRP500UnitRunHoursAirFilter=airIRRP500UnitRunHoursAirFilter, airIRRP500UnitRunHoursCondensatePump=airIRRP500UnitRunHoursCondensatePump, airIRRP500UnitRunHoursHumidifier=airIRRP500UnitRunHoursHumidifier, airIRRP500UnitRunHoursFan1=airIRRP500UnitRunHoursFan1, airIRRP500UnitRunHoursHeater1=airIRRP500UnitRunHoursHeater1, airIRRP500UnitRunHoursFan2=airIRRP500UnitRunHoursFan2, airIRRP500UnitRunHoursHeater2=airIRRP500UnitRunHoursHeater2, airIRRP500UnitRunHoursFan3=airIRRP500UnitRunHoursFan3, airIRRP500UnitRunHoursHeater3=airIRRP500UnitRunHoursHeater3, airIRRP500UnitRunHoursSystem=airIRRP500UnitRunHoursSystem, airIRRP500UnitServiceIntervals=airIRRP500UnitServiceIntervals, airIRRP500UnitServiceIntervalAirFilter=airIRRP500UnitServiceIntervalAirFilter, airIRRP500UnitServiceIntervalAirFilterAlarm=airIRRP500UnitServiceIntervalAirFilterAlarm, airIRRP500UnitServiceIntervalHumidifier=airIRRP500UnitServiceIntervalHumidifier, airIRRP500UnitServiceIntervalHumidifierAlarm=airIRRP500UnitServiceIntervalHumidifierAlarm, airIRRP500UnitServiceIntervalHeater=airIRRP500UnitServiceIntervalHeater, airIRRP500UnitServiceIntervalHeaterAlarm=airIRRP500UnitServiceIntervalHeaterAlarm, airIRRP500UnitServiceIntervalCondensatePump=airIRRP500UnitServiceIntervalCondensatePump, airIRRP500UnitServiceIntervalCondensatePumpAlarm=airIRRP500UnitServiceIntervalCondensatePumpAlarm, airIRRP500UnitServiceIntervalFans=airIRRP500UnitServiceIntervalFans, airIRRP500UnitServiceIntervalFansAlarm=airIRRP500UnitServiceIntervalFansAlarm, airIRRP500UnitThresholds=airIRRP500UnitThresholds, airIRRP500UnitThresholdsRackInletHighTempUS=airIRRP500UnitThresholdsRackInletHighTempUS, airIRRP500UnitThresholdsRackInletHighTempMetric=airIRRP500UnitThresholdsRackInletHighTempMetric, airIRRP500UnitThresholdsSupplyAirHighTempUS=airIRRP500UnitThresholdsSupplyAirHighTempUS, airIRRP500UnitThresholdsSupplyAirHighTempMetric=airIRRP500UnitThresholdsSupplyAirHighTempMetric, airIRRP500UnitThresholdsReturnAirHighTempUS=airIRRP500UnitThresholdsReturnAirHighTempUS, airIRRP500UnitThresholdsReturnAirHighTempMetric=airIRRP500UnitThresholdsReturnAirHighTempMetric, airIRRP500UnitThresholdsSupplyHumidityHigh=airIRRP500UnitThresholdsSupplyHumidityHigh, airIRRP500UnitThresholdsSupplyHumidityLow=airIRRP500UnitThresholdsSupplyHumidityLow, airIRRP500UnitThresholdsEnteringFluidHighTempUS=airIRRP500UnitThresholdsEnteringFluidHighTempUS, airIRRP500UnitThresholdsEnteringFluidHighTempMetric=airIRRP500UnitThresholdsEnteringFluidHighTempMetric, airIRRP500UnitConfig=airIRRP500UnitConfig, airIRRP500UnitConfigStartupDelay=airIRRP500UnitConfigStartupDelay, airIRRP500UnitConfigCoolCapacity=airIRRP500UnitConfigCoolCapacity, airIRRP500UnitConfigIdleOnLeakDetect=airIRRP500UnitConfigIdleOnLeakDetect, airIRRP500UnitConfigInputNormalState=airIRRP500UnitConfigInputNormalState, airIRRP500UnitConfigOutputNormalState=airIRRP500UnitConfigOutputNormalState, airIRRP500UnitConfigOutputSource=airIRRP500UnitConfigOutputSource, airIRRP500UnitConfigHumidifyEnable=airIRRP500UnitConfigHumidifyEnable, airIRRP500UnitConfigHumidifierControl=airIRRP500UnitConfigHumidifierControl, airIRRP500UnitConfigDehumidifyEnable=airIRRP500UnitConfigDehumidifyEnable, airIRRP500UnitConfigReheatEnable=airIRRP500UnitConfigReheatEnable, airIRRP500UnitConfigHeatAssistEnable=airIRRP500UnitConfigHeatAssistEnable, airIRRP500UnitConfigPowerSourceConfig=airIRRP500UnitConfigPowerSourceConfig, airIRRP500UnitConfigUnitRoleOverride=airIRRP500UnitConfigUnitRoleOverride, airIRRP500UnitConfigSecondaryPowerFeedCapability=airIRRP500UnitConfigSecondaryPowerFeedCapability, airIRRP500UnitConfigIdleOnCoolFail=airIRRP500UnitConfigIdleOnCoolFail, airIRSC=airIRSC, airIRSCUnit=airIRSCUnit, airIRSCUnitIdent=airIRSCUnitIdent, airIRSCUnitIdentName=airIRSCUnitIdentName, airIRSCUnitIdentLocation=airIRSCUnitIdentLocation, airIRSCUnitIdentModelNumber=airIRSCUnitIdentModelNumber, airIRSCUnitIdentSerialNumber=airIRSCUnitIdentSerialNumber, airIRSCUnitIdentFirmwareRevision=airIRSCUnitIdentFirmwareRevision, airIRSCUnitIdentHardwareRevision=airIRSCUnitIdentHardwareRevision, airIRSCUnitIdentManufactureDate=airIRSCUnitIdentManufactureDate, airIRSCUnitStatus=airIRSCUnitStatus, airIRSCUnitStatusOperateMode=airIRSCUnitStatusOperateMode, airIRSCUnitStatusCoolOutput=airIRSCUnitStatusCoolOutput, airIRSCUnitStatusCoolDemand=airIRSCUnitStatusCoolDemand, airIRSCUnitStatusAirFlowUS=airIRSCUnitStatusAirFlowUS, airIRSCUnitStatusAirFlowMetric=airIRSCUnitStatusAirFlowMetric, airIRSCUnitStatusRackInletTempUS=airIRSCUnitStatusRackInletTempUS, airIRSCUnitStatusRackInletTempMetric=airIRSCUnitStatusRackInletTempMetric, airIRSCUnitStatusSupplyAirTempUS=airIRSCUnitStatusSupplyAirTempUS, airIRSCUnitStatusSupplyAirTempMetric=airIRSCUnitStatusSupplyAirTempMetric, airIRSCUnitStatusReturnAirTempUS=airIRSCUnitStatusReturnAirTempUS, airIRSCUnitStatusReturnAirTempMetric=airIRSCUnitStatusReturnAirTempMetric, airIRSCUnitStatusSuctionTempUS=airIRSCUnitStatusSuctionTempUS, airIRSCUnitStatusSuctionTempMetric=airIRSCUnitStatusSuctionTempMetric, airIRSCUnitStatusSuperheatTempUS=airIRSCUnitStatusSuperheatTempUS, airIRSCUnitStatusSuperheatTempMetric=airIRSCUnitStatusSuperheatTempMetric, airIRSCUnitStatusContainmtDPUS=airIRSCUnitStatusContainmtDPUS, airIRSCUnitStatusContainmtDPMetric=airIRSCUnitStatusContainmtDPMetric, airIRSCUnitStatusFilterDPUS=airIRSCUnitStatusFilterDPUS, airIRSCUnitStatusFilterDPMetric=airIRSCUnitStatusFilterDPMetric, airIRSCUnitStatusSuctionPressureUS=airIRSCUnitStatusSuctionPressureUS, airIRSCUnitStatusSuctionPressureMetric=airIRSCUnitStatusSuctionPressureMetric, airIRSCUnitStatusDischargePressureUS=airIRSCUnitStatusDischargePressureUS, airIRSCUnitStatusDischargePressureMetric=airIRSCUnitStatusDischargePressureMetric, airIRSCUnitStatusEvaporatorFanSpeed=airIRSCUnitStatusEvaporatorFanSpeed, airIRSCUnitStatusCondenserFanSpeed=airIRSCUnitStatusCondenserFanSpeed, airIRSCUnitStatusInputState=airIRSCUnitStatusInputState, airIRSCUnitStatusOutputState=airIRSCUnitStatusOutputState, airIRSCUnitStatusCondOutletTempUS=airIRSCUnitStatusCondOutletTempUS, airIRSCUnitStatusCondOutletTempMetric=airIRSCUnitStatusCondOutletTempMetric, airIRSCUnitStatusCondInletTempUS=airIRSCUnitStatusCondInletTempUS, airIRSCUnitStatusCondInletTempMetric=airIRSCUnitStatusCondInletTempMetric, airIRSCUnitStatusCompressor=airIRSCUnitStatusCompressor, airIRSCUnitStatusLeakSensor=airIRSCUnitStatusLeakSensor, airIRSCUnitRunHours=airIRSCUnitRunHours, airIRSCUnitRunHoursAirFilter=airIRSCUnitRunHoursAirFilter, airIRSCUnitRunHoursEvaporatorFan1=airIRSCUnitRunHoursEvaporatorFan1, airIRSCUnitRunHoursEvaporatorFan2=airIRSCUnitRunHoursEvaporatorFan2, airIRSCUnitRunHoursEvaporatorFan3=airIRSCUnitRunHoursEvaporatorFan3, airIRSCUnitRunHoursCondenserFan1=airIRSCUnitRunHoursCondenserFan1)
mibBuilder.exportSymbols("PowerNet-MIB", airIRSCUnitRunHoursCondenserFan2=airIRSCUnitRunHoursCondenserFan2, airIRSCUnitRunHoursCondenserFan3=airIRSCUnitRunHoursCondenserFan3, airIRSCUnitRunHoursFanPowerSupplyLeft=airIRSCUnitRunHoursFanPowerSupplyLeft, airIRSCUnitRunHoursFanPowerSupplyRight=airIRSCUnitRunHoursFanPowerSupplyRight, airIRSCUnitRunHoursCondensatePump=airIRSCUnitRunHoursCondensatePump, airIRSCUnitRunHoursCompressor=airIRSCUnitRunHoursCompressor, airIRSCUnitServiceIntervals=airIRSCUnitServiceIntervals, airIRSCUnitServiceIntervalsAirFilter=airIRSCUnitServiceIntervalsAirFilter, airIRSCUnitServiceIntervalsAirFilterAlarm=airIRSCUnitServiceIntervalsAirFilterAlarm, airIRSCUnitThresholds=airIRSCUnitThresholds, airIRSCUnitThresholdsRackInletHighTempUS=airIRSCUnitThresholdsRackInletHighTempUS, airIRSCUnitThresholdsRackInletHighTempMetric=airIRSCUnitThresholdsRackInletHighTempMetric, airIRSCUnitThresholdsSupplyAirHighTempUS=airIRSCUnitThresholdsSupplyAirHighTempUS, airIRSCUnitThresholdsSupplyAirHighTempMetric=airIRSCUnitThresholdsSupplyAirHighTempMetric, airIRSCUnitThresholdsReturnAirHighTempUS=airIRSCUnitThresholdsReturnAirHighTempUS, airIRSCUnitThresholdsReturnAirHighTempMetric=airIRSCUnitThresholdsReturnAirHighTempMetric, airIRSCUnitSetpoints=airIRSCUnitSetpoints, airIRSCUnitSetptsCoolSetpointUS=airIRSCUnitSetptsCoolSetpointUS, airIRSCUnitSetptsCoolSetpointMetric=airIRSCUnitSetptsCoolSetpointMetric, airIRSCUnitSetptsCoolDeadbandUS=airIRSCUnitSetptsCoolDeadbandUS, airIRSCUnitSetptsCoolDeadbandMetric=airIRSCUnitSetptsCoolDeadbandMetric, airIRSCUnitSetptsFanSpeedPreference=airIRSCUnitSetptsFanSpeedPreference, airIRSCUnitSetptsSupplyAirSetpointUS=airIRSCUnitSetptsSupplyAirSetpointUS, airIRSCUnitSetptsSupplyAirSetpointMetric=airIRSCUnitSetptsSupplyAirSetpointMetric, airIRSCUnitConfig=airIRSCUnitConfig, airIRSCUnitConfigConfigurationType=airIRSCUnitConfigConfigurationType, airIRSCUnitConfigCapacityControlType=airIRSCUnitConfigCapacityControlType, airIRSCUnitConfigStartupDelay=airIRSCUnitConfigStartupDelay, airIRSCUnitConfigIdleOnLeakDetect=airIRSCUnitConfigIdleOnLeakDetect, airIRSCUnitConfigInputNormalState=airIRSCUnitConfigInputNormalState, airIRSCUnitConfigOutputNormalState=airIRSCUnitConfigOutputNormalState, airIRSCUnitConfigOutputSource=airIRSCUnitConfigOutputSource, airIRSCUnitConfigAltitudeUS=airIRSCUnitConfigAltitudeUS, airIRSCUnitConfigAltitudeMetric=airIRSCUnitConfigAltitudeMetric, airIRSCUnitConfigOpControl=airIRSCUnitConfigOpControl, airIRSCGroup=airIRSCGroup, airIRSCGroupStatus=airIRSCGroupStatus, airIRSCGroupStatusCoolOutput=airIRSCGroupStatusCoolOutput, airIRSCGroupStatusCoolDemand=airIRSCGroupStatusCoolDemand, airIRSCGroupStatusAirFlowUS=airIRSCGroupStatusAirFlowUS, airIRSCGroupStatusAirFlowMetric=airIRSCGroupStatusAirFlowMetric, airIRSCGroupStatusMaxRackInletTempUS=airIRSCGroupStatusMaxRackInletTempUS, airIRSCGroupStatusMaxRackInletTempMetric=airIRSCGroupStatusMaxRackInletTempMetric, airIRSCGroupStatusMinRackInletTempUS=airIRSCGroupStatusMinRackInletTempUS, airIRSCGroupStatusMinRackInletTempMetric=airIRSCGroupStatusMinRackInletTempMetric, airIRSCGroupStatusMaxReturnAirTempUS=airIRSCGroupStatusMaxReturnAirTempUS, airIRSCGroupStatusMaxReturnAirTempMetric=airIRSCGroupStatusMaxReturnAirTempMetric, airIRSCGroupStatusMinReturnAirTempUS=airIRSCGroupStatusMinReturnAirTempUS, airIRSCGroupStatusMinReturnAirTempMetric=airIRSCGroupStatusMinReturnAirTempMetric, airIRSCGroupStatusActiveFlowControlStatus=airIRSCGroupStatusActiveFlowControlStatus, airIRSCGroupSetpoints=airIRSCGroupSetpoints, airIRSCGroupSetptsCoolSetpointUS=airIRSCGroupSetptsCoolSetpointUS, airIRSCGroupSetptsCoolSetpointMetric=airIRSCGroupSetptsCoolSetpointMetric, airIRSCGroupSetptsCoolDeadbandUS=airIRSCGroupSetptsCoolDeadbandUS, airIRSCGroupSetptsCoolDeadbandMetric=airIRSCGroupSetptsCoolDeadbandMetric, airIRSCGroupSetptsFanSpeedPreference=airIRSCGroupSetptsFanSpeedPreference, airIRSCGroupSetptsSupplyAirSetpointUS=airIRSCGroupSetptsSupplyAirSetpointUS, airIRSCGroupSetptsSupplyAirSetpointMetric=airIRSCGroupSetptsSupplyAirSetpointMetric, airIRSCGroupSetpointsActiveFlowControlBias=airIRSCGroupSetpointsActiveFlowControlBias, airIRSCGroupConfig=airIRSCGroupConfig, airIRSCGroupConfigNumberofCoolingUnits=airIRSCGroupConfigNumberofCoolingUnits, airIRSCGroupConfigConfigurationType=airIRSCGroupConfigConfigurationType, airIRSCGroupConfigCapacityControlType=airIRSCGroupConfigCapacityControlType, airIRSCGroupConfigAltitudeUS=airIRSCGroupConfigAltitudeUS, airIRSCGroupConfigAltitudeMetric=airIRSCGroupConfigAltitudeMetric, airIRSCGroupConfigFanSpeedControl=airIRSCGroupConfigFanSpeedControl, airIRSCGroupConfigNumberOfActiveFlowControllers=airIRSCGroupConfigNumberOfActiveFlowControllers, airIRSCGroupConfigActiveFlowControllerLampTest=airIRSCGroupConfigActiveFlowControllerLampTest, airIRGen2=airIRGen2, airIRG2Ident=airIRG2Ident, airIRG2IdentName=airIRG2IdentName, airIRG2IdentLocation=airIRG2IdentLocation, airIRG2IdentModelNumber=airIRG2IdentModelNumber, airIRG2IdentSerialNumber=airIRG2IdentSerialNumber, airIRG2IdentFirmwareRevision=airIRG2IdentFirmwareRevision, airIRG2IdentHardwareRevision=airIRG2IdentHardwareRevision, airIRG2IdentManufactureDate=airIRG2IdentManufactureDate, airIRG2IdentUnitSysOID=airIRG2IdentUnitSysOID, airIRG2IdentGroupSysOID=airIRG2IdentGroupSysOID, airIRG2Group=airIRG2Group, airIRG2GroupStatus=airIRG2GroupStatus, airIRG2GroupStatusCoolOutput=airIRG2GroupStatusCoolOutput, airIRG2GroupStatusCoolDemand=airIRG2GroupStatusCoolDemand, airIRG2GroupStatusAirFlowUS=airIRG2GroupStatusAirFlowUS, airIRG2GroupStatusAirFlowMetric=airIRG2GroupStatusAirFlowMetric, airIRG2GroupStatusMaxRackInletTempUS=airIRG2GroupStatusMaxRackInletTempUS, airIRG2GroupStatusMaxRackInletTempMetric=airIRG2GroupStatusMaxRackInletTempMetric, airIRG2GroupStatusMinRackInletTempUS=airIRG2GroupStatusMinRackInletTempUS, airIRG2GroupStatusMinRackInletTempMetric=airIRG2GroupStatusMinRackInletTempMetric, airIRG2GroupStatusMaxReturnAirTempUS=airIRG2GroupStatusMaxReturnAirTempUS, airIRG2GroupStatusMaxReturnAirTempMetric=airIRG2GroupStatusMaxReturnAirTempMetric, airIRG2GroupStatusMinReturnAirTempUS=airIRG2GroupStatusMinReturnAirTempUS, airIRG2GroupStatusMinReturnAirTempMetric=airIRG2GroupStatusMinReturnAirTempMetric, airIRG2GroupStatusActiveFlowControlStatus=airIRG2GroupStatusActiveFlowControlStatus, airIRG2GroupSetpoints=airIRG2GroupSetpoints, airIRG2GroupSetptsCoolSetpointUS=airIRG2GroupSetptsCoolSetpointUS, airIRG2GroupSetptsCoolSetpointMetric=airIRG2GroupSetptsCoolSetpointMetric, airIRG2GroupSetptsCoolDeadbandUS=airIRG2GroupSetptsCoolDeadbandUS, airIRG2GroupSetptsCoolDeadbandMetric=airIRG2GroupSetptsCoolDeadbandMetric, airIRG2GroupSetptsFanSpeedPreference=airIRG2GroupSetptsFanSpeedPreference, airIRG2GroupSetptsSupplyAirSetpointUS=airIRG2GroupSetptsSupplyAirSetpointUS, airIRG2GroupSetptsSupplyAirSetpointMetric=airIRG2GroupSetptsSupplyAirSetpointMetric, airIRG2GroupSetpointsActiveFlowControlBias=airIRG2GroupSetpointsActiveFlowControlBias, airIRG2GroupConfig=airIRG2GroupConfig, airIRG2GroupConfigNumberofCoolingUnits=airIRG2GroupConfigNumberofCoolingUnits, airIRG2GroupConfigConfigurationType=airIRG2GroupConfigConfigurationType, airIRG2GroupConfigCapacityControlType=airIRG2GroupConfigCapacityControlType, airIRG2GroupConfigFanSpeedControl=airIRG2GroupConfigFanSpeedControl, airIRG2GroupConfigCoolGainP=airIRG2GroupConfigCoolGainP, airIRG2GroupConfigCoolResetRateI=airIRG2GroupConfigCoolResetRateI, airIRG2GroupConfigCoolDerivativeD=airIRG2GroupConfigCoolDerivativeD, airIRG2GroupConfigCoolPIDReset=airIRG2GroupConfigCoolPIDReset, airIRG2GroupConfigNumberofBackupUnits=airIRG2GroupConfigNumberofBackupUnits, airIRG2GroupConfigRuntimeBalancingEnable=airIRG2GroupConfigRuntimeBalancingEnable, airIRG2GroupConfigLoadAssistEnable=airIRG2GroupConfigLoadAssistEnable, airIRG2GroupConfigNumberOfActiveFlowControllers=airIRG2GroupConfigNumberOfActiveFlowControllers, airIRG2GroupConfigActiveFlowControllerLampTest=airIRG2GroupConfigActiveFlowControllerLampTest, airIRG2GroupConfigAltitudeUS=airIRG2GroupConfigAltitudeUS, airIRG2GroupConfigAltitudeMetric=airIRG2GroupConfigAltitudeMetric, airIRG2Alarms=airIRG2Alarms, airIRG2AlarmsTableSize=airIRG2AlarmsTableSize, airIRG2AlarmsTable=airIRG2AlarmsTable, airIRG2AlarmsEntry=airIRG2AlarmsEntry, airIRG2AlarmsIndex=airIRG2AlarmsIndex, airIRG2AlarmsEventCode=airIRG2AlarmsEventCode, airIRG2AlarmsDescription=airIRG2AlarmsDescription, airIRG2RC=airIRG2RC)
mibBuilder.exportSymbols("PowerNet-MIB", airIRG2RD=airIRG2RD, airIRG2RDType1=airIRG2RDType1, airIRG2RDType2=airIRG2RDType2, airIRG2RDT2Status=airIRG2RDT2Status, airIRG2RDT2StatusOperateMode=airIRG2RDT2StatusOperateMode, airIRG2RDT2StatusCoolOutput=airIRG2RDT2StatusCoolOutput, airIRG2RDT2StatusCoolDemand=airIRG2RDT2StatusCoolDemand, airIRG2RDT2StatusAirFlowUS=airIRG2RDT2StatusAirFlowUS, airIRG2RDT2StatusAirFlowMetric=airIRG2RDT2StatusAirFlowMetric, airIRG2RDT2StatusRackInletTempUS=airIRG2RDT2StatusRackInletTempUS, airIRG2RDT2StatusRackInletTempMetric=airIRG2RDT2StatusRackInletTempMetric, airIRG2RDT2StatusSupplyAirTempUS=airIRG2RDT2StatusSupplyAirTempUS, airIRG2RDT2StatusSupplyAirTempMetric=airIRG2RDT2StatusSupplyAirTempMetric, airIRG2RDT2StatusReturnAirTempUS=airIRG2RDT2StatusReturnAirTempUS, airIRG2RDT2StatusReturnAirTempMetric=airIRG2RDT2StatusReturnAirTempMetric, airIRG2RDT2StatusSuctionTempUS=airIRG2RDT2StatusSuctionTempUS, airIRG2RDT2StatusSuctionTempMetric=airIRG2RDT2StatusSuctionTempMetric, airIRG2RDT2StatusSuperheatTempUS=airIRG2RDT2StatusSuperheatTempUS, airIRG2RDT2StatusSuperheatTempMetric=airIRG2RDT2StatusSuperheatTempMetric, airIRG2RDT2StatusFilterDPUS=airIRG2RDT2StatusFilterDPUS, airIRG2RDT2StatusFilterDPMetric=airIRG2RDT2StatusFilterDPMetric, airIRG2RDT2StatusSuctionPressureUS=airIRG2RDT2StatusSuctionPressureUS, airIRG2RDT2StatusSuctionPressureMetric=airIRG2RDT2StatusSuctionPressureMetric, airIRG2RDT2StatusDischargePressureUS=airIRG2RDT2StatusDischargePressureUS, airIRG2RDT2StatusDischargePressureMetric=airIRG2RDT2StatusDischargePressureMetric, airIRG2RDT2StatusEvaporatorFanSpeed=airIRG2RDT2StatusEvaporatorFanSpeed, airIRG2RDT2StatusInputState=airIRG2RDT2StatusInputState, airIRG2RDT2StatusOutputState=airIRG2RDT2StatusOutputState, airIRG2RDT2StatusOHEInputState=airIRG2RDT2StatusOHEInputState, airIRG2RDT2StatusOHEOutputState=airIRG2RDT2StatusOHEOutputState, airIRG2RDT2StatusCompressor=airIRG2RDT2StatusCompressor, airIRG2RDT2StatusFluidValvePos=airIRG2RDT2StatusFluidValvePos, airIRG2RDT2StatusHotGasBypassValvePos=airIRG2RDT2StatusHotGasBypassValvePos, airIRG2RDT2StatusLeakSensor=airIRG2RDT2StatusLeakSensor, airIRG2RDT2RunHours=airIRG2RDT2RunHours, airIRG2RDT2RunHoursAirFilter=airIRG2RDT2RunHoursAirFilter, airIRG2RDT2RunHoursCondensatePump=airIRG2RDT2RunHoursCondensatePump, airIRG2RDT2RunHoursCompressor=airIRG2RDT2RunHoursCompressor, airIRG2RDT2RunHoursFanPSTableSize=airIRG2RDT2RunHoursFanPSTableSize, airIRG2RDT2RunHoursFanPSTable=airIRG2RDT2RunHoursFanPSTable, airIRG2RDT2RunHoursFanPSEntry=airIRG2RDT2RunHoursFanPSEntry, airIRG2RDT2RunHoursFanPSIndex=airIRG2RDT2RunHoursFanPSIndex, airIRG2RDT2RunHoursFanPSHours=airIRG2RDT2RunHoursFanPSHours, airIRG2RDT2RunHoursFanPSPosition=airIRG2RDT2RunHoursFanPSPosition, airIRG2RDT2RunHoursEvapFanTableSize=airIRG2RDT2RunHoursEvapFanTableSize, airIRG2RDT2RunHoursEvapFanTable=airIRG2RDT2RunHoursEvapFanTable, airIRG2RDT2RunHoursEvapFanEntry=airIRG2RDT2RunHoursEvapFanEntry, airIRG2RDT2RunHoursEvapFanIndex=airIRG2RDT2RunHoursEvapFanIndex, airIRG2RDT2RunHoursEvapFanHours=airIRG2RDT2RunHoursEvapFanHours, airIRG2RDT2RunHoursUnit=airIRG2RDT2RunHoursUnit, airIRG2RDT2ServiceIntervals=airIRG2RDT2ServiceIntervals, airIRG2RDT2ServiceIntervalsAirFilter=airIRG2RDT2ServiceIntervalsAirFilter, airIRG2RDT2ServiceIntervalsAirFilterAlarm=airIRG2RDT2ServiceIntervalsAirFilterAlarm, airIRG2RDT2Thresholds=airIRG2RDT2Thresholds, airIRG2RDT2ThresholdsRackInletHighTempUS=airIRG2RDT2ThresholdsRackInletHighTempUS, airIRG2RDT2ThresholdsRackInletHighTempMetric=airIRG2RDT2ThresholdsRackInletHighTempMetric, airIRG2RDT2ThresholdsSupplyAirHighTempUS=airIRG2RDT2ThresholdsSupplyAirHighTempUS, airIRG2RDT2ThresholdsSupplyAirHighTempMetric=airIRG2RDT2ThresholdsSupplyAirHighTempMetric, airIRG2RDT2ThresholdsReturnAirHighTempUS=airIRG2RDT2ThresholdsReturnAirHighTempUS, airIRG2RDT2ThresholdsReturnAirHighTempMetric=airIRG2RDT2ThresholdsReturnAirHighTempMetric, airIRG2RDT2Setpoints=airIRG2RDT2Setpoints, airIRG2RDT2Config=airIRG2RDT2Config, airIRG2RDT2ConfigUnitType=airIRG2RDT2ConfigUnitType, airIRG2RDT2ConfigStartupDelay=airIRG2RDT2ConfigStartupDelay, airIRG2RDT2ConfigIdleOnLeakDetect=airIRG2RDT2ConfigIdleOnLeakDetect, airIRG2RDT2ConfigInputNormalState=airIRG2RDT2ConfigInputNormalState, airIRG2RDT2ConfigOutputNormalState=airIRG2RDT2ConfigOutputNormalState, airIRG2RDT2ConfigOutputSource=airIRG2RDT2ConfigOutputSource, airIRG2RDT2ConfigOHEInputNormalState=airIRG2RDT2ConfigOHEInputNormalState, airIRG2RDT2ConfigUnitRoleOverride=airIRG2RDT2ConfigUnitRoleOverride, airIRG2RDT2ConfigUnitIdleOnCoolFail=airIRG2RDT2ConfigUnitIdleOnCoolFail, airIRG2SC=airIRG2SC, airIRG2RA=airIRG2RA, airInRoom=airInRoom, airIRmIdent=airIRmIdent, airIRmIdentName=airIRmIdentName, airIRmIdentLocation=airIRmIdentLocation, airIRmIdentModelNumber=airIRmIdentModelNumber, airIRmIdentSerialNumber=airIRmIdentSerialNumber, airIRmIdentFirmwareRevision=airIRmIdentFirmwareRevision, airIRmIdentHardwareRevision=airIRmIdentHardwareRevision, airIRmIdentManufactureDate=airIRmIdentManufactureDate, airIRmIdentSysOID=airIRmIdentSysOID, airIRmAlarms=airIRmAlarms, airIRmAlarmsTableSize=airIRmAlarmsTableSize, airIRmAlarmsTable=airIRmAlarmsTable, airIRmAlarmsEntry=airIRmAlarmsEntry, airIRmAlarmsIndex=airIRmAlarmsIndex, airIRmAlarmsEventCode=airIRmAlarmsEventCode, airIRmAlarmsDescription=airIRmAlarmsDescription, airIRmPerimeter=airIRmPerimeter, airIRmPmCommon1=airIRmPmCommon1, airIRmPmUnitType=airIRmPmUnitType, airIRmPmSwVersion=airIRmPmSwVersion, airIRmPmBusAddress=airIRmPmBusAddress, airIRmPmControllerType=airIRmPmControllerType, airIRmPmGeneralError=airIRmPmGeneralError, airIRmPmErrorOnBus=airIRmPmErrorOnBus, airIRmPmCommon2=airIRmPmCommon2, airIRmPmPCStop=airIRmPmPCStop, airIRmPmRemoteStop=airIRmPmRemoteStop, airIRmPmLocalStop=airIRmPmLocalStop, airIRmPmTimerStop=airIRmPmTimerStop, airIRmPmSeqStop=airIRmPmSeqStop, airIRmPmRemoteUPS=airIRmPmRemoteUPS, airIRmPmLocalUPS=airIRmPmLocalUPS, airIRmPmCommonAlarm=airIRmPmCommonAlarm, airIRmPmResetAllAlarms=airIRmPmResetAllAlarms, airIRmPmUnitOnOff=airIRmPmUnitOnOff, airIRmPmMaintenance=airIRmPmMaintenance, airIRmPmUnitTemperatureScale=airIRmPmUnitTemperatureScale, airIRmPmUnitWinterMode=airIRmPmUnitWinterMode, airIRmPmDayNightMode=airIRmPmDayNightMode, airIRmPmCommon3=airIRmPmCommon3, airIRmPmLastMaintenanceYear=airIRmPmLastMaintenanceYear, airIRmPmLastMaintenanceMonth=airIRmPmLastMaintenanceMonth, airIRmPmLastMaintenanceDay=airIRmPmLastMaintenanceDay, airIRmPmUnitMaintenanceInterval=airIRmPmUnitMaintenanceInterval, airIRmPmRuntimeUnit=airIRmPmRuntimeUnit, airIRmPmStoptimeUnit=airIRmPmStoptimeUnit, airIRmPmRuntimeCooling=airIRmPmRuntimeCooling, airIRmPmRuntimeHeating=airIRmPmRuntimeHeating, airIRmPmRuntimeHumidification=airIRmPmRuntimeHumidification, airIRmPmRuntimeDehumidification=airIRmPmRuntimeDehumidification, airIRmPmUnitTemperature=airIRmPmUnitTemperature, airIRmPmUnitTemperatureC=airIRmPmUnitTemperatureC, airIRmPmUnitTemperatureF=airIRmPmUnitTemperatureF)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmUnitHumidity=airIRmPmUnitHumidity, airIRmPmSetpointTemperatureDay=airIRmPmSetpointTemperatureDay, airIRmPmSetpointTemperatureDayC=airIRmPmSetpointTemperatureDayC, airIRmPmSetpointTemperatureDayF=airIRmPmSetpointTemperatureDayF, airIRmPmSetpointTemperatureNight=airIRmPmSetpointTemperatureNight, airIRmPmSetpointTemperatureNightC=airIRmPmSetpointTemperatureNightC, airIRmPmSetpointTemperatureNightF=airIRmPmSetpointTemperatureNightF, airIRmPmSetpointHumidity=airIRmPmSetpointHumidity, airIRmPmUnitControlType=airIRmPmUnitControlType, airIRmPmWinterModeStartTemp=airIRmPmWinterModeStartTemp, airIRmPmWinterModeStartTempC=airIRmPmWinterModeStartTempC, airIRmPmWinterModeStartTempF=airIRmPmWinterModeStartTempF, airIRmPmWinterModeHysteresis=airIRmPmWinterModeHysteresis, airIRmPmWinterModeHysteresisK=airIRmPmWinterModeHysteresisK, airIRmPmWinterModeHysteresisF=airIRmPmWinterModeHysteresisF, airIRmPmWaterTemperature=airIRmPmWaterTemperature, airIRmPmWaterTemperatureC=airIRmPmWaterTemperatureC, airIRmPmWaterTemperatureF=airIRmPmWaterTemperatureF, airIRmPmReturnAirTemperature=airIRmPmReturnAirTemperature, airIRmPmReturnAirTemperatureC=airIRmPmReturnAirTemperatureC, airIRmPmReturnAirTemperatureF=airIRmPmReturnAirTemperatureF, airIRmPmSupplyAirTemperature=airIRmPmSupplyAirTemperature, airIRmPmSupplyAirTemperatureC=airIRmPmSupplyAirTemperatureC, airIRmPmSupplyAirTemperatureF=airIRmPmSupplyAirTemperatureF, airIRmPmReturnAirHumidity=airIRmPmReturnAirHumidity, airIRmPmSupplyAirHumidity=airIRmPmSupplyAirHumidity, airIRmPmOutsideAirTemperature=airIRmPmOutsideAirTemperature, airIRmPmOutsideAirTemperatureC=airIRmPmOutsideAirTemperatureC, airIRmPmOutsideAirTemperatureF=airIRmPmOutsideAirTemperatureF, airIRmPmOutsideAirHumidity=airIRmPmOutsideAirHumidity, airIRmPmCoolingPriority=airIRmPmCoolingPriority, airIRmPmWaterTemperature2=airIRmPmWaterTemperature2, airIRmPmWaterTemperature2C=airIRmPmWaterTemperature2C, airIRmPmWaterTemperature2F=airIRmPmWaterTemperature2F, airIRmPmRuntimeFreeCooling=airIRmPmRuntimeFreeCooling, airIRmPmRuntimeMixedModeFreeCooling=airIRmPmRuntimeMixedModeFreeCooling, airIRmPmCommon4=airIRmPmCommon4, airIRmPmNumberOfCompressors=airIRmPmNumberOfCompressors, airIRmPmNumberOfSuctionValves=airIRmPmNumberOfSuctionValves, airIRmPmNumberOfDryCoolers=airIRmPmNumberOfDryCoolers, airIRmPmNumberOfPumps=airIRmPmNumberOfPumps, airIRmPmNumberOfElectricHeaters=airIRmPmNumberOfElectricHeaters, airIRmPmNumberOfHumidifiers=airIRmPmNumberOfHumidifiers, airIRmPmNumberOfFans=airIRmPmNumberOfFans, airIRmPmNumberOfLouvers=airIRmPmNumberOfLouvers, airIRmPmNumberOfSensors=airIRmPmNumberOfSensors, airIRmPmNumberOfExternalAlarmInputs=airIRmPmNumberOfExternalAlarmInputs, airIRmPmNumberOfGECWValves=airIRmPmNumberOfGECWValves, airIRmPmNumberOfHotGasReheat=airIRmPmNumberOfHotGasReheat, airIRmPmNumberOfPWWReheat=airIRmPmNumberOfPWWReheat, airIRmPmNumberOfDehumidifiers=airIRmPmNumberOfDehumidifiers, airIRmPmCommon5=airIRmPmCommon5, airIRmPmUnitEvaporationTemperature1=airIRmPmUnitEvaporationTemperature1, airIRmPmUnitEvaporationTemperature1C=airIRmPmUnitEvaporationTemperature1C, airIRmPmUnitEvaporationTemperature1F=airIRmPmUnitEvaporationTemperature1F, airIRmPmUnitEvaporationPressure1=airIRmPmUnitEvaporationPressure1, airIRmPmUnitCondensationTemperature1=airIRmPmUnitCondensationTemperature1, airIRmPmUnitCondensationTemperature1C=airIRmPmUnitCondensationTemperature1C, airIRmPmUnitCondensationTemperature1F=airIRmPmUnitCondensationTemperature1F, airIRmPmUnitCondensationPressure1=airIRmPmUnitCondensationPressure1, airIRmPmMaxLimitReturnAirTemperature=airIRmPmMaxLimitReturnAirTemperature, airIRmPmMaxLimitReturnAirTemperatureC=airIRmPmMaxLimitReturnAirTemperatureC, airIRmPmMaxLimitReturnAirTemperatureF=airIRmPmMaxLimitReturnAirTemperatureF, airIRmPmMinLimitReturnAirTemperature=airIRmPmMinLimitReturnAirTemperature, airIRmPmMinLimitReturnAirTemperatureC=airIRmPmMinLimitReturnAirTemperatureC, airIRmPmMinLimitReturnAirTemperatureF=airIRmPmMinLimitReturnAirTemperatureF, airIRmPmMaxLimitSupplyAirTemperature=airIRmPmMaxLimitSupplyAirTemperature, airIRmPmMaxLimitSupplyAirTemperatureC=airIRmPmMaxLimitSupplyAirTemperatureC, airIRmPmMaxLimitSupplyAirTemperatureF=airIRmPmMaxLimitSupplyAirTemperatureF, airIRmPmMinLimitSupplyAirTemperature=airIRmPmMinLimitSupplyAirTemperature, airIRmPmMinLimitSupplyAirTemperatureC=airIRmPmMinLimitSupplyAirTemperatureC, airIRmPmMinLimitSupplyAirTemperatureF=airIRmPmMinLimitSupplyAirTemperatureF, airIRmPmMaxLimitWaterTemperature=airIRmPmMaxLimitWaterTemperature, airIRmPmMaxLimitWaterTemperatureC=airIRmPmMaxLimitWaterTemperatureC, airIRmPmMaxLimitWaterTemperatureF=airIRmPmMaxLimitWaterTemperatureF, airIRmPmMinLimitWaterTemperature=airIRmPmMinLimitWaterTemperature, airIRmPmMinLimitWaterTemperatureC=airIRmPmMinLimitWaterTemperatureC, airIRmPmMinLimitWaterTemperatureF=airIRmPmMinLimitWaterTemperatureF, airIRmPmMaxLimitReturnAirHumidity=airIRmPmMaxLimitReturnAirHumidity, airIRmPmMinLimitReturnAirHumidity=airIRmPmMinLimitReturnAirHumidity, airIRmPmMaxLimitSupplyAirHumidity=airIRmPmMaxLimitSupplyAirHumidity, airIRmPmMinLimitSupplyAirHumidity=airIRmPmMinLimitSupplyAirHumidity, airIRmPmLowPressureWinterDelay=airIRmPmLowPressureWinterDelay, airIRmPmUnitCondensationPressure2=airIRmPmUnitCondensationPressure2, airIRmPmUnitOverloadSwitch=airIRmPmUnitOverloadSwitch, airIRmPmUnitCondensationTemperature2=airIRmPmUnitCondensationTemperature2, airIRmPmUnitCondensationTemperature2C=airIRmPmUnitCondensationTemperature2C, airIRmPmUnitCondensationTemperature2F=airIRmPmUnitCondensationTemperature2F, airIRmPmUnitEvaporationPressure2=airIRmPmUnitEvaporationPressure2, airIRmPmUnitEvaporationTemperature2=airIRmPmUnitEvaporationTemperature2, airIRmPmUnitEvaporationTemperature2C=airIRmPmUnitEvaporationTemperature2C, airIRmPmUnitEvaporationTemperature2F=airIRmPmUnitEvaporationTemperature2F, airIRmPmCompressor1=airIRmPmCompressor1, airIRmPmCmp1ManOperationActive=airIRmPmCmp1ManOperationActive, airIRmPmCmp1ManOperationState=airIRmPmCmp1ManOperationState, airIRmPmCmp1Running=airIRmPmCmp1Running, airIRmPmCmp1StartTempSummer=airIRmPmCmp1StartTempSummer, airIRmPmCmp1StartTempSummerK=airIRmPmCmp1StartTempSummerK, airIRmPmCmp1StartTempSummerF=airIRmPmCmp1StartTempSummerF, airIRmPmCmp1HysteresisSummer=airIRmPmCmp1HysteresisSummer, airIRmPmCmp1HysteresisSummerK=airIRmPmCmp1HysteresisSummerK, airIRmPmCmp1HysteresisSummerF=airIRmPmCmp1HysteresisSummerF, airIRmPmCmp1StartTempWinter=airIRmPmCmp1StartTempWinter, airIRmPmCmp1StartTempWinterK=airIRmPmCmp1StartTempWinterK, airIRmPmCmp1StartTempWinterF=airIRmPmCmp1StartTempWinterF, airIRmPmCmp1HysteresisWinter=airIRmPmCmp1HysteresisWinter, airIRmPmCmp1HysteresisWinterK=airIRmPmCmp1HysteresisWinterK, airIRmPmCmp1HysteresisWinterF=airIRmPmCmp1HysteresisWinterF, airIRmPmCmp1Runtime=airIRmPmCmp1Runtime, airIRmPmCompressor2=airIRmPmCompressor2, airIRmPmCmp2ManOperationActive=airIRmPmCmp2ManOperationActive, airIRmPmCmp2ManOperationState=airIRmPmCmp2ManOperationState, airIRmPmCmp2Running=airIRmPmCmp2Running, airIRmPmCmp2StartTempSummer=airIRmPmCmp2StartTempSummer, airIRmPmCmp2StartTempSummerK=airIRmPmCmp2StartTempSummerK, airIRmPmCmp2StartTempSummerF=airIRmPmCmp2StartTempSummerF, airIRmPmCmp2HysteresisSummer=airIRmPmCmp2HysteresisSummer, airIRmPmCmp2HysteresisSummerK=airIRmPmCmp2HysteresisSummerK, airIRmPmCmp2HysteresisSummerF=airIRmPmCmp2HysteresisSummerF, airIRmPmCmp2StartTempWinter=airIRmPmCmp2StartTempWinter, airIRmPmCmp2StartTempWinterK=airIRmPmCmp2StartTempWinterK, airIRmPmCmp2StartTempWinterF=airIRmPmCmp2StartTempWinterF, airIRmPmCmp2HysteresisWinter=airIRmPmCmp2HysteresisWinter, airIRmPmCmp2HysteresisWinterK=airIRmPmCmp2HysteresisWinterK, airIRmPmCmp2HysteresisWinterF=airIRmPmCmp2HysteresisWinterF, airIRmPmCmp2Runtime=airIRmPmCmp2Runtime, airIRmPmSuctionValve1=airIRmPmSuctionValve1)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmSuctionValve2=airIRmPmSuctionValve2, airIRmPmEheating1=airIRmPmEheating1, airIRmPmEheating1ManOpEnable=airIRmPmEheating1ManOpEnable, airIRmPmEheating1Running=airIRmPmEheating1Running, airIRmPmEheating1ManOpRunning=airIRmPmEheating1ManOpRunning, airIRmPmEheating1Type=airIRmPmEheating1Type, airIRmPmEheating1StartTemperature=airIRmPmEheating1StartTemperature, airIRmPmEheating1StartTemperatureK=airIRmPmEheating1StartTemperatureK, airIRmPmEheating1StartTemperatureF=airIRmPmEheating1StartTemperatureF, airIRmPmEheating1Hysteresis=airIRmPmEheating1Hysteresis, airIRmPmEheating1HysteresisK=airIRmPmEheating1HysteresisK, airIRmPmEheating1HysteresisF=airIRmPmEheating1HysteresisF, airIRmPmEheating1Runtime=airIRmPmEheating1Runtime, airIRmPmEheating2=airIRmPmEheating2, airIRmPmEheating2ManOpEnable=airIRmPmEheating2ManOpEnable, airIRmPmEheating2Running=airIRmPmEheating2Running, airIRmPmEheating2ManOpRunning=airIRmPmEheating2ManOpRunning, airIRmPmEheating2Type=airIRmPmEheating2Type, airIRmPmEheating2StartTemperature=airIRmPmEheating2StartTemperature, airIRmPmEheating2StartTemperatureK=airIRmPmEheating2StartTemperatureK, airIRmPmEheating2StartTemperatureF=airIRmPmEheating2StartTemperatureF, airIRmPmEheating2Hysteresis=airIRmPmEheating2Hysteresis, airIRmPmEheating2HysteresisK=airIRmPmEheating2HysteresisK, airIRmPmEheating2HysteresisF=airIRmPmEheating2HysteresisF, airIRmPmEheating2Runtime=airIRmPmEheating2Runtime, airIRmPmEheating3=airIRmPmEheating3, airIRmPmEheating3ManOpEnable=airIRmPmEheating3ManOpEnable, airIRmPmEheating3Running=airIRmPmEheating3Running, airIRmPmEheating3ManOpRunning=airIRmPmEheating3ManOpRunning, airIRmPmEheating3Type=airIRmPmEheating3Type, airIRmPmEheating3StartTemperature=airIRmPmEheating3StartTemperature, airIRmPmEheating3StartTemperatureK=airIRmPmEheating3StartTemperatureK, airIRmPmEheating3StartTemperatureF=airIRmPmEheating3StartTemperatureF, airIRmPmEheating3Hysteresis=airIRmPmEheating3Hysteresis, airIRmPmEheating3HysteresisK=airIRmPmEheating3HysteresisK, airIRmPmEheating3HysteresisF=airIRmPmEheating3HysteresisF, airIRmPmEheating3Runtime=airIRmPmEheating3Runtime, airIRmPmEheating4=airIRmPmEheating4, airIRmPmEheating4ManOpEnable=airIRmPmEheating4ManOpEnable, airIRmPmEheating4Running=airIRmPmEheating4Running, airIRmPmEheating4ManOpRunning=airIRmPmEheating4ManOpRunning, airIRmPmEheating4Type=airIRmPmEheating4Type, airIRmPmEheating4StartTemperature=airIRmPmEheating4StartTemperature, airIRmPmEheating4StartTemperatureK=airIRmPmEheating4StartTemperatureK, airIRmPmEheating4StartTemperatureF=airIRmPmEheating4StartTemperatureF, airIRmPmEheating4Hysteresis=airIRmPmEheating4Hysteresis, airIRmPmEheating4HysteresisK=airIRmPmEheating4HysteresisK, airIRmPmEheating4HysteresisF=airIRmPmEheating4HysteresisF, airIRmPmEheating4Runtime=airIRmPmEheating4Runtime, airIRmPmGECWvalve=airIRmPmGECWvalve, airIRmPmGECWvalveManOpEnable=airIRmPmGECWvalveManOpEnable, airIRmPmGECWvalveStartTemperature=airIRmPmGECWvalveStartTemperature, airIRmPmGECWvalveStartTemperatureK=airIRmPmGECWvalveStartTemperatureK, airIRmPmGECWvalveStartTemperatureF=airIRmPmGECWvalveStartTemperatureF, airIRmPmGECWvalveLinearRange=airIRmPmGECWvalveLinearRange, airIRmPmGECWvalveLinearRangeK=airIRmPmGECWvalveLinearRangeK, airIRmPmGECWvalveLinearRangeF=airIRmPmGECWvalveLinearRangeF, airIRmPmGECWvalveGEOffTemp=airIRmPmGECWvalveGEOffTemp, airIRmPmGECWvalveGEOffTempC=airIRmPmGECWvalveGEOffTempC, airIRmPmGECWvalveGEOffTempF=airIRmPmGECWvalveGEOffTempF, airIRmPmGECWvalveOpeningGrade=airIRmPmGECWvalveOpeningGrade, airIRmPmGECWvalveManOpOpeningGrade=airIRmPmGECWvalveManOpOpeningGrade, airIRmPmGvalve=airIRmPmGvalve, airIRmPmGvalveManOperationEnable=airIRmPmGvalveManOperationEnable, airIRmPmGvalvePreOpeningTime=airIRmPmGvalvePreOpeningTime, airIRmPmGvalvePreOpeningGrade=airIRmPmGvalvePreOpeningGrade, airIRmPmGvalveOpeningGrade=airIRmPmGvalveOpeningGrade, airIRmPmGvalveManOpOpeningGrade=airIRmPmGvalveManOpOpeningGrade, airIRmPmDrycooler1=airIRmPmDrycooler1, airIRmPmDrycooler1ManOpEnable=airIRmPmDrycooler1ManOpEnable, airIRmPmDrycooler1Running=airIRmPmDrycooler1Running, airIRmPmDrycooler1ManOpRunning=airIRmPmDrycooler1ManOpRunning, airIRmPmDrycooler1WinterStartTemp=airIRmPmDrycooler1WinterStartTemp, airIRmPmDrycooler1WinterStartTempC=airIRmPmDrycooler1WinterStartTempC, airIRmPmDrycooler1WinterStartTempF=airIRmPmDrycooler1WinterStartTempF, airIRmPmDrycooler1SummerStartTemp=airIRmPmDrycooler1SummerStartTemp, airIRmPmDrycooler1SummerStartTempC=airIRmPmDrycooler1SummerStartTempC, airIRmPmDrycooler1SummerStartTempF=airIRmPmDrycooler1SummerStartTempF, airIRmPmDrycooler1Hysteresis=airIRmPmDrycooler1Hysteresis, airIRmPmDrycooler1HysteresisK=airIRmPmDrycooler1HysteresisK, airIRmPmDrycooler1HysteresisF=airIRmPmDrycooler1HysteresisF, airIRmPmDrycooler1Runtime=airIRmPmDrycooler1Runtime, airIRmPmDrycooler2=airIRmPmDrycooler2, airIRmPmDrycooler2ManOpEnable=airIRmPmDrycooler2ManOpEnable, airIRmPmDrycooler2Running=airIRmPmDrycooler2Running, airIRmPmDrycooler2ManOpRunning=airIRmPmDrycooler2ManOpRunning, airIRmPmDrycooler2WinterStartTemp=airIRmPmDrycooler2WinterStartTemp, airIRmPmDrycooler2WinterStartTempC=airIRmPmDrycooler2WinterStartTempC, airIRmPmDrycooler2WinterStartTempF=airIRmPmDrycooler2WinterStartTempF, airIRmPmDrycooler2SummerStartTemp=airIRmPmDrycooler2SummerStartTemp, airIRmPmDrycooler2SummerStartTempC=airIRmPmDrycooler2SummerStartTempC, airIRmPmDrycooler2SummerStartTempF=airIRmPmDrycooler2SummerStartTempF, airIRmPmDrycooler2Hysteresis=airIRmPmDrycooler2Hysteresis, airIRmPmDrycooler2HysteresisK=airIRmPmDrycooler2HysteresisK, airIRmPmDrycooler2HysteresisF=airIRmPmDrycooler2HysteresisF, airIRmPmDrycooler2Runtime=airIRmPmDrycooler2Runtime, airIRmPmDrycooler3=airIRmPmDrycooler3, airIRmPmDrycooler3ManOpEnable=airIRmPmDrycooler3ManOpEnable, airIRmPmDrycooler3Running=airIRmPmDrycooler3Running, airIRmPmDrycooler3ManOpRunning=airIRmPmDrycooler3ManOpRunning, airIRmPmDrycooler3WinterStartTemp=airIRmPmDrycooler3WinterStartTemp, airIRmPmDrycooler3WinterStartTempC=airIRmPmDrycooler3WinterStartTempC, airIRmPmDrycooler3WinterStartTempF=airIRmPmDrycooler3WinterStartTempF, airIRmPmDrycooler3SummerStartTemp=airIRmPmDrycooler3SummerStartTemp, airIRmPmDrycooler3SummerStartTempC=airIRmPmDrycooler3SummerStartTempC, airIRmPmDrycooler3SummerStartTempF=airIRmPmDrycooler3SummerStartTempF, airIRmPmDrycooler3Hysteresis=airIRmPmDrycooler3Hysteresis, airIRmPmDrycooler3HysteresisK=airIRmPmDrycooler3HysteresisK, airIRmPmDrycooler3HysteresisF=airIRmPmDrycooler3HysteresisF, airIRmPmDrycooler3Runtime=airIRmPmDrycooler3Runtime, airIRmPmDrycooler4=airIRmPmDrycooler4, airIRmPmDrycooler4ManOpEnable=airIRmPmDrycooler4ManOpEnable, airIRmPmDrycooler4Running=airIRmPmDrycooler4Running, airIRmPmDrycooler4ManOpRunning=airIRmPmDrycooler4ManOpRunning, airIRmPmDrycooler4WinterStartTemp=airIRmPmDrycooler4WinterStartTemp, airIRmPmDrycooler4WinterStartTempC=airIRmPmDrycooler4WinterStartTempC, airIRmPmDrycooler4WinterStartTempF=airIRmPmDrycooler4WinterStartTempF, airIRmPmDrycooler4SummerStartTemp=airIRmPmDrycooler4SummerStartTemp, airIRmPmDrycooler4SummerStartTempC=airIRmPmDrycooler4SummerStartTempC, airIRmPmDrycooler4SummerStartTempF=airIRmPmDrycooler4SummerStartTempF, airIRmPmDrycooler4Hysteresis=airIRmPmDrycooler4Hysteresis, airIRmPmDrycooler4HysteresisK=airIRmPmDrycooler4HysteresisK, airIRmPmDrycooler4HysteresisF=airIRmPmDrycooler4HysteresisF, airIRmPmDrycooler4Runtime=airIRmPmDrycooler4Runtime, airIRmPmPump1=airIRmPmPump1, airIRmPmPump1ManOpEnable=airIRmPmPump1ManOpEnable, airIRmPmPump1Running=airIRmPmPump1Running)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmPump1ManOpRunning=airIRmPmPump1ManOpRunning, airIRmPmPump1StartTemperature=airIRmPmPump1StartTemperature, airIRmPmPump1StartTemperatureK=airIRmPmPump1StartTemperatureK, airIRmPmPump1StartTemperatureF=airIRmPmPump1StartTemperatureF, airIRmPmPump1Hysteresis=airIRmPmPump1Hysteresis, airIRmPmPump1HysteresisK=airIRmPmPump1HysteresisK, airIRmPmPump1HysteresisF=airIRmPmPump1HysteresisF, airIRmPmPump1LinearRange=airIRmPmPump1LinearRange, airIRmPmPump1LinearRangeK=airIRmPmPump1LinearRangeK, airIRmPmPump1LinearRangeF=airIRmPmPump1LinearRangeF, airIRmPmPump1PressureSetpoint=airIRmPmPump1PressureSetpoint, airIRmPmPump1Runtime=airIRmPmPump1Runtime, airIRmPmPump1Speed=airIRmPmPump1Speed, airIRmPmPump1ControlCycle=airIRmPmPump1ControlCycle, airIRmPmPump1MaxAdjust=airIRmPmPump1MaxAdjust, airIRmPmPump1ControlFactor=airIRmPmPump1ControlFactor, airIRmPmPump2=airIRmPmPump2, airIRmPmPump2ManOpEnable=airIRmPmPump2ManOpEnable, airIRmPmPump2Running=airIRmPmPump2Running, airIRmPmPump2ManOpRunning=airIRmPmPump2ManOpRunning, airIRmPmPump2StartTemperature=airIRmPmPump2StartTemperature, airIRmPmPump2StartTemperatureK=airIRmPmPump2StartTemperatureK, airIRmPmPump2StartTemperatureF=airIRmPmPump2StartTemperatureF, airIRmPmPump2Hysteresis=airIRmPmPump2Hysteresis, airIRmPmPump2HysteresisK=airIRmPmPump2HysteresisK, airIRmPmPump2HysteresisF=airIRmPmPump2HysteresisF, airIRmPmPump2LinearRange=airIRmPmPump2LinearRange, airIRmPmPump2LinearRangeK=airIRmPmPump2LinearRangeK, airIRmPmPump2LinearRangeF=airIRmPmPump2LinearRangeF, airIRmPmPump2PressureSetpoint=airIRmPmPump2PressureSetpoint, airIRmPmPump2Runtime=airIRmPmPump2Runtime, airIRmPmPump2Speed=airIRmPmPump2Speed, airIRmPmPump2ControlCycle=airIRmPmPump2ControlCycle, airIRmPmPump2MaxAdjust=airIRmPmPump2MaxAdjust, airIRmPmPump2ControlFactor=airIRmPmPump2ControlFactor, airIRmPmPump3=airIRmPmPump3, airIRmPmPump3ManOpEnable=airIRmPmPump3ManOpEnable, airIRmPmPump3Running=airIRmPmPump3Running, airIRmPmPump3ManOpRunning=airIRmPmPump3ManOpRunning, airIRmPmPump3StartTemperature=airIRmPmPump3StartTemperature, airIRmPmPump3StartTemperatureK=airIRmPmPump3StartTemperatureK, airIRmPmPump3StartTemperatureF=airIRmPmPump3StartTemperatureF, airIRmPmPump3Hysteresis=airIRmPmPump3Hysteresis, airIRmPmPump3HysteresisK=airIRmPmPump3HysteresisK, airIRmPmPump3HysteresisF=airIRmPmPump3HysteresisF, airIRmPmPump3LinearRange=airIRmPmPump3LinearRange, airIRmPmPump3LinearRangeK=airIRmPmPump3LinearRangeK, airIRmPmPump3LinearRangeF=airIRmPmPump3LinearRangeF, airIRmPmPump3PressureSetpoint=airIRmPmPump3PressureSetpoint, airIRmPmPump3Runtime=airIRmPmPump3Runtime, airIRmPmPump3Speed=airIRmPmPump3Speed, airIRmPmPump3ControlCycle=airIRmPmPump3ControlCycle, airIRmPmPump3MaxAdjust=airIRmPmPump3MaxAdjust, airIRmPmPump3ControlFactor=airIRmPmPump3ControlFactor, airIRmPmPump4=airIRmPmPump4, airIRmPmPump4ManOpEnable=airIRmPmPump4ManOpEnable, airIRmPmPump4Running=airIRmPmPump4Running, airIRmPmPump4ManOpRunning=airIRmPmPump4ManOpRunning, airIRmPmPump4StartTemperature=airIRmPmPump4StartTemperature, airIRmPmPump4StartTemperatureK=airIRmPmPump4StartTemperatureK, airIRmPmPump4StartTemperatureF=airIRmPmPump4StartTemperatureF, airIRmPmPump4Hysteresis=airIRmPmPump4Hysteresis, airIRmPmPump4HysteresisK=airIRmPmPump4HysteresisK, airIRmPmPump4HysteresisF=airIRmPmPump4HysteresisF, airIRmPmPump4LinearRange=airIRmPmPump4LinearRange, airIRmPmPump4LinearRangeK=airIRmPmPump4LinearRangeK, airIRmPmPump4LinearRangeF=airIRmPmPump4LinearRangeF, airIRmPmPump4PressureSetpoint=airIRmPmPump4PressureSetpoint, airIRmPmPump4Runtime=airIRmPmPump4Runtime, airIRmPmPump4Speed=airIRmPmPump4Speed, airIRmPmPump4ControlCycle=airIRmPmPump4ControlCycle, airIRmPmPump4MaxAdjust=airIRmPmPump4MaxAdjust, airIRmPmPump4ControlFactor=airIRmPmPump4ControlFactor, airIRmPmHotgasHeating=airIRmPmHotgasHeating, airIRmPmHotgasHeatRunning=airIRmPmHotgasHeatRunning, airIRmPmPWWHeating=airIRmPmPWWHeating, airIRmPmPWWHeatingManOpEnable=airIRmPmPWWHeatingManOpEnable, airIRmPmPWWHeatingRunning=airIRmPmPWWHeatingRunning, airIRmPmPWWHeatingManOpRunning=airIRmPmPWWHeatingManOpRunning, airIRmPmPWWHeatingType=airIRmPmPWWHeatingType, airIRmPmPWWHeatingStartTemp=airIRmPmPWWHeatingStartTemp, airIRmPmPWWHeatingStartTempK=airIRmPmPWWHeatingStartTempK, airIRmPmPWWHeatingStartTempF=airIRmPmPWWHeatingStartTempF, airIRmPmPWWHeatingHysteresis=airIRmPmPWWHeatingHysteresis, airIRmPmPWWHeatingHysteresisK=airIRmPmPWWHeatingHysteresisK, airIRmPmPWWHeatingHysteresisF=airIRmPmPWWHeatingHysteresisF, airIRmPmPWWHeatingLinearRange=airIRmPmPWWHeatingLinearRange, airIRmPmPWWHeatingLinearRangeK=airIRmPmPWWHeatingLinearRangeK, airIRmPmPWWHeatingLinearRangeF=airIRmPmPWWHeatingLinearRangeF, airIRmPmPWWHeatingCurrentValue=airIRmPmPWWHeatingCurrentValue, airIRmPmPWWHeatingManOpValue=airIRmPmPWWHeatingManOpValue, airIRmPmHumidifier1=airIRmPmHumidifier1, airIRmPmHumidifier1ManOpEnable=airIRmPmHumidifier1ManOpEnable, airIRmPmHumidifier1Running=airIRmPmHumidifier1Running, airIRmPmHumidifier1ManOpRunning=airIRmPmHumidifier1ManOpRunning, airIRmPmHumidifier1Type=airIRmPmHumidifier1Type, airIRmPmHumidifier1StartHumidity=airIRmPmHumidifier1StartHumidity, airIRmPmHumidifier1Hysteresis=airIRmPmHumidifier1Hysteresis, airIRmPmHumidifier1LinearRange=airIRmPmHumidifier1LinearRange, airIRmPmHumidifier1Runtime=airIRmPmHumidifier1Runtime, airIRmPmHumidifier1CurrentValue=airIRmPmHumidifier1CurrentValue, airIRmPmHumidifier1ManOpValue=airIRmPmHumidifier1ManOpValue, airIRmPmHumidifier2=airIRmPmHumidifier2, airIRmPmHumidifier2ManOpEnable=airIRmPmHumidifier2ManOpEnable, airIRmPmHumidifier2Running=airIRmPmHumidifier2Running, airIRmPmHumidifier2ManOpRunning=airIRmPmHumidifier2ManOpRunning, airIRmPmHumidifier2Type=airIRmPmHumidifier2Type, airIRmPmHumidifier2StartHumidity=airIRmPmHumidifier2StartHumidity, airIRmPmHumidifier2Hysteresis=airIRmPmHumidifier2Hysteresis, airIRmPmHumidifier2LinearRange=airIRmPmHumidifier2LinearRange, airIRmPmHumidifier2Runtime=airIRmPmHumidifier2Runtime, airIRmPmHumidifier2CurrentValue=airIRmPmHumidifier2CurrentValue, airIRmPmHumidifier2ManOpValue=airIRmPmHumidifier2ManOpValue, airIRmPmDehumidification=airIRmPmDehumidification, airIRmPmDehumidificManOpEnable=airIRmPmDehumidificManOpEnable, airIRmPmDehumidificRunning=airIRmPmDehumidificRunning, airIRmPmDehumidificManOpRunning=airIRmPmDehumidificManOpRunning, airIRmPmDehumidificStartHumidity=airIRmPmDehumidificStartHumidity, airIRmPmDehumidificHysteresis=airIRmPmDehumidificHysteresis, airIRmPmDehumidificMinWaterTemp=airIRmPmDehumidificMinWaterTemp, airIRmPmDehumidificMinWaterTempC=airIRmPmDehumidificMinWaterTempC, airIRmPmDehumidificMinWaterTempF=airIRmPmDehumidificMinWaterTempF, airIRmPmDehumidificMaxWaterTemp=airIRmPmDehumidificMaxWaterTemp, airIRmPmDehumidificMaxWaterTempC=airIRmPmDehumidificMaxWaterTempC, airIRmPmDehumidificMaxWaterTempF=airIRmPmDehumidificMaxWaterTempF, airIRmPmDehumidificRuntime=airIRmPmDehumidificRuntime, airIRmPmFan1=airIRmPmFan1)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmFan1ManOpEnable=airIRmPmFan1ManOpEnable, airIRmPmFan1Running=airIRmPmFan1Running, airIRmPmFan1ManOpRunning=airIRmPmFan1ManOpRunning, airIRmPmFan1Type=airIRmPmFan1Type, airIRmPmFan1Runtime=airIRmPmFan1Runtime, airIRmPmFan1Speed=airIRmPmFan1Speed, airIRmPmFan1ManOpSpeed=airIRmPmFan1ManOpSpeed, airIRmPmFan2=airIRmPmFan2, airIRmPmFan2ManOpEnable=airIRmPmFan2ManOpEnable, airIRmPmFan2Running=airIRmPmFan2Running, airIRmPmFan2ManOpRunning=airIRmPmFan2ManOpRunning, airIRmPmFan2Type=airIRmPmFan2Type, airIRmPmFan2Runtime=airIRmPmFan2Runtime, airIRmPmFan2Speed=airIRmPmFan2Speed, airIRmPmFan2ManOpSpeed=airIRmPmFan2ManOpSpeed, airIRmPmFan3=airIRmPmFan3, airIRmPmFan3ManOpEnable=airIRmPmFan3ManOpEnable, airIRmPmFan3Running=airIRmPmFan3Running, airIRmPmFan3ManOpRunning=airIRmPmFan3ManOpRunning, airIRmPmFan3Type=airIRmPmFan3Type, airIRmPmFan3Runtime=airIRmPmFan3Runtime, airIRmPmFan3Speed=airIRmPmFan3Speed, airIRmPmFan3ManOpSpeed=airIRmPmFan3ManOpSpeed, airIRmPmLouver1=airIRmPmLouver1, airIRmPmLouver1ManOpEnable=airIRmPmLouver1ManOpEnable, airIRmPmLouver1Position=airIRmPmLouver1Position, airIRmPmLouver1ManOpPosition=airIRmPmLouver1ManOpPosition, airIRmPmLouver2=airIRmPmLouver2, airIRmPmLouver2ManOpEnable=airIRmPmLouver2ManOpEnable, airIRmPmLouver2Position=airIRmPmLouver2Position, airIRmPmLouver2ManOpPosition=airIRmPmLouver2ManOpPosition, airIRmPmLouver3=airIRmPmLouver3, airIRmPmLouver3ManOpEnable=airIRmPmLouver3ManOpEnable, airIRmPmLouver3Position=airIRmPmLouver3Position, airIRmPmLouver3ManOpPosition=airIRmPmLouver3ManOpPosition, airIRmPmAuxAlarm1=airIRmPmAuxAlarm1, airIRmPmAuxAlarm2=airIRmPmAuxAlarm2, airIRmPmAuxAlarm3=airIRmPmAuxAlarm3, airIRmPmAuxAlarm4=airIRmPmAuxAlarm4, airIRmPmAuxAlarm5=airIRmPmAuxAlarm5, airIRmPmAlarmBits=airIRmPmAlarmBits, airIRmPmFan1Failure=airIRmPmFan1Failure, airIRmPmFan2Failure=airIRmPmFan2Failure, airIRmPmFan3Failure=airIRmPmFan3Failure, airIRmPmCompressor1Failure=airIRmPmCompressor1Failure, airIRmPmCompressor2Failure=airIRmPmCompressor2Failure, airIRmPmWaterDetector=airIRmPmWaterDetector, airIRmPmPhaseFailure=airIRmPmPhaseFailure, airIRmPmFireSmokeDetector=airIRmPmFireSmokeDetector, airIRmPmReturnAirTemperatureTooHigh=airIRmPmReturnAirTemperatureTooHigh, airIRmPmReturnAirHumidityTooHigh=airIRmPmReturnAirHumidityTooHigh, airIRmPmSupplyAirTemperatureTooHigh=airIRmPmSupplyAirTemperatureTooHigh, airIRmPmSupplyAirHumidityTooHigh=airIRmPmSupplyAirHumidityTooHigh, airIRmPmWaterTemperatureTooHigh=airIRmPmWaterTemperatureTooHigh, airIRmPmReturnAirTemperatureTooLow=airIRmPmReturnAirTemperatureTooLow, airIRmPmReturnAirHumidityTooLow=airIRmPmReturnAirHumidityTooLow, airIRmPmSupplyAirTemperatureTooLow=airIRmPmSupplyAirTemperatureTooLow, airIRmPmSupplyAirHumidityTooLow=airIRmPmSupplyAirHumidityTooLow, airIRmPmWaterTemperatureTooLow=airIRmPmWaterTemperatureTooLow, airIRmPmSensor1Failure=airIRmPmSensor1Failure, airIRmPmSensor2Failure=airIRmPmSensor2Failure, airIRmPmSensor3Failure=airIRmPmSensor3Failure, airIRmPmSensor4Failure=airIRmPmSensor4Failure, airIRmPmSensor5Failure=airIRmPmSensor5Failure, airIRmPmSensor6Failure=airIRmPmSensor6Failure, airIRmPmSensor7Failure=airIRmPmSensor7Failure, airIRmPmSensor8Failure=airIRmPmSensor8Failure, airIRmPmSensor9Failure=airIRmPmSensor9Failure, airIRmPmSensor10Failure=airIRmPmSensor10Failure, airIRmPmSensor11Failure=airIRmPmSensor11Failure, airIRmPmSensor12Failure=airIRmPmSensor12Failure, airIRmPmSensor13Failure=airIRmPmSensor13Failure, airIRmPmSensor14Failure=airIRmPmSensor14Failure, airIRmPmSensor15Failure=airIRmPmSensor15Failure, airIRmPmSensor16Failure=airIRmPmSensor16Failure, airIRmPmSensor17Failure=airIRmPmSensor17Failure, airIRmPmSensor18Failure=airIRmPmSensor18Failure, airIRmPmSensor19Failure=airIRmPmSensor19Failure, airIRmPmSensor20Failure=airIRmPmSensor20Failure, airIRmPmSensor21Failure=airIRmPmSensor21Failure, airIRmPmSensor1Defect=airIRmPmSensor1Defect, airIRmPmSensor2Defect=airIRmPmSensor2Defect, airIRmPmSensor3Defect=airIRmPmSensor3Defect, airIRmPmSensor4Defect=airIRmPmSensor4Defect, airIRmPmSensor5Defect=airIRmPmSensor5Defect, airIRmPmSensor6Defect=airIRmPmSensor6Defect, airIRmPmSensor7Defect=airIRmPmSensor7Defect, airIRmPmSensor8Defect=airIRmPmSensor8Defect, airIRmPmSensor9Defect=airIRmPmSensor9Defect, airIRmPmSensor10Defect=airIRmPmSensor10Defect, airIRmPmSensor11Defect=airIRmPmSensor11Defect, airIRmPmSensor12Defect=airIRmPmSensor12Defect, airIRmPmSensor13Defect=airIRmPmSensor13Defect, airIRmPmSensor14Defect=airIRmPmSensor14Defect, airIRmPmSensor15Defect=airIRmPmSensor15Defect, airIRmPmSensor16Defect=airIRmPmSensor16Defect, airIRmPmSensor17Defect=airIRmPmSensor17Defect, airIRmPmSensor18Defect=airIRmPmSensor18Defect, airIRmPmSensor19Defect=airIRmPmSensor19Defect, airIRmPmSensor20Defect=airIRmPmSensor20Defect, airIRmPmSensor21Defect=airIRmPmSensor21Defect, airIRmPmCompressor1Alarm=airIRmPmCompressor1Alarm, airIRmPmCompressor2Alarm=airIRmPmCompressor2Alarm, airIRmPmCompressor1LowPressure=airIRmPmCompressor1LowPressure, airIRmPmCompressor2LowPressure=airIRmPmCompressor2LowPressure, airIRmPmReheat1Failure=airIRmPmReheat1Failure, airIRmPmReheat2Failure=airIRmPmReheat2Failure, airIRmPmReheat3Failure=airIRmPmReheat3Failure, airIRmPmReheat4Failure=airIRmPmReheat4Failure, airIRmPmDrycooler1Failure=airIRmPmDrycooler1Failure, airIRmPmDrycooler2Failure=airIRmPmDrycooler2Failure, airIRmPmDrycooler3Failure=airIRmPmDrycooler3Failure, airIRmPmDrycooler4Failure=airIRmPmDrycooler4Failure, airIRmPmPump1Failure=airIRmPmPump1Failure, airIRmPmPump2Failure=airIRmPmPump2Failure, airIRmPmPump3Failure=airIRmPmPump3Failure, airIRmPmPump4Failure=airIRmPmPump4Failure, airIRmPmHumidifier1Failure=airIRmPmHumidifier1Failure, airIRmPmHumidifier2Failure=airIRmPmHumidifier2Failure, airIRmPmHumidifier3Failure=airIRmPmHumidifier3Failure, airIRmPmHumidifier1Alarm5us=airIRmPmHumidifier1Alarm5us, airIRmPmHumidifier2Alarm5us=airIRmPmHumidifier2Alarm5us, airIRmPmHumidifier3Alarm5us=airIRmPmHumidifier3Alarm5us, airIRmPmHumidifier1Alarm20us=airIRmPmHumidifier1Alarm20us, airIRmPmHumidifier2Alarm20us=airIRmPmHumidifier2Alarm20us, airIRmPmHumidifier3Alarm20us=airIRmPmHumidifier3Alarm20us, airIRmPmFan1Alarm=airIRmPmFan1Alarm)
mibBuilder.exportSymbols("PowerNet-MIB", airIRmPmFan2Alarm=airIRmPmFan2Alarm, airIRmPmFan3Alarm=airIRmPmFan3Alarm, airIRmPmFilter1Clogged=airIRmPmFilter1Clogged, airIRmPmFilter2Clogged=airIRmPmFilter2Clogged, airIRmPmFilter3Clogged=airIRmPmFilter3Clogged, airIRmPmAuxiliaryAlarm1=airIRmPmAuxiliaryAlarm1, airIRmPmAuxiliaryAlarm2=airIRmPmAuxiliaryAlarm2, airIRmPmAuxiliaryAlarm3=airIRmPmAuxiliaryAlarm3, airIRmPmAuxiliaryAlarm4=airIRmPmAuxiliaryAlarm4, airIRmPmAuxiliaryAlarm5=airIRmPmAuxiliaryAlarm5, airIRmPmAuxiliaryAlarm6=airIRmPmAuxiliaryAlarm6, airIRmPmAuxiliaryAlarm7=airIRmPmAuxiliaryAlarm7, airIRmPmAuxiliaryAlarm8=airIRmPmAuxiliaryAlarm8, airIRmPmAuxiliaryAlarm9=airIRmPmAuxiliaryAlarm9, airIRmPmAuxiliaryAlarm10=airIRmPmAuxiliaryAlarm10, airIRmPmHotGasHeatingAlarm=airIRmPmHotGasHeatingAlarm, airIRmPmEEV1PressureSensorError=airIRmPmEEV1PressureSensorError, airIRmPmEEV1TemperatureSensorError=airIRmPmEEV1TemperatureSensorError, airIRmPmEEV1StepperMotorError=airIRmPmEEV1StepperMotorError, airIRmPmEEV2PressureSensorError=airIRmPmEEV2PressureSensorError, airIRmPmEEV2TemperatureSensorError=airIRmPmEEV2TemperatureSensorError, airIRmPmEEV2StepperMotorError=airIRmPmEEV2StepperMotorError, airIRmPmMyZone=airIRmPmMyZone, airIRmPmMyZoneNumber=airIRmPmMyZoneNumber, airIRmPmMyZoneRoomTemperature=airIRmPmMyZoneRoomTemperature, airIRmPmMyZoneRoomTemperatureC=airIRmPmMyZoneRoomTemperatureC, airIRmPmMyZoneRoomTemperatureF=airIRmPmMyZoneRoomTemperatureF, airIRmPmMyZoneRoomHumidity=airIRmPmMyZoneRoomHumidity, airIRmPmMyZoneSupplyTemperature=airIRmPmMyZoneSupplyTemperature, airIRmPmMyZoneSupplyTemperatureC=airIRmPmMyZoneSupplyTemperatureC, airIRmPmMyZoneSupplyTemperatureF=airIRmPmMyZoneSupplyTemperatureF, airIRmPmMyZoneSupplyHumidity=airIRmPmMyZoneSupplyHumidity, airIRmPmMyZoneSequencingTime=airIRmPmMyZoneSequencingTime, airIRmPmMyZoneNumberOfErrorUnits=airIRmPmMyZoneNumberOfErrorUnits, airIRmPmMyZoneEmergencyTemperature=airIRmPmMyZoneEmergencyTemperature, airIRmPmMyZoneEmergencyTemperatureC=airIRmPmMyZoneEmergencyTemperatureC, airIRmPmMyZoneEmergencyTemperatureF=airIRmPmMyZoneEmergencyTemperatureF, airIRmPmMyZoneCWEnergySaveMode=airIRmPmMyZoneCWEnergySaveMode, airIRmPmGlobalZoneData=airIRmPmGlobalZoneData, airIRmPmGlobalZoneDataEmergencyOpMode=airIRmPmGlobalZoneDataEmergencyOpMode, airIRGen3=airIRGen3, airIRG3Ident=airIRG3Ident, airIRG3IdentTableSize=airIRG3IdentTableSize, airIRG3IdentTable=airIRG3IdentTable, airIRG3IdentEntry=airIRG3IdentEntry, airIRG3IdentIndex=airIRG3IdentIndex, airIRG3IdentName=airIRG3IdentName, airIRG3IdentLocation=airIRG3IdentLocation, airIRG3IdentModelNumber=airIRG3IdentModelNumber, airIRG3IdentSerialNumber=airIRG3IdentSerialNumber, airIRG3IdentFirmwareRevision=airIRG3IdentFirmwareRevision, airIRG3IdentHardwareRevision=airIRG3IdentHardwareRevision, airIRG3IdentManufactureDate=airIRG3IdentManufactureDate, airIRG3IdentRDUSysOID=airIRG3IdentRDUSysOID, airIRG3IdentCMSysOID=airIRG3IdentCMSysOID, airIRG3IdentGroupSysOID=airIRG3IdentGroupSysOID, airIRG3Group=airIRG3Group, airIRG3GroupTableSize=airIRG3GroupTableSize, airIRG3GroupStatusTable=airIRG3GroupStatusTable, airIRG3GroupStatusEntry=airIRG3GroupStatusEntry, airIRG3GroupStatusIndex=airIRG3GroupStatusIndex, airIRG3GroupStatusCoolOutput=airIRG3GroupStatusCoolOutput, airIRG3GroupStatusCoolDemand=airIRG3GroupStatusCoolDemand, airIRG3GroupStatusAirFlowUS=airIRG3GroupStatusAirFlowUS, airIRG3GroupStatusAirFlowMetric=airIRG3GroupStatusAirFlowMetric, airIRG3GroupStatusMaxRackInletTempUS=airIRG3GroupStatusMaxRackInletTempUS, airIRG3GroupStatusMaxRackInletTempMetric=airIRG3GroupStatusMaxRackInletTempMetric, airIRG3GroupStatusMinRackInletTempUS=airIRG3GroupStatusMinRackInletTempUS, airIRG3GroupStatusMinRackInletTempMetric=airIRG3GroupStatusMinRackInletTempMetric, airIRG3GroupStatusMaxReturnAirTempUS=airIRG3GroupStatusMaxReturnAirTempUS, airIRG3GroupStatusMaxReturnAirTempMetric=airIRG3GroupStatusMaxReturnAirTempMetric, airIRG3GroupStatusMinReturnAirTempUS=airIRG3GroupStatusMinReturnAirTempUS, airIRG3GroupStatusMinReturnAirTempMetric=airIRG3GroupStatusMinReturnAirTempMetric, airIRG3GroupStatusAvgSupplyTempUS=airIRG3GroupStatusAvgSupplyTempUS, airIRG3GroupStatusAvgSupplyTempMetric=airIRG3GroupStatusAvgSupplyTempMetric, airIRG3GroupStatusAvgReturnTempUS=airIRG3GroupStatusAvgReturnTempUS, airIRG3GroupStatusAvgReturnTempMetric=airIRG3GroupStatusAvgReturnTempMetric, airIRG3GroupStatusAvgFanSpeed=airIRG3GroupStatusAvgFanSpeed, airIRG3GroupStatusAvgAirFlowUS=airIRG3GroupStatusAvgAirFlowUS, airIRG3GroupStatusAvgAirFlowMetric=airIRG3GroupStatusAvgAirFlowMetric, airIRG3GroupStatusTotalAirFlowUS=airIRG3GroupStatusTotalAirFlowUS, airIRG3GroupStatusTotalAirFlowMetric=airIRG3GroupStatusTotalAirFlowMetric, airIRG3GroupSetpointsTable=airIRG3GroupSetpointsTable, airIRG3GroupSetpointsEntry=airIRG3GroupSetpointsEntry, airIRG3GroupSetpointsIndex=airIRG3GroupSetpointsIndex, airIRG3GroupSetpointsCoolSetpointUS=airIRG3GroupSetpointsCoolSetpointUS, airIRG3GroupSetpointsCoolSetpointMetric=airIRG3GroupSetpointsCoolSetpointMetric, airIRG3GroupSetpointsCoolDeadbandUS=airIRG3GroupSetpointsCoolDeadbandUS, airIRG3GroupSetpointsCoolDeadbandMetric=airIRG3GroupSetpointsCoolDeadbandMetric, airIRG3GroupSetpointsFanSpeedPreference=airIRG3GroupSetpointsFanSpeedPreference, airIRG3GroupSetpointsSupplyAirSetpointUS=airIRG3GroupSetpointsSupplyAirSetpointUS, airIRG3GroupSetpointsSupplyAirSetpointMetric=airIRG3GroupSetpointsSupplyAirSetpointMetric, airIRG3GroupSetpointsAirFlowControl=airIRG3GroupSetpointsAirFlowControl, airIRG3GroupSetpointsLightingOnTime=airIRG3GroupSetpointsLightingOnTime, airIRG3GroupConfigTable=airIRG3GroupConfigTable, airIRG3GroupConfigEntry=airIRG3GroupConfigEntry, airIRG3GroupConfigIndex=airIRG3GroupConfigIndex, airIRG3GroupConfigNumberofCoolingUnits=airIRG3GroupConfigNumberofCoolingUnits, airIRG3GroupConfigConfigurationType=airIRG3GroupConfigConfigurationType, airIRG3GroupConfigCapacityControlType=airIRG3GroupConfigCapacityControlType, airIRG3GroupConfigFanSpeedControl=airIRG3GroupConfigFanSpeedControl, airIRG3GroupConfigCoolGainP=airIRG3GroupConfigCoolGainP, airIRG3GroupConfigCoolResetRateI=airIRG3GroupConfigCoolResetRateI, airIRG3GroupConfigCoolDerivativeD=airIRG3GroupConfigCoolDerivativeD, airIRG3GroupConfigCoolPIDReset=airIRG3GroupConfigCoolPIDReset, airIRG3GroupConfigNumberofBackupUnits=airIRG3GroupConfigNumberofBackupUnits, airIRG3GroupConfigRuntimeBalancingEnable=airIRG3GroupConfigRuntimeBalancingEnable, airIRG3GroupConfigLoadAssistEnable=airIRG3GroupConfigLoadAssistEnable, airIRG3Alarms=airIRG3Alarms, airIRG3AlarmsTableSize=airIRG3AlarmsTableSize, airIRG3AlarmsTable=airIRG3AlarmsTable, airIRG3AlarmsEntry=airIRG3AlarmsEntry, airIRG3AlarmsIndex=airIRG3AlarmsIndex, airIRG3AlarmsEventCode=airIRG3AlarmsEventCode, airIRG3AlarmsDescription=airIRG3AlarmsDescription, airIRG3RDU=airIRG3RDU, airIRG3RDUTableSize=airIRG3RDUTableSize, airIRG3RDUStatusTable=airIRG3RDUStatusTable, airIRG3RDUStatusEntry=airIRG3RDUStatusEntry, airIRG3RDUStatusDeviceIndex=airIRG3RDUStatusDeviceIndex, airIRG3RDUID=airIRG3RDUID, airIRG3RDUStatusOnReadyStandby=airIRG3RDUStatusOnReadyStandby, airIRG3RDUStatusOperatingMode=airIRG3RDUStatusOperatingMode, airIRG3RDUStatusLeadPump=airIRG3RDUStatusLeadPump, airIRG3RDUStatusStartupDelay=airIRG3RDUStatusStartupDelay, airIRG3RDUStatusPumpChangeOverInterval=airIRG3RDUStatusPumpChangeOverInterval, airIRG3RDUStatusStopOnLeakDetect=airIRG3RDUStatusStopOnLeakDetect)
mibBuilder.exportSymbols("PowerNet-MIB", airIRG3RDUStatusPowerSource=airIRG3RDUStatusPowerSource, airIRG3RDUStatusTotalRDUOutputPower=airIRG3RDUStatusTotalRDUOutputPower, airIRG3RDUStatusInletWaterTempUS=airIRG3RDUStatusInletWaterTempUS, airIRG3RDUStatusInletWaterTempMetric=airIRG3RDUStatusInletWaterTempMetric, airIRG3RDUStatusOutletWaterTempUS=airIRG3RDUStatusOutletWaterTempUS, airIRG3RDUStatusOutletWaterTempMetric=airIRG3RDUStatusOutletWaterTempMetric, airIRG3RDUStatusCondenserSaturationTempUS=airIRG3RDUStatusCondenserSaturationTempUS, airIRG3RDUStatusCondenserSaturationTempMetric=airIRG3RDUStatusCondenserSaturationTempMetric, airIRG3RDUStatusDewPointTempUS=airIRG3RDUStatusDewPointTempUS, airIRG3RDUStatusDewPointTempMetric=airIRG3RDUStatusDewPointTempMetric, airIRG3RDUStatusPumpOutletTempUS=airIRG3RDUStatusPumpOutletTempUS, airIRG3RDUStatusPumpOutletTempMetric=airIRG3RDUStatusPumpOutletTempMetric, airIRG3RDUStatusSubcoolerOutletTempUS=airIRG3RDUStatusSubcoolerOutletTempUS, airIRG3RDUStatusSubcoolerOutletTempMetric=airIRG3RDUStatusSubcoolerOutletTempMetric, airIRG3RDUStatusCondenserOutletTempUS=airIRG3RDUStatusCondenserOutletTempUS, airIRG3RDUStatusCondenserOutletTempMetric=airIRG3RDUStatusCondenserOutletTempMetric, airIRG3RDUStatusCondenserInletTempUS=airIRG3RDUStatusCondenserInletTempUS, airIRG3RDUStatusCondenserInletTempMetric=airIRG3RDUStatusCondenserInletTempMetric, airIRG3RDUStatusCondenserOutletPressureUS=airIRG3RDUStatusCondenserOutletPressureUS, airIRG3RDUStatusCondenserOutletPressureMetric=airIRG3RDUStatusCondenserOutletPressureMetric, airIRG3RDUStatusPump1HeadPressureUS=airIRG3RDUStatusPump1HeadPressureUS, airIRG3RDUStatusPump1HeadPressureMetric=airIRG3RDUStatusPump1HeadPressureMetric, airIRG3RDUStatusPump2HeadPressureUS=airIRG3RDUStatusPump2HeadPressureUS, airIRG3RDUStatusPump2HeadPressureMetric=airIRG3RDUStatusPump2HeadPressureMetric, airIRG3RDUStatusPump1Speed=airIRG3RDUStatusPump1Speed, airIRG3RDUStatusPump2Speed=airIRG3RDUStatusPump2Speed, airIRG3RDUStatusCWValvePosition=airIRG3RDUStatusCWValvePosition, airIRG3RDUStatusReceiverLiquidLevel=airIRG3RDUStatusReceiverLiquidLevel, airIRG3RDUStatusDCPowerSupply1Current=airIRG3RDUStatusDCPowerSupply1Current, airIRG3RDUStatusDCPowerSupply2Current=airIRG3RDUStatusDCPowerSupply2Current, airIRG3RDUStatusTotalDCPowerSupplyCurrent=airIRG3RDUStatusTotalDCPowerSupplyCurrent, airIRG3RDUStatusInputState=airIRG3RDUStatusInputState, airIRG3RDUStatusOutputState=airIRG3RDUStatusOutputState, airIRG3RDUStatusByPassValvePosition=airIRG3RDUStatusByPassValvePosition, airIRG3RDUStatusRefrigerantLeakDetector=airIRG3RDUStatusRefrigerantLeakDetector, airIRG3RDURunHoursTable=airIRG3RDURunHoursTable, airIRG3RDURunHoursEntry=airIRG3RDURunHoursEntry, airIRG3RDURunHoursDeviceIndex=airIRG3RDURunHoursDeviceIndex, airIRG3RDURunHoursRDUID=airIRG3RDURunHoursRDUID, airIRG3RDURunHoursPump1=airIRG3RDURunHoursPump1, airIRG3RDURunHoursPump2=airIRG3RDURunHoursPump2, airIRG3RDURunHoursPowerSupply1=airIRG3RDURunHoursPowerSupply1, airIRG3RDURunHoursPowerSupply2=airIRG3RDURunHoursPowerSupply2, airIRG3RDUServiceIntervalsTable=airIRG3RDUServiceIntervalsTable, airIRG3RDUServiceIntervalsEntry=airIRG3RDUServiceIntervalsEntry, airIRG3RDUServiceIntervalsDeviceIndex=airIRG3RDUServiceIntervalsDeviceIndex, airIRG3RDUServiceIntervalsRDUID=airIRG3RDUServiceIntervalsRDUID, airIRG3RDUServiceIntervalsAirFilterInterval=airIRG3RDUServiceIntervalsAirFilterInterval, airIRG3RDUServiceIntervalsAirFilterAlarm=airIRG3RDUServiceIntervalsAirFilterAlarm, airIRG3RDUThresholdsTable=airIRG3RDUThresholdsTable, airIRG3RDUThresholdsEntry=airIRG3RDUThresholdsEntry, airIRG3RDUThresholdsDeviceIndex=airIRG3RDUThresholdsDeviceIndex, airIRG3RDUThresholdsRDUID=airIRG3RDUThresholdsRDUID, airIRG3RDUThresholdsEnteringFluidTempHighUS=airIRG3RDUThresholdsEnteringFluidTempHighUS, airIRG3RDUThresholdsEnteringFluidTempHighMetric=airIRG3RDUThresholdsEnteringFluidTempHighMetric, airIRG3RDUSetpointsTable=airIRG3RDUSetpointsTable, airIRG3RDUSetpointsEntry=airIRG3RDUSetpointsEntry, airIRG3RDUSetpointsDeviceIndex=airIRG3RDUSetpointsDeviceIndex, airIRG3RDUConfigTable=airIRG3RDUConfigTable, airIRG3RDUConfigEntry=airIRG3RDUConfigEntry, airIRG3RDUConfigDeviceIndex=airIRG3RDUConfigDeviceIndex, airIRG3RDUConfigRDUID=airIRG3RDUConfigRDUID, airIRG3RDUConfigStopOnLeakDetect=airIRG3RDUConfigStopOnLeakDetect, airIRG3RDUConfigStartupDelay=airIRG3RDUConfigStartupDelay, airIRG3RDUConfigPumpChangeOverInterval=airIRG3RDUConfigPumpChangeOverInterval, airIRG3RDUConfigPowerSource=airIRG3RDUConfigPowerSource, airIRG3RDUConfigOutputSource=airIRG3RDUConfigOutputSource, airIRG3RDUConfigInputNormalState=airIRG3RDUConfigInputNormalState, airIRG3RDUConfigOutputNormalState=airIRG3RDUConfigOutputNormalState, airIRG3RDUConfigByPassValveEnabled=airIRG3RDUConfigByPassValveEnabled, airIRG3RDUConfigRefrigerantLeakDetectorEnabled=airIRG3RDUConfigRefrigerantLeakDetectorEnabled, airIRG3RDUConfigCalibrateRefrigerantLeakDetector=airIRG3RDUConfigCalibrateRefrigerantLeakDetector, airIRG3RDUConfigOnReadyStandby=airIRG3RDUConfigOnReadyStandby, airIRG3CM=airIRG3CM, airIRG3CMTableSize=airIRG3CMTableSize, airIRG3CMStatusTable=airIRG3CMStatusTable, airIRG3CMStatusEntry=airIRG3CMStatusEntry, airIRG3CMStatusDeviceIndex=airIRG3CMStatusDeviceIndex, airIRG3CMStatusCMID=airIRG3CMStatusCMID, airIRG3CMStatusOperatingMode=airIRG3CMStatusOperatingMode, airIRG3CMStatusUnitType=airIRG3CMStatusUnitType, airIRG3CMStatusRackInletTempUS=airIRG3CMStatusRackInletTempUS, airIRG3CMStatusRackInletTempMetric=airIRG3CMStatusRackInletTempMetric, airIRG3CMStatusReturnAirTempUS=airIRG3CMStatusReturnAirTempUS, airIRG3CMStatusReturnAirTempMetric=airIRG3CMStatusReturnAirTempMetric, airIRG3CMStatusLiquidTempUS=airIRG3CMStatusLiquidTempUS, airIRG3CMStatusLiquidTempMetric=airIRG3CMStatusLiquidTempMetric, airIRG3CMStatusVaporTempUS=airIRG3CMStatusVaporTempUS, airIRG3CMStatusVaporTempMetric=airIRG3CMStatusVaporTempMetric, airIRG3CMStatusEvaporatorTempUS=airIRG3CMStatusEvaporatorTempUS, airIRG3CMStatusEvaporatorTempMetric=airIRG3CMStatusEvaporatorTempMetric, airIRG3CMStatusLiquidInletPressureUS=airIRG3CMStatusLiquidInletPressureUS, airIRG3CMStatusLiquidInletPressureMetric=airIRG3CMStatusLiquidInletPressureMetric, airIRG3CMStatusVaporOutletPressureUS=airIRG3CMStatusVaporOutletPressureUS, airIRG3CMStatusVaporOutletPressureMetric=airIRG3CMStatusVaporOutletPressureMetric, airIRG3CMStatusExpansionValvePosition=airIRG3CMStatusExpansionValvePosition, airIRG3CMStatusEPRValvePosition=airIRG3CMStatusEPRValvePosition, airIRG3CMStatusLocalDisplayOnOffEnabled=airIRG3CMStatusLocalDisplayOnOffEnabled, airIRG3CMStatusAverageFanSpeed=airIRG3CMStatusAverageFanSpeed, airIRG3CMRunHoursTable=airIRG3CMRunHoursTable, airIRG3CMRunHoursEntry=airIRG3CMRunHoursEntry, airIRG3CMRunHoursDeviceIndex=airIRG3CMRunHoursDeviceIndex, airIRG3CMRunHoursCMID=airIRG3CMRunHoursCMID, airIRG3CMRunHoursFan1=airIRG3CMRunHoursFan1, airIRG3CMRunHoursFan2=airIRG3CMRunHoursFan2, airIRG3CMRunHoursFan3=airIRG3CMRunHoursFan3, airIRG3CMRunHoursFan4=airIRG3CMRunHoursFan4, airIRG3CMRunHoursFan5=airIRG3CMRunHoursFan5, airIRG3CMRunHoursAirFilter=airIRG3CMRunHoursAirFilter, airIRG3CMServiceIntervalsTable=airIRG3CMServiceIntervalsTable, airIRG3CMServiceIntervalsEntry=airIRG3CMServiceIntervalsEntry, airIRG3CMServiceIntervalsDeviceIndex=airIRG3CMServiceIntervalsDeviceIndex, airIRG3CMServiceIntervalsCMID=airIRG3CMServiceIntervalsCMID, airIRG3CMServiceIntervalsAirFilterInterval=airIRG3CMServiceIntervalsAirFilterInterval, airIRG3CMServiceIntervalsAirFilterAlarm=airIRG3CMServiceIntervalsAirFilterAlarm, airIRG3CMThresholdsTable=airIRG3CMThresholdsTable, airIRG3CMThresholdsEntry=airIRG3CMThresholdsEntry, airIRG3CMThresholdsDeviceIndex=airIRG3CMThresholdsDeviceIndex, airIRG3CMThresholdsCMID=airIRG3CMThresholdsCMID, airIRG3CMThresholdsRackInletTempHighUS=airIRG3CMThresholdsRackInletTempHighUS, airIRG3CMThresholdsRackInletTempHighMetric=airIRG3CMThresholdsRackInletTempHighMetric, airIRG3CMThresholdsSupplyAirTempHighUS=airIRG3CMThresholdsSupplyAirTempHighUS, airIRG3CMThresholdsSupplyAirTempHighMetric=airIRG3CMThresholdsSupplyAirTempHighMetric, airIRG3CMThresholdsReturnAirTempHighUS=airIRG3CMThresholdsReturnAirTempHighUS, airIRG3CMThresholdsReturnAirTempHighMetric=airIRG3CMThresholdsReturnAirTempHighMetric, airIRG3CMSetpointsTable=airIRG3CMSetpointsTable, airIRG3CMSetpointsEntry=airIRG3CMSetpointsEntry)
mibBuilder.exportSymbols("PowerNet-MIB", airIRG3CMSetpointsDeviceIndex=airIRG3CMSetpointsDeviceIndex, airIRG3CMConfigTable=airIRG3CMConfigTable, airIRG3CMConfigEntry=airIRG3CMConfigEntry, airIRG3CMConfigDeviceIndex=airIRG3CMConfigDeviceIndex, airIRG3CMConfigCMID=airIRG3CMConfigCMID, airIRG3CMConfigStopOnCoolFail=airIRG3CMConfigStopOnCoolFail, airIRG3CMConfigStartupDelay=airIRG3CMConfigStartupDelay, airIRG3CMConfigRemoteOnStandby=airIRG3CMConfigRemoteOnStandby, airIRG3CMConfigPowerSource=airIRG3CMConfigPowerSource, rARU=rARU, rARUIdent=rARUIdent, rARUIdentTable=rARUIdentTable, rARUIdentEntry=rARUIdentEntry, rARUIdentAruIndex=rARUIdentAruIndex, rARUIdentName=rARUIdentName, rARUConfig=rARUConfig, rARUConfigTable=rARUConfigTable, rARUConfigEntry=rARUConfigEntry, rARUConfigAruIndex=rARUConfigAruIndex, rARUConfigAruName=rARUConfigAruName, rARUConfigAruRemoteSetpoint=rARUConfigAruRemoteSetpoint, rARUConfigAruTempOvrdEnableDisable=rARUConfigAruTempOvrdEnableDisable, rARUConfigAruTempOvrdSetpoint=rARUConfigAruTempOvrdSetpoint, rARUConfigAruMasterControl=rARUConfigAruMasterControl, rARUStatus=rARUStatus, rARUStatusAruDeviceCount=rARUStatusAruDeviceCount, rARUStatusSysTempUnits=rARUStatusSysTempUnits, rARUStatusTable=rARUStatusTable, rARUStatusEntry=rARUStatusEntry, rARUStatusAruIndex=rARUStatusAruIndex, rARUStatusAruName=rARUStatusAruName, rARUStatusAruRemoteSetpoint=rARUStatusAruRemoteSetpoint, rARUStatusAruManualSetpoint=rARUStatusAruManualSetpoint, rARUStatusAruTemp1=rARUStatusAruTemp1, rARUStatusAruTemp2=rARUStatusAruTemp2, rARUStatusAruTemp3=rARUStatusAruTemp3, rARUStatusAruTempOvrdEnableDisable=rARUStatusAruTempOvrdEnableDisable, rARUStatusAruTempOvrdSetpoint=rARUStatusAruTempOvrdSetpoint, rARUStatusAruAlarmState=rARUStatusAruAlarmState, rARUStatusAruCommStatus=rARUStatusAruCommStatus, rARUStatusAruTempOvrdStatus=rARUStatusAruTempOvrdStatus, rARUStatusAruMasterControl=rARUStatusAruMasterControl, rARUStatusAruTotalAirflow=rARUStatusAruTotalAirflow, rARUFanStatus=rARUFanStatus, rARUFanStatusTable=rARUFanStatusTable, rARUFanStatusEntry=rARUFanStatusEntry, rARUFanStatusAruIndex=rARUFanStatusAruIndex, rARUFanStatusNominalFanSpeed=rARUFanStatusNominalFanSpeed, rARUFanStatusSelectedFanLevel=rARUFanStatusSelectedFanLevel, rARUFanStatusReplacementThreshold=rARUFanStatusReplacementThreshold, rARUFanStatusFanIndex=rARUFanStatusFanIndex, rARUFanStatusFanOperatingStatus=rARUFanStatusFanOperatingStatus, rARUFanStatusFanRpmSpeed=rARUFanStatusFanRpmSpeed, rARUFanStatusFanFlowRate=rARUFanStatusFanFlowRate, rARUFanStatusFanInServiceDate=rARUFanStatusFanInServiceDate, rARUFanStatusFanRunhourCounter=rARUFanStatusFanRunhourCounter, rARUFanStatusFanRunhourReset=rARUFanStatusFanRunhourReset, rARUPower=rARUPower, rARUPowerStatusTable=rARUPowerStatusTable, rARUPowerStatusEntry=rARUPowerStatusEntry, rARUPowerStatusAruIndex=rARUPowerStatusAruIndex, rARUPowerStatusPrimaryAcPresent=rARUPowerStatusPrimaryAcPresent, rARUPowerStatusAuxiliaryAcPresent=rARUPowerStatusAuxiliaryAcPresent, rARUPowerStatusRedundantAcConfig=rARUPowerStatusRedundantAcConfig, rARUSensors=rARUSensors, rARUSensorsStatusTableSize=rARUSensorsStatusTableSize, rARUSensorsStatusTable=rARUSensorsStatusTable, rARUSensorsStatusEntry=rARUSensorsStatusEntry, rARUSensorsStatusAruIndex=rARUSensorsStatusAruIndex, rARUSensorsStatusSensorNumber=rARUSensorsStatusSensorNumber, rARUSensorsTemperature=rARUSensorsTemperature, rARUSensorsConfigTableSize=rARUSensorsConfigTableSize, rARUSensorsConfigTable=rARUSensorsConfigTable, rARUSensorsConfigEntry=rARUSensorsConfigEntry, rARUSensorsConfigAruIndex=rARUSensorsConfigAruIndex, rARUSensorsConfigSensorNumber=rARUSensorsConfigSensorNumber, rARUSensorsName=rARUSensorsName, rARUSensorsLocation=rARUSensorsLocation, rARUSensorsTempMaxThresh=rARUSensorsTempMaxThresh, rARUSensorsTempHighThresh=rARUSensorsTempHighThresh, rARUSensorsTempLowThresh=rARUSensorsTempLowThresh, rARUSensorsTempMinThresh=rARUSensorsTempMinThresh, rARUSensorsTempThreshHysteresis=rARUSensorsTempThreshHysteresis, rARUSensorsTempShortDecRateThreshValue=rARUSensorsTempShortDecRateThreshValue, rARUSensorsTempShortDecRateThreshTime=rARUSensorsTempShortDecRateThreshTime, rARUSensorsTempShortIncRateThreshValue=rARUSensorsTempShortIncRateThreshValue, rARUSensorsTempShortIncRateThreshTime=rARUSensorsTempShortIncRateThreshTime, rARUSensorsTempLongDecRateThreshValue=rARUSensorsTempLongDecRateThreshValue, rARUSensorsTempLongDecRateThreshTime=rARUSensorsTempLongDecRateThreshTime, rARUSensorsTempLongIncRateThreshValue=rARUSensorsTempLongIncRateThreshValue, rARUSensorsTempLongIncRateThreshTime=rARUSensorsTempLongIncRateThreshTime, xPDU=xPDU, xPDUIdent=xPDUIdent, xPDUIdentProductName=xPDUIdentProductName, xPDUIdentHardwareRev=xPDUIdentHardwareRev, xPDUIdentFirmwareAppRev=xPDUIdentFirmwareAppRev, xPDUIdentFirmwareAppOSRev=xPDUIdentFirmwareAppOSRev, xPDUIdentFirmwareControllerRev=xPDUIdentFirmwareControllerRev, xPDUIdentDateOfManufacture=xPDUIdentDateOfManufacture, xPDUIdentModelNumber=xPDUIdentModelNumber, xPDUIdentSerialNumber=xPDUIdentSerialNumber, xPDUDevice=xPDUDevice, xPDUDeviceNominalMainInputVoltage=xPDUDeviceNominalMainInputVoltage, xPDUDeviceServiceType=xPDUDeviceServiceType, xPDUDeviceNominalOutputVoltage=xPDUDeviceNominalOutputVoltage, xPDUDeviceMainInputBreakerRating=xPDUDeviceMainInputBreakerRating, xPDUDevicePanelBreakerRating=xPDUDevicePanelBreakerRating, xPDUDeviceTransformerPresent=xPDUDeviceTransformerPresent, xPDUDeviceLoadTieBreakerPresent=xPDUDeviceLoadTieBreakerPresent, xPDUDeviceLoadTestPortPresent=xPDUDeviceLoadTestPortPresent, xPDUDeviceFusesPresent=xPDUDeviceFusesPresent, xPDUDeviceFansPresent=xPDUDeviceFansPresent, xPDUDeviceBypassInputPresent=xPDUDeviceBypassInputPresent, xPDUDeviceCrossTieOutputPresent=xPDUDeviceCrossTieOutputPresent, xPDUDeviceEarthGroundMonitorPresent=xPDUDeviceEarthGroundMonitorPresent, xPDUDeviceInfraStruXureType=xPDUDeviceInfraStruXureType, xPDUACMonitoringPoint=xPDUACMonitoringPoint, xPDUMainInput=xPDUMainInput, xPDUMainInputOverVoltThreshold=xPDUMainInputOverVoltThreshold, xPDUMainInputUnderVoltThreshold=xPDUMainInputUnderVoltThreshold, xPDUMainInputVoltageTableSize=xPDUMainInputVoltageTableSize, xPDUMainInputVoltagePhaseTable=xPDUMainInputVoltagePhaseTable, xPDUMainInputVoltagePhaseEntry=xPDUMainInputVoltagePhaseEntry, xPDUMainInputVoltagePhaseIndex=xPDUMainInputVoltagePhaseIndex, xPDUMainInputVoltageLtoL=xPDUMainInputVoltageLtoL, xPDUMainInputVoltageLtoN=xPDUMainInputVoltageLtoN, xPDUBypassInput=xPDUBypassInput)
mibBuilder.exportSymbols("PowerNet-MIB", xPDUBypassInputOverVoltThreshold=xPDUBypassInputOverVoltThreshold, xPDUBypassInputUnderVoltThreshold=xPDUBypassInputUnderVoltThreshold, xPDUBypassInputVoltagePhaseTableSize=xPDUBypassInputVoltagePhaseTableSize, xPDUBypassInputVoltagePhaseTable=xPDUBypassInputVoltagePhaseTable, xPDUBypassInputVoltagePhaseEntry=xPDUBypassInputVoltagePhaseEntry, xPDUBypassInputVoltagePhaseIndex=xPDUBypassInputVoltagePhaseIndex, xPDUBypassInputVoltageLtoL=xPDUBypassInputVoltageLtoL, xPDUBypassInputVoltageLtoN=xPDUBypassInputVoltageLtoN, xPDUUPSInput=xPDUUPSInput, xPDUUPSInputVoltagePhaseTableSize=xPDUUPSInputVoltagePhaseTableSize, xPDUUPSInputVoltagePhaseTable=xPDUUPSInputVoltagePhaseTable, xPDUUPSInputVoltagePhaseEntry=xPDUUPSInputVoltagePhaseEntry, xPDUUPSInputVoltagePhaseIndex=xPDUUPSInputVoltagePhaseIndex, xPDUUPSInputVoltageLtoNPresent=xPDUUPSInputVoltageLtoNPresent, xPDUSystemOutput=xPDUSystemOutput, xPDUSystemOutputFrequency=xPDUSystemOutputFrequency, xPDUSystemOutputNeutralCurrent=xPDUSystemOutputNeutralCurrent, xPDUSystemOutputTotalPower=xPDUSystemOutputTotalPower, xPDUSystemOutputTotalApparentPower=xPDUSystemOutputTotalApparentPower, xPDUSystemOutputTotalPowerFactor=xPDUSystemOutputTotalPowerFactor, xPDUSystemOutputFrequencyTolerance=xPDUSystemOutputFrequencyTolerance, xPDUSystemOutputMaxKWPower=xPDUSystemOutputMaxKWPower, xPDUSystemOutputOverVoltThreshold=xPDUSystemOutputOverVoltThreshold, xPDUSystemOutputUnderVoltThreshold=xPDUSystemOutputUnderVoltThreshold, xPDUSystemOutputOverCurrentThreshold=xPDUSystemOutputOverCurrentThreshold, xPDUSystemOutputOverCurrentNeutralThreshold=xPDUSystemOutputOverCurrentNeutralThreshold, xPDUSystemOutputUnderCurrentThreshold=xPDUSystemOutputUnderCurrentThreshold, xPDUSystemOutputTableSize=xPDUSystemOutputTableSize, xPDUSystemOutputPhaseTable=xPDUSystemOutputPhaseTable, xPDUSystemOutputPhaseEntry=xPDUSystemOutputPhaseEntry, xPDUSystemOutputPhaseIndex=xPDUSystemOutputPhaseIndex, xPDUSystemOutputVoltageLtoL=xPDUSystemOutputVoltageLtoL, xPDUSystemOutputVoltageLtoN=xPDUSystemOutputVoltageLtoN, xPDUSystemOutputPhaseCurrent=xPDUSystemOutputPhaseCurrent, xPDUSystemOutputPower=xPDUSystemOutputPower, xPDUSystemOutputApparentPower=xPDUSystemOutputApparentPower, xPDUSystemOutputPowerFactor=xPDUSystemOutputPowerFactor, xPDUGroundMonitorPoint=xPDUGroundMonitorPoint, xPDUGroundCurrent=xPDUGroundCurrent, xPDUGroundCurrentThreshold=xPDUGroundCurrentThreshold, xPDUCircuitBreakers=xPDUCircuitBreakers, xPDUSystemBreakers=xPDUSystemBreakers, xPDUSystemBreakerTableSize=xPDUSystemBreakerTableSize, xPDUSystemBreakerTable=xPDUSystemBreakerTable, xPDUSystemBreakerEntry=xPDUSystemBreakerEntry, xPDUSystemBreakerTableIndex=xPDUSystemBreakerTableIndex, xPDUSystemBreakerDescription=xPDUSystemBreakerDescription, xPDUSystemBreakerPosition=xPDUSystemBreakerPosition, xPDUBranchBreakers=xPDUBranchBreakers, xPDUNumOfBranchBreakers=xPDUNumOfBranchBreakers, xPDUBranchBreakerTableSize=xPDUBranchBreakerTableSize, xPDUBranchBreakerTable=xPDUBranchBreakerTable, xPDUBranchBreakerEntry=xPDUBranchBreakerEntry, xPDUBranchBreakerTableIndex=xPDUBranchBreakerTableIndex, xPDUBranchBreakerRating=xPDUBranchBreakerRating, xPDUBranchBreakerRDPFeed=xPDUBranchBreakerRDPFeed, xPDUBranchBreakerTieIndicator=xPDUBranchBreakerTieIndicator, xPDUBranchBreakerCurrent=xPDUBranchBreakerCurrent, xPDUBranchBreakerOverCurrentThreshold=xPDUBranchBreakerOverCurrentThreshold, xPDUBranchBreakerUnderCurrentThreshold=xPDUBranchBreakerUnderCurrentThreshold, xPDUBranchBreakerMaxCurrentThreshold=xPDUBranchBreakerMaxCurrentThreshold, xPDUBranchBreakerMinCurrentThreshold=xPDUBranchBreakerMinCurrentThreshold, xPDUBranchBreakerName=xPDUBranchBreakerName, xPDUBranchBreakerLocation=xPDUBranchBreakerLocation, xPDUInputContacts=xPDUInputContacts, xPDUInputContactNumContacts=xPDUInputContactNumContacts, xPDUInputContactTableSize=xPDUInputContactTableSize, xPDUInputContactTable=xPDUInputContactTable, xPDUInputContactEntry=xPDUInputContactEntry, xPDUInputContactNumber=xPDUInputContactNumber, xPDUInputContactName=xPDUInputContactName, xPDUInputContactNormalState=xPDUInputContactNormalState, xPDUInputContactCurrentState=xPDUInputContactCurrentState, xPDUOutputRelays=xPDUOutputRelays, xPDUOutputRelaysNumRelays=xPDUOutputRelaysNumRelays, xPDUOutputRelaysTableSize=xPDUOutputRelaysTableSize, xPDUOutputRelayTable=xPDUOutputRelayTable, xPDUOutputRelayEntry=xPDUOutputRelayEntry, xPDUOutputRelayNumber=xPDUOutputRelayNumber, xPDUOutputRelayName=xPDUOutputRelayName, xPDUOutputRelayNormalState=xPDUOutputRelayNormalState, xPDUOutputRelayCurrentState=xPDUOutputRelayCurrentState, xPDUMiscGroup=xPDUMiscGroup, xPDUEPOMode=xPDUEPOMode, xPDUTransformTempStatus=xPDUTransformTempStatus, xPDUCoolingFanStatus=xPDUCoolingFanStatus, battMan=battMan, battManIdent=battManIdent, battManIdentProductName=battManIdentProductName, battManIdentHardwareRev=battManIdentHardwareRev, battManIdentFirmwareRev=battManIdentFirmwareRev, battManIdentDateOfManufacture=battManIdentDateOfManufacture, battManIdentModelNumber=battManIdentModelNumber, battManIdentSerialNumber=battManIdentSerialNumber, battManSystemCalib=battManSystemCalib, battManOhmicValueCorrectionFactor=battManOhmicValueCorrectionFactor, battManUnitCalib=battManUnitCalib, battManUnitCalibTableSize=battManUnitCalibTableSize, battManUnitCalibTable=battManUnitCalibTable, battManUnitCalibEntry=battManUnitCalibEntry, battManUnitCalibIndex=battManUnitCalibIndex, battManUnitSerialNumber=battManUnitSerialNumber, battManBatteryVoltageZeroCalib=battManBatteryVoltageZeroCalib, battManBatteryVoltageSpanCalib=battManBatteryVoltageSpanCalib, battManStringCalib=battManStringCalib, battManStringCalibTableSize=battManStringCalibTableSize, battManStringCalibTable=battManStringCalibTable, battManStringCalibEntry=battManStringCalibEntry, battManStringCalibIndex=battManStringCalibIndex, battManDCCurrentZeroCalib=battManDCCurrentZeroCalib, battManACCurrentZeroCalib=battManACCurrentZeroCalib, battManProbeRange=battManProbeRange, battManBatteryCalib=battManBatteryCalib, battManString1BatteryCalibTableSize=battManString1BatteryCalibTableSize, battManString1BatteryCalibTable=battManString1BatteryCalibTable, battManString1BatteryCalibEntry=battManString1BatteryCalibEntry, battManString1BatteryCalibIndex=battManString1BatteryCalibIndex, battManString1BatteryInterTierOhmicValue=battManString1BatteryInterTierOhmicValue, battManString2BatteryCalibTableSize=battManString2BatteryCalibTableSize, battManString2BatteryCalibTable=battManString2BatteryCalibTable, battManString2BatteryCalibEntry=battManString2BatteryCalibEntry, battManString2BatteryCalibIndex=battManString2BatteryCalibIndex, battManString2BatteryInterTierOhmicValue=battManString2BatteryInterTierOhmicValue, battManConfig=battManConfig, battManConfigApplication=battManConfigApplication, battManConfigBatteryChemistry=battManConfigBatteryChemistry, battManConfigBatteryAHCapacity=battManConfigBatteryAHCapacity)
mibBuilder.exportSymbols("PowerNet-MIB", battManConfigNumberofStrings=battManConfigNumberofStrings, battManConfigBatteriesperString=battManConfigBatteriesperString, battManConfigCellsperBattery=battManConfigCellsperBattery, battManConfigMinCellVoltage=battManConfigMinCellVoltage, battManConfigMaxCellVoltage=battManConfigMaxCellVoltage, battManConfigMaxPilotTempF=battManConfigMaxPilotTempF, battManConfigMaxPilotTempC=battManConfigMaxPilotTempC, battManConfigMaxAmbientTempF=battManConfigMaxAmbientTempF, battManConfigMaxAmbientTempC=battManConfigMaxAmbientTempC, battManConfigMinAmbientTempF=battManConfigMinAmbientTempF, battManConfigMinAmbientTempC=battManConfigMinAmbientTempC, battManConfigMaxRippleCurrent=battManConfigMaxRippleCurrent, battManConfigMaxCurrentAcceptanceDeviation=battManConfigMaxCurrentAcceptanceDeviation, battManConfigMonitorWireLength=battManConfigMonitorWireLength, battManConfigDischargeVoltageAlarmLevel=battManConfigDischargeVoltageAlarmLevel, battManConfigAutoAnnunciatorReset=battManConfigAutoAnnunciatorReset, battManConfigSuspendCellVoltage=battManConfigSuspendCellVoltage, battManConfigOhmicTestWaitTime=battManConfigOhmicTestWaitTime, battManConfigNumberOfBoosts=battManConfigNumberOfBoosts, battManAlarm=battManAlarm, battManAlarmManagementController=battManAlarmManagementController, battManAlarmBatteries=battManAlarmBatteries, battManAlarmCharger=battManAlarmCharger, battManAlarmEnvironment=battManAlarmEnvironment, battManSystemStatus=battManSystemStatus, battManSystemAmbientTempC=battManSystemAmbientTempC, battManSystemAmbientTempF=battManSystemAmbientTempF, battManSystemPilotTempC=battManSystemPilotTempC, battManSystemPilotTempF=battManSystemPilotTempF, battManSystemAmbientHighTempAlarm=battManSystemAmbientHighTempAlarm, battManSystemAmbientLowTempAlarm=battManSystemAmbientLowTempAlarm, battManSystemPilotBatteryHighTempAlarm=battManSystemPilotBatteryHighTempAlarm, battManSystemPilotProbeDisconnected=battManSystemPilotProbeDisconnected, battManSystemAmbientProbeDisconnected=battManSystemAmbientProbeDisconnected, battManSystemConfigurationInvalid=battManSystemConfigurationInvalid, battManSystemSuspendVoltage=battManSystemSuspendVoltage, battManStringStatus=battManStringStatus, battManStringTableSize=battManStringTableSize, battManStringTable=battManStringTable, battManStringEntry=battManStringEntry, battManStringIndex=battManStringIndex, battManStringCurrent=battManStringCurrent, battManStringRippleCurrent=battManStringRippleCurrent, battManStringChargerHighVoltageAlarm=battManStringChargerHighVoltageAlarm, battManStringChargerLowVoltageAlarm=battManStringChargerLowVoltageAlarm, battManStringCurrentProbeDisconnected=battManStringCurrentProbeDisconnected, battManStringOnBattery=battManStringOnBattery, battManStringHighRippleCurrent=battManStringHighRippleCurrent, battManStringVoltage=battManStringVoltage, battManStringDischargeLess5Seconds=battManStringDischargeLess5Seconds, battManStringDischarge5to10Seconds=battManStringDischarge5to10Seconds, battManStringDischarge10to60Seconds=battManStringDischarge10to60Seconds, battManStringDischargeMore60Seconds=battManStringDischargeMore60Seconds, battManBatteryStatus=battManBatteryStatus, battManString1BatteryTableSize=battManString1BatteryTableSize, battManString1BatteryTable=battManString1BatteryTable, battManString1BatteryEntry=battManString1BatteryEntry, battManString1BatteryIndex=battManString1BatteryIndex, battManString1BatteryVoltage=battManString1BatteryVoltage, battManString1BatteryLowestVoltage=battManString1BatteryLowestVoltage, battManString1BatteryCellShorted=battManString1BatteryCellShorted, battManString1BatteryOpenFuseOrConnection=battManString1BatteryOpenFuseOrConnection, battManString1BatteryLowCapacity=battManString1BatteryLowCapacity, battManString1BatteryHighOhmicValue=battManString1BatteryHighOhmicValue, battManString1BatteryThermalRunaway=battManString1BatteryThermalRunaway, battManString1BatteryDryout=battManString1BatteryDryout, battManString1BatteryUserHighVoltageAlarm=battManString1BatteryUserHighVoltageAlarm, battManString1BatteryUserLowVoltageAlarm=battManString1BatteryUserLowVoltageAlarm, battManString1BatteryChemHighVoltageAlarm=battManString1BatteryChemHighVoltageAlarm, battManString1BatteryChemLowVoltageAlarm=battManString1BatteryChemLowVoltageAlarm, battManString1BatteryOpenCell=battManString1BatteryOpenCell, battManString2BatteryTableSize=battManString2BatteryTableSize, battManString2BatteryTable=battManString2BatteryTable, battManString2BatteryEntry=battManString2BatteryEntry, battManString2BatteryIndex=battManString2BatteryIndex, battManString2BatteryVoltage=battManString2BatteryVoltage, battManString2BatteryLowestVoltage=battManString2BatteryLowestVoltage, battManString2BatteryCellShorted=battManString2BatteryCellShorted, battManString2BatteryOpenFuseOrConnection=battManString2BatteryOpenFuseOrConnection, battManString2BatteryLowCapacity=battManString2BatteryLowCapacity, battManString2BatteryHighOhmicValue=battManString2BatteryHighOhmicValue, battManString2BatteryThermalRunaway=battManString2BatteryThermalRunaway, battManString2BatteryDryout=battManString2BatteryDryout, battManString2BatteryUserHighVoltageAlarm=battManString2BatteryUserHighVoltageAlarm, battManString2BatteryUserLowVoltageAlarm=battManString2BatteryUserLowVoltageAlarm, battManString2BatteryChemHighVoltageAlarm=battManString2BatteryChemHighVoltageAlarm, battManString2BatteryChemLowVoltageAlarm=battManString2BatteryChemLowVoltageAlarm, battManString2BatteryOpenCell=battManString2BatteryOpenCell, battManInputContactStatus=battManInputContactStatus, battManInputContactTableSize=battManInputContactTableSize, battManInputContactTable=battManInputContactTable, battManInputContactEntry=battManInputContactEntry, battManInputContactIndex=battManInputContactIndex, battManInputContactName=battManInputContactName, battManInputContactAlarmState=battManInputContactAlarmState, battManInputContactState=battManInputContactState, battManInputContactNormalState=battManInputContactNormalState, battManInputContactAlarmDelay=battManInputContactAlarmDelay, battManControl=battManControl, battManRemoteAnnunciatorReset=battManRemoteAnnunciatorReset, battManResetChargeCurrentDeviationBenchmark=battManResetChargeCurrentDeviationBenchmark, battManResetLowestDischargeVoltages=battManResetLowestDischargeVoltages, battManResetDischargeCounters=battManResetDischargeCounters, battManTestResults=battManTestResults, battManString1OhmicValueLastDischargeInfo=battManString1OhmicValueLastDischargeInfo, battManString1OhmicValueTableSize=battManString1OhmicValueTableSize, battManString1OhmicValueTable=battManString1OhmicValueTable, battManString1OhmicValueEntry=battManString1OhmicValueEntry, battManString1OhmicValueIndex=battManString1OhmicValueIndex, battManString1OhmicValueData=battManString1OhmicValueData, battManString1ResponseTestChangeTableSize=battManString1ResponseTestChangeTableSize, battManString1ResponseTestChangeTable=battManString1ResponseTestChangeTable, battManString1ResponseTestChangeEntry=battManString1ResponseTestChangeEntry, battManString1ResponseTestChangeIndex=battManString1ResponseTestChangeIndex, battManString1ResponseTestChangeData=battManString1ResponseTestChangeData, battManString2OhmicValueLastDischargeInfo=battManString2OhmicValueLastDischargeInfo, battManString2OhmicValueTableSize=battManString2OhmicValueTableSize, battManString2OhmicValueTable=battManString2OhmicValueTable, battManString2OhmicValueEntry=battManString2OhmicValueEntry, battManString2OhmicValueIndex=battManString2OhmicValueIndex, battManString2OhmicValueData=battManString2OhmicValueData, battManString2ResponseTestChangeTableSize=battManString2ResponseTestChangeTableSize, battManString2ResponseTestChangeTable=battManString2ResponseTestChangeTable, battManString2ResponseTestChangeEntry=battManString2ResponseTestChangeEntry, battManString2ResponseTestChangeIndex=battManString2ResponseTestChangeIndex, battManString2ResponseTestChangeData=battManString2ResponseTestChangeData, battManString1ResponseTestCurrentTableSize=battManString1ResponseTestCurrentTableSize)
mibBuilder.exportSymbols("PowerNet-MIB", battManString1ResponseTestCurrentTable=battManString1ResponseTestCurrentTable, battManString1ResponseTestCurrentEntry=battManString1ResponseTestCurrentEntry, battManString1ResponseTestCurrentIndex=battManString1ResponseTestCurrentIndex, battManString1ResponseTestCurrentData=battManString1ResponseTestCurrentData, battManString2ResponseTestCurrentTableSize=battManString2ResponseTestCurrentTableSize, battManString2ResponseTestCurrentTable=battManString2ResponseTestCurrentTable, battManString2ResponseTestCurrentEntry=battManString2ResponseTestCurrentEntry, battManString2ResponseTestCurrentIndex=battManString2ResponseTestCurrentIndex, battManString2ResponseTestCurrentData=battManString2ResponseTestCurrentData, battManString1ResponseTestCurrentBenchmarkTableSize=battManString1ResponseTestCurrentBenchmarkTableSize, battManString1ResponseTestCurrentBenchmarkTable=battManString1ResponseTestCurrentBenchmarkTable, battManString1ResponseTestCurrentBenchmarkEntry=battManString1ResponseTestCurrentBenchmarkEntry, battManString1ResponseTestCurrentBenchmarkIndex=battManString1ResponseTestCurrentBenchmarkIndex, battManString1ResponseTestCurrentBenchmarkData=battManString1ResponseTestCurrentBenchmarkData, battManString2ResponseTestCurrentBenchmarkTableSize=battManString2ResponseTestCurrentBenchmarkTableSize, battManString2ResponseTestCurrentBenchmarkTable=battManString2ResponseTestCurrentBenchmarkTable, battManString2ResponseTestCurrentBenchmarkEntry=battManString2ResponseTestCurrentBenchmarkEntry, battManString2ResponseTestCurrentBenchmarkIndex=battManString2ResponseTestCurrentBenchmarkIndex, battManString2ResponseTestCurrentBenchmarkData=battManString2ResponseTestCurrentBenchmarkData, battManUnitStatus=battManUnitStatus, battManUnitStatusTableSize=battManUnitStatusTableSize, battManUnitStatusTable=battManUnitStatusTable, battManUnitStatusEntry=battManUnitStatusEntry, battManUnitStatusIndex=battManUnitStatusIndex, battManUnitStatusSerialNumber=battManUnitStatusSerialNumber, battManUnitHardwareRev=battManUnitHardwareRev, battManUnitFirmwareRev=battManUnitFirmwareRev, battManUnitCommLoss=battManUnitCommLoss, battManUnitRelayStuck=battManUnitRelayStuck, xATS=xATS, xATSIdent=xATSIdent, xATSIdentProductName=xATSIdentProductName, xATSIdentHardwareRev=xATSIdentHardwareRev, xATSIdentFirmwareAppRev=xATSIdentFirmwareAppRev, xATSIdentFirmwareAppOSRev=xATSIdentFirmwareAppOSRev, xATSIdentFirmwareControllerRev=xATSIdentFirmwareControllerRev, xATSIdentDateOfManufacture=xATSIdentDateOfManufacture, xATSIdentModelNumber=xATSIdentModelNumber, xATSIdentSerialNumber=xATSIdentSerialNumber, xATSDevice=xATSDevice, xATSDeviceServiceType=xATSDeviceServiceType, xATSDeviceNominalVoltage=xATSDeviceNominalVoltage, xATSDeviceNominalFrequency=xATSDeviceNominalFrequency, xATSDeviceTransferSwitchRating=xATSDeviceTransferSwitchRating, xATSDeviceDCBackUpPresent=xATSDeviceDCBackUpPresent, xATSSwitch=xATSSwitch, xATSSwitchStatus=xATSSwitchStatus, xATSSwitchStatusSelectedSource=xATSSwitchStatusSelectedSource, xATSSwitchStatusOperationalMode=xATSSwitchStatusOperationalMode, xATSSwitchStatusAutomaticOperationSwitch=xATSSwitchStatusAutomaticOperationSwitch, xATSSwitchStatusEngineStartSignal=xATSSwitchStatusEngineStartSignal, xATSSwitchSettings=xATSSwitchSettings, xATSSwitchSettingsLowVoltageTransferPoint=xATSSwitchSettingsLowVoltageTransferPoint, xATSSwitchSettingsHighVoltageTransferPoint=xATSSwitchSettingsHighVoltageTransferPoint, xATSSwitchSettingsMaxFrequencyDeviation=xATSSwitchSettingsMaxFrequencyDeviation, xATSSwitchSettingsMinPhaseBalance=xATSSwitchSettingsMinPhaseBalance, xATSSwitchSettingsNominalRotation=xATSSwitchSettingsNominalRotation, xATSSwitchSettingsAllowClosedTransfer=xATSSwitchSettingsAllowClosedTransfer, xATSSwitchSettingsMaxSyncTime=xATSSwitchSettingsMaxSyncTime, xATSSwitchSettingsNeutralTransferTime=xATSSwitchSettingsNeutralTransferTime, xATSSwitchSettingsClearLatchedAlarms=xATSSwitchSettingsClearLatchedAlarms, xATSSwitchSettingsSetToFactoryDefaults=xATSSwitchSettingsSetToFactoryDefaults, xATSSwitchTimers=xATSSwitchTimers, xATSSwitchTimersTableSize=xATSSwitchTimersTableSize, xATSSwitchTimersTable=xATSSwitchTimersTable, xATSSwitchTimersEntry=xATSSwitchTimersEntry, xATSSwitchTimersIndex=xATSSwitchTimersIndex, xATSSwitchTimersName=xATSSwitchTimersName, xATSSwitchTimersAbort=xATSSwitchTimersAbort, xATSSwitchTimersStatus=xATSSwitchTimersStatus, xATSSwitchTimersRemainingTime=xATSSwitchTimersRemainingTime, xATSSwitchTimersDelaySetting=xATSSwitchTimersDelaySetting, xATSSwitchBlockMap=xATSSwitchBlockMap, xATSSwitchBlockMapTableSize=xATSSwitchBlockMapTableSize, xATSSwitchBlockMapTable=xATSSwitchBlockMapTable, xATSSwitchBlockMapEntry=xATSSwitchBlockMapEntry, xATSSwitchBlockMapIndex=xATSSwitchBlockMapIndex, xATSSwitchBlockMapName=xATSSwitchBlockMapName, xATSSwitchBlockMapStatus=xATSSwitchBlockMapStatus, xATSSwitchBlockMapSetting=xATSSwitchBlockMapSetting, xATSSwitchStatistics=xATSSwitchStatistics, xATSSwitchStatisticsTableSize=xATSSwitchStatisticsTableSize, xATSSwitchStatisticsTable=xATSSwitchStatisticsTable, xATSSwitchStatisticsEntry=xATSSwitchStatisticsEntry, xATSSwitchStatisticsIndex=xATSSwitchStatisticsIndex, xATSSwitchStatisticsName=xATSSwitchStatisticsName, xATSSwitchStatisticsValue=xATSSwitchStatisticsValue, xATSSwitchStatisticsReset=xATSSwitchStatisticsReset, xATSACMonitoringPoint=xATSACMonitoringPoint, xATSSource1=xATSSource1, xATSSource1Name=xATSSource1Name, xATSSource1Position=xATSSource1Position, xATSSource1Frequency=xATSSource1Frequency, xATSSource1Quality=xATSSource1Quality, xATSSource1Rotation=xATSSource1Rotation, xATSSource1TableSize=xATSSource1TableSize, xATSSource1PhaseTable=xATSSource1PhaseTable, xATSSource1PhaseEntry=xATSSource1PhaseEntry, xATSSource1Index=xATSSource1Index, xATSSource1VoltageLtoL=xATSSource1VoltageLtoL, xATSSource1VoltageLtoN=xATSSource1VoltageLtoN, xATSSource2=xATSSource2, xATSSource2Name=xATSSource2Name, xATSSource2Position=xATSSource2Position, xATSSource2Frequency=xATSSource2Frequency, xATSSource2Quality=xATSSource2Quality, xATSSource2Rotation=xATSSource2Rotation, xATSSource2TableSize=xATSSource2TableSize, xATSSource2PhaseTable=xATSSource2PhaseTable, xATSSource2PhaseEntry=xATSSource2PhaseEntry, xATSSource2Index=xATSSource2Index, xATSSource2VoltageLtoL=xATSSource2VoltageLtoL, xATSSource2VoltageLtoN=xATSSource2VoltageLtoN, xATSSystemOutput=xATSSystemOutput, xATSSystemOutputFrequency=xATSSystemOutputFrequency, xATSSystemOutputTotalPower=xATSSystemOutputTotalPower, xATSSystemOutputTotalApparentPower=xATSSystemOutputTotalApparentPower, xATSSystemOutputTotalPowerFactor=xATSSystemOutputTotalPowerFactor, xATSSystemOutputFrequencyTolerance=xATSSystemOutputFrequencyTolerance, xATSSystemOutputOverVoltThreshold=xATSSystemOutputOverVoltThreshold, xATSSystemOutputUnderVoltThreshold=xATSSystemOutputUnderVoltThreshold, xATSSystemOutputOverCurrentThreshold=xATSSystemOutputOverCurrentThreshold, xATSSystemOutputUnderCurrentThreshold=xATSSystemOutputUnderCurrentThreshold, xATSSystemOutputAlarmDelayThreshold=xATSSystemOutputAlarmDelayThreshold, xATSSystemOutputTableSize=xATSSystemOutputTableSize, xATSSystemOutputPhaseTable=xATSSystemOutputPhaseTable, xATSSystemOutputPhaseEntry=xATSSystemOutputPhaseEntry)
mibBuilder.exportSymbols("PowerNet-MIB", xATSSystemOutputPhaseIndex=xATSSystemOutputPhaseIndex, xATSSystemOutputVoltageLtoL=xATSSystemOutputVoltageLtoL, xATSSystemOutputVoltageLtoN=xATSSystemOutputVoltageLtoN, xATSSystemOutputPhaseCurrent=xATSSystemOutputPhaseCurrent, xATSSystemOutputPower=xATSSystemOutputPower, xATSSystemOutputApparentPower=xATSSystemOutputApparentPower, xATSSystemOutputPowerFactor=xATSSystemOutputPowerFactor, xATSTesting=xATSTesting, xATSTestingStatus=xATSTestingStatus, xATSTestingStatusSelectTestProcess=xATSTestingStatusSelectTestProcess, xATSTestingStatusTestStatus=xATSTestingStatusTestStatus, xATSTestingStatusProfileWarmupTime=xATSTestingStatusProfileWarmupTime, xATSTestingStatusProfileLoadedTime=xATSTestingStatusProfileLoadedTime, xATSTestingStatusProfileUnloadedTime=xATSTestingStatusProfileUnloadedTime, xATSTestingResults=xATSTestingResults, xATSTestingResultsLastDateOfTest=xATSTestingResultsLastDateOfTest, xATSTestingResultsLastResult=xATSTestingResultsLastResult, xATSTestingResultsTestLastTestTime=xATSTestingResultsTestLastTestTime, xATSTestingResultsLastCrankDuration=xATSTestingResultsLastCrankDuration, xATSTestingResultsLastWarmupDuration=xATSTestingResultsLastWarmupDuration, xATSTestingResultsLastLoadedDuration=xATSTestingResultsLastLoadedDuration, xATSTestingResultsLastUnloadedDuration=xATSTestingResultsLastUnloadedDuration, xATSTestingSchedule=xATSTestingSchedule, xATSTestingScheduleFrequency=xATSTestingScheduleFrequency, xATSTestingScheduleTestDay=xATSTestingScheduleTestDay, xATSTestingScheduleTestTime=xATSTestingScheduleTestTime, xATSTestingScheduleTestWithLoadInterval=xATSTestingScheduleTestWithLoadInterval, xATSTestingScheduleTestWithLoadSelectMonth=xATSTestingScheduleTestWithLoadSelectMonth, xATSTestingScheduleNextTestDate=xATSTestingScheduleNextTestDate, xATSTestingSimulatePowerFail=xATSTestingSimulatePowerFail, xATSTestingSimulatePowerFailTest=xATSTestingSimulatePowerFailTest, xATSTestingSimulatePowerFailTimeRemaining=xATSTestingSimulatePowerFailTimeRemaining, xATSInputContacts=xATSInputContacts, xATSInputContactNumContacts=xATSInputContactNumContacts, xATSInputContactTableSize=xATSInputContactTableSize, xATSInputContactTable=xATSInputContactTable, xATSInputContactEntry=xATSInputContactEntry, xATSInputContactNumber=xATSInputContactNumber, xATSInputContactName=xATSInputContactName, xATSInputContactNormalState=xATSInputContactNormalState, xATSInputContactCurrentState=xATSInputContactCurrentState, xATSOutputRelays=xATSOutputRelays, xATSOutputRelayNumRelays=xATSOutputRelayNumRelays, xATSOutputRelayTableSize=xATSOutputRelayTableSize, xATSOutputRelayTable=xATSOutputRelayTable, xATSOutputRelayEntry=xATSOutputRelayEntry, xATSOutputRelayNumber=xATSOutputRelayNumber, xATSOutputRelayName=xATSOutputRelayName, xATSOutputRelayNormalState=xATSOutputRelayNormalState, xATSOutputRelayCurrentState=xATSOutputRelayCurrentState, xATSMisc=xATSMisc, generator=generator, xATSGenerator=xATSGenerator, xATSGeneratorIdent=xATSGeneratorIdent, xATSGeneratorIdentModelNumber=xATSGeneratorIdentModelNumber, xATSGeneratorIdentSerialNumber=xATSGeneratorIdentSerialNumber, xATSGeneratorIdentDateofManufacture=xATSGeneratorIdentDateofManufacture, xATSGeneratorIdentVoltageConfiguration=xATSGeneratorIdentVoltageConfiguration, xATSGeneratorIdentMaxPowerRating=xATSGeneratorIdentMaxPowerRating, xATSGeneratorIdentAlternatorFrequency=xATSGeneratorIdentAlternatorFrequency, xATSGeneratorStatus=xATSGeneratorStatus, xATSGeneratorStatusGeneratorName=xATSGeneratorStatusGeneratorName, xATSGeneratorStatusOperational=xATSGeneratorStatusOperational, xATSGeneratorStatusModeSwitchPosition=xATSGeneratorStatusModeSwitchPosition, xATSGeneratorStatusRemoteStart=xATSGeneratorStatusRemoteStart, xATSGeneratorAdvStatus=xATSGeneratorAdvStatus, xATSGeneratorAdvStatusBatteryVoltage=xATSGeneratorAdvStatusBatteryVoltage, xATSGeneratorAdvStatusOilPressure=xATSGeneratorAdvStatusOilPressure, xATSGeneratorAdvStatusCoolantTemperature=xATSGeneratorAdvStatusCoolantTemperature, xATSGeneratorAdvStatusEngineRPM=xATSGeneratorAdvStatusEngineRPM, xATSGeneratorAdvStatusOilLevel=xATSGeneratorAdvStatusOilLevel, xATSGeneratorAdvStatusCoolantLevel=xATSGeneratorAdvStatusCoolantLevel, xATSGeneratorOutput=xATSGeneratorOutput, xATSGeneratorOutputFrequency=xATSGeneratorOutputFrequency, xATSGeneratorOutputTotalPower=xATSGeneratorOutputTotalPower, xATSGeneratorOutputTotalApparentPower=xATSGeneratorOutputTotalApparentPower, xATSGeneratorOutputTotalPowerFactor=xATSGeneratorOutputTotalPowerFactor, xATSGeneratorOutputTableSize=xATSGeneratorOutputTableSize, xATSGeneratorOutputPhaseTable=xATSGeneratorOutputPhaseTable, xATSGeneratorOutputPhaseEntry=xATSGeneratorOutputPhaseEntry, xATSGeneratorOutputPhaseIndex=xATSGeneratorOutputPhaseIndex, xATSGeneratorOutputVoltageLtoL=xATSGeneratorOutputVoltageLtoL, xATSGeneratorOutputVoltageLtoN=xATSGeneratorOutputVoltageLtoN, xATSGeneratorOutputPhaseCurrent=xATSGeneratorOutputPhaseCurrent, xATSGeneratorOutputPower=xATSGeneratorOutputPower, xATSGeneratorOutputApparentPower=xATSGeneratorOutputApparentPower, xATSGeneratorOutputPowerFactor=xATSGeneratorOutputPowerFactor, xATSGeneratorSettings=xATSGeneratorSettings, xATSGeneratorSettingsVoltageAdjust=xATSGeneratorSettingsVoltageAdjust, xATSGeneratorSettingsFrequencyAdjust=xATSGeneratorSettingsFrequencyAdjust, xATSGeneratorSettingsStartDelay=xATSGeneratorSettingsStartDelay, xATSGeneratorSettingsStopDelay=xATSGeneratorSettingsStopDelay, xATSGeneratorSettingsCrankCycleEnable=xATSGeneratorSettingsCrankCycleEnable, xATSGeneratorSettingsCrankTime=xATSGeneratorSettingsCrankTime, xATSGeneratorSettingsCrankRestTime=xATSGeneratorSettingsCrankRestTime, xATSGeneratorSettingsNumberCrank=xATSGeneratorSettingsNumberCrank, xATSGeneratorSettingsMetricUnit=xATSGeneratorSettingsMetricUnit, xATSGeneratorService=xATSGeneratorService, xATSGeneratorServiceTotalRunHoursLifetime=xATSGeneratorServiceTotalRunHoursLifetime, xATSGeneratorServiceEngineStartsLifetime=xATSGeneratorServiceEngineStartsLifetime, xATSGeneratorServiceTotalkWhLifetime=xATSGeneratorServiceTotalkWhLifetime, xATSGeneratorServiceTotalRunHoursSinceMaintenance=xATSGeneratorServiceTotalRunHoursSinceMaintenance, xATSGeneratorServiceEngineStartsSinceMaintenance=xATSGeneratorServiceEngineStartsSinceMaintenance, xATSGeneratorServiceTotalkWhMaintenance=xATSGeneratorServiceTotalkWhMaintenance, xATSGeneratorServiceResetRecord=xATSGeneratorServiceResetRecord, xATSGeneratorServiceRecordResetDate=xATSGeneratorServiceRecordResetDate, xATSGeneratorServiceNextServiceDate=xATSGeneratorServiceNextServiceDate, xATSGeneratorServiceRunHoursUntilServiceDate=xATSGeneratorServiceRunHoursUntilServiceDate, xATSGeneratorServiceRunHoursThreshold=xATSGeneratorServiceRunHoursThreshold, xATSGeneratorServiceCalendarIntervalThreshold=xATSGeneratorServiceCalendarIntervalThreshold, xATSGeneratorFuelSystem=xATSGeneratorFuelSystem, xATSGeneratorFuelSystemType=xATSGeneratorFuelSystemType, xATSGeneratorFuelSystemTankSize=xATSGeneratorFuelSystemTankSize, xATSGeneratorFuelSystemFuelLevel=xATSGeneratorFuelSystemFuelLevel, xATSGeneratorFuelSystemRuntimePower=xATSGeneratorFuelSystemRuntimePower, xATSGeneratorFuelSystemEstimatedRunTime=xATSGeneratorFuelSystemEstimatedRunTime, xATSGeneratorFuelSystemLowRunTimeThreshold=xATSGeneratorFuelSystemLowRunTimeThreshold, xATSGeneratorFuelSystemVeryLowRunTimeThreshold=xATSGeneratorFuelSystemVeryLowRunTimeThreshold, xATSGeneratorFuelSystemLowFuelLevelThreshold=xATSGeneratorFuelSystemLowFuelLevelThreshold, xATSGeneratorFuelSystemVeryLowFuelLevelThreshold=xATSGeneratorFuelSystemVeryLowFuelLevelThreshold, consolePortServer=consolePortServer, cpsAP930x=cpsAP930x, cpsAP930xSys=cpsAP930xSys, apCPSpname=apCPSpname, apCPSversion=apCPSversion, apCPSPower=apCPSPower, apCPSPwNum=apCPSPwNum)
mibBuilder.exportSymbols("PowerNet-MIB", apCPSPw1=apCPSPw1, apCPSPw2=apCPSPw2, apCPSPcmcia=apCPSPcmcia, apCPSNPcmcia=apCPSNPcmcia, cpsCardIdentTable=cpsCardIdentTable, cpsCardIdentEntry=cpsCardIdentEntry, cpsCardIdentIndex=cpsCardIdentIndex, cpsCardIdentProd=cpsCardIdentProd, cpsCardIdentMan=cpsCardIdentMan, cpsCardIdentFunc=cpsCardIdentFunc, cpsCardIdentPCI=cpsCardIdentPCI, cpsCardConfTable=cpsCardConfTable, cpsCardConfEntry=cpsCardConfEntry, cpsCardConfIndex=cpsCardConfIndex, cpsCardConfPower=cpsCardConfPower, cpsCardConfType=cpsCardConfType, cpsCardConfInter=cpsCardConfInter, cpsCardConfFunc=cpsCardConfFunc, cpsCardConfCardv=cpsCardConfCardv, cpsCardConfPort1=cpsCardConfPort1, cpsCardConfPort2=cpsCardConfPort2, cpsCardStatusTable=cpsCardStatusTable, cpsCardStatusEntry=cpsCardStatusEntry, cpsCardStatusIndex=cpsCardStatusIndex, cpsCardStatusCard=cpsCardStatusCard, cpsCardStatusFunc=cpsCardStatusFunc, apCPSFlashSize=apCPSFlashSize, apCPSRAMSize=apCPSRAMSize, apCPSCPUfreq=apCPSCPUfreq, apCPSDevId=apCPSDevId, cpsAP930xConf=cpsAP930xConf, cpsHostName=cpsHostName, cpsConsoleBanner=cpsConsoleBanner, cpsMotd=cpsMotd, cpsEthItf=cpsEthItf, cpsEthDhcpc=cpsEthDhcpc, cpsEthIPaddr=cpsEthIPaddr, cpsEthIPmask=cpsEthIPmask, cpsEthMTU=cpsEthMTU, cpsEthIPaddr2=cpsEthIPaddr2, cpsEthIPmask2=cpsEthIPmask2, cpsNameService=cpsNameService, cpsResolverOrder=cpsResolverOrder, cpsMultipleIP=cpsMultipleIP, cpsDNSserv=cpsDNSserv, cpsDNSpriserv=cpsDNSpriserv, cpsDNSsecserv=cpsDNSsecserv, cpsDNSdomain=cpsDNSdomain, cpsSerialPortConf=cpsSerialPortConf, cpsSerialGlobal=cpsSerialGlobal, cpsSerialInclude=cpsSerialInclude, cpsSerialNFS=cpsSerialNFS, cpsSerialLockDir=cpsSerialLockDir, cpsSerialRlogin=cpsSerialRlogin, cpsSerialPppd=cpsSerialPppd, cpsSerialTelnet=cpsSerialTelnet, cpsSerialSsh=cpsSerialSsh, cpsSerialLocalLogins=cpsSerialLocalLogins, cpsSerialFacility=cpsSerialFacility, cpsSerialDBFacility=cpsSerialDBFacility, cpsSerialGroupTable=cpsSerialGroupTable, cpsSerialGroupEntry=cpsSerialGroupEntry, cpsSerialGroupIndex=cpsSerialGroupIndex, cpsSerialGroupName=cpsSerialGroupName, cpsSerialGroupUsers=cpsSerialGroupUsers, cpsSerialSpec=cpsSerialSpec, cpsSerialPortTable=cpsSerialPortTable, cpsSerialPortEntry=cpsSerialPortEntry, cpsSerialPortNumber=cpsSerialPortNumber, cpsSerialPortTty=cpsSerialPortTty, cpsSerialPortName=cpsSerialPortName, cpsSerialPortSpeed=cpsSerialPortSpeed, cpsSerialPortDataSize=cpsSerialPortDataSize, cpsSerialPortStopBits=cpsSerialPortStopBits, cpsSerialPortParity=cpsSerialPortParity, cpsSerialPortFlowCtrl=cpsSerialPortFlowCtrl, cpsSerialPortDTRdelay=cpsSerialPortDTRdelay, cpsSerialPortDCDCtrl=cpsSerialPortDCDCtrl, cpsSerialPortLogUtmp=cpsSerialPortLogUtmp, cpsSerialPortLogWtmp=cpsSerialPortLogWtmp, cpsSerialPortLogform=cpsSerialPortLogform, cpsSerialPortAuthtype=cpsSerialPortAuthtype, cpsSerialPortAuthSrv1=cpsSerialPortAuthSrv1, cpsSerialPortAccSrv1=cpsSerialPortAccSrv1, cpsSerialPortAuthTmo=cpsSerialPortAuthTmo, cpsSerialPortAuthRetr=cpsSerialPortAuthRetr, cpsSerialPortAuthSrv2=cpsSerialPortAuthSrv2, cpsSerialPortAccSrv2=cpsSerialPortAccSrv2, cpsSerialPortAuthSecret=cpsSerialPortAuthSecret, cpsSerialPortAuthRadP=cpsSerialPortAuthRadP, cpsSerialPortAuthAcc=cpsSerialPortAuthAcc, cpsSerialPortProtocol=cpsSerialPortProtocol, cpsSerialPortRemoteIP=cpsSerialPortRemoteIP, cpsSerialPortSocketPort=cpsSerialPortSocketPort, cpsSerialPortRemHost=cpsSerialPortRemHost, cpsSerialPortBanner=cpsSerialPortBanner, cpsSerialPortPrompt=cpsSerialPortPrompt, cpsSerialPortTermType=cpsSerialPortTermType, cpsSerialPortAutomUsr=cpsSerialPortAutomUsr, cpsSerialPortNetMask=cpsSerialPortNetMask, cpsSerialPortPppMtu=cpsSerialPortPppMtu, cpsSerialPortPppMru=cpsSerialPortPppMru, cpsSerialPortPppOptions=cpsSerialPortPppOptions, cpsSerialPortPppFoption=cpsSerialPortPppFoption, cpsSerialPortModemChat=cpsSerialPortModemChat, cpsSerialPortSttyCmd=cpsSerialPortSttyCmd, cpsSerialPortSockTx=cpsSerialPortSockTx, cpsSerialPortSockPoll=cpsSerialPortSockPoll, cpsSerialPortSockIdle=cpsSerialPortSockIdle, cpsSerialPortDBsize=cpsSerialPortDBsize, cpsSerialPortDBtime=cpsSerialPortDBtime, cpsSerialPortDBmode=cpsSerialPortDBmode, cpsSerialPortDBsyslog=cpsSerialPortDBsyslog, cpsSerialPortDBmenu=cpsSerialPortDBmenu, cpsSerialPortDBalarm=cpsSerialPortDBalarm, cpsSerialPortSSHbreak=cpsSerialPortSSHbreak, cpsSerialPortSniffSess=cpsSerialPortSniffSess, cpsSerialPortSniffAdm=cpsSerialPortSniffAdm, cpsSerialPortSniffEsc=cpsSerialPortSniffEsc, cpsSerialPortSniffMsess=cpsSerialPortSniffMsess, cpsSerialPortTelnetMode=cpsSerialPortTelnetMode, cpsSerialPortSysBufSess=cpsSerialPortSysBufSess, cpsSerialPortLFSuppress=cpsSerialPortLFSuppress, cpsSerialPortAutoInput=cpsSerialPortAutoInput, cpsSerialPortAutoOutput=cpsSerialPortAutoOutput, cpsSerialPortBreakInterval=cpsSerialPortBreakInterval, cpsAP930xInfo=cpsAP930xInfo)
mibBuilder.exportSymbols("PowerNet-MIB", cpsInfoSerialPortTable=cpsInfoSerialPortTable, cpsInfoSerialPortEntry=cpsInfoSerialPortEntry, cpsInfoSerialPortNumber=cpsInfoSerialPortNumber, cpsInfoSerialPortTty=cpsInfoSerialPortTty, cpsInfoSerialPortName=cpsInfoSerialPortName, cpsInfoSerialPortSpeed=cpsInfoSerialPortSpeed, cpsInfoSerialPortTxBytes=cpsInfoSerialPortTxBytes, cpsInfoSerialPortRXBytes=cpsInfoSerialPortRXBytes, cpsInfoSerialPortErrFrame=cpsInfoSerialPortErrFrame, cpsInfoSerialPortErrParity=cpsInfoSerialPortErrParity, cpsInfoSerialPortErrBreaks=cpsInfoSerialPortErrBreaks, cpsInfoSerialPortErrOverrun=cpsInfoSerialPortErrOverrun, cpsInfoSerialPortSigDTR=cpsInfoSerialPortSigDTR, cpsInfoSerialPortSigCD=cpsInfoSerialPortSigCD, cpsInfoSerialPortSigDSR=cpsInfoSerialPortSigDSR, cpsInfoSerialPortSigRTS=cpsInfoSerialPortSigRTS, cpsInfoSerialPortSigCTS=cpsInfoSerialPortSigCTS, cpsInfoSerialPortSigRI=cpsInfoSerialPortSigRI, cpsAP930xAdm=cpsAP930xAdm, apCPSSave=apCPSSave, apCPSSerialHUP=apCPSSerialHUP, accessControl=accessControl, accessPX=accessPX, accessPXIdent=accessPXIdent, accessPXIdentAlarmStatus=accessPXIdentAlarmStatus, accessPXIdentProductNumber=accessPXIdentProductNumber, accessPXIdentHardwareRev=accessPXIdentHardwareRev, accessPXIdentDateOfManufacture=accessPXIdentDateOfManufacture, accessPXIdentSerialNumber=accessPXIdentSerialNumber, accessPXConfig=accessPXConfig, accessPXConfigCardReaderEnableDisableAction=accessPXConfigCardReaderEnableDisableAction, accessPXConfigAutoRelockTime=accessPXConfigAutoRelockTime, accessPXConfigCardFormat=accessPXConfigCardFormat, accessPXConfigFront=accessPXConfigFront, accessPXConfigFrontDoorLockControl=accessPXConfigFrontDoorLockControl, accessPXConfigFrontDoorMaxOpenTime=accessPXConfigFrontDoorMaxOpenTime, accessPXStatusFront=accessPXStatusFront, accessPXStatusFrontDoorLock=accessPXStatusFrontDoorLock, accessPXStatusFrontDoor=accessPXStatusFrontDoor, accessPXStatusFrontDoorHandle=accessPXStatusFrontDoorHandle, accessPXStatusFrontDoorMaxOpenTime=accessPXStatusFrontDoorMaxOpenTime, accessPXStatusFrontDoorAlarmStatus=accessPXStatusFrontDoorAlarmStatus, accessPXConfigRear=accessPXConfigRear, accessPXConfigRearDoorLockControl=accessPXConfigRearDoorLockControl, accessPXConfigRearDoorMaxOpenTime=accessPXConfigRearDoorMaxOpenTime, accessPXStatusRear=accessPXStatusRear, accessPXStatusRearDoorLock=accessPXStatusRearDoorLock, accessPXStatusRearDoor=accessPXStatusRearDoor, accessPXStatusRearDoorHandle=accessPXStatusRearDoorHandle, accessPXStatusRearDoorMaxOpenTime=accessPXStatusRearDoorMaxOpenTime, accessPXStatusRearDoorAlarmStatus=accessPXStatusRearDoorAlarmStatus, accessPXConfigBeacon=accessPXConfigBeacon, accessPXConfigBeaconName=accessPXConfigBeaconName, accessPXConfigBeaconLocation=accessPXConfigBeaconLocation, accessPXConfigBeaconAction=accessPXConfigBeaconAction, accessPXStatusBeacon=accessPXStatusBeacon, accessPXStatusBeaconName=accessPXStatusBeaconName, accessPXStatusBeaconLocation=accessPXStatusBeaconLocation, accessPXStatusBeaconCurrentState=accessPXStatusBeaconCurrentState, apcLocalDisplay=apcLocalDisplay, apcLocalDisplayIdent=apcLocalDisplayIdent, apcLocalDisplayIdentDisplayType=apcLocalDisplayIdentDisplayType, apcLocalDisplayIdentModelNumber=apcLocalDisplayIdentModelNumber, apcLocalDisplayIdentFirmwareRev=apcLocalDisplayIdentFirmwareRev, apcLocalDisplayIdentOptions=apcLocalDisplayIdentOptions, apcLocalDisplayIdentDateOfManufacture=apcLocalDisplayIdentDateOfManufacture, apcLocalDisplayIdentSerialNumber=apcLocalDisplayIdentSerialNumber, apcLocalDisplayConfig=apcLocalDisplayConfig, apcLocalDisplayConfigAlarmBeeper=apcLocalDisplayConfigAlarmBeeper, apcLocalDisplayConfigBeeperVolume=apcLocalDisplayConfigBeeperVolume, apcLocalDisplayConfigCheckLogIndicator=apcLocalDisplayConfigCheckLogIndicator, apcLocalDisplayConfigKeyClick=apcLocalDisplayConfigKeyClick, apcLocalDisplayConfigContrast=apcLocalDisplayConfigContrast, isxModularDistribution=isxModularDistribution, isxModularDistInfo=isxModularDistInfo, isxModularDistInfoTableSize=isxModularDistInfoTableSize, isxModularDistInfoTable=isxModularDistInfoTable, isxModularDistInfoEntry=isxModularDistInfoEntry, isxModularDistInfoSegmentIndex=isxModularDistInfoSegmentIndex, isxModularDistInfoMeterModelNumber=isxModularDistInfoMeterModelNumber, isxModularDistInfoMeterSerialNumber=isxModularDistInfoMeterSerialNumber, isxModularDistInfoMeterDateOfManufacture=isxModularDistInfoMeterDateOfManufacture, isxModularDistInfoMeterFirmwareRev=isxModularDistInfoMeterFirmwareRev, isxModularDistInfoMeterHardwareRev=isxModularDistInfoMeterHardwareRev, isxModularDistModules=isxModularDistModules, isxModularDistModuleInfoTableSize=isxModularDistModuleInfoTableSize, isxModularDistModuleInfoTable=isxModularDistModuleInfoTable, isxModularDistModuleInfoEntry=isxModularDistModuleInfoEntry, isxModularDistModuleInfoModIndex=isxModularDistModuleInfoModIndex, isxModularDistModuleInfoAlarmStatus=isxModularDistModuleInfoAlarmStatus, isxModularDistModuleInfoModelNumber=isxModularDistModuleInfoModelNumber, isxModularDistModuleInfoSerialNumber=isxModularDistModuleInfoSerialNumber, isxModularDistModuleInfoDateOfManufacture=isxModularDistModuleInfoDateOfManufacture, isxModularDistModuleInfoNumCables=isxModularDistModuleInfoNumCables, isxModularDistModuleBreakerTableSize=isxModularDistModuleBreakerTableSize, isxModularDistModuleBreakerTable=isxModularDistModuleBreakerTable, isxModularDistModuleBreakerEntry=isxModularDistModuleBreakerEntry, isxModularDistModuleBreakerModIndex=isxModularDistModuleBreakerModIndex, isxModularDistModuleBreakerPhaseIndex=isxModularDistModuleBreakerPhaseIndex, isxModularDistModuleBreakerAlarmStatus=isxModularDistModuleBreakerAlarmStatus, isxModularDistModuleBreakerRating=isxModularDistModuleBreakerRating, isxModularDistModuleBreakerPhysicalGroup=isxModularDistModuleBreakerPhysicalGroup, isxModularDistModuleBreakerCableNum=isxModularDistModuleBreakerCableNum, isxModularDistModuleBreakerPosition=isxModularDistModuleBreakerPosition, isxModularDistModuleBreakerPositionAlarms=isxModularDistModuleBreakerPositionAlarms, isxModularDistModuleBreakerCurrent=isxModularDistModuleBreakerCurrent, isxModularDistModuleBreakerPercent=isxModularDistModuleBreakerPercent, isxModularDistModuleBreakerPower=isxModularDistModuleBreakerPower, isxModularDistModuleOutputsTableSize=isxModularDistModuleOutputsTableSize, isxModularDistModuleOutputTable=isxModularDistModuleOutputTable, isxModularDistModuleOutputEntry=isxModularDistModuleOutputEntry, isxModularDistModuleOutputModIndex=isxModularDistModuleOutputModIndex, isxModularDistModuleOutputNumCables=isxModularDistModuleOutputNumCables, isxModularDistModuleOutputCordIndex=isxModularDistModuleOutputCordIndex, isxModularDistModuleOutputName=isxModularDistModuleOutputName, isxModularDistModuleOutputLocation=isxModularDistModuleOutputLocation, isxModularDistModuleOutputStatus=isxModularDistModuleOutputStatus, isxModularDistModuleOutputAlarmGeneration=isxModularDistModuleOutputAlarmGeneration, isxModularDistModuleOutputBreakerMap=isxModularDistModuleOutputBreakerMap, isxModularDistModuleOutputThresholdMin=isxModularDistModuleOutputThresholdMin, isxModularDistModuleOutputThresholdLow=isxModularDistModuleOutputThresholdLow, isxModularDistModuleOutputThresholdHigh=isxModularDistModuleOutputThresholdHigh, isxModularDistModuleOutputThresholdMax=isxModularDistModuleOutputThresholdMax, isxModularDistModuleOutputAlarmMinEnable=isxModularDistModuleOutputAlarmMinEnable, isxModularDistModuleOutputAlarmLowEnable=isxModularDistModuleOutputAlarmLowEnable, isxModularDistModuleOutputAlarmHighEnable=isxModularDistModuleOutputAlarmHighEnable, isxModularDistModuleOutputAlarmMaxEnable=isxModularDistModuleOutputAlarmMaxEnable)
mibBuilder.exportSymbols("PowerNet-MIB", isxModularDistModuleOutputCableLength=isxModularDistModuleOutputCableLength, isxModularDistModuleOutputConnectorType=isxModularDistModuleOutputConnectorType, isxModularDistModuleOutputAvailableVoltages=isxModularDistModuleOutputAvailableVoltages, isxModularDistModuleOutputTotalPower=isxModularDistModuleOutputTotalPower, isxModularDistModuleOutputKwhUsage=isxModularDistModuleOutputKwhUsage, isxModularDistModuleOutputKwhReset=isxModularDistModuleOutputKwhReset, isxModularDistModuleOutputKwhResetDate=isxModularDistModuleOutputKwhResetDate, isxModularDistSubFeeds=isxModularDistSubFeeds, isxModularDistSubFeedInfoTableSize=isxModularDistSubFeedInfoTableSize, isxModularDistSubFeedInfoTable=isxModularDistSubFeedInfoTable, isxModularDistSubFeedInfoEntry=isxModularDistSubFeedInfoEntry, isxModularDistSubFeedInfoSubIndex=isxModularDistSubFeedInfoSubIndex, isxModularDistSubFeedInfoName=isxModularDistSubFeedInfoName, isxModularDistSubFeedInfoLocation=isxModularDistSubFeedInfoLocation, isxModularDistSubFeedInfoBreakerRating=isxModularDistSubFeedInfoBreakerRating, isxModularDistSubFeedInfoBreakerPosition=isxModularDistSubFeedInfoBreakerPosition, isxModularDistSubFeedInfoAlarmStatus=isxModularDistSubFeedInfoAlarmStatus, isxModularDistSubFeedInfoAlarmGeneration=isxModularDistSubFeedInfoAlarmGeneration, isxModularDistSubFeedInfoThresholdMin=isxModularDistSubFeedInfoThresholdMin, isxModularDistSubFeedInfoThresholdLow=isxModularDistSubFeedInfoThresholdLow, isxModularDistSubFeedInfoThresholdHigh=isxModularDistSubFeedInfoThresholdHigh, isxModularDistSubFeedInfoThresholdMax=isxModularDistSubFeedInfoThresholdMax, isxModularDistSubFeedInfoAlarmMinEnable=isxModularDistSubFeedInfoAlarmMinEnable, isxModularDistSubFeedInfoAlarmLowEnable=isxModularDistSubFeedInfoAlarmLowEnable, isxModularDistSubFeedInfoAlarmHighEnable=isxModularDistSubFeedInfoAlarmHighEnable, isxModularDistSubFeedInfoAlarmMaxEnable=isxModularDistSubFeedInfoAlarmMaxEnable, isxModularDistSubFeedInfoBreakerAlarmEnable=isxModularDistSubFeedInfoBreakerAlarmEnable, isxModularDistSubFeedInfoTotalPower=isxModularDistSubFeedInfoTotalPower, isxModularDistSubFeedInfoKwhUsage=isxModularDistSubFeedInfoKwhUsage, isxModularDistSubFeedInfoKwhReset=isxModularDistSubFeedInfoKwhReset, isxModularDistSubFeedInfoKwhResetDate=isxModularDistSubFeedInfoKwhResetDate, isxModularDistSubFeedLoadingTableSize=isxModularDistSubFeedLoadingTableSize, isxModularDistSubFeedLoadingTable=isxModularDistSubFeedLoadingTable, isxModularDistSubFeedLoadingEntry=isxModularDistSubFeedLoadingEntry, isxModularDistSubFeedLoadingSubIndex=isxModularDistSubFeedLoadingSubIndex, isxModularDistSubFeedLoadingPhaseIndex=isxModularDistSubFeedLoadingPhaseIndex, isxModularDistSubFeedLoadingAlarmStatus=isxModularDistSubFeedLoadingAlarmStatus, isxModularDistSubFeedLoadingCurrent=isxModularDistSubFeedLoadingCurrent, isxModularDistSubFeedLoadingPercent=isxModularDistSubFeedLoadingPercent, isxModularDistSubFeedLoadingPower=isxModularDistSubFeedLoadingPower, isxModularDistTotals=isxModularDistTotals, isxModularDistSysVoltage=isxModularDistSysVoltage, isxModularDistSysOutputVoltageNominalLineToNeutral=isxModularDistSysOutputVoltageNominalLineToNeutral, isxModularDistSysOutputVoltageNominalLineToLine=isxModularDistSysOutputVoltageNominalLineToLine, isxModularDistSysOutputNominalFrequency=isxModularDistSysOutputNominalFrequency, isxModularDistSysOutputFrequency=isxModularDistSysOutputFrequency, isxModularDistSysOutputVoltageMonitoring=isxModularDistSysOutputVoltageMonitoring, isxModularDistSysOutputVoltageThresholdMin=isxModularDistSysOutputVoltageThresholdMin, isxModularDistSysOutputVoltageThresholdLow=isxModularDistSysOutputVoltageThresholdLow, isxModularDistSysOutputVoltageThresholdHigh=isxModularDistSysOutputVoltageThresholdHigh, isxModularDistSysOutputVoltageThresholdMax=isxModularDistSysOutputVoltageThresholdMax, isxModularDistSysOutputVoltageAlarmMinEnable=isxModularDistSysOutputVoltageAlarmMinEnable, isxModularDistSysOutputVoltageAlarmLowEnable=isxModularDistSysOutputVoltageAlarmLowEnable, isxModularDistSysOutputVoltageAlarmHighEnable=isxModularDistSysOutputVoltageAlarmHighEnable, isxModularDistSysOutputVoltageAlarmMaxEnable=isxModularDistSysOutputVoltageAlarmMaxEnable, isxModularDistSysOutputVoltageFrequencyTolerance=isxModularDistSysOutputVoltageFrequencyTolerance, isxModularDistSysVoltageTable=isxModularDistSysVoltageTable, isxModularDistSysVoltageEntry=isxModularDistSysVoltageEntry, isxModularDistSysVoltagePhaseIndex=isxModularDistSysVoltagePhaseIndex, isxModularDistSysVoltageAlarmStatus=isxModularDistSysVoltageAlarmStatus, isxModularDistSysVoltageLtoN=isxModularDistSysVoltageLtoN, isxModularDistSysVoltageLtoL=isxModularDistSysVoltageLtoL, isxModularDistSysCurrent=isxModularDistSysCurrent, isxModularDistSysCurrentRating=isxModularDistSysCurrentRating, isxModularDistSysCurrentMonitoring=isxModularDistSysCurrentMonitoring, isxModularDistSysCurrentThresholdMin=isxModularDistSysCurrentThresholdMin, isxModularDistSysCurrentThresholdLow=isxModularDistSysCurrentThresholdLow, isxModularDistSysCurrentThresholdHigh=isxModularDistSysCurrentThresholdHigh, isxModularDistSysCurrentThresholdMax=isxModularDistSysCurrentThresholdMax, isxModularDistSysCurrentAlarmMinEnable=isxModularDistSysCurrentAlarmMinEnable, isxModularDistSysCurrentAlarmLowEnable=isxModularDistSysCurrentAlarmLowEnable, isxModularDistSysCurrentAlarmHighEnable=isxModularDistSysCurrentAlarmHighEnable, isxModularDistSysCurrentAlarmMaxEnable=isxModularDistSysCurrentAlarmMaxEnable, isxModularDistSysCurrentTable=isxModularDistSysCurrentTable, isxModularDistSysCurrentEntry=isxModularDistSysCurrentEntry, isxModularDistSysCurrentPhaseIndex=isxModularDistSysCurrentPhaseIndex, isxModularDistSysCurrentAlarmStatus=isxModularDistSysCurrentAlarmStatus, isxModularDistSysCurrentAmps=isxModularDistSysCurrentAmps, isxModularDistSysCurrentPercent=isxModularDistSysCurrentPercent, isxModularDistSysPower=isxModularDistSysPower, isxModularDistSysPowerTotal=isxModularDistSysPowerTotal, isxModularDistSysPowerKwhUsage=isxModularDistSysPowerKwhUsage, isxModularDistSysPowerKwhReset=isxModularDistSysPowerKwhReset, isxModularDistSysPowerKwhResetDate=isxModularDistSysPowerKwhResetDate, isxModularDistSysPowerTable=isxModularDistSysPowerTable, isxModularDistSysPowerEntry=isxModularDistSysPowerEntry, isxModularDistSysPowerPhaseIndex=isxModularDistSysPowerPhaseIndex, isxModularDistSysPowerKw=isxModularDistSysPowerKw, isxModularDistSysPowerKwhPhaseUsage=isxModularDistSysPowerKwhPhaseUsage, isxModularPdu=isxModularPdu, isxModularPduIdent=isxModularPduIdent, isxModularPduIdentModelNumber=isxModularPduIdentModelNumber, isxModularPduIdentSerialNumber=isxModularPduIdentSerialNumber, isxModularPduIdentDateOfManufacture=isxModularPduIdentDateOfManufacture, isxModularPduIdentMonitorCardSerialNumber=isxModularPduIdentMonitorCardSerialNumber, isxModularPduIdentMonitorCardHardwareRev=isxModularPduIdentMonitorCardHardwareRev, isxModularPduIdentMonitorCardFirmwareAppRev=isxModularPduIdentMonitorCardFirmwareAppRev, isxModularPduIdentMonitorCardFirmwareAppOSRev=isxModularPduIdentMonitorCardFirmwareAppOSRev, isxModularPduDevice=isxModularPduDevice, isxModularPduDeviceTransformerPresent=isxModularPduDeviceTransformerPresent, isxModularPduDeviceServiceType=isxModularPduDeviceServiceType, isxModularPduDeviceFansPresent=isxModularPduDeviceFansPresent, isxModularPduDeviceNominalMainInputVoltage=isxModularPduDeviceNominalMainInputVoltage, isxModularPduStatus=isxModularPduStatus, isxModularPduAlarmStatus=isxModularPduAlarmStatus, isxModularPduTransformerTempStatus=isxModularPduTransformerTempStatus, isxModularPduFanStatus=isxModularPduFanStatus, universalInputOutput=universalInputOutput, uioSensor=uioSensor, uioSensorStatusTableSize=uioSensorStatusTableSize, uioSensorStatusTable=uioSensorStatusTable, uioSensorStatusEntry=uioSensorStatusEntry, uioSensorStatusPortID=uioSensorStatusPortID, uioSensorStatusSensorID=uioSensorStatusSensorID, uioSensorStatusSensorName=uioSensorStatusSensorName, uioSensorStatusSensorLocation=uioSensorStatusSensorLocation, uioSensorStatusTemperatureDegF=uioSensorStatusTemperatureDegF, uioSensorStatusTemperatureDegC=uioSensorStatusTemperatureDegC, uioSensorStatusHumidity=uioSensorStatusHumidity, uioSensorStatusViolationStatus=uioSensorStatusViolationStatus, uioSensorStatusAlarmStatus=uioSensorStatusAlarmStatus, uioSensorStatusCommStatus=uioSensorStatusCommStatus, uioInputContact=uioInputContact, uioInputContactStatusTableSize=uioInputContactStatusTableSize, uioInputContactStatusTable=uioInputContactStatusTable, uioInputContactStatusEntry=uioInputContactStatusEntry, uioInputContactStatusPortID=uioInputContactStatusPortID)
mibBuilder.exportSymbols("PowerNet-MIB", uioInputContactStatusContactID=uioInputContactStatusContactID, uioInputContactStatusContactName=uioInputContactStatusContactName, uioInputContactStatusContactLocation=uioInputContactStatusContactLocation, uioInputContactStatusCurrentState=uioInputContactStatusCurrentState, uioInputContactStatusAlarmStatus=uioInputContactStatusAlarmStatus, uioInputContactStatusCommStatus=uioInputContactStatusCommStatus, uioOutputRelay=uioOutputRelay, uioOutputRelayStatusTableSize=uioOutputRelayStatusTableSize, uioOutputRelayStatusTable=uioOutputRelayStatusTable, uioOutputRelayStatusEntry=uioOutputRelayStatusEntry, uioOutputRelayStatusPortID=uioOutputRelayStatusPortID, uioOutputRelayStatusRelayID=uioOutputRelayStatusRelayID, uioOutputRelayStatusRelayName=uioOutputRelayStatusRelayName, uioOutputRelayStatusRelayLocation=uioOutputRelayStatusRelayLocation, uioOutputRelayStatusCurrentState=uioOutputRelayStatusCurrentState, uioOutputRelayStatusAlarmStatus=uioOutputRelayStatusAlarmStatus, uioOutputRelayStatusCommStatus=uioOutputRelayStatusCommStatus, rPDU2=rPDU2, rPDU2IdentTableSize=rPDU2IdentTableSize, rPDU2IdentTable=rPDU2IdentTable, rPDU2IdentEntry=rPDU2IdentEntry, rPDU2IdentIndex=rPDU2IdentIndex, rPDU2IdentModule=rPDU2IdentModule, rPDU2IdentName=rPDU2IdentName, rPDU2IdentLocation=rPDU2IdentLocation, rPDU2IdentHardwareRev=rPDU2IdentHardwareRev, rPDU2IdentFirmwareRev=rPDU2IdentFirmwareRev, rPDU2IdentDateOfManufacture=rPDU2IdentDateOfManufacture, rPDU2IdentModelNumber=rPDU2IdentModelNumber, rPDU2IdentSerialNumber=rPDU2IdentSerialNumber, rPDU2IdentContact=rPDU2IdentContact, rPDU2DeviceTableSize=rPDU2DeviceTableSize, rPDU2Device=rPDU2Device, rPDU2DeviceConfigTable=rPDU2DeviceConfigTable, rPDU2DeviceConfigEntry=rPDU2DeviceConfigEntry, rPDU2DeviceConfigIndex=rPDU2DeviceConfigIndex, rPDU2DeviceConfigModule=rPDU2DeviceConfigModule, rPDU2DeviceConfigName=rPDU2DeviceConfigName, rPDU2DeviceConfigLocation=rPDU2DeviceConfigLocation, rPDU2DeviceConfigDisplayOrientation=rPDU2DeviceConfigDisplayOrientation, rPDU2DeviceConfigColdstartDelay=rPDU2DeviceConfigColdstartDelay, rPDU2DeviceConfigLowLoadPowerThreshold=rPDU2DeviceConfigLowLoadPowerThreshold, rPDU2DeviceConfigNearOverloadPowerThreshold=rPDU2DeviceConfigNearOverloadPowerThreshold, rPDU2DeviceConfigOverloadPowerThreshold=rPDU2DeviceConfigOverloadPowerThreshold, rPDU2DeviceConfigDevicePeakPowerReset=rPDU2DeviceConfigDevicePeakPowerReset, rPDU2DeviceConfigDeviceEnergyReset=rPDU2DeviceConfigDeviceEnergyReset, rPDU2DeviceConfigOutletsEnergyReset=rPDU2DeviceConfigOutletsEnergyReset, rPDU2DeviceConfigOutletsPeakLoadReset=rPDU2DeviceConfigOutletsPeakLoadReset, rPDU2DeviceConfigContact=rPDU2DeviceConfigContact, rPDU2DevicePropertiesTable=rPDU2DevicePropertiesTable, rPDU2DevicePropertiesEntry=rPDU2DevicePropertiesEntry, rPDU2DevicePropertiesIndex=rPDU2DevicePropertiesIndex, rPDU2DevicePropertiesModule=rPDU2DevicePropertiesModule, rPDU2DevicePropertiesName=rPDU2DevicePropertiesName, rPDU2DevicePropertiesNumOutlets=rPDU2DevicePropertiesNumOutlets, rPDU2DevicePropertiesNumSwitchedOutlets=rPDU2DevicePropertiesNumSwitchedOutlets, rPDU2DevicePropertiesNumMeteredOutlets=rPDU2DevicePropertiesNumMeteredOutlets, rPDU2DevicePropertiesNumPhases=rPDU2DevicePropertiesNumPhases, rPDU2DevicePropertiesNumMeteredBanks=rPDU2DevicePropertiesNumMeteredBanks, rPDU2DevicePropertiesMaxCurrentRating=rPDU2DevicePropertiesMaxCurrentRating, rPDU2DevicePropertiesOrientation=rPDU2DevicePropertiesOrientation, rPDU2DevicePropertiesOutletLayout=rPDU2DevicePropertiesOutletLayout, rPDU2DevicePropertiesMaxPhaseCurrentRating=rPDU2DevicePropertiesMaxPhaseCurrentRating, rPDU2DeviceStatusTable=rPDU2DeviceStatusTable, rPDU2DeviceStatusEntry=rPDU2DeviceStatusEntry, rPDU2DeviceStatusIndex=rPDU2DeviceStatusIndex, rPDU2DeviceStatusModule=rPDU2DeviceStatusModule, rPDU2DeviceStatusName=rPDU2DeviceStatusName, rPDU2DeviceStatusLoadState=rPDU2DeviceStatusLoadState, rPDU2DeviceStatusPower=rPDU2DeviceStatusPower, rPDU2DeviceStatusPeakPower=rPDU2DeviceStatusPeakPower, rPDU2DeviceStatusPeakPowerTimestamp=rPDU2DeviceStatusPeakPowerTimestamp, rPDU2DeviceStatusPeakPowerStartTime=rPDU2DeviceStatusPeakPowerStartTime, rPDU2DeviceStatusEnergy=rPDU2DeviceStatusEnergy, rPDU2DeviceStatusEnergyStartTime=rPDU2DeviceStatusEnergyStartTime, rPDU2DeviceStatusCommandPending=rPDU2DeviceStatusCommandPending, rPDU2DeviceStatusPowerSupplyAlarm=rPDU2DeviceStatusPowerSupplyAlarm, rPDU2DeviceStatusPowerSupply1Status=rPDU2DeviceStatusPowerSupply1Status, rPDU2DeviceStatusPowerSupply2Status=rPDU2DeviceStatusPowerSupply2Status, rPDU2DeviceStatusOutletsEnergyStartTime=rPDU2DeviceStatusOutletsEnergyStartTime, rPDU2DeviceStatusApparentPower=rPDU2DeviceStatusApparentPower, rPDU2DeviceStatusPowerFactor=rPDU2DeviceStatusPowerFactor, rPDU2DeviceStatusNPSType=rPDU2DeviceStatusNPSType, rPDU2DeviceControlTable=rPDU2DeviceControlTable, rPDU2DeviceControlEntry=rPDU2DeviceControlEntry, rPDU2DeviceControlIndex=rPDU2DeviceControlIndex, rPDU2DeviceControlModule=rPDU2DeviceControlModule, rPDU2DeviceControlName=rPDU2DeviceControlName, rPDU2DeviceControlCommand=rPDU2DeviceControlCommand, rPDU2PhaseTableSize=rPDU2PhaseTableSize, rPDU2Phase=rPDU2Phase, rPDU2PhaseConfigTable=rPDU2PhaseConfigTable, rPDU2PhaseConfigEntry=rPDU2PhaseConfigEntry, rPDU2PhaseConfigIndex=rPDU2PhaseConfigIndex, rPDU2PhaseConfigModule=rPDU2PhaseConfigModule, rPDU2PhaseConfigNumber=rPDU2PhaseConfigNumber, rPDU2PhaseConfigOverloadRestriction=rPDU2PhaseConfigOverloadRestriction, rPDU2PhaseConfigLowLoadCurrentThreshold=rPDU2PhaseConfigLowLoadCurrentThreshold, rPDU2PhaseConfigNearOverloadCurrentThreshold=rPDU2PhaseConfigNearOverloadCurrentThreshold, rPDU2PhaseConfigOverloadCurrentThreshold=rPDU2PhaseConfigOverloadCurrentThreshold, rPDU2PhaseConfigPhasePeakCurrentReset=rPDU2PhaseConfigPhasePeakCurrentReset, rPDU2PhasePropertiesTable=rPDU2PhasePropertiesTable, rPDU2PhasePropertiesEntry=rPDU2PhasePropertiesEntry, rPDU2PhasePropertiesIndex=rPDU2PhasePropertiesIndex, rPDU2PhasePropertiesModule=rPDU2PhasePropertiesModule, rPDU2PhasePropertiesNumber=rPDU2PhasePropertiesNumber, rPDU2PhaseStatusTable=rPDU2PhaseStatusTable, rPDU2PhaseStatusEntry=rPDU2PhaseStatusEntry, rPDU2PhaseStatusIndex=rPDU2PhaseStatusIndex, rPDU2PhaseStatusModule=rPDU2PhaseStatusModule, rPDU2PhaseStatusNumber=rPDU2PhaseStatusNumber, rPDU2PhaseStatusLoadState=rPDU2PhaseStatusLoadState, rPDU2PhaseStatusCurrent=rPDU2PhaseStatusCurrent, rPDU2PhaseStatusVoltage=rPDU2PhaseStatusVoltage, rPDU2PhaseStatusPower=rPDU2PhaseStatusPower, rPDU2PhaseStatusApparentPower=rPDU2PhaseStatusApparentPower, rPDU2PhaseStatusPowerFactor=rPDU2PhaseStatusPowerFactor, rPDU2PhaseStatusPeakCurrent=rPDU2PhaseStatusPeakCurrent, rPDU2PhaseStatusPeakCurrentTimestamp=rPDU2PhaseStatusPeakCurrentTimestamp, rPDU2PhaseStatusPeakCurrentStartTime=rPDU2PhaseStatusPeakCurrentStartTime, rPDU2BankTableSize=rPDU2BankTableSize, rPDU2Bank=rPDU2Bank, rPDU2BankConfigTable=rPDU2BankConfigTable, rPDU2BankConfigEntry=rPDU2BankConfigEntry, rPDU2BankConfigIndex=rPDU2BankConfigIndex, rPDU2BankConfigModule=rPDU2BankConfigModule, rPDU2BankConfigNumber=rPDU2BankConfigNumber)
mibBuilder.exportSymbols("PowerNet-MIB", rPDU2BankConfigOverloadRestriction=rPDU2BankConfigOverloadRestriction, rPDU2BankConfigLowLoadCurrentThreshold=rPDU2BankConfigLowLoadCurrentThreshold, rPDU2BankConfigNearOverloadCurrentThreshold=rPDU2BankConfigNearOverloadCurrentThreshold, rPDU2BankConfigOverloadCurrentThreshold=rPDU2BankConfigOverloadCurrentThreshold, rPDU2BankConfigBankPeakCurrentReset=rPDU2BankConfigBankPeakCurrentReset, rPDU2BankPropertiesTable=rPDU2BankPropertiesTable, rPDU2BankPropertiesEntry=rPDU2BankPropertiesEntry, rPDU2BankPropertiesIndex=rPDU2BankPropertiesIndex, rPDU2BankPropertiesModule=rPDU2BankPropertiesModule, rPDU2BankPropertiesNumber=rPDU2BankPropertiesNumber, rPDU2BankPropertiesPhaseLayout=rPDU2BankPropertiesPhaseLayout, rPDU2BankStatusTable=rPDU2BankStatusTable, rPDU2BankStatusEntry=rPDU2BankStatusEntry, rPDU2BankStatusIndex=rPDU2BankStatusIndex, rPDU2BankStatusModule=rPDU2BankStatusModule, rPDU2BankStatusNumber=rPDU2BankStatusNumber, rPDU2BankStatusLoadState=rPDU2BankStatusLoadState, rPDU2BankStatusCurrent=rPDU2BankStatusCurrent, rPDU2BankStatusPeakCurrent=rPDU2BankStatusPeakCurrent, rPDU2BankStatusPeakCurrentTimestamp=rPDU2BankStatusPeakCurrentTimestamp, rPDU2BankStatusPeakCurrentStartTime=rPDU2BankStatusPeakCurrentStartTime, rPDU2Outlet=rPDU2Outlet, rPDU2OutletSwitchedTableSize=rPDU2OutletSwitchedTableSize, rPDU2OutletSwitched=rPDU2OutletSwitched, rPDU2OutletSwitchedConfigTable=rPDU2OutletSwitchedConfigTable, rPDU2OutletSwitchedConfigEntry=rPDU2OutletSwitchedConfigEntry, rPDU2OutletSwitchedConfigIndex=rPDU2OutletSwitchedConfigIndex, rPDU2OutletSwitchedConfigModule=rPDU2OutletSwitchedConfigModule, rPDU2OutletSwitchedConfigName=rPDU2OutletSwitchedConfigName, rPDU2OutletSwitchedConfigNumber=rPDU2OutletSwitchedConfigNumber, rPDU2OutletSwitchedConfigPowerOnTime=rPDU2OutletSwitchedConfigPowerOnTime, rPDU2OutletSwitchedConfigPowerOffTime=rPDU2OutletSwitchedConfigPowerOffTime, rPDU2OutletSwitchedConfigRebootDuration=rPDU2OutletSwitchedConfigRebootDuration, rPDU2OutletSwitchedPropertiesTable=rPDU2OutletSwitchedPropertiesTable, rPDU2OutletSwitchedPropertiesEntry=rPDU2OutletSwitchedPropertiesEntry, rPDU2OutletSwitchedPropertiesIndex=rPDU2OutletSwitchedPropertiesIndex, rPDU2OutletSwitchedPropertiesModule=rPDU2OutletSwitchedPropertiesModule, rPDU2OutletSwitchedPropertiesName=rPDU2OutletSwitchedPropertiesName, rPDU2OutletSwitchedPropertiesNumber=rPDU2OutletSwitchedPropertiesNumber, rPDU2OutletSwitchedPropertiesPhaseLayout=rPDU2OutletSwitchedPropertiesPhaseLayout, rPDU2OutletSwitchedPropertiesBank=rPDU2OutletSwitchedPropertiesBank, rPDU2OutletSwitchedStatusTable=rPDU2OutletSwitchedStatusTable, rPDU2OutletSwitchedStatusEntry=rPDU2OutletSwitchedStatusEntry, rPDU2OutletSwitchedStatusIndex=rPDU2OutletSwitchedStatusIndex, rPDU2OutletSwitchedStatusModule=rPDU2OutletSwitchedStatusModule, rPDU2OutletSwitchedStatusName=rPDU2OutletSwitchedStatusName, rPDU2OutletSwitchedStatusNumber=rPDU2OutletSwitchedStatusNumber, rPDU2OutletSwitchedStatusState=rPDU2OutletSwitchedStatusState, rPDU2OutletSwitchedStatusCommandPending=rPDU2OutletSwitchedStatusCommandPending, rPDU2OutletSwitchedControlTable=rPDU2OutletSwitchedControlTable, rPDU2OutletSwitchedControlEntry=rPDU2OutletSwitchedControlEntry, rPDU2OutletSwitchedControlIndex=rPDU2OutletSwitchedControlIndex, rPDU2OutletSwitchedControlModule=rPDU2OutletSwitchedControlModule, rPDU2OutletSwitchedControlName=rPDU2OutletSwitchedControlName, rPDU2OutletSwitchedControlNumber=rPDU2OutletSwitchedControlNumber, rPDU2OutletSwitchedControlCommand=rPDU2OutletSwitchedControlCommand, rPDU2OutletMeteredTableSize=rPDU2OutletMeteredTableSize, rPDU2OutletMetered=rPDU2OutletMetered, rPDU2OutletMeteredConfigTable=rPDU2OutletMeteredConfigTable, rPDU2OutletMeteredConfigEntry=rPDU2OutletMeteredConfigEntry, rPDU2OutletMeteredConfigIndex=rPDU2OutletMeteredConfigIndex, rPDU2OutletMeteredConfigModule=rPDU2OutletMeteredConfigModule, rPDU2OutletMeteredConfigName=rPDU2OutletMeteredConfigName, rPDU2OutletMeteredConfigNumber=rPDU2OutletMeteredConfigNumber, rPDU2OutletMeteredConfigLowLoadCurrentThreshold=rPDU2OutletMeteredConfigLowLoadCurrentThreshold, rPDU2OutletMeteredConfigNearOverloadCurrentThreshold=rPDU2OutletMeteredConfigNearOverloadCurrentThreshold, rPDU2OutletMeteredConfigOverloadCurrentThreshold=rPDU2OutletMeteredConfigOverloadCurrentThreshold, rPDU2OutletMeteredPropertiesTable=rPDU2OutletMeteredPropertiesTable, rPDU2OutletMeteredPropertiesEntry=rPDU2OutletMeteredPropertiesEntry, rPDU2OutletMeteredPropertiesIndex=rPDU2OutletMeteredPropertiesIndex, rPDU2OutletMeteredPropertiesModule=rPDU2OutletMeteredPropertiesModule, rPDU2OutletMeteredPropertiesName=rPDU2OutletMeteredPropertiesName, rPDU2OutletMeteredPropertiesNumber=rPDU2OutletMeteredPropertiesNumber, rPDU2OutletMeteredPropertiesLayout=rPDU2OutletMeteredPropertiesLayout, rPDU2OutletMeteredPropertiesPowerRating=rPDU2OutletMeteredPropertiesPowerRating, rPDU2OutletMeteredPropertiesBank=rPDU2OutletMeteredPropertiesBank, rPDU2OutletMeteredStatusTable=rPDU2OutletMeteredStatusTable, rPDU2OutletMeteredStatusEntry=rPDU2OutletMeteredStatusEntry, rPDU2OutletMeteredStatusIndex=rPDU2OutletMeteredStatusIndex, rPDU2OutletMeteredStatusModule=rPDU2OutletMeteredStatusModule, rPDU2OutletMeteredStatusName=rPDU2OutletMeteredStatusName, rPDU2OutletMeteredStatusNumber=rPDU2OutletMeteredStatusNumber, rPDU2OutletMeteredStatusState=rPDU2OutletMeteredStatusState, rPDU2OutletMeteredStatusCurrent=rPDU2OutletMeteredStatusCurrent, rPDU2OutletMeteredStatusPower=rPDU2OutletMeteredStatusPower, rPDU2OutletMeteredStatusPeakPower=rPDU2OutletMeteredStatusPeakPower, rPDU2OutletMeteredStatusPeakPowerTimestamp=rPDU2OutletMeteredStatusPeakPowerTimestamp, rPDU2OutletMeteredStatusPeakPowerStartTime=rPDU2OutletMeteredStatusPeakPowerStartTime, rPDU2OutletMeteredStatusEnergy=rPDU2OutletMeteredStatusEnergy, rPDU2Sensor=rPDU2Sensor, rPDU2SensorTempHumidityTableSize=rPDU2SensorTempHumidityTableSize, rPDU2SensorTempHumidity=rPDU2SensorTempHumidity, rPDU2SensorTempHumidityConfigTable=rPDU2SensorTempHumidityConfigTable, rPDU2SensorTempHumidityConfigEntry=rPDU2SensorTempHumidityConfigEntry, rPDU2SensorTempHumidityConfigIndex=rPDU2SensorTempHumidityConfigIndex, rPDU2SensorTempHumidityConfigModule=rPDU2SensorTempHumidityConfigModule, rPDU2SensorTempHumidityConfigName=rPDU2SensorTempHumidityConfigName, rPDU2SensorTempHumidityConfigNumber=rPDU2SensorTempHumidityConfigNumber, rPDU2SensorTempHumidityConfigTemperatureAlarmEnable=rPDU2SensorTempHumidityConfigTemperatureAlarmEnable, rPDU2SensorTempHumidityConfigHumidityAlarmEnable=rPDU2SensorTempHumidityConfigHumidityAlarmEnable, rPDU2SensorTempHumidityConfigTempMaxThreshF=rPDU2SensorTempHumidityConfigTempMaxThreshF, rPDU2SensorTempHumidityConfigTempHighThreshF=rPDU2SensorTempHumidityConfigTempHighThreshF, rPDU2SensorTempHumidityConfigTempHysteresisF=rPDU2SensorTempHumidityConfigTempHysteresisF, rPDU2SensorTempHumidityConfigTempMaxThreshC=rPDU2SensorTempHumidityConfigTempMaxThreshC, rPDU2SensorTempHumidityConfigTempHighThreshC=rPDU2SensorTempHumidityConfigTempHighThreshC, rPDU2SensorTempHumidityConfigTempHysteresisC=rPDU2SensorTempHumidityConfigTempHysteresisC, rPDU2SensorTempHumidityConfigHumidityLowThresh=rPDU2SensorTempHumidityConfigHumidityLowThresh, rPDU2SensorTempHumidityConfigHumidityMinThresh=rPDU2SensorTempHumidityConfigHumidityMinThresh, rPDU2SensorTempHumidityConfigHumidityHysteresis=rPDU2SensorTempHumidityConfigHumidityHysteresis, rPDU2SensorTempHumidityStatusTable=rPDU2SensorTempHumidityStatusTable, rPDU2SensorTempHumidityStatusEntry=rPDU2SensorTempHumidityStatusEntry, rPDU2SensorTempHumidityStatusIndex=rPDU2SensorTempHumidityStatusIndex, rPDU2SensorTempHumidityStatusModule=rPDU2SensorTempHumidityStatusModule, rPDU2SensorTempHumidityStatusName=rPDU2SensorTempHumidityStatusName, rPDU2SensorTempHumidityStatusNumber=rPDU2SensorTempHumidityStatusNumber, rPDU2SensorTempHumidityStatusType=rPDU2SensorTempHumidityStatusType, rPDU2SensorTempHumidityStatusCommStatus=rPDU2SensorTempHumidityStatusCommStatus, rPDU2SensorTempHumidityStatusTempF=rPDU2SensorTempHumidityStatusTempF, rPDU2SensorTempHumidityStatusTempC=rPDU2SensorTempHumidityStatusTempC, rPDU2SensorTempHumidityStatusTempStatus=rPDU2SensorTempHumidityStatusTempStatus, rPDU2SensorTempHumidityStatusRelativeHumidity=rPDU2SensorTempHumidityStatusRelativeHumidity, rPDU2SensorTempHumidityStatusHumidityStatus=rPDU2SensorTempHumidityStatusHumidityStatus, rPDU2SensorDiscreteTableSize=rPDU2SensorDiscreteTableSize, rPDU2SensorDiscrete=rPDU2SensorDiscrete, rPDU2SensorDiscreteConfigTable=rPDU2SensorDiscreteConfigTable, rPDU2SensorDiscreteConfigEntry=rPDU2SensorDiscreteConfigEntry, rPDU2SensorDiscreteConfigIndex=rPDU2SensorDiscreteConfigIndex)
mibBuilder.exportSymbols("PowerNet-MIB", rPDU2SensorDiscreteConfigModule=rPDU2SensorDiscreteConfigModule, rPDU2SensorDiscreteConfigName=rPDU2SensorDiscreteConfigName, rPDU2SensorDiscreteConfigNumber=rPDU2SensorDiscreteConfigNumber, rPDU2SensorDiscreteConfigNormalState=rPDU2SensorDiscreteConfigNormalState, rPDU2SensorDiscreteConfigAbnormalSeverity=rPDU2SensorDiscreteConfigAbnormalSeverity, rPDU2SensorDiscreteStatusTable=rPDU2SensorDiscreteStatusTable, rPDU2SensorDiscreteStatusEntry=rPDU2SensorDiscreteStatusEntry, rPDU2SensorDiscreteStatusIndex=rPDU2SensorDiscreteStatusIndex, rPDU2SensorDiscreteStatusModule=rPDU2SensorDiscreteStatusModule, rPDU2SensorDiscreteStatusName=rPDU2SensorDiscreteStatusName, rPDU2SensorDiscreteStatusNumber=rPDU2SensorDiscreteStatusNumber, rPDU2SensorDiscreteStatusType=rPDU2SensorDiscreteStatusType, rPDU2SensorDiscreteStatusCommStatus=rPDU2SensorDiscreteStatusCommStatus, rPDU2SensorDiscreteStatusCurrentState=rPDU2SensorDiscreteStatusCurrentState, rPDU2SensorDiscreteStatusAlarmState=rPDU2SensorDiscreteStatusAlarmState, rPDU2Group=rPDU2Group, rPDU2GroupNumberOfDevices=rPDU2GroupNumberOfDevices, rPDU2GroupTotalPower=rPDU2GroupTotalPower, rPDU2GroupTotalEnergy=rPDU2GroupTotalEnergy, rPDU2GroupEnergyReset=rPDU2GroupEnergyReset, rPDU2PhaseToPhaseStatusTableSize=rPDU2PhaseToPhaseStatusTableSize, rPDU2PhaseToPhase=rPDU2PhaseToPhase, rPDU2PhaseToPhaseStatusTable=rPDU2PhaseToPhaseStatusTable, rPDU2PhaseToPhaseStatusEntry=rPDU2PhaseToPhaseStatusEntry, rPDU2PhaseToPhaseStatusIndex=rPDU2PhaseToPhaseStatusIndex, rPDU2PhaseToPhaseStatusModule=rPDU2PhaseToPhaseStatusModule, rPDU2PhaseToPhaseStatusVoltage1to2=rPDU2PhaseToPhaseStatusVoltage1to2, rPDU2PhaseToPhaseStatusVoltage2to3=rPDU2PhaseToPhaseStatusVoltage2to3, rPDU2PhaseToPhaseStatusVoltage3to1=rPDU2PhaseToPhaseStatusVoltage3to1, cooling=cooling, coolingUnit=coolingUnit, coolingUnitTableSize=coolingUnitTableSize, coolingUnitTable=coolingUnitTable, coolingUnitEntry=coolingUnitEntry, coolingUnitTableIndex=coolingUnitTableIndex, coolingUnitAbout=coolingUnitAbout, coolingUnitAboutTableSize=coolingUnitAboutTableSize, coolingUnitAboutTable=coolingUnitAboutTable, coolingUnitAboutEntry=coolingUnitAboutEntry, coolingUnitAboutTableIndex=coolingUnitAboutTableIndex, coolingUnitAboutDescription=coolingUnitAboutDescription, coolingUnitAboutValue=coolingUnitAboutValue, coolingUnitStatus=coolingUnitStatus, coolingUnitStatusAnalog=coolingUnitStatusAnalog, coolingUnitStatusAnalogTableSize=coolingUnitStatusAnalogTableSize, coolingUnitStatusAnalogTable=coolingUnitStatusAnalogTable, coolingUnitStatusAnalogEntry=coolingUnitStatusAnalogEntry, coolingUnitStatusAnalogTableIndex=coolingUnitStatusAnalogTableIndex, coolingUnitStatusAnalogDescription=coolingUnitStatusAnalogDescription, coolingUnitStatusAnalogValue=coolingUnitStatusAnalogValue, coolingUnitStatusAnalogUnits=coolingUnitStatusAnalogUnits, coolingUnitStatusAnalogScale=coolingUnitStatusAnalogScale, coolingUnitStatusDiscrete=coolingUnitStatusDiscrete, coolingUnitStatusDiscreteTableSize=coolingUnitStatusDiscreteTableSize, coolingUnitStatusDiscreteTable=coolingUnitStatusDiscreteTable, coolingUnitStatusDiscreteEntry=coolingUnitStatusDiscreteEntry, coolingUnitStatusDiscreteTableIndex=coolingUnitStatusDiscreteTableIndex, coolingUnitStatusDiscreteDescription=coolingUnitStatusDiscreteDescription, coolingUnitStatusDiscreteValueAsString=coolingUnitStatusDiscreteValueAsString, coolingUnitStatusDiscreteValueAsInteger=coolingUnitStatusDiscreteValueAsInteger, coolingUnitStatusDiscreteIntegerReferenceKey=coolingUnitStatusDiscreteIntegerReferenceKey, coolingUnitConfiguration=coolingUnitConfiguration, coolingUnitConfigurationAnalog=coolingUnitConfigurationAnalog, coolingUnitConfigurationAnalogTableSize=coolingUnitConfigurationAnalogTableSize, coolingUnitConfigurationAnalogTable=coolingUnitConfigurationAnalogTable, coolingUnitConfigurationAnalogEntry=coolingUnitConfigurationAnalogEntry, coolingUnitConfigurationAnalogTableIndex=coolingUnitConfigurationAnalogTableIndex, coolingUnitConfigurationAnalogDescription=coolingUnitConfigurationAnalogDescription, coolingUnitConfigurationAnalogValue=coolingUnitConfigurationAnalogValue, coolingUnitConfigurationAnalogUnits=coolingUnitConfigurationAnalogUnits, coolingUnitConfigurationAnalogScale=coolingUnitConfigurationAnalogScale, coolingUnitConfigurationAnalogAccess=coolingUnitConfigurationAnalogAccess, coolingUnitConfigurationAnalogMinimum=coolingUnitConfigurationAnalogMinimum, coolingUnitConfigurationAnalogMaximum=coolingUnitConfigurationAnalogMaximum, coolingUnitConfigurationDiscrete=coolingUnitConfigurationDiscrete, coolingUnitConfigurationDiscreteTableSize=coolingUnitConfigurationDiscreteTableSize, coolingUnitConfigurationDiscreteTable=coolingUnitConfigurationDiscreteTable, coolingUnitConfigurationDiscreteEntry=coolingUnitConfigurationDiscreteEntry, coolingUnitConfigurationDiscreteTableIndex=coolingUnitConfigurationDiscreteTableIndex, coolingUnitConfigurationDiscreteDescription=coolingUnitConfigurationDiscreteDescription, coolingUnitConfigurationDiscreteValueAsString=coolingUnitConfigurationDiscreteValueAsString, coolingUnitConfigurationDiscreteValueAsInteger=coolingUnitConfigurationDiscreteValueAsInteger, coolingUnitConfigurationDiscreteIntegerReferenceKey=coolingUnitConfigurationDiscreteIntegerReferenceKey, coolingUnitConfigurationDiscreteAccess=coolingUnitConfigurationDiscreteAccess, coolingUnitConfigurationString=coolingUnitConfigurationString, coolingUnitConfigurationStringTableSize=coolingUnitConfigurationStringTableSize, coolingUnitConfigurationStringTable=coolingUnitConfigurationStringTable, coolingUnitConfigurationStringEntry=coolingUnitConfigurationStringEntry, coolingUnitConfigurationStringTableIndex=coolingUnitConfigurationStringTableIndex, coolingUnitConfigurationStringDescription=coolingUnitConfigurationStringDescription, coolingUnitConfigurationStringValue=coolingUnitConfigurationStringValue, coolingUnitConfigurationStringMaxLength=coolingUnitConfigurationStringMaxLength, coolingUnitConfigurationStringAccess=coolingUnitConfigurationStringAccess, coolingUnitExtended=coolingUnitExtended, coolingUnitExtendedAnalog=coolingUnitExtendedAnalog, coolingUnitExtendedAnalogTableSize=coolingUnitExtendedAnalogTableSize, coolingUnitExtendedAnalogTable=coolingUnitExtendedAnalogTable, coolingUnitExtendedAnalogEntry=coolingUnitExtendedAnalogEntry, coolingUnitExtendedAnalogTableIndex=coolingUnitExtendedAnalogTableIndex, coolingUnitExtendedAnalogDescription=coolingUnitExtendedAnalogDescription, coolingUnitExtendedAnalogValue=coolingUnitExtendedAnalogValue, coolingUnitExtendedAnalogUnits=coolingUnitExtendedAnalogUnits, coolingUnitExtendedAnalogScale=coolingUnitExtendedAnalogScale, coolingUnitExtendedDiscrete=coolingUnitExtendedDiscrete, coolingUnitExtendedDiscreteTableSize=coolingUnitExtendedDiscreteTableSize, coolingUnitExtendedDiscreteTable=coolingUnitExtendedDiscreteTable, coolingUnitExtendedDiscreteEntry=coolingUnitExtendedDiscreteEntry, coolingUnitExtendedDiscreteTableIndex=coolingUnitExtendedDiscreteTableIndex, coolingUnitExtendedDiscreteDescription=coolingUnitExtendedDiscreteDescription, coolingUnitExtendedDiscreteValueAsString=coolingUnitExtendedDiscreteValueAsString, coolingUnitExtendedDiscreteValueAsInteger=coolingUnitExtendedDiscreteValueAsInteger, coolingUnitExtendedDiscreteIntegerReferenceKey=coolingUnitExtendedDiscreteIntegerReferenceKey, coolingUnitExtendedString=coolingUnitExtendedString, coolingUnitExtendedStringTableSize=coolingUnitExtendedStringTableSize, coolingUnitExtendedStringTable=coolingUnitExtendedStringTable, coolingUnitExtendedStringEntry=coolingUnitExtendedStringEntry, coolingUnitExtendedStringTableIndex=coolingUnitExtendedStringTableIndex, coolingUnitExtendedStringDescription=coolingUnitExtendedStringDescription, coolingUnitExtendedStringValue=coolingUnitExtendedStringValue, software=software, powerNetSubAgent=powerNetSubAgent, powerNetSoftwareSystem=powerNetSoftwareSystem, powerNetSoftwareSystemDescription=powerNetSoftwareSystemDescription, powerNetSoftwareOid=powerNetSoftwareOid, powerNetSoftwareSystemUpTime=powerNetSoftwareSystemUpTime, powerNetSoftwareConfig=powerNetSoftwareConfig, powerNetSoftwareTableSize=powerNetSoftwareTableSize)
mibBuilder.exportSymbols("PowerNet-MIB", powerNetSoftwareTable=powerNetSoftwareTable, powerNetSoftwareEntry=powerNetSoftwareEntry, moduleNumber=moduleNumber, moduleName=moduleName, moduleVersion=moduleVersion, moduleDate=moduleDate, struxureWareOperations=struxureWareOperations, struxureWareOperationsStatus=struxureWareOperationsStatus, serverStatus=serverStatus, databaseStatus=databaseStatus, loadBalancerStatus=loadBalancerStatus, essentialServicesStatus=essentialServicesStatus, etlStatus=etlStatus, system=system, backUPS=backUPS, smartUPS=smartUPS, smartUPS250=smartUPS250, smartUPS400=smartUPS400, smartUPS600=smartUPS600, smartUPS900=smartUPS900, smartUPS1250=smartUPS1250, smartUPS2000=smartUPS2000, smartUPS450=smartUPS450, smartUPS700=smartUPS700, smartUPS1000=smartUPS1000, smartUPS1400=smartUPS1400, smartUPS2200=smartUPS2200, smartUPS3000=smartUPS3000, smartUPS5000=smartUPS5000, smartUPS7500=smartUPS7500, smartUPS10000=smartUPS10000, smartUPS1500=smartUPS1500, smartUPS3000DSP=smartUPS3000DSP, smartUPS5000DSP=smartUPS5000DSP, smartUPS8000=smartUPS8000, matrixUPS=matrixUPS, matrixUPS3000=matrixUPS3000, matrixUPS5000=matrixUPS5000, masterSwitch=masterSwitch, masterSwitchV1=masterSwitchV1, masterSwitchV2=masterSwitchV2, masterSwitchVM=masterSwitchVM, masterSwitchMSP=masterSwitchMSP, masterSwitchrPDU=masterSwitchrPDU, masterSwitchrPDU2=masterSwitchrPDU2, masterSwitchsPDU=masterSwitchsPDU, symmetraUPS=symmetraUPS, symmetraUPS4kVA=symmetraUPS4kVA, symmetraUPS8kVA=symmetraUPS8kVA, symmetraUPS12kVA=symmetraUPS12kVA, symmetraUPS16kVA=symmetraUPS16kVA, dp100E=dp100E, dp300E=dp300E, monitors=monitors, environmental=environmental, environmentalMgtSystem=environmentalMgtSystem, emu2=emu2, mem=mem, redundantSwitch=redundantSwitch, dcPower=dcPower, dm3=dm3, dcmim2=dcmim2, automaticXferSwitch=automaticXferSwitch, netLock=netLock, symmetra3PhaseUPS=symmetra3PhaseUPS, symmetra3PhaseUPS40kVA=symmetra3PhaseUPS40kVA, symmetra3PhaseUPS60kVA=symmetra3PhaseUPS60kVA, symmetra3PhaseUPS80kVA=symmetra3PhaseUPS80kVA, symmetra3PhaseUPS20kVA=symmetra3PhaseUPS20kVA, networkAir=networkAir, airFMSeries=airFMSeries, rackAirRemovalUnit=rackAirRemovalUnit, airPASeries=airPASeries, airIRSC100Series=airIRSC100Series, airIRRC100Series=airIRRC100Series, airIRRP100Series=airIRRP100Series, airIRRP500Series=airIRRP500Series, airIRRD100Series=airIRRD100Series, airInRoomPerimeter=airInRoomPerimeter, airACRC300Series=airACRC300Series, airLESeries=airLESeries, airIRRDU=airIRRDU, airEcoBreeze=airEcoBreeze, airLELSeries=airLELSeries, airACRC600Series=airACRC600Series, airACRD600Series=airACRD600Series, infraStruXurePDU=infraStruXurePDU, ais5000UPS=ais5000UPS, ais5000UPS10kVA=ais5000UPS10kVA, ais5000UPS20kVA=ais5000UPS20kVA, ais5000UPS30kVA=ais5000UPS30kVA, ais5000UPS40kVA=ais5000UPS40kVA, ais5000UPS60kVA=ais5000UPS60kVA, ais5000UPS80kVA=ais5000UPS80kVA, ais5000UPS100kVA=ais5000UPS100kVA, smartUPS3Phase=smartUPS3Phase, smartUPS3Phase10kVA=smartUPS3Phase10kVA, smartUPS3Phase15kVA=smartUPS3Phase15kVA, smartUPS3Phase20kVA=smartUPS3Phase20kVA, smartUPS3Phase30kVA=smartUPS3Phase30kVA, smartUPS3Phase40kVA=smartUPS3Phase40kVA, battManager=battManager, infraStruXureATS=infraStruXureATS, conPortServ=conPortServ, conPortServAP930x=conPortServAP930x, gutor=gutor, gutorPEW=gutorPEW, gutorPDW=gutorPDW, gutorWEW=gutorWEW, gutorWDW=gutorWDW, gutorSDC=gutorSDC, accControl=accControl, accPX=accPX, symmetraPX=symmetraPX, symmetraPx48kVA=symmetraPx48kVA, symmetraPx160kVA=symmetraPx160kVA, symmetraPx250kVA=symmetraPx250kVA, symmetraPx500kVA=symmetraPx500kVA, symmetraPx100kVA=symmetraPx100kVA, symmetraPxDisplay=symmetraPxDisplay, isxModDistribution=isxModDistribution, isx24ModuleHalfRackPdu=isx24ModuleHalfRackPdu, isx6ModuleRackPdu=isx6ModuleRackPdu, isxServers=isxServers, isxcBasic=isxcBasic, isxcStandard=isxcStandard, isxcEnterprise=isxcEnterprise)
mibBuilder.exportSymbols("PowerNet-MIB", isxcVirtual=isxcVirtual, smartUPS2=smartUPS2, galaxy=galaxy, galaxy7000UPS200kVA=galaxy7000UPS200kVA, galaxy7000UPS250kVA=galaxy7000UPS250kVA, galaxy7000UPS300kVA=galaxy7000UPS300kVA, galaxy7000UPS400kVA=galaxy7000UPS400kVA, galaxy7000UPS500kVA=galaxy7000UPS500kVA, galaxy7000SSC800kVA=galaxy7000SSC800kVA, galaxy7000SSC1200kVA=galaxy7000SSC1200kVA, galaxy7000SSC2000kVA=galaxy7000SSC2000kVA, galaxy300UPS10kVA33=galaxy300UPS10kVA33, galaxy300UPS15kVA33=galaxy300UPS15kVA33, galaxy300UPS20kVA33=galaxy300UPS20kVA33, galaxy300UPS30kVA33=galaxy300UPS30kVA33, galaxy300UPS40kVA33=galaxy300UPS40kVA33, galaxy300UPS10kVA31=galaxy300UPS10kVA31, galaxy300UPS15kVA31=galaxy300UPS15kVA31, galaxy300UPS20kVA31=galaxy300UPS20kVA31, galaxy300UPS30kVA31=galaxy300UPS30kVA31, galaxy5000UPS20KVA=galaxy5000UPS20KVA, galaxy5000UPS30KVA=galaxy5000UPS30KVA, galaxy5000UPS40KVA=galaxy5000UPS40KVA, galaxy5000UPS50KVA=galaxy5000UPS50KVA, galaxy5000UPS60KVA=galaxy5000UPS60KVA, galaxy5000UPS80KVA=galaxy5000UPS80KVA, galaxy5000UPS100KVA=galaxy5000UPS100KVA, galaxy5000UPS120KVA=galaxy5000UPS120KVA, galaxy5000UPS130KVA=galaxy5000UPS130KVA, galaxy5500UPS20KVA=galaxy5500UPS20KVA, galaxy5500UPS30KVA=galaxy5500UPS30KVA, galaxy5500UPS40KVA=galaxy5500UPS40KVA, galaxy5500UPS50KVA=galaxy5500UPS50KVA, galaxy5500UPS60KVA=galaxy5500UPS60KVA, galaxy5500UPS80KVA=galaxy5500UPS80KVA, galaxy5500UPS100KVA=galaxy5500UPS100KVA, galaxy5500UPS120KVA=galaxy5500UPS120KVA, galaxy5500UPS130KVA=galaxy5500UPS130KVA, galaxyVMUPS50kVA=galaxyVMUPS50kVA, galaxyVMUPS60kVA=galaxyVMUPS60kVA, galaxyVMUPS80kVA=galaxyVMUPS80kVA, galaxyVMUPS90kVA=galaxyVMUPS90kVA, galaxyVMUPS100kVA=galaxyVMUPS100kVA, galaxyVMUPS110kVA=galaxyVMUPS110kVA, galaxyVMUPS120kVA=galaxyVMUPS120kVA, galaxyVMUPS130kVA=galaxyVMUPS130kVA, galaxyVMUPS160kVA=galaxyVMUPS160kVA, galaxyVMUPS180kVA=galaxyVMUPS180kVA, galaxyVMUPS200kVA=galaxyVMUPS200kVA, galaxyVMUPS225kVA=galaxyVMUPS225kVA, galaxy9000UPS=galaxy9000UPS, galaxy9000SSC=galaxy9000SSC, galaxy9000UPSWithSSC=galaxy9000UPSWithSSC, galaxy9000FreqConverter=galaxy9000FreqConverter, eps=eps, eps6000UPS=eps6000UPS, eps6000SSC=eps6000SSC, eps6000UPSWithSSC=eps6000UPSWithSSC, eps6000FreqConverter=eps6000FreqConverter, eps7000UPS=eps7000UPS, eps7000SSC=eps7000SSC, eps7000UPSWithSSC=eps7000UPSWithSSC, eps7000FreqConverter=eps7000FreqConverter, eps8000UPS=eps8000UPS, eps8000SSC=eps8000SSC, eps8000UPSWithSSC=eps8000UPSWithSSC, eps8000FreqConverter=eps8000FreqConverter, experimental=experimental, apcmgmt=apcmgmt, mconfig=mconfig, mconfigNumTrapReceivers=mconfigNumTrapReceivers, mconfigTrapReceiverTable=mconfigTrapReceiverTable, mconfigTrapReceiverEntry=mconfigTrapReceiverEntry, trapIndex=trapIndex, receiverAddr=receiverAddr, communityString=communityString, severity=severity, acceptThisReceiver=acceptThisReceiver, receiveTrapType=receiveTrapType, mconfigBOOTPEnabled=mconfigBOOTPEnabled, mconfigTFTPServerIP=mconfigTFTPServerIP, newCodeAuthentViaTFTP=newCodeAuthentViaTFTP, mconfigClock=mconfigClock, mconfigClockDate=mconfigClockDate, mconfigClockTime=mconfigClockTime, mcontrol=mcontrol, mcontrolRestartAgent=mcontrolRestartAgent, mtrapargs=mtrapargs, mtrapargsInteger=mtrapargsInteger, mtrapargsIpAddress=mtrapargsIpAddress, mtrapargsString=mtrapargsString, mtrapargsGauge=mtrapargsGauge, mtrapargsTimeTicks=mtrapargsTimeTicks, mtrapargsInteger02=mtrapargsInteger02, mtrapargsInteger03=mtrapargsInteger03, mtrapargsIpAddress02=mtrapargsIpAddress02, mtrapargsIpAddress03=mtrapargsIpAddress03, mtrapargsString02=mtrapargsString02, mtrapargsString03=mtrapargsString03, mtrapargsGauge02=mtrapargsGauge02, mtrapargsGauge03=mtrapargsGauge03, mtrapargsTimeTicks02=mtrapargsTimeTicks02, mtrapargsTimeTicks03=mtrapargsTimeTicks03, mtrapargsString04=mtrapargsString04, mtrapargsString05=mtrapargsString05, mtrapargsInteger04=mtrapargsInteger04, mtrapargsInteger05=mtrapargsInteger05, mtrapargsString06=mtrapargsString06, mtrapargsString07=mtrapargsString07, mtrapargsString08=mtrapargsString08, mtrapargsOctetString=mtrapargsOctetString, mtrapargsOctetString02=mtrapargsOctetString02, mtrapargsOctetString03=mtrapargsOctetString03, mtrapargsOctetString04=mtrapargsOctetString04, mtrapargsOctetString05=mtrapargsOctetString05, mtrapargsOctetString06=mtrapargsOctetString06, mtrapargsOctetString07=mtrapargsOctetString07, mtrapargsOctetString08=mtrapargsOctetString08, mfiletransfer=mfiletransfer, mfiletransferStatus=mfiletransferStatus, mfiletransferStatusLastTransferResult=mfiletransferStatusLastTransferResult, mfiletransferConfig=mfiletransferConfig, mfiletransferConfigSettings=mfiletransferConfigSettings, mfiletransferConfigSettingsFilename=mfiletransferConfigSettingsFilename, mfiletransferConfigTFTP=mfiletransferConfigTFTP, mfiletransferConfigTFTPServerAddress=mfiletransferConfigTFTPServerAddress, mfiletransferConfigFTP=mfiletransferConfigFTP)
mibBuilder.exportSymbols("PowerNet-MIB", mfiletransferConfigFTPServerAddress=mfiletransferConfigFTPServerAddress, mfiletransferConfigFTPServerUser=mfiletransferConfigFTPServerUser, mfiletransferConfigFTPServerPassword=mfiletransferConfigFTPServerPassword, mfiletransferControl=mfiletransferControl, mfiletransferControlInitiateFileTransfer=mfiletransferControlInitiateFileTransfer)

# Notifications
mibBuilder.exportSymbols("PowerNet-MIB", communicationLost=communicationLost, upsOverload=upsOverload, upsDiagnosticsFailed=upsDiagnosticsFailed, upsDischarged=upsDischarged, upsOnBattery=upsOnBattery, smartBoostOn=smartBoostOn, lowBattery=lowBattery, communicationEstablished=communicationEstablished, powerRestored=powerRestored, upsDiagnosticsPassed=upsDiagnosticsPassed, returnFromLowBattery=returnFromLowBattery, upsTurnedOff=upsTurnedOff, upsSleeping=upsSleeping, upsWokeUp=upsWokeUp, upsRebootStarted=upsRebootStarted, upsDipSwitchChanged=upsDipSwitchChanged, upsBatteryNeedsReplacement=upsBatteryNeedsReplacement, contactFault=contactFault, contactFaultResolved=contactFaultResolved, hardwareFailureBypass=hardwareFailureBypass, softwareBypass=softwareBypass, switchedBypass=switchedBypass, returnFromBypass=returnFromBypass, bypassPowerSupplyFailure=bypassPowerSupplyFailure, baseFanFailure=baseFanFailure, batteryPackCommLost=batteryPackCommLost, batteryPackCommEstablished=batteryPackCommEstablished, calibrationStart=calibrationStart, restartAgent=restartAgent, upsTurnedOn=upsTurnedOn, smartAvrReducing=smartAvrReducing, codeAuthenticationDone=codeAuthenticationDone, upsOverloadCleared=upsOverloadCleared, smartBoostOff=smartBoostOff, smartAvrReducingOff=smartAvrReducingOff, upsBatteryReplaced=upsBatteryReplaced, calibrationEnd=calibrationEnd, dischargeCleared=dischargeCleared, gracefulShutdown=gracefulShutdown, outletOn=outletOn, outletOff=outletOff, outletReboot=outletReboot, configChangeSNMP=configChangeSNMP, configChangeOutlet=configChangeOutlet, accessViolationConsole=accessViolationConsole, accessViolationHTTP=accessViolationHTTP, passwordChange=passwordChange, badVoltage=badVoltage, badVoltageCleared=badVoltageCleared, chargerFailure=chargerFailure, chargerFailureCleared=chargerFailureCleared, batteryOverTemperature=batteryOverTemperature, batteryOverTemperatureCleared=batteryOverTemperatureCleared, smartRelayFault=smartRelayFault, smartRelayFaultCleared=smartRelayFaultCleared, humidityThresholdViolation1=humidityThresholdViolation1, humidityThresholdViolationCleared1=humidityThresholdViolationCleared1, temperatureThresholdViolation1=temperatureThresholdViolation1, temperatureThresholdViolationCleared1=temperatureThresholdViolationCleared1, humidityThresholdViolation2=humidityThresholdViolation2, humidityThresholdViolationCleared2=humidityThresholdViolationCleared2, temperatureThresholdViolation2=temperatureThresholdViolation2, temperatureThresholdViolationCleared2=temperatureThresholdViolationCleared2, mupsCommunicationEstablished=mupsCommunicationEstablished, mupsCommunicationLost=mupsCommunicationLost, batteryIncrease=batteryIncrease, batteryDecrease=batteryDecrease, powerModuleIncrease=powerModuleIncrease, powerModuleDecrease=powerModuleDecrease, intelligenceModuleInserted=intelligenceModuleInserted, intelligenceModuleRemoved=intelligenceModuleRemoved, rintelligenceModuleInserted=rintelligenceModuleInserted, rintelligenceModuleRemoved=rintelligenceModuleRemoved, extBatteryFrameIncease=extBatteryFrameIncease, extBatteryFrameDecrease=extBatteryFrameDecrease, abnormalCondition=abnormalCondition, abnormalConditionCleared=abnormalConditionCleared, deviceStatusChange=deviceStatusChange, noBatteries=noBatteries, noBatteriesCleared=noBatteriesCleared, userAdded=userAdded, userDeleted=userDeleted, userModified=userModified, msvmCommunicationEstablished=msvmCommunicationEstablished, msvmCommunicationLost=msvmCommunicationLost, msvmOverload=msvmOverload, msvmOverloadCleared=msvmOverloadCleared, msvmOutletOn=msvmOutletOn, msvmOutletOff=msvmOutletOff, msvmDeviceConfigChange=msvmDeviceConfigChange, msvmOutletConfigChange=msvmOutletConfigChange, msvmLowLoad=msvmLowLoad, msvmLowLoadCleared=msvmLowLoadCleared, msvmNearOverload=msvmNearOverload, msvmNearOverloadCleared=msvmNearOverloadCleared, msvmPowerSupplyStatusChange=msvmPowerSupplyStatusChange, mspCommunicationEstablished=mspCommunicationEstablished, mspCommunicationLost=mspCommunicationLost, mspOutletOn=mspOutletOn, mspOutletOff=mspOutletOff, mspDeviceConfigChange=mspDeviceConfigChange, mspOutletConfigChange=mspOutletConfigChange, rsSourceSwitched=rsSourceSwitched, rsLostRedundancy=rsLostRedundancy, rsRedundancyRestored=rsRedundancyRestored, rsConfigChange=rsConfigChange, rsCommunicationEstablished=rsCommunicationEstablished, rsCommunicationLost=rsCommunicationLost, dcCommunicationEstablished=dcCommunicationEstablished, dcCommunicationLost=dcCommunicationLost, dcPINChanged=dcPINChanged, dcMajorAlarm=dcMajorAlarm, dcMajorAlarmCleared=dcMajorAlarmCleared, dcMinorAlarm=dcMinorAlarm, dcMinorAlarmCleared=dcMinorAlarmCleared, dcOutputRelayOn=dcOutputRelayOn, dcOutputRelayOff=dcOutputRelayOff, dcInputRelayOn=dcInputRelayOn, dcInputRelayOff=dcInputRelayOff, logicPowerSuppliesIncreased=logicPowerSuppliesIncreased, logicPowerSuppliesDecreased=logicPowerSuppliesDecreased, externalSwitchGearClosed=externalSwitchGearClosed, externalSwitchGearOpened=externalSwitchGearOpened, generalDeviceEvent=generalDeviceEvent, atsSourceSwitched=atsSourceSwitched, atsLostRedundancy=atsLostRedundancy)
mibBuilder.exportSymbols("PowerNet-MIB", atsRedundancyRestored=atsRedundancyRestored, atsConfigChange=atsConfigChange, atsCommunicationEstablished=atsCommunicationEstablished, atsCommunicationLost=atsCommunicationLost, atsOverCurrent=atsOverCurrent, atsOverCurrentCleared=atsOverCurrentCleared, atsPowerSupplyFailure=atsPowerSupplyFailure, atsPowerSupplyFailureCleared=atsPowerSupplyFailureCleared, dcMainsFailAlarm=dcMainsFailAlarm, dcMainsFailAlarmCleared=dcMainsFailAlarmCleared, dcFanFailAlarm=dcFanFailAlarm, dcFanFailAlarmCleared=dcFanFailAlarmCleared, dcRectifierOvertempAlarm=dcRectifierOvertempAlarm, dcRectifierOvertempAlarmCleared=dcRectifierOvertempAlarmCleared, dcCurrentLimitAlarm=dcCurrentLimitAlarm, dcCurrentLimitAlarmCleared=dcCurrentLimitAlarmCleared, dcRectifierFailAlarm=dcRectifierFailAlarm, dcRectifierFailAlarmCleared=dcRectifierFailAlarmCleared, dcMultRectFailAlarm=dcMultRectFailAlarm, dcMultRectFailAlarmCleared=dcMultRectFailAlarmCleared, dcBatteryBreakerAlarm=dcBatteryBreakerAlarm, dcBatteryBreakerAlarmCleared=dcBatteryBreakerAlarmCleared, dcRectifierOVPAlarm=dcRectifierOVPAlarm, dcRectifierOVPAlarmCleared=dcRectifierOVPAlarmCleared, dcLVDImminentAlarm=dcLVDImminentAlarm, dcLVDImminentAlarmCleared=dcLVDImminentAlarmCleared, dcFuseCBAlarm=dcFuseCBAlarm, dcFuseCBAlarmCleared=dcFuseCBAlarmCleared, dcBatteryTestFail=dcBatteryTestFail, dcTemperatureAlarm=dcTemperatureAlarm, dcTemperatureAlarmCleared=dcTemperatureAlarmCleared, dcHumidityAlarm=dcHumidityAlarm, dcHumidityAlarmCleared=dcHumidityAlarmCleared, dcBBCommunicationEstablished=dcBBCommunicationEstablished, dcBBCommunicationLost=dcBBCommunicationLost, iemHighTempThresholdViolation=iemHighTempThresholdViolation, iemHighTempThresholdViolationCleared=iemHighTempThresholdViolationCleared, iemLowTempThresholdViolation=iemLowTempThresholdViolation, iemLowTempThresholdViolationCleared=iemLowTempThresholdViolationCleared, iemHighHumidThresholdViolation=iemHighHumidThresholdViolation, iemHighHumidThresholdViolationCleared=iemHighHumidThresholdViolationCleared, iemLowHumidThresholdViolation=iemLowHumidThresholdViolation, iemLowHumidThresholdViolationCleared=iemLowHumidThresholdViolationCleared, iemProbeDisconnected=iemProbeDisconnected, iemProbeConnected=iemProbeConnected, iemContactFault=iemContactFault, iemContactFaultCleared=iemContactFaultCleared, iemRelayFault=iemRelayFault, iemRelayFaultCleared=iemRelayFaultCleared, bmBatManCommEstab=bmBatManCommEstab, bmBatManCommLost=bmBatManCommLost, bmBatManKneeAlarm=bmBatManKneeAlarm, bmBatManKneeAlarmCleared=bmBatManKneeAlarmCleared, bmBatManChargerAlarm=bmBatManChargerAlarm, bmBatManChargerAlarmCleared=bmBatManChargerAlarmCleared, bmBatManBatteryAlarm=bmBatManBatteryAlarm, bmBatManBatteryAlarmCleared=bmBatManBatteryAlarmCleared, bmBatManEnvironmentAlarm=bmBatManEnvironmentAlarm, bmBatManEnvironmentAlarmCleared=bmBatManEnvironmentAlarmCleared, bmBatManMaintenanceAlarm=bmBatManMaintenanceAlarm, bmBatManMaintenanceAlarmCleared=bmBatManMaintenanceAlarmCleared, pduCommunicationEstablished=pduCommunicationEstablished, pduCommunicationLost=pduCommunicationLost, pduUtilityLineUndervoltage=pduUtilityLineUndervoltage, pduUtilityLineUndervoltageCleared=pduUtilityLineUndervoltageCleared, pduUtilityLineOvervoltage=pduUtilityLineOvervoltage, pduUtilityLineOvervoltageCleared=pduUtilityLineOvervoltageCleared, pduGroundOvercurrent=pduGroundOvercurrent, pduGroundOvercurrentCleared=pduGroundOvercurrentCleared, pduCircuitPanelInputUndervoltage=pduCircuitPanelInputUndervoltage, pduCircuitPanelInputUndervoltageCleared=pduCircuitPanelInputUndervoltageCleared, pduCircuitPanelInputOvervoltage=pduCircuitPanelInputOvervoltage, pduCircuitPanelInputOvervoltageCleared=pduCircuitPanelInputOvervoltageCleared, pduCircuitPanelInputUndercurrent=pduCircuitPanelInputUndercurrent, pduCircuitPanelInputUndercurrentCleared=pduCircuitPanelInputUndercurrentCleared, pduCircuitPanelInputOvercurrent=pduCircuitPanelInputOvercurrent, pduCircuitPanelInputOvercurrentCleared=pduCircuitPanelInputOvercurrentCleared, pduCircuitPanelFrequencyOutOfRange=pduCircuitPanelFrequencyOutOfRange, pduCircuitPanelFrequencyOutofRangeCleared=pduCircuitPanelFrequencyOutofRangeCleared, pduCircuitPanelNeutralOvercurrent=pduCircuitPanelNeutralOvercurrent, pduCircuitPanelNeutralOvercurrentCleared=pduCircuitPanelNeutralOvercurrentCleared, pduSystemOff=pduSystemOff, pduOnBatteryMode=pduOnBatteryMode, pduMaintenanceBypassMode=pduMaintenanceBypassMode, pduAtypicalBypassMode=pduAtypicalBypassMode, pduNoPanelFeedMode=pduNoPanelFeedMode, pduUpsOperationMode=pduUpsOperationMode, pduForcedBypassMode=pduForcedBypassMode, pduInputTransformerOverTemperature=pduInputTransformerOverTemperature, pduInputTransformerOverTemperatureCleared=pduInputTransformerOverTemperatureCleared, pduUPSInputVoltageLost=pduUPSInputVoltageLost, pduUPSInputVoltageRestored=pduUPSInputVoltageRestored, pduContactFault=pduContactFault, pduContactFaultCleared=pduContactFaultCleared, rPDUBankPhaseLowLoad=rPDUBankPhaseLowLoad, rPDUBankPhaseLowLoadCleared=rPDUBankPhaseLowLoadCleared, rPDUBankPhaseNearOverload=rPDUBankPhaseNearOverload, rPDUBankPhaseNearOverloadCleared=rPDUBankPhaseNearOverloadCleared, rPDUBankPhaseOverload=rPDUBankPhaseOverload, rPDUBankPhaseOverloadCleared=rPDUBankPhaseOverloadCleared, aruDeviceConfigChange=aruDeviceConfigChange, rmPDUCommunicationLost=rmPDUCommunicationLost, emsCommunicationEstablished=emsCommunicationEstablished, emsCommunicationLost=emsCommunicationLost, emsProbeConnected=emsProbeConnected, emsProbeDisconnected=emsProbeDisconnected, emsSensorConnected=emsSensorConnected, emsSensorDisconnected=emsSensorDisconnected, emsSensorFault=emsSensorFault, emsSensorFaultCleared=emsSensorFaultCleared, emsBeaconConnected=emsBeaconConnected, emsBeaconDisconnected=emsBeaconDisconnected, emsBeaconOn=emsBeaconOn, emsBeaconOff=emsBeaconOff, emsMajorAlarm=emsMajorAlarm, emsMajorAlarmCleared=emsMajorAlarmCleared, emsMinorAlarm=emsMinorAlarm, emsMinorAlarmCleared=emsMinorAlarmCleared, emsOutletStateAbnormal=emsOutletStateAbnormal, emsOutletStateNormal=emsOutletStateNormal, emsInputContactStateAbnormal=emsInputContactStateAbnormal, emsInputContactStateNormal=emsInputContactStateNormal, emsOutputRelayStateAbnormal=emsOutputRelayStateAbnormal, emsOutputRelayStateNormal=emsOutputRelayStateNormal, emsDeviceConfigChange=emsDeviceConfigChange, envHighTempThresholdViolation=envHighTempThresholdViolation, envHighTempThresholdViolationCleared=envHighTempThresholdViolationCleared)
mibBuilder.exportSymbols("PowerNet-MIB", envLowTempThresholdViolation=envLowTempThresholdViolation, envLowTempThresholdViolationCleared=envLowTempThresholdViolationCleared, envHighHumidityThresholdViolation=envHighHumidityThresholdViolation, envHighHumidityThresholdViolationCleared=envHighHumidityThresholdViolationCleared, envLowHumidityThresholdViolation=envLowHumidityThresholdViolation, envLowHumidityThresholdViolationCleared=envLowHumidityThresholdViolationCleared, rPDUCommunicationEstablished=rPDUCommunicationEstablished, rPDUCommunicationLost=rPDUCommunicationLost, rPDUOutletOn=rPDUOutletOn, rPDUOutletOff=rPDUOutletOff, rPDUDeviceConfigChange=rPDUDeviceConfigChange, rPDUOutletConfigChange=rPDUOutletConfigChange, rPDULowLoad=rPDULowLoad, rPDULowLoadCleared=rPDULowLoadCleared, rPDUNearOverload=rPDUNearOverload, rPDUNearOverloadCleared=rPDUNearOverloadCleared, rPDUOverload=rPDUOverload, rPDUOverloadCleared=rPDUOverloadCleared, rPDUPowerSupply1Fail=rPDUPowerSupply1Fail, rPDUPowerSupply1Ok=rPDUPowerSupply1Ok, rPDUPowerSupply2Fail=rPDUPowerSupply2Fail, rPDUPowerSupply2Ok=rPDUPowerSupply2Ok, rPDUPhaseConfigChange=rPDUPhaseConfigChange, rPDUCancelPendingCommand=rPDUCancelPendingCommand, aruAlinkCommunicationEstablished=aruAlinkCommunicationEstablished, aruAlinkCommunicationLost=aruAlinkCommunicationLost, aruFanFail=aruFanFail, aruFanFailCleared=aruFanFailCleared, aruSmokeAlarm=aruSmokeAlarm, aruSmokeAlarmCleared=aruSmokeAlarmCleared, aruHighTemperatureAlarm=aruHighTemperatureAlarm, aruHighTemperatureAlarmCleared=aruHighTemperatureAlarmCleared, aruExhaustTemperatureAlarm=aruExhaustTemperatureAlarm, aruExhaustTemperatureAlarmCleared=aruExhaustTemperatureAlarmCleared, envAlinkCommunicationEstablished=envAlinkCommunicationEstablished, envAlinkCommunicationLost=envAlinkCommunicationLost, emsAlinkPowerOverload=emsAlinkPowerOverload, emsAlinkPowerOverloadCleared=emsAlinkPowerOverloadCleared, upsOutletGroupTurnedOn=upsOutletGroupTurnedOn, upsOutletGroupTurnedOff=upsOutletGroupTurnedOff, smwCriticalCondition=smwCriticalCondition, smwCriticalConditionCleared=smwCriticalConditionCleared, smwWarningCondition=smwWarningCondition, smwWarningConditionCleared=smwWarningConditionCleared, smwInformationalCondition=smwInformationalCondition, smwInformationalConditionCleared=smwInformationalConditionCleared, airCriticalCondition=airCriticalCondition, airCriticalConditionCleared=airCriticalConditionCleared, airWarningCondition=airWarningCondition, airWarningConditionCleared=airWarningConditionCleared, airInformationalCondition=airInformationalCondition, airInformationalConditionCleared=airInformationalConditionCleared, xPDUInputVoltageLowAlarm=xPDUInputVoltageLowAlarm, xPDUInputVoltageLowAlarmCleared=xPDUInputVoltageLowAlarmCleared, xPDUInputVoltageHighAlarm=xPDUInputVoltageHighAlarm, xPDUInputVoltageHighAlarmCleared=xPDUInputVoltageHighAlarmCleared, xPDUBypassVoltageLowAlarm=xPDUBypassVoltageLowAlarm, xPDUBypassVoltageLowAlarmCleared=xPDUBypassVoltageLowAlarmCleared, xPDUBypassVoltageHighAlarm=xPDUBypassVoltageHighAlarm, xPDUBypassVoltageHighAlarmCleared=xPDUBypassVoltageHighAlarmCleared, xPDUOutputVoltageLowAlarm=xPDUOutputVoltageLowAlarm, xPDUOutputVoltageLowAlarmCleared=xPDUOutputVoltageLowAlarmCleared, xPDUOutputVoltageHighAlarm=xPDUOutputVoltageHighAlarm, xPDUOutputVoltageHighAlarmCleared=xPDUOutputVoltageHighAlarmCleared, xPDUOutputCurrentLowAlarm=xPDUOutputCurrentLowAlarm, xPDUOutputCurrentLowAlarmCleared=xPDUOutputCurrentLowAlarmCleared, xPDUOutputCurrentHighAlarm=xPDUOutputCurrentHighAlarm, xPDUOutputCurrentHighAlarmCleared=xPDUOutputCurrentHighAlarmCleared, xPDUOutputFrequencyAlarm=xPDUOutputFrequencyAlarm, xPDUOutputFrequencyAlarmCleared=xPDUOutputFrequencyAlarmCleared, xPDUSystemGroundCurrentAlarm=xPDUSystemGroundCurrentAlarm, xPDUSystemGroundCurrentAlarmCleared=xPDUSystemGroundCurrentAlarmCleared, xPDUInputContactStateAbnormal=xPDUInputContactStateAbnormal, xPDUInputContactStateNormal=xPDUInputContactStateNormal, xPDUOutputNeutralCurrentHighAlarm=xPDUOutputNeutralCurrentHighAlarm, xPDUOutputNeutralCurrentHighAlarmCleared=xPDUOutputNeutralCurrentHighAlarmCleared, xPDUCoolingFanAlarm=xPDUCoolingFanAlarm, xPDUCoolingFanAlarmCleared=xPDUCoolingFanAlarmCleared, xPDUTransformerTempAlarm=xPDUTransformerTempAlarm, xPDUTransformerTempAlarmCleared=xPDUTransformerTempAlarmCleared, xPDUBranchCurrentLowAlarm=xPDUBranchCurrentLowAlarm, xPDUBranchCurrentLowAlarmCleared=xPDUBranchCurrentLowAlarmCleared, xPDUBranchCurrentHighAlarm=xPDUBranchCurrentHighAlarm, xPDUBranchCurrentHighAlarmCleared=xPDUBranchCurrentHighAlarmCleared, xPDUInternalCommError=xPDUInternalCommError, emsHardwareStateAbnormal=emsHardwareStateAbnormal, emsHardwareStateNormal=emsHardwareStateNormal, ceSevereCondition=ceSevereCondition, ceSevereConditionCleared=ceSevereConditionCleared, ceWarningCondition=ceWarningCondition, ceWarningConditionCleared=ceWarningConditionCleared, ceInformationalCondition=ceInformationalCondition, ceInformationalConditionCleared=ceInformationalConditionCleared, upsInternalOverTemperature=upsInternalOverTemperature, upsInternalOverTemperatureCleared=upsInternalOverTemperatureCleared, upsMpuReset=upsMpuReset, upsOutputSwitchClosed=upsOutputSwitchClosed, upsOutputSwitchOpened=upsOutputSwitchOpened, upsCalibrationStackChanged=upsCalibrationStackChanged, envMaxTempThresholdViolation=envMaxTempThresholdViolation, envMaxTempThresholdViolationCleared=envMaxTempThresholdViolationCleared, envMinTempThresholdViolation=envMinTempThresholdViolation, envMinTempThresholdViolationCleared=envMinTempThresholdViolationCleared, envMaxHumidityThresholdViolation=envMaxHumidityThresholdViolation, envMaxHumidityThresholdViolationCleared=envMaxHumidityThresholdViolationCleared, envMinHumidityThresholdViolation=envMinHumidityThresholdViolation, envMinHumidityThresholdViolationCleared=envMinHumidityThresholdViolationCleared, envSTIncTempRateViolation=envSTIncTempRateViolation, envSTIncTempRateViolationCleared=envSTIncTempRateViolationCleared, envSTDecTempRateViolation=envSTDecTempRateViolation, envSTDecTempRateViolationCleared=envSTDecTempRateViolationCleared, envLTIncTempRateViolation=envLTIncTempRateViolation, envLTIncTempRateViolationCleared=envLTIncTempRateViolationCleared, envLTDecTempRateViolation=envLTDecTempRateViolation, envLTDecTempRateViolationCleared=envLTDecTempRateViolationCleared, bmsCriticalCondition=bmsCriticalCondition, bmsCriticalConditionCleared=bmsCriticalConditionCleared, bmsWarningCondition=bmsWarningCondition, bmsWarningConditionCleared=bmsWarningConditionCleared, bmsInformationalCondition=bmsInformationalCondition, bmsInformationalConditionCleared=bmsInformationalConditionCleared, xATSOutputVoltageLowAlarm=xATSOutputVoltageLowAlarm, xATSOutputVoltageLowAlarmCleared=xATSOutputVoltageLowAlarmCleared, xATSOutputVoltageHighAlarm=xATSOutputVoltageHighAlarm, xATSOutputVoltageHighAlarmCleared=xATSOutputVoltageHighAlarmCleared, xATSOutputCurrentLowAlarm=xATSOutputCurrentLowAlarm, xATSOutputCurrentLowAlarmCleared=xATSOutputCurrentLowAlarmCleared)
mibBuilder.exportSymbols("PowerNet-MIB", xATSOutputCurrentHighAlarm=xATSOutputCurrentHighAlarm, xATSOutputCurrentHighAlarmCleared=xATSOutputCurrentHighAlarmCleared, xATSOutputFrequencyAlarm=xATSOutputFrequencyAlarm, xATSOutputFrequencyAlarmCleared=xATSOutputFrequencyAlarmCleared, xATSInternalCommError=xATSInternalCommError, xATSInternalCommErrorCleared=xATSInternalCommErrorCleared, xATSDataCommMismatchError=xATSDataCommMismatchError, xATSDataCommMismatchErrorCleared=xATSDataCommMismatchErrorCleared, xATSGenCommLost=xATSGenCommLost, xATSGenCommEstablished=xATSGenCommEstablished, xATSNeutralPosition=xATSNeutralPosition, xATSSwitchTransferEvent=xATSSwitchTransferEvent, xATSInternalATSFault=xATSInternalATSFault, xATSInternalATSFaultCleared=xATSInternalATSFaultCleared, xATSEngineStartAsserted=xATSEngineStartAsserted, xATSEngineStopAsserted=xATSEngineStopAsserted, xATSStartFailure=xATSStartFailure, xATSStopFailure=xATSStopFailure, xATSNotInAutomaticMode=xATSNotInAutomaticMode, xATSNotInAutomaticModeCleared=xATSNotInAutomaticModeCleared, xATSEpoTripped=xATSEpoTripped, xATSEpoReset=xATSEpoReset, xATSEpoTestMode=xATSEpoTestMode, xATSEpoArmed=xATSEpoArmed, xATSTestInitiated=xATSTestInitiated, xATSTestCanceled=xATSTestCanceled, xATSTestFailed=xATSTestFailed, xATSTestPassed=xATSTestPassed, xATSInputContactStateAbnormal=xATSInputContactStateAbnormal, xATSInputContactStateNormal=xATSInputContactStateNormal, xATSRemoteStartContactMismatch=xATSRemoteStartContactMismatch, xATSRemoteStartContactMismatchCleared=xATSRemoteStartContactMismatchCleared, xATSDoorOpenAlarm=xATSDoorOpenAlarm, xATSDoorOpenAlarmCleared=xATSDoorOpenAlarmCleared, xATSDCBackupAlarm=xATSDCBackupAlarm, xATSDCBackupAlarmCleared=xATSDCBackupAlarmCleared, xATSGeneratorLowCoolantLevelAlarm=xATSGeneratorLowCoolantLevelAlarm, xATSGeneratorLowCoolantLevelAlarmCleared=xATSGeneratorLowCoolantLevelAlarmCleared, xATSGeneratorVeryLowCoolantLevelAlarm=xATSGeneratorVeryLowCoolantLevelAlarm, xATSGeneratorVeryLowCoolantLevelAlarmCleared=xATSGeneratorVeryLowCoolantLevelAlarmCleared, xATSGeneratorHighCoolantTempAlarm=xATSGeneratorHighCoolantTempAlarm, xATSGeneratorHighCoolantTempAlarmCleared=xATSGeneratorHighCoolantTempAlarmCleared, xATSGeneratorVeryHighCoolantTempAlarm=xATSGeneratorVeryHighCoolantTempAlarm, xATSGeneratorVeryHighCoolantTempAlarmCleared=xATSGeneratorVeryHighCoolantTempAlarmCleared, xATSGeneratorLowCoolantTempAlarm=xATSGeneratorLowCoolantTempAlarm, xATSGeneratorLowCoolantTempAlarmCleared=xATSGeneratorLowCoolantTempAlarmCleared, xATSGeneratorLowOilLevelAlarm=xATSGeneratorLowOilLevelAlarm, xATSGeneratorLowOilLevelAlarmCleared=xATSGeneratorLowOilLevelAlarmCleared, xATSGeneratorLowBatteryVoltDuringCrankAlarm=xATSGeneratorLowBatteryVoltDuringCrankAlarm, xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm, xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared=xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared, xATSGeneratorEStop=xATSGeneratorEStop, xATSGeneratorEStopCleared=xATSGeneratorEStopCleared, xATSGeneratorHighBatteryVolt=xATSGeneratorHighBatteryVolt, xATSGeneratorHighBatteryVoltCleared=xATSGeneratorHighBatteryVoltCleared, xATSGeneratorLowBatteryVolt=xATSGeneratorLowBatteryVolt, xATSGeneratorLowBatteryVoltCleared=xATSGeneratorLowBatteryVoltCleared, xATSGeneratorControlSwitchNotAuto=xATSGeneratorControlSwitchNotAuto, xATSGeneratorControlSwitchNotAutoCleared=xATSGeneratorControlSwitchNotAutoCleared, xATSGeneratorLowOilPressure=xATSGeneratorLowOilPressure, xATSGeneratorLowOilPressureCleared=xATSGeneratorLowOilPressureCleared, xATSGeneratorVeryLowOilPressure=xATSGeneratorVeryLowOilPressure, xATSGeneratorVeryLowOilPressureCleared=xATSGeneratorVeryLowOilPressureCleared, xATSGeneratorOverload=xATSGeneratorOverload, xATSGeneratorOverloadCleared=xATSGeneratorOverloadCleared, xATSGeneratorLowACVEvent=xATSGeneratorLowACVEvent, xATSGeneratorLowACVEventCleared=xATSGeneratorLowACVEventCleared, xATSGeneratorHighACVEvent=xATSGeneratorHighACVEvent, xATSGeneratorHighACVEventCleared=xATSGeneratorHighACVEventCleared, xATSGeneratorOverspeed=xATSGeneratorOverspeed, xATSGeneratorOverspeedCleared=xATSGeneratorOverspeedCleared, xATSGeneratorEngineCold=xATSGeneratorEngineCold, xATSGeneratorEngineColdCleared=xATSGeneratorEngineColdCleared, xATSGeneratorOutputBreakerOpen=xATSGeneratorOutputBreakerOpen, xATSGeneratorOutputBreakerOpenCleared=xATSGeneratorOutputBreakerOpenCleared, xATSGeneratorLowFuelLevelAlarm=xATSGeneratorLowFuelLevelAlarm, xATSGeneratorLowFuelLevelAlarmCleared=xATSGeneratorLowFuelLevelAlarmCleared, xATSGeneratorVeryLowFuelLevelAlarm=xATSGeneratorVeryLowFuelLevelAlarm, xATSGeneratorVeryLowFuelLevelAlarmCleared=xATSGeneratorVeryLowFuelLevelAlarmCleared, xATSGeneratorLowRunTimeAlarm=xATSGeneratorLowRunTimeAlarm, xATSGeneratorLowRunTimeAlarmCleared=xATSGeneratorLowRunTimeAlarmCleared, xATSGeneratorVeryLowRunTimeAlarm=xATSGeneratorVeryLowRunTimeAlarm, xATSGeneratorVeryLowRunTimeAlarmCleared=xATSGeneratorVeryLowRunTimeAlarmCleared, xATSGeneratorServiceDueAlarm=xATSGeneratorServiceDueAlarm, xATSGeneratorServiceDueAlarmCleared=xATSGeneratorServiceDueAlarmCleared, xATSGeneratorShutdown=xATSGeneratorShutdown, xATSGeneratorShutdownCleared=xATSGeneratorShutdownCleared, xATSGeneratorBatteryCharger=xATSGeneratorBatteryCharger, xATSGeneratorBatteryChargerCleared=xATSGeneratorBatteryChargerCleared, xATSGeneratorGenericEvent=xATSGeneratorGenericEvent, xATSGeneratorGenericEventCleared=xATSGeneratorGenericEventCleared, xPDUInternalCommErrorCleared=xPDUInternalCommErrorCleared, xPDUSystemStateAlarm=xPDUSystemStateAlarm, xPDUSystemStateAlarmCleared=xPDUSystemStateAlarmCleared, xPDUEpoTestMode=xPDUEpoTestMode, xPDUEpoArmed=xPDUEpoArmed, xPDUFuseBlownAlarm=xPDUFuseBlownAlarm, xPDUFuseBlownAlarmCleared=xPDUFuseBlownAlarmCleared, xPDUBreakerPositionAlarm=xPDUBreakerPositionAlarm, xPDUBreakerPositionAlarmCleared=xPDUBreakerPositionAlarmCleared, xPDUBreakerChangeEvent=xPDUBreakerChangeEvent, xPDUDataCommMismatchError=xPDUDataCommMismatchError, xPDUDataCommMismatchErrorCleared=xPDUDataCommMismatchErrorCleared, xPDUSystemInMaintenanceBypassMode=xPDUSystemInMaintenanceBypassMode, xPDUSystemInUPSOperationalMode=xPDUSystemInUPSOperationalMode, xATSGeneratorFuelTankRuptureAlarm=xATSGeneratorFuelTankRuptureAlarm, xATSGeneratorFuelTankRuptureAlarmCleared=xATSGeneratorFuelTankRuptureAlarmCleared, xATSGeneratorGroundFaultAlarm=xATSGeneratorGroundFaultAlarm, xATSGeneratorGroundFaultAlarmCleared=xATSGeneratorGroundFaultAlarmCleared, xATSOutputLoadPoweredByGeneratorAlarm=xATSOutputLoadPoweredByGeneratorAlarm, xATSOutputLoadPoweredByGeneratorAlarmCleared=xATSOutputLoadPoweredByGeneratorAlarmCleared, xAPCControllerFirmwareUpdateTransferStart=xAPCControllerFirmwareUpdateTransferStart, xAPCControllerFirmwareUpdateTransferComplete=xAPCControllerFirmwareUpdateTransferComplete, xAPCControllerFirmwareUpdateTransferFailed=xAPCControllerFirmwareUpdateTransferFailed, upsPfcInputRelayFailure=upsPfcInputRelayFailure, upsPfcInputRelayFailureCleared=upsPfcInputRelayFailureCleared, upsInverterOverTemperature=upsInverterOverTemperature, upsInverterOverTemperatureCleared=upsInverterOverTemperatureCleared, upsBatteryOverVoltage=upsBatteryOverVoltage, upsBatteryOverVoltageCleared=upsBatteryOverVoltageCleared, upsEepromFault=upsEepromFault, upsEepromFaultCleared=upsEepromFaultCleared, aruFanRuntimeAlarm=aruFanRuntimeAlarm, aruFanRuntimeAlarmCleared=aruFanRuntimeAlarmCleared, aruFanPoorPerformanceAlarm=aruFanPoorPerformanceAlarm, aruFanPoorPerformanceAlarmCleared=aruFanPoorPerformanceAlarmCleared)
mibBuilder.exportSymbols("PowerNet-MIB", aruRedundantPowerLostAlarm=aruRedundantPowerLostAlarm, aruRedundantPowerLostAlarmCleared=aruRedundantPowerLostAlarmCleared, apcDeviceConfigChange=apcDeviceConfigChange, apcEnvSensorConnected=apcEnvSensorConnected, apcEnvSensorDisconnected=apcEnvSensorDisconnected, apcEnvMaxTempThresholdViolation=apcEnvMaxTempThresholdViolation, apcEnvMaxTempThresholdViolationCleared=apcEnvMaxTempThresholdViolationCleared, apcEnvHighTempThresholdViolation=apcEnvHighTempThresholdViolation, apcEnvHighTempThresholdViolationCleared=apcEnvHighTempThresholdViolationCleared, apcEnvLowTempThresholdViolation=apcEnvLowTempThresholdViolation, apcEnvLowTempThresholdViolationCleared=apcEnvLowTempThresholdViolationCleared, apcEnvMinTempThresholdViolation=apcEnvMinTempThresholdViolation, apcEnvMinTempThresholdViolationCleared=apcEnvMinTempThresholdViolationCleared, apcEnvSTIncTempRateViolation=apcEnvSTIncTempRateViolation, apcEnvSTIncTempRateViolationCleared=apcEnvSTIncTempRateViolationCleared, apcEnvSTDecTempRateViolation=apcEnvSTDecTempRateViolation, apcEnvSTDecTempRateViolationCleared=apcEnvSTDecTempRateViolationCleared, apcEnvLTIncTempRateViolation=apcEnvLTIncTempRateViolation, apcEnvLTIncTempRateViolationCleared=apcEnvLTIncTempRateViolationCleared, apcEnvLTDecTempRateViolation=apcEnvLTDecTempRateViolation, apcEnvLTDecTempRateViolationCleared=apcEnvLTDecTempRateViolationCleared, apcEnvMaxHumidityThresholdViolation=apcEnvMaxHumidityThresholdViolation, apcEnvMaxHumidityThresholdViolationCleared=apcEnvMaxHumidityThresholdViolationCleared, apcEnvHighHumidityThresholdViolation=apcEnvHighHumidityThresholdViolation, apcEnvHighHumidityThresholdViolationCleared=apcEnvHighHumidityThresholdViolationCleared, apcEnvLowHumidityThresholdViolation=apcEnvLowHumidityThresholdViolation, apcEnvLowHumidityThresholdViolationCleared=apcEnvLowHumidityThresholdViolationCleared, apcEnvMinHumidityThresholdViolation=apcEnvMinHumidityThresholdViolation, apcEnvMinHumidityThresholdViolationCleared=apcEnvMinHumidityThresholdViolationCleared, apcBeaconConnected=apcBeaconConnected, apcBeaconDisconnected=apcBeaconDisconnected, apcBeaconOn=apcBeaconOn, apcBeaconOff=apcBeaconOff, apcOutletStateAbnormal=apcOutletStateAbnormal, apcOutletStateNormal=apcOutletStateNormal, apcOutputRelayStateAbnormal=apcOutputRelayStateAbnormal, apcOutputRelayStateNormal=apcOutputRelayStateNormal, apcHardwareStateAbnormal=apcHardwareStateAbnormal, apcHardwareStateNormal=apcHardwareStateNormal, apcCriticalDiscreteInputContactStateAbnormal=apcCriticalDiscreteInputContactStateAbnormal, apcCriticalDiscreteInputContactStateNormal=apcCriticalDiscreteInputContactStateNormal, apcWarningDiscreteInputContactStateAbnormal=apcWarningDiscreteInputContactStateAbnormal, apcWarningDiscreteInputContactStateNormal=apcWarningDiscreteInputContactStateNormal, apcInformationalDiscreteInputContactStateAbnormal=apcInformationalDiscreteInputContactStateAbnormal, apcInformationalDiscreteInputContactStateNormal=apcInformationalDiscreteInputContactStateNormal, apcAnalogInputMaxThresholdViolation=apcAnalogInputMaxThresholdViolation, apcAnalogInputMaxThresholdViolationCleared=apcAnalogInputMaxThresholdViolationCleared, apcAnalogInputHighThresholdViolation=apcAnalogInputHighThresholdViolation, apcAnalogInputHighThresholdViolationCleared=apcAnalogInputHighThresholdViolationCleared, apcAnalogInputLowThresholdViolation=apcAnalogInputLowThresholdViolation, apcAnalogInputLowThresholdViolationCleared=apcAnalogInputLowThresholdViolationCleared, apcAnalogInputMinThresholdViolation=apcAnalogInputMinThresholdViolation, apcAnalogInputMinThresholdViolationCleared=apcAnalogInputMinThresholdViolationCleared, apcDeviceClearLostComms=apcDeviceClearLostComms, apcDeviceConnected=apcDeviceConnected, apcDeviceDisconnected=apcDeviceDisconnected, apcUnregisteredUserAccessDenied=apcUnregisteredUserAccessDenied, apcRegisteredUserAccessDenied=apcRegisteredUserAccessDenied, apcRegisteredUserConfigChange=apcRegisteredUserConfigChange, apcDoorUnlocked=apcDoorUnlocked, apcDoorLocked=apcDoorLocked, apcHandleOpened=apcHandleOpened, apcHandleClosed=apcHandleClosed, apcDoorOpened=apcDoorOpened, apcDoorClosed=apcDoorClosed, apcKeyOverrideUnlocked=apcKeyOverrideUnlocked, apcKeyOverrideLocked=apcKeyOverrideLocked, apcForcedEntry=apcForcedEntry, apcForcedEntryCleared=apcForcedEntryCleared, apcRelockTimeout=apcRelockTimeout, apcRelockTimeoutCleared=apcRelockTimeoutCleared, apcDoorSenseDisconnected=apcDoorSenseDisconnected, apcDoorSenseConnected=apcDoorSenseConnected, apcDoorLostComms=apcDoorLostComms, apcDoorEstablishedComms=apcDoorEstablishedComms, apcRegisteredUserAccessChange=apcRegisteredUserAccessChange, apcUnregisteredUserStatusChange=apcUnregisteredUserStatusChange, apcDeviceClearUserConfigs=apcDeviceClearUserConfigs, upsBatteryTempSensorFault=upsBatteryTempSensorFault, upsBatteryTempSensorFaultCleared=upsBatteryTempSensorFaultCleared, upsBatterySoftBusStartFault=upsBatterySoftBusStartFault, upsBatterySoftBusStartFaultCleared=upsBatterySoftBusStartFaultCleared, apcOutputShortCircuit=apcOutputShortCircuit, apcOutputShortCircuitCleared=apcOutputShortCircuitCleared, apcOutputRelayFault=apcOutputRelayFault, apcOutputRelayFaultCleared=apcOutputRelayFaultCleared, upsPfcFault=upsPfcFault, upsPfcFaultCleared=upsPfcFaultCleared, apcDcBusOverVoltage=apcDcBusOverVoltage, apcDcBusOverVoltageCleared=apcDcBusOverVoltageCleared, upsInverterFault=upsInverterFault, upsInverterFaultCleared=upsInverterFaultCleared, apcAdConverterFault=apcAdConverterFault, apcAdConverterFaultCleared=apcAdConverterFaultCleared, apcLogicPowerSupplyFault=apcLogicPowerSupplyFault, apcLogicPowerSupplyFaultCleared=apcLogicPowerSupplyFaultCleared, apcTransformerDCImbalanceFault=apcTransformerDCImbalanceFault, apcTransformerDCImbalanceFaultCleared=apcTransformerDCImbalanceFaultCleared, upsBackfeedRelayFault=upsBackfeedRelayFault, upsBackfeedRelayFaultCleared=upsBackfeedRelayFaultCleared, upsBypassRelayFault=upsBypassRelayFault, upsBypassRelayFaultCleared=upsBypassRelayFaultCleared, xPDUBranchCurrentMinAlarm=xPDUBranchCurrentMinAlarm, xPDUBranchCurrentMinAlarmCleared=xPDUBranchCurrentMinAlarmCleared, xPDUBranchCurrentMaxAlarm=xPDUBranchCurrentMaxAlarm, xPDUBranchCurrentMaxAlarmCleared=xPDUBranchCurrentMaxAlarmCleared, rPDUOutletLowLoad=rPDUOutletLowLoad, rPDUOutletLowLoadCleared=rPDUOutletLowLoadCleared, rPDUOutletNearOverload=rPDUOutletNearOverload, rPDUOutletNearOverloadCleared=rPDUOutletNearOverloadCleared, rPDUOutletOverload=rPDUOutletOverload, rPDUOutletOverloadCleared=rPDUOutletOverloadCleared, apcTestTrap=apcTestTrap, baseFanFailureCleared=baseFanFailureCleared, atsLowLoad=atsLowLoad, atsLowLoadCleared=atsLowLoadCleared, atsNearOverload=atsNearOverload, atsNearOverloadCleared=atsNearOverloadCleared, atsOverload=atsOverload, atsOverloadCleared=atsOverloadCleared, atsRMSOverVoltage=atsRMSOverVoltage, atsRMSOverVoltageCleared=atsRMSOverVoltageCleared, atsRMSUnderVoltage=atsRMSUnderVoltage, atsRMSUnderVoltageCleared=atsRMSUnderVoltageCleared, atsRMSOverFrequency=atsRMSOverFrequency, atsRMSOverFrequencyCleared=atsRMSOverFrequencyCleared, atsRMSUnderFrequency=atsRMSUnderFrequency)
mibBuilder.exportSymbols("PowerNet-MIB", atsRMSUnderFrequencyCleared=atsRMSUnderFrequencyCleared, isxModularDistributionCommLost=isxModularDistributionCommLost, isxModularDistributionCommEstablished=isxModularDistributionCommEstablished, isxModularDistributionModuleInserted=isxModularDistributionModuleInserted, isxModularDistributionModuleRemoved=isxModularDistributionModuleRemoved, isxModularBreakerOpenAlarm=isxModularBreakerOpenAlarm, isxModularBreakerOpenAlarmCleared=isxModularBreakerOpenAlarmCleared, isxModularMinCurrentThresholdViolation=isxModularMinCurrentThresholdViolation, isxModularMinCurrentThresholdViolationCleared=isxModularMinCurrentThresholdViolationCleared, isxModularLowCurrentThresholdViolation=isxModularLowCurrentThresholdViolation, isxModularLowCurrentThresholdViolationCleared=isxModularLowCurrentThresholdViolationCleared, isxModularHighCurrentThresholdViolation=isxModularHighCurrentThresholdViolation, isxModularHighCurrentThresholdViolationCleared=isxModularHighCurrentThresholdViolationCleared, isxModularMaxCurrentThresholdViolation=isxModularMaxCurrentThresholdViolation, isxModularMaxCurrentThresholdViolationCleared=isxModularMaxCurrentThresholdViolationCleared, isxModularSubfeedBreakerOpenAlarm=isxModularSubfeedBreakerOpenAlarm, isxModularSubfeedBreakerOpenAlarmCleared=isxModularSubfeedBreakerOpenAlarmCleared, isxModularSubfeedMinCurrentThresholdViolation=isxModularSubfeedMinCurrentThresholdViolation, isxModularSubfeedMinCurrentThresholdViolationCleared=isxModularSubfeedMinCurrentThresholdViolationCleared, isxModularSubfeedLowCurrentThresholdViolation=isxModularSubfeedLowCurrentThresholdViolation, isxModularSubfeedLowCurrentThresholdViolationCleared=isxModularSubfeedLowCurrentThresholdViolationCleared, isxModularSubfeedHighCurrentThresholdViolation=isxModularSubfeedHighCurrentThresholdViolation, isxModularSubfeedHighCurrentThresholdViolationCleared=isxModularSubfeedHighCurrentThresholdViolationCleared, isxModularSubfeedMaxCurrentThresholdViolation=isxModularSubfeedMaxCurrentThresholdViolation, isxModularSubfeedMaxCurrentThresholdViolationCleared=isxModularSubfeedMaxCurrentThresholdViolationCleared, isxModularTotalOutputCurrentMinThresholdViolation=isxModularTotalOutputCurrentMinThresholdViolation, isxModularTotalOutputCurrentMinThresholdViolationCleared=isxModularTotalOutputCurrentMinThresholdViolationCleared, isxModularTotalOutputCurrentLowThresholdViolation=isxModularTotalOutputCurrentLowThresholdViolation, isxModularTotalOutputCurrentLowThresholdViolationCleared=isxModularTotalOutputCurrentLowThresholdViolationCleared, isxModularTotalOutputCurrentHighThresholdViolation=isxModularTotalOutputCurrentHighThresholdViolation, isxModularTotalOutputCurrentHighThresholdViolationCleared=isxModularTotalOutputCurrentHighThresholdViolationCleared, isxModularTotalOutputCurrentMaxThresholdViolation=isxModularTotalOutputCurrentMaxThresholdViolation, isxModularTotalOutputCurrentMaxThresholdViolationCleared=isxModularTotalOutputCurrentMaxThresholdViolationCleared, isxModularOutputVoltageMinThresholdViolation=isxModularOutputVoltageMinThresholdViolation, isxModularOutputVoltageMinThresholdViolationCleared=isxModularOutputVoltageMinThresholdViolationCleared, isxModularOutputVoltageLowThresholdViolation=isxModularOutputVoltageLowThresholdViolation, isxModularOutputVoltageLowThresholdViolationCleared=isxModularOutputVoltageLowThresholdViolationCleared, isxModularOutputVoltageHighThresholdViolation=isxModularOutputVoltageHighThresholdViolation, isxModularOutputVoltageHighThresholdViolationCleared=isxModularOutputVoltageHighThresholdViolationCleared, isxModularOutputVoltageMaxThresholdViolation=isxModularOutputVoltageMaxThresholdViolation, isxModularOutputVoltageMaxThresholdViolationCleared=isxModularOutputVoltageMaxThresholdViolationCleared, apcDoorClosedImproperly=apcDoorClosedImproperly, apcDoorClosedImproperlyCleared=apcDoorClosedImproperlyCleared, apcUserScheduleViolation=apcUserScheduleViolation, apcUserScheduleViolationCleared=apcUserScheduleViolationCleared, isxModularOutputFrequencyThresholdViolation=isxModularOutputFrequencyThresholdViolation, isxModularOutputFrequencyViolationCleared=isxModularOutputFrequencyViolationCleared, atsSourceStatusFail=atsSourceStatusFail, atsSourceStatusOk=atsSourceStatusOk, atsHardwareStatusFail=atsHardwareStatusFail, atsHardwareStatusOk=atsHardwareStatusOk, atsControllerRestart=atsControllerRestart, xATSS1BadPhaseRotation=xATSS1BadPhaseRotation, xATSS1BadPhaseRotationCleared=xATSS1BadPhaseRotationCleared, xATSS1BadPhaseBalance=xATSS1BadPhaseBalance, xATSS1BadPhaseBalanceCleared=xATSS1BadPhaseBalanceCleared, isxModularTransformerOverheating=isxModularTransformerOverheating, isxModularTransformerOverheatingCleared=isxModularTransformerOverheatingCleared, apcInternalCommunicationFault=apcInternalCommunicationFault, apcInternalCommunicationFaultCleared=apcInternalCommunicationFaultCleared, upsOutletGroupCommand=upsOutletGroupCommand, onbatterycommunicationLost=onbatterycommunicationLost, upsCriticalCondition=upsCriticalCondition, upsCriticalConditionCleared=upsCriticalConditionCleared, upsWarningCondition=upsWarningCondition, upsWarningConditionCleared=upsWarningConditionCleared, upsInformationalCondition=upsInformationalCondition, upsInformationalConditionCleared=upsInformationalConditionCleared, isxcInformationalAlarm=isxcInformationalAlarm, isxcInformationalAlarmCleared=isxcInformationalAlarmCleared, isxcWarningAlarm=isxcWarningAlarm, isxcWarningAlarmCleared=isxcWarningAlarmCleared, isxcErrorAlarm=isxcErrorAlarm, isxcErrorAlarmCleared=isxcErrorAlarmCleared, isxcCriticalAlarm=isxcCriticalAlarm, isxcCriticalAlarmCleared=isxcCriticalAlarmCleared, isxcFailureAlarm=isxcFailureAlarm, isxcFailureAlarmCleared=isxcFailureAlarmCleared, rpduCriticalCondition=rpduCriticalCondition, rpduCriticalConditionCleared=rpduCriticalConditionCleared, rpduWarningCondition=rpduWarningCondition, rpduWarningConditionCleared=rpduWarningConditionCleared, rpduInformationalCondition=rpduInformationalCondition, rpduInformationalConditionCleared=rpduInformationalConditionCleared, isxModularCoolingFanAlarm=isxModularCoolingFanAlarm, isxModularCoolingFanAlarmCleared=isxModularCoolingFanAlarmCleared, upsFirmwareUpdateStarted=upsFirmwareUpdateStarted, upsFirmwareUpdateFinished=upsFirmwareUpdateFinished, upsFirmwareUpdateSucceeded=upsFirmwareUpdateSucceeded, upsFirmwareUpdateFailed=upsFirmwareUpdateFailed, upsHasNoValidFirmware=upsHasNoValidFirmware, upsHasNoValidFirmwareCleared=upsHasNoValidFirmwareCleared, upsLocalDisplayButtonFault=upsLocalDisplayButtonFault, upsLocalDisplayButtonFaultCleared=upsLocalDisplayButtonFaultCleared, upsNeedsFactorySetupFault=upsNeedsFactorySetupFault, upsNeedsFactorySetupFaultCleared=upsNeedsFactorySetupFaultCleared, upsEPOActive=upsEPOActive, upsEPOActiveCleared=upsEPOActiveCleared, upsFirmwareMismatch=upsFirmwareMismatch, upsFirmwareMismatchCleared=upsFirmwareMismatchCleared, upsOscillatorFailed=upsOscillatorFailed, upsOscillatorFailedCleared=upsOscillatorFailedCleared, upsOnBatteryDueToFault=upsOnBatteryDueToFault, upsOnBatteryDueToFaultCleared=upsOnBatteryDueToFaultCleared)

